// source: shared/v1/error.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var shared_v1_types_pb = require('../../shared/v1/types_pb.js');
goog.object.extend(proto, shared_v1_types_pb);
goog.exportSymbol('proto.shared.v1.AppError', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shared.v1.AppError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shared.v1.AppError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shared.v1.AppError.displayName = 'proto.shared.v1.AppError';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shared.v1.AppError.prototype.toObject = function(opt_includeInstance) {
  return proto.shared.v1.AppError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shared.v1.AppError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shared.v1.AppError.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    detailedError: jspb.Message.getFieldWithDefault(msg, 3, ""),
    requestId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    statusCode: jspb.Message.getFieldWithDefault(msg, 5, 0),
    where: jspb.Message.getFieldWithDefault(msg, 6, ""),
    skipTranslation: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    params: (f = msg.getParams()) && shared_v1_types_pb.StringMap.toObject(includeInstance, f),
    nestedParamsMap: (f = msg.getNestedParamsMap()) ? f.toObject(includeInstance, proto.shared.v1.StringMap.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shared.v1.AppError}
 */
proto.shared.v1.AppError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shared.v1.AppError;
  return proto.shared.v1.AppError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shared.v1.AppError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shared.v1.AppError}
 */
proto.shared.v1.AppError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetailedError(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatusCode(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setWhere(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSkipTranslation(value);
      break;
    case 8:
      var value = new shared_v1_types_pb.StringMap;
      reader.readMessage(value,shared_v1_types_pb.StringMap.deserializeBinaryFromReader);
      msg.setParams(value);
      break;
    case 9:
      var value = msg.getNestedParamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.shared.v1.StringMap.deserializeBinaryFromReader, "", new proto.shared.v1.StringMap());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shared.v1.AppError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shared.v1.AppError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shared.v1.AppError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shared.v1.AppError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDetailedError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStatusCode();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getWhere();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSkipTranslation();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      shared_v1_types_pb.StringMap.serializeBinaryToWriter
    );
  }
  f = message.getNestedParamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.shared.v1.StringMap.serializeBinaryToWriter);
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.shared.v1.AppError.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.shared.v1.AppError} returns this
 */
proto.shared.v1.AppError.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.shared.v1.AppError.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.shared.v1.AppError} returns this
 */
proto.shared.v1.AppError.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string detailed_error = 3;
 * @return {string}
 */
proto.shared.v1.AppError.prototype.getDetailedError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.shared.v1.AppError} returns this
 */
proto.shared.v1.AppError.prototype.setDetailedError = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string request_id = 4;
 * @return {string}
 */
proto.shared.v1.AppError.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.shared.v1.AppError} returns this
 */
proto.shared.v1.AppError.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 status_code = 5;
 * @return {number}
 */
proto.shared.v1.AppError.prototype.getStatusCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.shared.v1.AppError} returns this
 */
proto.shared.v1.AppError.prototype.setStatusCode = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string where = 6;
 * @return {string}
 */
proto.shared.v1.AppError.prototype.getWhere = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.shared.v1.AppError} returns this
 */
proto.shared.v1.AppError.prototype.setWhere = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool skip_translation = 7;
 * @return {boolean}
 */
proto.shared.v1.AppError.prototype.getSkipTranslation = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.shared.v1.AppError} returns this
 */
proto.shared.v1.AppError.prototype.setSkipTranslation = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional StringMap params = 8;
 * @return {?proto.shared.v1.StringMap}
 */
proto.shared.v1.AppError.prototype.getParams = function() {
  return /** @type{?proto.shared.v1.StringMap} */ (
    jspb.Message.getWrapperField(this, shared_v1_types_pb.StringMap, 8));
};


/**
 * @param {?proto.shared.v1.StringMap|undefined} value
 * @return {!proto.shared.v1.AppError} returns this
*/
proto.shared.v1.AppError.prototype.setParams = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shared.v1.AppError} returns this
 */
proto.shared.v1.AppError.prototype.clearParams = function() {
  return this.setParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shared.v1.AppError.prototype.hasParams = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * map<string, StringMap> nested_params = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.shared.v1.StringMap>}
 */
proto.shared.v1.AppError.prototype.getNestedParamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.shared.v1.StringMap>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      proto.shared.v1.StringMap));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.shared.v1.AppError} returns this
 */
proto.shared.v1.AppError.prototype.clearNestedParamsMap = function() {
  this.getNestedParamsMap().clear();
  return this;};


goog.object.extend(exports, proto.shared.v1);
