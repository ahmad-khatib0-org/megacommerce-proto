// source: uploader/v1/config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.uploader.v1.AMQPHooksOptions', null, global);
goog.exportSymbol('proto.uploader.v1.AvailableDataStorages', null, global);
goog.exportSymbol('proto.uploader.v1.AvailableInfoStorages', null, global);
goog.exportSymbol('proto.uploader.v1.DataStorageOptions', null, global);
goog.exportSymbol('proto.uploader.v1.Extensions', null, global);
goog.exportSymbol('proto.uploader.v1.ExtraKafkaOptions', null, global);
goog.exportSymbol('proto.uploader.v1.Format', null, global);
goog.exportSymbol('proto.uploader.v1.Hook', null, global);
goog.exportSymbol('proto.uploader.v1.InfoStoreOptions', null, global);
goog.exportSymbol('proto.uploader.v1.KafkaHookOptions', null, global);
goog.exportSymbol('proto.uploader.v1.NatsHookOptions', null, global);
goog.exportSymbol('proto.uploader.v1.NotificationsOptions', null, global);
goog.exportSymbol('proto.uploader.v1.RustusConf', null, global);
goog.exportSymbol('proto.uploader.v1.SentryOptions', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uploader.v1.ExtraKafkaOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uploader.v1.ExtraKafkaOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.uploader.v1.ExtraKafkaOptions.displayName = 'proto.uploader.v1.ExtraKafkaOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uploader.v1.DataStorageOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uploader.v1.DataStorageOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.uploader.v1.DataStorageOptions.displayName = 'proto.uploader.v1.DataStorageOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uploader.v1.InfoStoreOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uploader.v1.InfoStoreOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.uploader.v1.InfoStoreOptions.displayName = 'proto.uploader.v1.InfoStoreOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uploader.v1.AMQPHooksOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uploader.v1.AMQPHooksOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.uploader.v1.AMQPHooksOptions.displayName = 'proto.uploader.v1.AMQPHooksOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uploader.v1.KafkaHookOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uploader.v1.KafkaHookOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.uploader.v1.KafkaHookOptions.displayName = 'proto.uploader.v1.KafkaHookOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uploader.v1.NatsHookOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.uploader.v1.NatsHookOptions.repeatedFields_, null);
};
goog.inherits(proto.uploader.v1.NatsHookOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.uploader.v1.NatsHookOptions.displayName = 'proto.uploader.v1.NatsHookOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uploader.v1.NotificationsOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.uploader.v1.NotificationsOptions.repeatedFields_, null);
};
goog.inherits(proto.uploader.v1.NotificationsOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.uploader.v1.NotificationsOptions.displayName = 'proto.uploader.v1.NotificationsOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uploader.v1.SentryOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uploader.v1.SentryOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.uploader.v1.SentryOptions.displayName = 'proto.uploader.v1.SentryOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uploader.v1.RustusConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.uploader.v1.RustusConf.repeatedFields_, null);
};
goog.inherits(proto.uploader.v1.RustusConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.uploader.v1.RustusConf.displayName = 'proto.uploader.v1.RustusConf';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.uploader.v1.ExtraKafkaOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.uploader.v1.ExtraKafkaOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uploader.v1.ExtraKafkaOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uploader.v1.ExtraKafkaOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
optsMap: (f = msg.getOptsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uploader.v1.ExtraKafkaOptions}
 */
proto.uploader.v1.ExtraKafkaOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.uploader.v1.ExtraKafkaOptions;
  return proto.uploader.v1.ExtraKafkaOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uploader.v1.ExtraKafkaOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uploader.v1.ExtraKafkaOptions}
 */
proto.uploader.v1.ExtraKafkaOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getOptsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uploader.v1.ExtraKafkaOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.uploader.v1.ExtraKafkaOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uploader.v1.ExtraKafkaOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uploader.v1.ExtraKafkaOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOptsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * map<string, string> opts = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.uploader.v1.ExtraKafkaOptions.prototype.getOptsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.uploader.v1.ExtraKafkaOptions} returns this
 */
proto.uploader.v1.ExtraKafkaOptions.prototype.clearOptsMap = function() {
  this.getOptsMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.uploader.v1.DataStorageOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.uploader.v1.DataStorageOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uploader.v1.DataStorageOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uploader.v1.DataStorageOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
storage: jspb.Message.getFieldWithDefault(msg, 1, 0),
dataDir: jspb.Message.getFieldWithDefault(msg, 2, ""),
dirStructure: jspb.Message.getFieldWithDefault(msg, 3, ""),
forceFsync: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
s3Bucket: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
s3Region: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
s3AccessKey: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
s3AccessKeyPath: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
s3SecretKey: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
s3SecretKeyPath: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
s3Url: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
s3ForcePathStyle: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
s3SecurityToken: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
s3SessionToken: (f = jspb.Message.getField(msg, 14)) == null ? undefined : f,
s3Profile: (f = jspb.Message.getField(msg, 15)) == null ? undefined : f,
s3Headers: (f = jspb.Message.getField(msg, 16)) == null ? undefined : f,
s3ConcatConcurrentDownloads: jspb.Message.getFieldWithDefault(msg, 17, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uploader.v1.DataStorageOptions}
 */
proto.uploader.v1.DataStorageOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.uploader.v1.DataStorageOptions;
  return proto.uploader.v1.DataStorageOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uploader.v1.DataStorageOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uploader.v1.DataStorageOptions}
 */
proto.uploader.v1.DataStorageOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.uploader.v1.AvailableDataStorages} */ (reader.readEnum());
      msg.setStorage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataDir(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirStructure(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForceFsync(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setS3Bucket(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setS3Region(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setS3AccessKey(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setS3AccessKeyPath(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setS3SecretKey(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setS3SecretKeyPath(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setS3Url(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setS3ForcePathStyle(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setS3SecurityToken(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setS3SessionToken(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setS3Profile(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setS3Headers(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setS3ConcatConcurrentDownloads(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uploader.v1.DataStorageOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.uploader.v1.DataStorageOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uploader.v1.DataStorageOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uploader.v1.DataStorageOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStorage();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDataDir();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDirStructure();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getForceFsync();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getS3ForcePathStyle();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getS3ConcatConcurrentDownloads();
  if (f !== 0) {
    writer.writeUint32(
      17,
      f
    );
  }
};


/**
 * optional AvailableDataStorages storage = 1;
 * @return {!proto.uploader.v1.AvailableDataStorages}
 */
proto.uploader.v1.DataStorageOptions.prototype.getStorage = function() {
  return /** @type {!proto.uploader.v1.AvailableDataStorages} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.uploader.v1.AvailableDataStorages} value
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.setStorage = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string data_dir = 2;
 * @return {string}
 */
proto.uploader.v1.DataStorageOptions.prototype.getDataDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.setDataDir = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string dir_structure = 3;
 * @return {string}
 */
proto.uploader.v1.DataStorageOptions.prototype.getDirStructure = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.setDirStructure = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool force_fsync = 4;
 * @return {boolean}
 */
proto.uploader.v1.DataStorageOptions.prototype.getForceFsync = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.setForceFsync = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string s3_bucket = 5;
 * @return {string}
 */
proto.uploader.v1.DataStorageOptions.prototype.getS3Bucket = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.setS3Bucket = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.clearS3Bucket = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.DataStorageOptions.prototype.hasS3Bucket = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string s3_region = 6;
 * @return {string}
 */
proto.uploader.v1.DataStorageOptions.prototype.getS3Region = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.setS3Region = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.clearS3Region = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.DataStorageOptions.prototype.hasS3Region = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string s3_access_key = 7;
 * @return {string}
 */
proto.uploader.v1.DataStorageOptions.prototype.getS3AccessKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.setS3AccessKey = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.clearS3AccessKey = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.DataStorageOptions.prototype.hasS3AccessKey = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string s3_access_key_path = 8;
 * @return {string}
 */
proto.uploader.v1.DataStorageOptions.prototype.getS3AccessKeyPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.setS3AccessKeyPath = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.clearS3AccessKeyPath = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.DataStorageOptions.prototype.hasS3AccessKeyPath = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string s3_secret_key = 9;
 * @return {string}
 */
proto.uploader.v1.DataStorageOptions.prototype.getS3SecretKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.setS3SecretKey = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.clearS3SecretKey = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.DataStorageOptions.prototype.hasS3SecretKey = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string s3_secret_key_path = 10;
 * @return {string}
 */
proto.uploader.v1.DataStorageOptions.prototype.getS3SecretKeyPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.setS3SecretKeyPath = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.clearS3SecretKeyPath = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.DataStorageOptions.prototype.hasS3SecretKeyPath = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string s3_url = 11;
 * @return {string}
 */
proto.uploader.v1.DataStorageOptions.prototype.getS3Url = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.setS3Url = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.clearS3Url = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.DataStorageOptions.prototype.hasS3Url = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool s3_force_path_style = 12;
 * @return {boolean}
 */
proto.uploader.v1.DataStorageOptions.prototype.getS3ForcePathStyle = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.setS3ForcePathStyle = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional string s3_security_token = 13;
 * @return {string}
 */
proto.uploader.v1.DataStorageOptions.prototype.getS3SecurityToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.setS3SecurityToken = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.clearS3SecurityToken = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.DataStorageOptions.prototype.hasS3SecurityToken = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string s3_session_token = 14;
 * @return {string}
 */
proto.uploader.v1.DataStorageOptions.prototype.getS3SessionToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.setS3SessionToken = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.clearS3SessionToken = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.DataStorageOptions.prototype.hasS3SessionToken = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string s3_profile = 15;
 * @return {string}
 */
proto.uploader.v1.DataStorageOptions.prototype.getS3Profile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.setS3Profile = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.clearS3Profile = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.DataStorageOptions.prototype.hasS3Profile = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional string s3_headers = 16;
 * @return {string}
 */
proto.uploader.v1.DataStorageOptions.prototype.getS3Headers = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.setS3Headers = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.clearS3Headers = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.DataStorageOptions.prototype.hasS3Headers = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional uint32 s3_concat_concurrent_downloads = 17;
 * @return {number}
 */
proto.uploader.v1.DataStorageOptions.prototype.getS3ConcatConcurrentDownloads = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.uploader.v1.DataStorageOptions} returns this
 */
proto.uploader.v1.DataStorageOptions.prototype.setS3ConcatConcurrentDownloads = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.uploader.v1.InfoStoreOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.uploader.v1.InfoStoreOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uploader.v1.InfoStoreOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uploader.v1.InfoStoreOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
infoStorage: jspb.Message.getFieldWithDefault(msg, 1, 0),
infoDir: jspb.Message.getFieldWithDefault(msg, 2, ""),
infoDbDsn: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
redisInfoExpiration: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uploader.v1.InfoStoreOptions}
 */
proto.uploader.v1.InfoStoreOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.uploader.v1.InfoStoreOptions;
  return proto.uploader.v1.InfoStoreOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uploader.v1.InfoStoreOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uploader.v1.InfoStoreOptions}
 */
proto.uploader.v1.InfoStoreOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.uploader.v1.AvailableInfoStorages} */ (reader.readEnum());
      msg.setInfoStorage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfoDir(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfoDbDsn(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRedisInfoExpiration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uploader.v1.InfoStoreOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.uploader.v1.InfoStoreOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uploader.v1.InfoStoreOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uploader.v1.InfoStoreOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoStorage();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getInfoDir();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional AvailableInfoStorages info_storage = 1;
 * @return {!proto.uploader.v1.AvailableInfoStorages}
 */
proto.uploader.v1.InfoStoreOptions.prototype.getInfoStorage = function() {
  return /** @type {!proto.uploader.v1.AvailableInfoStorages} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.uploader.v1.AvailableInfoStorages} value
 * @return {!proto.uploader.v1.InfoStoreOptions} returns this
 */
proto.uploader.v1.InfoStoreOptions.prototype.setInfoStorage = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string info_dir = 2;
 * @return {string}
 */
proto.uploader.v1.InfoStoreOptions.prototype.getInfoDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.InfoStoreOptions} returns this
 */
proto.uploader.v1.InfoStoreOptions.prototype.setInfoDir = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string info_db_dsn = 3;
 * @return {string}
 */
proto.uploader.v1.InfoStoreOptions.prototype.getInfoDbDsn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.InfoStoreOptions} returns this
 */
proto.uploader.v1.InfoStoreOptions.prototype.setInfoDbDsn = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.InfoStoreOptions} returns this
 */
proto.uploader.v1.InfoStoreOptions.prototype.clearInfoDbDsn = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.InfoStoreOptions.prototype.hasInfoDbDsn = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 redis_info_expiration = 4;
 * @return {number}
 */
proto.uploader.v1.InfoStoreOptions.prototype.getRedisInfoExpiration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.uploader.v1.InfoStoreOptions} returns this
 */
proto.uploader.v1.InfoStoreOptions.prototype.setRedisInfoExpiration = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.InfoStoreOptions} returns this
 */
proto.uploader.v1.InfoStoreOptions.prototype.clearRedisInfoExpiration = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.InfoStoreOptions.prototype.hasRedisInfoExpiration = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.uploader.v1.AMQPHooksOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.uploader.v1.AMQPHooksOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uploader.v1.AMQPHooksOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uploader.v1.AMQPHooksOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
url: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
declareExchange: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
declareQueues: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
durableExchange: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
durableQueues: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
celery: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
exchange: jspb.Message.getFieldWithDefault(msg, 7, ""),
exchangeKind: jspb.Message.getFieldWithDefault(msg, 8, ""),
routingKey: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
queuesPrefix: jspb.Message.getFieldWithDefault(msg, 10, ""),
connectionPoolSize: jspb.Message.getFieldWithDefault(msg, 11, 0),
channelPoolSize: jspb.Message.getFieldWithDefault(msg, 12, 0),
idleConnectionTimeout: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
idleChannelsTimeout: (f = jspb.Message.getField(msg, 14)) == null ? undefined : f,
autoDelete: jspb.Message.getBooleanFieldWithDefault(msg, 15, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uploader.v1.AMQPHooksOptions}
 */
proto.uploader.v1.AMQPHooksOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.uploader.v1.AMQPHooksOptions;
  return proto.uploader.v1.AMQPHooksOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uploader.v1.AMQPHooksOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uploader.v1.AMQPHooksOptions}
 */
proto.uploader.v1.AMQPHooksOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeclareExchange(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeclareQueues(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDurableExchange(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDurableQueues(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCelery(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setExchange(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setExchangeKind(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoutingKey(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueuesPrefix(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConnectionPoolSize(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setChannelPoolSize(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIdleConnectionTimeout(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIdleChannelsTimeout(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoDelete(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uploader.v1.AMQPHooksOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.uploader.v1.AMQPHooksOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uploader.v1.AMQPHooksOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uploader.v1.AMQPHooksOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeclareExchange();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDeclareQueues();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getDurableExchange();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getDurableQueues();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getCelery();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getExchange();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getExchangeKind();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getQueuesPrefix();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getConnectionPoolSize();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getChannelPoolSize();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeUint64(
      14,
      f
    );
  }
  f = message.getAutoDelete();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.uploader.v1.AMQPHooksOptions.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.AMQPHooksOptions} returns this
 */
proto.uploader.v1.AMQPHooksOptions.prototype.setUrl = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.AMQPHooksOptions} returns this
 */
proto.uploader.v1.AMQPHooksOptions.prototype.clearUrl = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.AMQPHooksOptions.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool declare_exchange = 2;
 * @return {boolean}
 */
proto.uploader.v1.AMQPHooksOptions.prototype.getDeclareExchange = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.uploader.v1.AMQPHooksOptions} returns this
 */
proto.uploader.v1.AMQPHooksOptions.prototype.setDeclareExchange = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool declare_queues = 3;
 * @return {boolean}
 */
proto.uploader.v1.AMQPHooksOptions.prototype.getDeclareQueues = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.uploader.v1.AMQPHooksOptions} returns this
 */
proto.uploader.v1.AMQPHooksOptions.prototype.setDeclareQueues = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool durable_exchange = 4;
 * @return {boolean}
 */
proto.uploader.v1.AMQPHooksOptions.prototype.getDurableExchange = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.uploader.v1.AMQPHooksOptions} returns this
 */
proto.uploader.v1.AMQPHooksOptions.prototype.setDurableExchange = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool durable_queues = 5;
 * @return {boolean}
 */
proto.uploader.v1.AMQPHooksOptions.prototype.getDurableQueues = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.uploader.v1.AMQPHooksOptions} returns this
 */
proto.uploader.v1.AMQPHooksOptions.prototype.setDurableQueues = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool celery = 6;
 * @return {boolean}
 */
proto.uploader.v1.AMQPHooksOptions.prototype.getCelery = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.uploader.v1.AMQPHooksOptions} returns this
 */
proto.uploader.v1.AMQPHooksOptions.prototype.setCelery = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string exchange = 7;
 * @return {string}
 */
proto.uploader.v1.AMQPHooksOptions.prototype.getExchange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.AMQPHooksOptions} returns this
 */
proto.uploader.v1.AMQPHooksOptions.prototype.setExchange = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string exchange_kind = 8;
 * @return {string}
 */
proto.uploader.v1.AMQPHooksOptions.prototype.getExchangeKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.AMQPHooksOptions} returns this
 */
proto.uploader.v1.AMQPHooksOptions.prototype.setExchangeKind = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string routing_key = 9;
 * @return {string}
 */
proto.uploader.v1.AMQPHooksOptions.prototype.getRoutingKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.AMQPHooksOptions} returns this
 */
proto.uploader.v1.AMQPHooksOptions.prototype.setRoutingKey = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.AMQPHooksOptions} returns this
 */
proto.uploader.v1.AMQPHooksOptions.prototype.clearRoutingKey = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.AMQPHooksOptions.prototype.hasRoutingKey = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string queues_prefix = 10;
 * @return {string}
 */
proto.uploader.v1.AMQPHooksOptions.prototype.getQueuesPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.AMQPHooksOptions} returns this
 */
proto.uploader.v1.AMQPHooksOptions.prototype.setQueuesPrefix = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional uint64 connection_pool_size = 11;
 * @return {number}
 */
proto.uploader.v1.AMQPHooksOptions.prototype.getConnectionPoolSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.uploader.v1.AMQPHooksOptions} returns this
 */
proto.uploader.v1.AMQPHooksOptions.prototype.setConnectionPoolSize = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint64 channel_pool_size = 12;
 * @return {number}
 */
proto.uploader.v1.AMQPHooksOptions.prototype.getChannelPoolSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.uploader.v1.AMQPHooksOptions} returns this
 */
proto.uploader.v1.AMQPHooksOptions.prototype.setChannelPoolSize = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional uint64 idle_connection_timeout = 13;
 * @return {number}
 */
proto.uploader.v1.AMQPHooksOptions.prototype.getIdleConnectionTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.uploader.v1.AMQPHooksOptions} returns this
 */
proto.uploader.v1.AMQPHooksOptions.prototype.setIdleConnectionTimeout = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.AMQPHooksOptions} returns this
 */
proto.uploader.v1.AMQPHooksOptions.prototype.clearIdleConnectionTimeout = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.AMQPHooksOptions.prototype.hasIdleConnectionTimeout = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional uint64 idle_channels_timeout = 14;
 * @return {number}
 */
proto.uploader.v1.AMQPHooksOptions.prototype.getIdleChannelsTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.uploader.v1.AMQPHooksOptions} returns this
 */
proto.uploader.v1.AMQPHooksOptions.prototype.setIdleChannelsTimeout = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.AMQPHooksOptions} returns this
 */
proto.uploader.v1.AMQPHooksOptions.prototype.clearIdleChannelsTimeout = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.AMQPHooksOptions.prototype.hasIdleChannelsTimeout = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional bool auto_delete = 15;
 * @return {boolean}
 */
proto.uploader.v1.AMQPHooksOptions.prototype.getAutoDelete = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.uploader.v1.AMQPHooksOptions} returns this
 */
proto.uploader.v1.AMQPHooksOptions.prototype.setAutoDelete = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.uploader.v1.KafkaHookOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.uploader.v1.KafkaHookOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uploader.v1.KafkaHookOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uploader.v1.KafkaHookOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
urls: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
clientId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
topic: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
prefix: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
requiredAcks: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
compression: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
idleTimeout: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
sendTimeout: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
extraKafkaOpts: (f = msg.getExtraKafkaOpts()) && proto.uploader.v1.ExtraKafkaOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uploader.v1.KafkaHookOptions}
 */
proto.uploader.v1.KafkaHookOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.uploader.v1.KafkaHookOptions;
  return proto.uploader.v1.KafkaHookOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uploader.v1.KafkaHookOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uploader.v1.KafkaHookOptions}
 */
proto.uploader.v1.KafkaHookOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrls(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrefix(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequiredAcks(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompression(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIdleTimeout(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSendTimeout(value);
      break;
    case 9:
      var value = new proto.uploader.v1.ExtraKafkaOptions;
      reader.readMessage(value,proto.uploader.v1.ExtraKafkaOptions.deserializeBinaryFromReader);
      msg.setExtraKafkaOpts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uploader.v1.KafkaHookOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.uploader.v1.KafkaHookOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uploader.v1.KafkaHookOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uploader.v1.KafkaHookOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getExtraKafkaOpts();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.uploader.v1.ExtraKafkaOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional string urls = 1;
 * @return {string}
 */
proto.uploader.v1.KafkaHookOptions.prototype.getUrls = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.KafkaHookOptions} returns this
 */
proto.uploader.v1.KafkaHookOptions.prototype.setUrls = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.KafkaHookOptions} returns this
 */
proto.uploader.v1.KafkaHookOptions.prototype.clearUrls = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.KafkaHookOptions.prototype.hasUrls = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string client_id = 2;
 * @return {string}
 */
proto.uploader.v1.KafkaHookOptions.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.KafkaHookOptions} returns this
 */
proto.uploader.v1.KafkaHookOptions.prototype.setClientId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.KafkaHookOptions} returns this
 */
proto.uploader.v1.KafkaHookOptions.prototype.clearClientId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.KafkaHookOptions.prototype.hasClientId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string topic = 3;
 * @return {string}
 */
proto.uploader.v1.KafkaHookOptions.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.KafkaHookOptions} returns this
 */
proto.uploader.v1.KafkaHookOptions.prototype.setTopic = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.KafkaHookOptions} returns this
 */
proto.uploader.v1.KafkaHookOptions.prototype.clearTopic = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.KafkaHookOptions.prototype.hasTopic = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string prefix = 4;
 * @return {string}
 */
proto.uploader.v1.KafkaHookOptions.prototype.getPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.KafkaHookOptions} returns this
 */
proto.uploader.v1.KafkaHookOptions.prototype.setPrefix = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.KafkaHookOptions} returns this
 */
proto.uploader.v1.KafkaHookOptions.prototype.clearPrefix = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.KafkaHookOptions.prototype.hasPrefix = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string required_acks = 5;
 * @return {string}
 */
proto.uploader.v1.KafkaHookOptions.prototype.getRequiredAcks = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.KafkaHookOptions} returns this
 */
proto.uploader.v1.KafkaHookOptions.prototype.setRequiredAcks = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.KafkaHookOptions} returns this
 */
proto.uploader.v1.KafkaHookOptions.prototype.clearRequiredAcks = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.KafkaHookOptions.prototype.hasRequiredAcks = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string compression = 6;
 * @return {string}
 */
proto.uploader.v1.KafkaHookOptions.prototype.getCompression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.KafkaHookOptions} returns this
 */
proto.uploader.v1.KafkaHookOptions.prototype.setCompression = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.KafkaHookOptions} returns this
 */
proto.uploader.v1.KafkaHookOptions.prototype.clearCompression = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.KafkaHookOptions.prototype.hasCompression = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint64 idle_timeout = 7;
 * @return {number}
 */
proto.uploader.v1.KafkaHookOptions.prototype.getIdleTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.uploader.v1.KafkaHookOptions} returns this
 */
proto.uploader.v1.KafkaHookOptions.prototype.setIdleTimeout = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.KafkaHookOptions} returns this
 */
proto.uploader.v1.KafkaHookOptions.prototype.clearIdleTimeout = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.KafkaHookOptions.prototype.hasIdleTimeout = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint64 send_timeout = 8;
 * @return {number}
 */
proto.uploader.v1.KafkaHookOptions.prototype.getSendTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.uploader.v1.KafkaHookOptions} returns this
 */
proto.uploader.v1.KafkaHookOptions.prototype.setSendTimeout = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.KafkaHookOptions} returns this
 */
proto.uploader.v1.KafkaHookOptions.prototype.clearSendTimeout = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.KafkaHookOptions.prototype.hasSendTimeout = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ExtraKafkaOptions extra_kafka_opts = 9;
 * @return {?proto.uploader.v1.ExtraKafkaOptions}
 */
proto.uploader.v1.KafkaHookOptions.prototype.getExtraKafkaOpts = function() {
  return /** @type{?proto.uploader.v1.ExtraKafkaOptions} */ (
    jspb.Message.getWrapperField(this, proto.uploader.v1.ExtraKafkaOptions, 9));
};


/**
 * @param {?proto.uploader.v1.ExtraKafkaOptions|undefined} value
 * @return {!proto.uploader.v1.KafkaHookOptions} returns this
*/
proto.uploader.v1.KafkaHookOptions.prototype.setExtraKafkaOpts = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.uploader.v1.KafkaHookOptions} returns this
 */
proto.uploader.v1.KafkaHookOptions.prototype.clearExtraKafkaOpts = function() {
  return this.setExtraKafkaOpts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.KafkaHookOptions.prototype.hasExtraKafkaOpts = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.uploader.v1.NatsHookOptions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.uploader.v1.NatsHookOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.uploader.v1.NatsHookOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uploader.v1.NatsHookOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uploader.v1.NatsHookOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
urlsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
subject: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
prefix: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
waitForReplies: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
username: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
password: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
token: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uploader.v1.NatsHookOptions}
 */
proto.uploader.v1.NatsHookOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.uploader.v1.NatsHookOptions;
  return proto.uploader.v1.NatsHookOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uploader.v1.NatsHookOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uploader.v1.NatsHookOptions}
 */
proto.uploader.v1.NatsHookOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addUrls(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrefix(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWaitForReplies(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uploader.v1.NatsHookOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.uploader.v1.NatsHookOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uploader.v1.NatsHookOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uploader.v1.NatsHookOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWaitForReplies();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * repeated string urls = 1;
 * @return {!Array<string>}
 */
proto.uploader.v1.NatsHookOptions.prototype.getUrlsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.uploader.v1.NatsHookOptions} returns this
 */
proto.uploader.v1.NatsHookOptions.prototype.setUrlsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.uploader.v1.NatsHookOptions} returns this
 */
proto.uploader.v1.NatsHookOptions.prototype.addUrls = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.uploader.v1.NatsHookOptions} returns this
 */
proto.uploader.v1.NatsHookOptions.prototype.clearUrlsList = function() {
  return this.setUrlsList([]);
};


/**
 * optional string subject = 2;
 * @return {string}
 */
proto.uploader.v1.NatsHookOptions.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.NatsHookOptions} returns this
 */
proto.uploader.v1.NatsHookOptions.prototype.setSubject = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.NatsHookOptions} returns this
 */
proto.uploader.v1.NatsHookOptions.prototype.clearSubject = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.NatsHookOptions.prototype.hasSubject = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string prefix = 3;
 * @return {string}
 */
proto.uploader.v1.NatsHookOptions.prototype.getPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.NatsHookOptions} returns this
 */
proto.uploader.v1.NatsHookOptions.prototype.setPrefix = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.NatsHookOptions} returns this
 */
proto.uploader.v1.NatsHookOptions.prototype.clearPrefix = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.NatsHookOptions.prototype.hasPrefix = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool wait_for_replies = 4;
 * @return {boolean}
 */
proto.uploader.v1.NatsHookOptions.prototype.getWaitForReplies = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.uploader.v1.NatsHookOptions} returns this
 */
proto.uploader.v1.NatsHookOptions.prototype.setWaitForReplies = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string username = 5;
 * @return {string}
 */
proto.uploader.v1.NatsHookOptions.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.NatsHookOptions} returns this
 */
proto.uploader.v1.NatsHookOptions.prototype.setUsername = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.NatsHookOptions} returns this
 */
proto.uploader.v1.NatsHookOptions.prototype.clearUsername = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.NatsHookOptions.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string password = 6;
 * @return {string}
 */
proto.uploader.v1.NatsHookOptions.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.NatsHookOptions} returns this
 */
proto.uploader.v1.NatsHookOptions.prototype.setPassword = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.NatsHookOptions} returns this
 */
proto.uploader.v1.NatsHookOptions.prototype.clearPassword = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.NatsHookOptions.prototype.hasPassword = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string token = 7;
 * @return {string}
 */
proto.uploader.v1.NatsHookOptions.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.NatsHookOptions} returns this
 */
proto.uploader.v1.NatsHookOptions.prototype.setToken = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.NatsHookOptions} returns this
 */
proto.uploader.v1.NatsHookOptions.prototype.clearToken = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.NatsHookOptions.prototype.hasToken = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.uploader.v1.NotificationsOptions.repeatedFields_ = [2,4,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.uploader.v1.NotificationsOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.uploader.v1.NotificationsOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uploader.v1.NotificationsOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uploader.v1.NotificationsOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
hooksFormat: jspb.Message.getFieldWithDefault(msg, 1, 0),
hooksList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
behindProxy: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
hooksHttpUrlsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
httpHookTimeout: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
hooksHttpProxyHeadersList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
hooksDir: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
hooksFile: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
amqpHookOpts: (f = msg.getAmqpHookOpts()) && proto.uploader.v1.AMQPHooksOptions.toObject(includeInstance, f),
kafkaHookOpts: (f = msg.getKafkaHookOpts()) && proto.uploader.v1.KafkaHookOptions.toObject(includeInstance, f),
natsHookOpts: (f = msg.getNatsHookOpts()) && proto.uploader.v1.NatsHookOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uploader.v1.NotificationsOptions}
 */
proto.uploader.v1.NotificationsOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.uploader.v1.NotificationsOptions;
  return proto.uploader.v1.NotificationsOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uploader.v1.NotificationsOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uploader.v1.NotificationsOptions}
 */
proto.uploader.v1.NotificationsOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.uploader.v1.Format} */ (reader.readEnum());
      msg.setHooksFormat(value);
      break;
    case 2:
      var values = /** @type {!Array<!proto.uploader.v1.Hook>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addHooks(values[i]);
      }
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBehindProxy(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addHooksHttpUrls(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHttpHookTimeout(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addHooksHttpProxyHeaders(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setHooksDir(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setHooksFile(value);
      break;
    case 9:
      var value = new proto.uploader.v1.AMQPHooksOptions;
      reader.readMessage(value,proto.uploader.v1.AMQPHooksOptions.deserializeBinaryFromReader);
      msg.setAmqpHookOpts(value);
      break;
    case 10:
      var value = new proto.uploader.v1.KafkaHookOptions;
      reader.readMessage(value,proto.uploader.v1.KafkaHookOptions.deserializeBinaryFromReader);
      msg.setKafkaHookOpts(value);
      break;
    case 11:
      var value = new proto.uploader.v1.NatsHookOptions;
      reader.readMessage(value,proto.uploader.v1.NatsHookOptions.deserializeBinaryFromReader);
      msg.setNatsHookOpts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uploader.v1.NotificationsOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.uploader.v1.NotificationsOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uploader.v1.NotificationsOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uploader.v1.NotificationsOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHooksFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getHooksList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
  f = message.getBehindProxy();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getHooksHttpUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getHooksHttpProxyHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAmqpHookOpts();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.uploader.v1.AMQPHooksOptions.serializeBinaryToWriter
    );
  }
  f = message.getKafkaHookOpts();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.uploader.v1.KafkaHookOptions.serializeBinaryToWriter
    );
  }
  f = message.getNatsHookOpts();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.uploader.v1.NatsHookOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional Format hooks_format = 1;
 * @return {!proto.uploader.v1.Format}
 */
proto.uploader.v1.NotificationsOptions.prototype.getHooksFormat = function() {
  return /** @type {!proto.uploader.v1.Format} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.uploader.v1.Format} value
 * @return {!proto.uploader.v1.NotificationsOptions} returns this
 */
proto.uploader.v1.NotificationsOptions.prototype.setHooksFormat = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated Hook hooks = 2;
 * @return {!Array<!proto.uploader.v1.Hook>}
 */
proto.uploader.v1.NotificationsOptions.prototype.getHooksList = function() {
  return /** @type {!Array<!proto.uploader.v1.Hook>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.uploader.v1.Hook>} value
 * @return {!proto.uploader.v1.NotificationsOptions} returns this
 */
proto.uploader.v1.NotificationsOptions.prototype.setHooksList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.uploader.v1.Hook} value
 * @param {number=} opt_index
 * @return {!proto.uploader.v1.NotificationsOptions} returns this
 */
proto.uploader.v1.NotificationsOptions.prototype.addHooks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.uploader.v1.NotificationsOptions} returns this
 */
proto.uploader.v1.NotificationsOptions.prototype.clearHooksList = function() {
  return this.setHooksList([]);
};


/**
 * optional bool behind_proxy = 3;
 * @return {boolean}
 */
proto.uploader.v1.NotificationsOptions.prototype.getBehindProxy = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.uploader.v1.NotificationsOptions} returns this
 */
proto.uploader.v1.NotificationsOptions.prototype.setBehindProxy = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * repeated string hooks_http_urls = 4;
 * @return {!Array<string>}
 */
proto.uploader.v1.NotificationsOptions.prototype.getHooksHttpUrlsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.uploader.v1.NotificationsOptions} returns this
 */
proto.uploader.v1.NotificationsOptions.prototype.setHooksHttpUrlsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.uploader.v1.NotificationsOptions} returns this
 */
proto.uploader.v1.NotificationsOptions.prototype.addHooksHttpUrls = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.uploader.v1.NotificationsOptions} returns this
 */
proto.uploader.v1.NotificationsOptions.prototype.clearHooksHttpUrlsList = function() {
  return this.setHooksHttpUrlsList([]);
};


/**
 * optional uint64 http_hook_timeout = 5;
 * @return {number}
 */
proto.uploader.v1.NotificationsOptions.prototype.getHttpHookTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.uploader.v1.NotificationsOptions} returns this
 */
proto.uploader.v1.NotificationsOptions.prototype.setHttpHookTimeout = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.NotificationsOptions} returns this
 */
proto.uploader.v1.NotificationsOptions.prototype.clearHttpHookTimeout = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.NotificationsOptions.prototype.hasHttpHookTimeout = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated string hooks_http_proxy_headers = 6;
 * @return {!Array<string>}
 */
proto.uploader.v1.NotificationsOptions.prototype.getHooksHttpProxyHeadersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.uploader.v1.NotificationsOptions} returns this
 */
proto.uploader.v1.NotificationsOptions.prototype.setHooksHttpProxyHeadersList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.uploader.v1.NotificationsOptions} returns this
 */
proto.uploader.v1.NotificationsOptions.prototype.addHooksHttpProxyHeaders = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.uploader.v1.NotificationsOptions} returns this
 */
proto.uploader.v1.NotificationsOptions.prototype.clearHooksHttpProxyHeadersList = function() {
  return this.setHooksHttpProxyHeadersList([]);
};


/**
 * optional string hooks_dir = 7;
 * @return {string}
 */
proto.uploader.v1.NotificationsOptions.prototype.getHooksDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.NotificationsOptions} returns this
 */
proto.uploader.v1.NotificationsOptions.prototype.setHooksDir = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.NotificationsOptions} returns this
 */
proto.uploader.v1.NotificationsOptions.prototype.clearHooksDir = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.NotificationsOptions.prototype.hasHooksDir = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string hooks_file = 8;
 * @return {string}
 */
proto.uploader.v1.NotificationsOptions.prototype.getHooksFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.NotificationsOptions} returns this
 */
proto.uploader.v1.NotificationsOptions.prototype.setHooksFile = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.NotificationsOptions} returns this
 */
proto.uploader.v1.NotificationsOptions.prototype.clearHooksFile = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.NotificationsOptions.prototype.hasHooksFile = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional AMQPHooksOptions amqp_hook_opts = 9;
 * @return {?proto.uploader.v1.AMQPHooksOptions}
 */
proto.uploader.v1.NotificationsOptions.prototype.getAmqpHookOpts = function() {
  return /** @type{?proto.uploader.v1.AMQPHooksOptions} */ (
    jspb.Message.getWrapperField(this, proto.uploader.v1.AMQPHooksOptions, 9));
};


/**
 * @param {?proto.uploader.v1.AMQPHooksOptions|undefined} value
 * @return {!proto.uploader.v1.NotificationsOptions} returns this
*/
proto.uploader.v1.NotificationsOptions.prototype.setAmqpHookOpts = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.uploader.v1.NotificationsOptions} returns this
 */
proto.uploader.v1.NotificationsOptions.prototype.clearAmqpHookOpts = function() {
  return this.setAmqpHookOpts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.NotificationsOptions.prototype.hasAmqpHookOpts = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional KafkaHookOptions kafka_hook_opts = 10;
 * @return {?proto.uploader.v1.KafkaHookOptions}
 */
proto.uploader.v1.NotificationsOptions.prototype.getKafkaHookOpts = function() {
  return /** @type{?proto.uploader.v1.KafkaHookOptions} */ (
    jspb.Message.getWrapperField(this, proto.uploader.v1.KafkaHookOptions, 10));
};


/**
 * @param {?proto.uploader.v1.KafkaHookOptions|undefined} value
 * @return {!proto.uploader.v1.NotificationsOptions} returns this
*/
proto.uploader.v1.NotificationsOptions.prototype.setKafkaHookOpts = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.uploader.v1.NotificationsOptions} returns this
 */
proto.uploader.v1.NotificationsOptions.prototype.clearKafkaHookOpts = function() {
  return this.setKafkaHookOpts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.NotificationsOptions.prototype.hasKafkaHookOpts = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional NatsHookOptions nats_hook_opts = 11;
 * @return {?proto.uploader.v1.NatsHookOptions}
 */
proto.uploader.v1.NotificationsOptions.prototype.getNatsHookOpts = function() {
  return /** @type{?proto.uploader.v1.NatsHookOptions} */ (
    jspb.Message.getWrapperField(this, proto.uploader.v1.NatsHookOptions, 11));
};


/**
 * @param {?proto.uploader.v1.NatsHookOptions|undefined} value
 * @return {!proto.uploader.v1.NotificationsOptions} returns this
*/
proto.uploader.v1.NotificationsOptions.prototype.setNatsHookOpts = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.uploader.v1.NotificationsOptions} returns this
 */
proto.uploader.v1.NotificationsOptions.prototype.clearNatsHookOpts = function() {
  return this.setNatsHookOpts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.NotificationsOptions.prototype.hasNatsHookOpts = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.uploader.v1.SentryOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.uploader.v1.SentryOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uploader.v1.SentryOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uploader.v1.SentryOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
dsn: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
sampleRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uploader.v1.SentryOptions}
 */
proto.uploader.v1.SentryOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.uploader.v1.SentryOptions;
  return proto.uploader.v1.SentryOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uploader.v1.SentryOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uploader.v1.SentryOptions}
 */
proto.uploader.v1.SentryOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDsn(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSampleRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uploader.v1.SentryOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.uploader.v1.SentryOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uploader.v1.SentryOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uploader.v1.SentryOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSampleRate();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional string dsn = 1;
 * @return {string}
 */
proto.uploader.v1.SentryOptions.prototype.getDsn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.SentryOptions} returns this
 */
proto.uploader.v1.SentryOptions.prototype.setDsn = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.SentryOptions} returns this
 */
proto.uploader.v1.SentryOptions.prototype.clearDsn = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.SentryOptions.prototype.hasDsn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float sample_rate = 2;
 * @return {number}
 */
proto.uploader.v1.SentryOptions.prototype.getSampleRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.uploader.v1.SentryOptions} returns this
 */
proto.uploader.v1.SentryOptions.prototype.setSampleRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.uploader.v1.RustusConf.repeatedFields_ = [5,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.uploader.v1.RustusConf.prototype.toObject = function(opt_includeInstance) {
  return proto.uploader.v1.RustusConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uploader.v1.RustusConf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uploader.v1.RustusConf.toObject = function(includeInstance, msg) {
  var f, obj = {
host: jspb.Message.getFieldWithDefault(msg, 1, ""),
port: jspb.Message.getFieldWithDefault(msg, 2, 0),
disableHealthAccessLog: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
url: jspb.Message.getFieldWithDefault(msg, 4, ""),
corsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
maxBodySize: jspb.Message.getFieldWithDefault(msg, 6, 0),
logLevel: jspb.Message.getFieldWithDefault(msg, 7, ""),
workers: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
tusExtensionsList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
allowEmpty: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
removeParts: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
maxFileSize: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
storageOpts: (f = msg.getStorageOpts()) && proto.uploader.v1.DataStorageOptions.toObject(includeInstance, f),
infoStorageOpts: (f = msg.getInfoStorageOpts()) && proto.uploader.v1.InfoStoreOptions.toObject(includeInstance, f),
notificationOpts: (f = msg.getNotificationOpts()) && proto.uploader.v1.NotificationsOptions.toObject(includeInstance, f),
sentryOpts: (f = msg.getSentryOpts()) && proto.uploader.v1.SentryOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uploader.v1.RustusConf}
 */
proto.uploader.v1.RustusConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.uploader.v1.RustusConf;
  return proto.uploader.v1.RustusConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uploader.v1.RustusConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uploader.v1.RustusConf}
 */
proto.uploader.v1.RustusConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableHealthAccessLog(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addCors(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxBodySize(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogLevel(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWorkers(value);
      break;
    case 9:
      var values = /** @type {!Array<!proto.uploader.v1.Extensions>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTusExtensions(values[i]);
      }
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowEmpty(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRemoveParts(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxFileSize(value);
      break;
    case 13:
      var value = new proto.uploader.v1.DataStorageOptions;
      reader.readMessage(value,proto.uploader.v1.DataStorageOptions.deserializeBinaryFromReader);
      msg.setStorageOpts(value);
      break;
    case 14:
      var value = new proto.uploader.v1.InfoStoreOptions;
      reader.readMessage(value,proto.uploader.v1.InfoStoreOptions.deserializeBinaryFromReader);
      msg.setInfoStorageOpts(value);
      break;
    case 15:
      var value = new proto.uploader.v1.NotificationsOptions;
      reader.readMessage(value,proto.uploader.v1.NotificationsOptions.deserializeBinaryFromReader);
      msg.setNotificationOpts(value);
      break;
    case 16:
      var value = new proto.uploader.v1.SentryOptions;
      reader.readMessage(value,proto.uploader.v1.SentryOptions.deserializeBinaryFromReader);
      msg.setSentryOpts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uploader.v1.RustusConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.uploader.v1.RustusConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uploader.v1.RustusConf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uploader.v1.RustusConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDisableHealthAccessLog();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getMaxBodySize();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getLogLevel();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getTusExtensionsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      9,
      f
    );
  }
  f = message.getAllowEmpty();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getRemoveParts();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = message.getStorageOpts();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.uploader.v1.DataStorageOptions.serializeBinaryToWriter
    );
  }
  f = message.getInfoStorageOpts();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.uploader.v1.InfoStoreOptions.serializeBinaryToWriter
    );
  }
  f = message.getNotificationOpts();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.uploader.v1.NotificationsOptions.serializeBinaryToWriter
    );
  }
  f = message.getSentryOpts();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.uploader.v1.SentryOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.uploader.v1.RustusConf.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.RustusConf} returns this
 */
proto.uploader.v1.RustusConf.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.uploader.v1.RustusConf.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.uploader.v1.RustusConf} returns this
 */
proto.uploader.v1.RustusConf.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool disable_health_access_log = 3;
 * @return {boolean}
 */
proto.uploader.v1.RustusConf.prototype.getDisableHealthAccessLog = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.uploader.v1.RustusConf} returns this
 */
proto.uploader.v1.RustusConf.prototype.setDisableHealthAccessLog = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string url = 4;
 * @return {string}
 */
proto.uploader.v1.RustusConf.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.RustusConf} returns this
 */
proto.uploader.v1.RustusConf.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string cors = 5;
 * @return {!Array<string>}
 */
proto.uploader.v1.RustusConf.prototype.getCorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.uploader.v1.RustusConf} returns this
 */
proto.uploader.v1.RustusConf.prototype.setCorsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.uploader.v1.RustusConf} returns this
 */
proto.uploader.v1.RustusConf.prototype.addCors = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.uploader.v1.RustusConf} returns this
 */
proto.uploader.v1.RustusConf.prototype.clearCorsList = function() {
  return this.setCorsList([]);
};


/**
 * optional uint32 max_body_size = 6;
 * @return {number}
 */
proto.uploader.v1.RustusConf.prototype.getMaxBodySize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.uploader.v1.RustusConf} returns this
 */
proto.uploader.v1.RustusConf.prototype.setMaxBodySize = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string log_level = 7;
 * @return {string}
 */
proto.uploader.v1.RustusConf.prototype.getLogLevel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.uploader.v1.RustusConf} returns this
 */
proto.uploader.v1.RustusConf.prototype.setLogLevel = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint32 workers = 8;
 * @return {number}
 */
proto.uploader.v1.RustusConf.prototype.getWorkers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.uploader.v1.RustusConf} returns this
 */
proto.uploader.v1.RustusConf.prototype.setWorkers = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.RustusConf} returns this
 */
proto.uploader.v1.RustusConf.prototype.clearWorkers = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.RustusConf.prototype.hasWorkers = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated Extensions tus_extensions = 9;
 * @return {!Array<!proto.uploader.v1.Extensions>}
 */
proto.uploader.v1.RustusConf.prototype.getTusExtensionsList = function() {
  return /** @type {!Array<!proto.uploader.v1.Extensions>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<!proto.uploader.v1.Extensions>} value
 * @return {!proto.uploader.v1.RustusConf} returns this
 */
proto.uploader.v1.RustusConf.prototype.setTusExtensionsList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!proto.uploader.v1.Extensions} value
 * @param {number=} opt_index
 * @return {!proto.uploader.v1.RustusConf} returns this
 */
proto.uploader.v1.RustusConf.prototype.addTusExtensions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.uploader.v1.RustusConf} returns this
 */
proto.uploader.v1.RustusConf.prototype.clearTusExtensionsList = function() {
  return this.setTusExtensionsList([]);
};


/**
 * optional bool allow_empty = 10;
 * @return {boolean}
 */
proto.uploader.v1.RustusConf.prototype.getAllowEmpty = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.uploader.v1.RustusConf} returns this
 */
proto.uploader.v1.RustusConf.prototype.setAllowEmpty = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool remove_parts = 11;
 * @return {boolean}
 */
proto.uploader.v1.RustusConf.prototype.getRemoveParts = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.uploader.v1.RustusConf} returns this
 */
proto.uploader.v1.RustusConf.prototype.setRemoveParts = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional uint32 max_file_size = 12;
 * @return {number}
 */
proto.uploader.v1.RustusConf.prototype.getMaxFileSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.uploader.v1.RustusConf} returns this
 */
proto.uploader.v1.RustusConf.prototype.setMaxFileSize = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.uploader.v1.RustusConf} returns this
 */
proto.uploader.v1.RustusConf.prototype.clearMaxFileSize = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.RustusConf.prototype.hasMaxFileSize = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional DataStorageOptions storage_opts = 13;
 * @return {?proto.uploader.v1.DataStorageOptions}
 */
proto.uploader.v1.RustusConf.prototype.getStorageOpts = function() {
  return /** @type{?proto.uploader.v1.DataStorageOptions} */ (
    jspb.Message.getWrapperField(this, proto.uploader.v1.DataStorageOptions, 13));
};


/**
 * @param {?proto.uploader.v1.DataStorageOptions|undefined} value
 * @return {!proto.uploader.v1.RustusConf} returns this
*/
proto.uploader.v1.RustusConf.prototype.setStorageOpts = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.uploader.v1.RustusConf} returns this
 */
proto.uploader.v1.RustusConf.prototype.clearStorageOpts = function() {
  return this.setStorageOpts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.RustusConf.prototype.hasStorageOpts = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional InfoStoreOptions info_storage_opts = 14;
 * @return {?proto.uploader.v1.InfoStoreOptions}
 */
proto.uploader.v1.RustusConf.prototype.getInfoStorageOpts = function() {
  return /** @type{?proto.uploader.v1.InfoStoreOptions} */ (
    jspb.Message.getWrapperField(this, proto.uploader.v1.InfoStoreOptions, 14));
};


/**
 * @param {?proto.uploader.v1.InfoStoreOptions|undefined} value
 * @return {!proto.uploader.v1.RustusConf} returns this
*/
proto.uploader.v1.RustusConf.prototype.setInfoStorageOpts = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.uploader.v1.RustusConf} returns this
 */
proto.uploader.v1.RustusConf.prototype.clearInfoStorageOpts = function() {
  return this.setInfoStorageOpts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.RustusConf.prototype.hasInfoStorageOpts = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional NotificationsOptions notification_opts = 15;
 * @return {?proto.uploader.v1.NotificationsOptions}
 */
proto.uploader.v1.RustusConf.prototype.getNotificationOpts = function() {
  return /** @type{?proto.uploader.v1.NotificationsOptions} */ (
    jspb.Message.getWrapperField(this, proto.uploader.v1.NotificationsOptions, 15));
};


/**
 * @param {?proto.uploader.v1.NotificationsOptions|undefined} value
 * @return {!proto.uploader.v1.RustusConf} returns this
*/
proto.uploader.v1.RustusConf.prototype.setNotificationOpts = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.uploader.v1.RustusConf} returns this
 */
proto.uploader.v1.RustusConf.prototype.clearNotificationOpts = function() {
  return this.setNotificationOpts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.RustusConf.prototype.hasNotificationOpts = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional SentryOptions sentry_opts = 16;
 * @return {?proto.uploader.v1.SentryOptions}
 */
proto.uploader.v1.RustusConf.prototype.getSentryOpts = function() {
  return /** @type{?proto.uploader.v1.SentryOptions} */ (
    jspb.Message.getWrapperField(this, proto.uploader.v1.SentryOptions, 16));
};


/**
 * @param {?proto.uploader.v1.SentryOptions|undefined} value
 * @return {!proto.uploader.v1.RustusConf} returns this
*/
proto.uploader.v1.RustusConf.prototype.setSentryOpts = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.uploader.v1.RustusConf} returns this
 */
proto.uploader.v1.RustusConf.prototype.clearSentryOpts = function() {
  return this.setSentryOpts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uploader.v1.RustusConf.prototype.hasSentryOpts = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * @enum {number}
 */
proto.uploader.v1.AvailableDataStorages = {
  FILE_STORAGE: 0,
  HYBRID_S3: 1,
  S3: 2
};

/**
 * @enum {number}
 */
proto.uploader.v1.AvailableInfoStorages = {
  FILES: 0,
  REDIS: 1
};

/**
 * @enum {number}
 */
proto.uploader.v1.Format = {
  DEFAULT: 0,
  TUSD: 1,
  V2: 2
};

/**
 * @enum {number}
 */
proto.uploader.v1.Hook = {
  PRE_CREATE: 0,
  POST_CREATE: 1,
  POST_RECEIVE: 2,
  PRE_TERMINATE: 3,
  POST_TERMINATE: 4,
  POST_FINISH: 5
};

/**
 * @enum {number}
 */
proto.uploader.v1.Extensions = {
  GETTING: 0,
  CREATION: 1,
  TERMINATION: 2,
  CREATION_WITH_UPLOAD: 3,
  CREATION_DEFER_LENGTH: 4,
  CONCATENATION: 5,
  CHECKSUM: 6
};

goog.object.extend(exports, proto.uploader.v1);
