// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: users/v1/cache.proto
// Protobuf C++ Version: 6.31.1

#ifndef users_2fv1_2fcache_2eproto_2epb_2eh
#define users_2fv1_2fcache_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_users_2fv1_2fcache_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_users_2fv1_2fcache_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_users_2fv1_2fcache_2eproto;
}  // extern "C"
namespace users {
namespace v1 {
class CachedUser;
struct CachedUserDefaultTypeInternal;
extern CachedUserDefaultTypeInternal _CachedUser_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull CachedUser_class_data_;
class CachedUserData;
struct CachedUserDataDefaultTypeInternal;
extern CachedUserDataDefaultTypeInternal _CachedUserData_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull CachedUserData_class_data_;
class CachedUserSession;
struct CachedUserSessionDefaultTypeInternal;
extern CachedUserSessionDefaultTypeInternal _CachedUserSession_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull CachedUserSession_class_data_;
}  // namespace v1
}  // namespace users
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace users {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class CachedUserSession final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:users.v1.CachedUserSession) */ {
 public:
  inline CachedUserSession() : CachedUserSession(nullptr) {}
  ~CachedUserSession() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CachedUserSession* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CachedUserSession));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CachedUserSession(::google::protobuf::internal::ConstantInitialized);

  inline CachedUserSession(const CachedUserSession& from) : CachedUserSession(nullptr, from) {}
  inline CachedUserSession(CachedUserSession&& from) noexcept
      : CachedUserSession(nullptr, ::std::move(from)) {}
  inline CachedUserSession& operator=(const CachedUserSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline CachedUserSession& operator=(CachedUserSession&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CachedUserSession& default_instance() {
    return *reinterpret_cast<const CachedUserSession*>(
        &_CachedUserSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(CachedUserSession& a, CachedUserSession& b) { a.Swap(&b); }
  inline void Swap(CachedUserSession* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CachedUserSession* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CachedUserSession* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CachedUserSession>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CachedUserSession& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CachedUserSession& from) { CachedUserSession::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CachedUserSession* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "users.v1.CachedUserSession"; }

 protected:
  explicit CachedUserSession(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  CachedUserSession(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CachedUserSession& from);
  CachedUserSession(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, CachedUserSession&& from) noexcept
      : CachedUserSession(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kTokenFieldNumber = 2,
    kDeviceIdFieldNumber = 5,
    kCreatedAtFieldNumber = 3,
    kExpiresAtFieldNumber = 4,
  };
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const ::std::string& id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_id();
  void set_allocated_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_id();

  public:
  // string token = 2 [json_name = "token"];
  void clear_token() ;
  const ::std::string& token() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_token();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_token();
  void set_allocated_token(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_token() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_token(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_token();

  public:
  // string device_id = 5 [json_name = "deviceId"];
  void clear_device_id() ;
  const ::std::string& device_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_device_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_device_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_device_id();
  void set_allocated_device_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_device_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_device_id();

  public:
  // int64 created_at = 3 [json_name = "createdAt"];
  void clear_created_at() ;
  ::int64_t created_at() const;
  void set_created_at(::int64_t value);

  private:
  ::int64_t _internal_created_at() const;
  void _internal_set_created_at(::int64_t value);

  public:
  // int64 expires_at = 4 [json_name = "expiresAt"];
  void clear_expires_at() ;
  ::int64_t expires_at() const;
  void set_expires_at(::int64_t value);

  private:
  ::int64_t _internal_expires_at() const;
  void _internal_set_expires_at(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:users.v1.CachedUserSession)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   0, 51,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const CachedUserSession& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr token_;
    ::google::protobuf::internal::ArenaStringPtr device_id_;
    ::int64_t created_at_;
    ::int64_t expires_at_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_users_2fv1_2fcache_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull CachedUserSession_class_data_;
// -------------------------------------------------------------------

class CachedUserData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:users.v1.CachedUserData) */ {
 public:
  inline CachedUserData() : CachedUserData(nullptr) {}
  ~CachedUserData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CachedUserData* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CachedUserData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CachedUserData(::google::protobuf::internal::ConstantInitialized);

  inline CachedUserData(const CachedUserData& from) : CachedUserData(nullptr, from) {}
  inline CachedUserData(CachedUserData&& from) noexcept
      : CachedUserData(nullptr, ::std::move(from)) {}
  inline CachedUserData& operator=(const CachedUserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CachedUserData& operator=(CachedUserData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CachedUserData& default_instance() {
    return *reinterpret_cast<const CachedUserData*>(
        &_CachedUserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CachedUserData& a, CachedUserData& b) { a.Swap(&b); }
  inline void Swap(CachedUserData* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CachedUserData* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CachedUserData* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CachedUserData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CachedUserData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CachedUserData& from) { CachedUserData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CachedUserData* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "users.v1.CachedUserData"; }

 protected:
  explicit CachedUserData(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  CachedUserData(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CachedUserData& from);
  CachedUserData(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, CachedUserData&& from) noexcept
      : CachedUserData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kRolesFieldNumber = 3,
    kPropsFieldNumber = 4,
    kIsOauthFieldNumber = 2,
  };
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const ::std::string& id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_id();
  void set_allocated_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_id();

  public:
  // string roles = 3 [json_name = "roles"];
  void clear_roles() ;
  const ::std::string& roles() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_roles(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_roles();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_roles();
  void set_allocated_roles(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_roles() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_roles(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_roles();

  public:
  // string props = 4 [json_name = "props"];
  void clear_props() ;
  const ::std::string& props() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_props(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_props();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_props();
  void set_allocated_props(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_props() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_props(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_props();

  public:
  // bool is_oauth = 2 [json_name = "isOauth"];
  void clear_is_oauth() ;
  bool is_oauth() const;
  void set_is_oauth(bool value);

  private:
  bool _internal_is_oauth() const;
  void _internal_set_is_oauth(bool value);

  public:
  // @@protoc_insertion_point(class_scope:users.v1.CachedUserData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   0, 44,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const CachedUserData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr roles_;
    ::google::protobuf::internal::ArenaStringPtr props_;
    bool is_oauth_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_users_2fv1_2fcache_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull CachedUserData_class_data_;
// -------------------------------------------------------------------

class CachedUser final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:users.v1.CachedUser) */ {
 public:
  inline CachedUser() : CachedUser(nullptr) {}
  ~CachedUser() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CachedUser* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CachedUser));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CachedUser(::google::protobuf::internal::ConstantInitialized);

  inline CachedUser(const CachedUser& from) : CachedUser(nullptr, from) {}
  inline CachedUser(CachedUser&& from) noexcept
      : CachedUser(nullptr, ::std::move(from)) {}
  inline CachedUser& operator=(const CachedUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline CachedUser& operator=(CachedUser&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CachedUser& default_instance() {
    return *reinterpret_cast<const CachedUser*>(
        &_CachedUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CachedUser& a, CachedUser& b) { a.Swap(&b); }
  inline void Swap(CachedUser* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CachedUser* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CachedUser* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CachedUser>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CachedUser& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CachedUser& from) { CachedUser::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CachedUser* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "users.v1.CachedUser"; }

 protected:
  explicit CachedUser(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  CachedUser(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CachedUser& from);
  CachedUser(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, CachedUser&& from) noexcept
      : CachedUser(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSessionFieldNumber = 1,
    kUserFieldNumber = 2,
  };
  // .users.v1.CachedUserSession session = 1 [json_name = "session"];
  bool has_session() const;
  void clear_session() ;
  const ::users::v1::CachedUserSession& session() const;
  [[nodiscard]] ::users::v1::CachedUserSession* PROTOBUF_NULLABLE release_session();
  ::users::v1::CachedUserSession* PROTOBUF_NONNULL mutable_session();
  void set_allocated_session(::users::v1::CachedUserSession* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_session(::users::v1::CachedUserSession* PROTOBUF_NULLABLE value);
  ::users::v1::CachedUserSession* PROTOBUF_NULLABLE unsafe_arena_release_session();

  private:
  const ::users::v1::CachedUserSession& _internal_session() const;
  ::users::v1::CachedUserSession* PROTOBUF_NONNULL _internal_mutable_session();

  public:
  // .users.v1.CachedUserData user = 2 [json_name = "user"];
  bool has_user() const;
  void clear_user() ;
  const ::users::v1::CachedUserData& user() const;
  [[nodiscard]] ::users::v1::CachedUserData* PROTOBUF_NULLABLE release_user();
  ::users::v1::CachedUserData* PROTOBUF_NONNULL mutable_user();
  void set_allocated_user(::users::v1::CachedUserData* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_user(::users::v1::CachedUserData* PROTOBUF_NULLABLE value);
  ::users::v1::CachedUserData* PROTOBUF_NULLABLE unsafe_arena_release_user();

  private:
  const ::users::v1::CachedUserData& _internal_user() const;
  ::users::v1::CachedUserData* PROTOBUF_NONNULL _internal_mutable_user();

  public:
  // @@protoc_insertion_point(class_scope:users.v1.CachedUser)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const CachedUser& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::users::v1::CachedUserSession* PROTOBUF_NULLABLE session_;
    ::users::v1::CachedUserData* PROTOBUF_NULLABLE user_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_users_2fv1_2fcache_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull CachedUser_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CachedUserSession

// string id = 1 [json_name = "id"];
inline void CachedUserSession::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CachedUserSession::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:users.v1.CachedUserSession.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CachedUserSession::set_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:users.v1.CachedUserSession.id)
}
inline ::std::string* PROTOBUF_NONNULL CachedUserSession::mutable_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:users.v1.CachedUserSession.id)
  return _s;
}
inline const ::std::string& CachedUserSession::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void CachedUserSession::_internal_set_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL CachedUserSession::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE CachedUserSession::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:users.v1.CachedUserSession.id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.id_.Set("", GetArena());
  }
  return released;
}
inline void CachedUserSession::set_allocated_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:users.v1.CachedUserSession.id)
}

// string token = 2 [json_name = "token"];
inline void CachedUserSession::clear_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CachedUserSession::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:users.v1.CachedUserSession.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CachedUserSession::set_token(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:users.v1.CachedUserSession.token)
}
inline ::std::string* PROTOBUF_NONNULL CachedUserSession::mutable_token()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:users.v1.CachedUserSession.token)
  return _s;
}
inline const ::std::string& CachedUserSession::_internal_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_.Get();
}
inline void CachedUserSession::_internal_set_token(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.token_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL CachedUserSession::_internal_mutable_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.token_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE CachedUserSession::release_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:users.v1.CachedUserSession.token)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.token_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.token_.Set("", GetArena());
  }
  return released;
}
inline void CachedUserSession::set_allocated_token(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:users.v1.CachedUserSession.token)
}

// int64 created_at = 3 [json_name = "createdAt"];
inline void CachedUserSession::clear_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t CachedUserSession::created_at() const {
  // @@protoc_insertion_point(field_get:users.v1.CachedUserSession.created_at)
  return _internal_created_at();
}
inline void CachedUserSession::set_created_at(::int64_t value) {
  _internal_set_created_at(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:users.v1.CachedUserSession.created_at)
}
inline ::int64_t CachedUserSession::_internal_created_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_at_;
}
inline void CachedUserSession::_internal_set_created_at(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_ = value;
}

// int64 expires_at = 4 [json_name = "expiresAt"];
inline void CachedUserSession::clear_expires_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expires_at_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t CachedUserSession::expires_at() const {
  // @@protoc_insertion_point(field_get:users.v1.CachedUserSession.expires_at)
  return _internal_expires_at();
}
inline void CachedUserSession::set_expires_at(::int64_t value) {
  _internal_set_expires_at(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:users.v1.CachedUserSession.expires_at)
}
inline ::int64_t CachedUserSession::_internal_expires_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expires_at_;
}
inline void CachedUserSession::_internal_set_expires_at(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expires_at_ = value;
}

// string device_id = 5 [json_name = "deviceId"];
inline void CachedUserSession::clear_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CachedUserSession::device_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:users.v1.CachedUserSession.device_id)
  return _internal_device_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CachedUserSession::set_device_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.device_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:users.v1.CachedUserSession.device_id)
}
inline ::std::string* PROTOBUF_NONNULL CachedUserSession::mutable_device_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:users.v1.CachedUserSession.device_id)
  return _s;
}
inline const ::std::string& CachedUserSession::_internal_device_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_id_.Get();
}
inline void CachedUserSession::_internal_set_device_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.device_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL CachedUserSession::_internal_mutable_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.device_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE CachedUserSession::release_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:users.v1.CachedUserSession.device_id)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.device_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.device_id_.Set("", GetArena());
  }
  return released;
}
inline void CachedUserSession::set_allocated_device_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.device_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.device_id_.IsDefault()) {
    _impl_.device_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:users.v1.CachedUserSession.device_id)
}

// -------------------------------------------------------------------

// CachedUserData

// string id = 1 [json_name = "id"];
inline void CachedUserData::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CachedUserData::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:users.v1.CachedUserData.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CachedUserData::set_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:users.v1.CachedUserData.id)
}
inline ::std::string* PROTOBUF_NONNULL CachedUserData::mutable_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:users.v1.CachedUserData.id)
  return _s;
}
inline const ::std::string& CachedUserData::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void CachedUserData::_internal_set_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL CachedUserData::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE CachedUserData::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:users.v1.CachedUserData.id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.id_.Set("", GetArena());
  }
  return released;
}
inline void CachedUserData::set_allocated_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:users.v1.CachedUserData.id)
}

// bool is_oauth = 2 [json_name = "isOauth"];
inline void CachedUserData::clear_is_oauth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_oauth_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CachedUserData::is_oauth() const {
  // @@protoc_insertion_point(field_get:users.v1.CachedUserData.is_oauth)
  return _internal_is_oauth();
}
inline void CachedUserData::set_is_oauth(bool value) {
  _internal_set_is_oauth(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:users.v1.CachedUserData.is_oauth)
}
inline bool CachedUserData::_internal_is_oauth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_oauth_;
}
inline void CachedUserData::_internal_set_is_oauth(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_oauth_ = value;
}

// string roles = 3 [json_name = "roles"];
inline void CachedUserData::clear_roles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roles_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CachedUserData::roles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:users.v1.CachedUserData.roles)
  return _internal_roles();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CachedUserData::set_roles(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.roles_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:users.v1.CachedUserData.roles)
}
inline ::std::string* PROTOBUF_NONNULL CachedUserData::mutable_roles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_roles();
  // @@protoc_insertion_point(field_mutable:users.v1.CachedUserData.roles)
  return _s;
}
inline const ::std::string& CachedUserData::_internal_roles() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.roles_.Get();
}
inline void CachedUserData::_internal_set_roles(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.roles_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL CachedUserData::_internal_mutable_roles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.roles_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE CachedUserData::release_roles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:users.v1.CachedUserData.roles)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.roles_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.roles_.Set("", GetArena());
  }
  return released;
}
inline void CachedUserData::set_allocated_roles(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.roles_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.roles_.IsDefault()) {
    _impl_.roles_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:users.v1.CachedUserData.roles)
}

// string props = 4 [json_name = "props"];
inline void CachedUserData::clear_props() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.props_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CachedUserData::props() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:users.v1.CachedUserData.props)
  return _internal_props();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CachedUserData::set_props(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.props_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:users.v1.CachedUserData.props)
}
inline ::std::string* PROTOBUF_NONNULL CachedUserData::mutable_props()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_props();
  // @@protoc_insertion_point(field_mutable:users.v1.CachedUserData.props)
  return _s;
}
inline const ::std::string& CachedUserData::_internal_props() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.props_.Get();
}
inline void CachedUserData::_internal_set_props(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.props_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL CachedUserData::_internal_mutable_props() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.props_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE CachedUserData::release_props() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:users.v1.CachedUserData.props)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.props_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.props_.Set("", GetArena());
  }
  return released;
}
inline void CachedUserData::set_allocated_props(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.props_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.props_.IsDefault()) {
    _impl_.props_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:users.v1.CachedUserData.props)
}

// -------------------------------------------------------------------

// CachedUser

// .users.v1.CachedUserSession session = 1 [json_name = "session"];
inline bool CachedUser::has_session() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.session_ != nullptr);
  return value;
}
inline void CachedUser::clear_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.session_ != nullptr) _impl_.session_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::users::v1::CachedUserSession& CachedUser::_internal_session() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::users::v1::CachedUserSession* p = _impl_.session_;
  return p != nullptr ? *p : reinterpret_cast<const ::users::v1::CachedUserSession&>(::users::v1::_CachedUserSession_default_instance_);
}
inline const ::users::v1::CachedUserSession& CachedUser::session() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:users.v1.CachedUser.session)
  return _internal_session();
}
inline void CachedUser::unsafe_arena_set_allocated_session(
    ::users::v1::CachedUserSession* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.session_);
  }
  _impl_.session_ = reinterpret_cast<::users::v1::CachedUserSession*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:users.v1.CachedUser.session)
}
inline ::users::v1::CachedUserSession* PROTOBUF_NULLABLE CachedUser::release_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::users::v1::CachedUserSession* released = _impl_.session_;
  _impl_.session_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::users::v1::CachedUserSession* PROTOBUF_NULLABLE CachedUser::unsafe_arena_release_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:users.v1.CachedUser.session)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::users::v1::CachedUserSession* temp = _impl_.session_;
  _impl_.session_ = nullptr;
  return temp;
}
inline ::users::v1::CachedUserSession* PROTOBUF_NONNULL CachedUser::_internal_mutable_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.session_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::users::v1::CachedUserSession>(GetArena());
    _impl_.session_ = reinterpret_cast<::users::v1::CachedUserSession*>(p);
  }
  return _impl_.session_;
}
inline ::users::v1::CachedUserSession* PROTOBUF_NONNULL CachedUser::mutable_session()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::users::v1::CachedUserSession* _msg = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:users.v1.CachedUser.session)
  return _msg;
}
inline void CachedUser::set_allocated_session(::users::v1::CachedUserSession* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.session_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.session_ = reinterpret_cast<::users::v1::CachedUserSession*>(value);
  // @@protoc_insertion_point(field_set_allocated:users.v1.CachedUser.session)
}

// .users.v1.CachedUserData user = 2 [json_name = "user"];
inline bool CachedUser::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void CachedUser::clear_user() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::users::v1::CachedUserData& CachedUser::_internal_user() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::users::v1::CachedUserData* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::users::v1::CachedUserData&>(::users::v1::_CachedUserData_default_instance_);
}
inline const ::users::v1::CachedUserData& CachedUser::user() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:users.v1.CachedUser.user)
  return _internal_user();
}
inline void CachedUser::unsafe_arena_set_allocated_user(
    ::users::v1::CachedUserData* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = reinterpret_cast<::users::v1::CachedUserData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:users.v1.CachedUser.user)
}
inline ::users::v1::CachedUserData* PROTOBUF_NULLABLE CachedUser::release_user() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::users::v1::CachedUserData* released = _impl_.user_;
  _impl_.user_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::users::v1::CachedUserData* PROTOBUF_NULLABLE CachedUser::unsafe_arena_release_user() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:users.v1.CachedUser.user)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::users::v1::CachedUserData* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::users::v1::CachedUserData* PROTOBUF_NONNULL CachedUser::_internal_mutable_user() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.user_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::users::v1::CachedUserData>(GetArena());
    _impl_.user_ = reinterpret_cast<::users::v1::CachedUserData*>(p);
  }
  return _impl_.user_;
}
inline ::users::v1::CachedUserData* PROTOBUF_NONNULL CachedUser::mutable_user()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::users::v1::CachedUserData* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:users.v1.CachedUser.user)
  return _msg;
}
inline void CachedUser::set_allocated_user(::users::v1::CachedUserData* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.user_ = reinterpret_cast<::users::v1::CachedUserData*>(value);
  // @@protoc_insertion_point(field_set_allocated:users.v1.CachedUser.user)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace users


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // users_2fv1_2fcache_2eproto_2epb_2eh
