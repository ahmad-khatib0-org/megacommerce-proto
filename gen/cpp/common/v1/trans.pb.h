// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/v1/trans.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2fv1_2ftrans_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2fv1_2ftrans_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/v1/error.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2fv1_2ftrans_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2fv1_2ftrans_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fv1_2ftrans_2eproto;
namespace common {
namespace v1 {
class TranslationElement;
struct TranslationElementDefaultTypeInternal;
extern TranslationElementDefaultTypeInternal _TranslationElement_default_instance_;
class TranslationElements;
struct TranslationElementsDefaultTypeInternal;
extern TranslationElementsDefaultTypeInternal _TranslationElements_default_instance_;
class TranslationsForLangGetRequest;
struct TranslationsForLangGetRequestDefaultTypeInternal;
extern TranslationsForLangGetRequestDefaultTypeInternal _TranslationsForLangGetRequest_default_instance_;
class TranslationsForLangGetResponse;
struct TranslationsForLangGetResponseDefaultTypeInternal;
extern TranslationsForLangGetResponseDefaultTypeInternal _TranslationsForLangGetResponse_default_instance_;
class TranslationsGetRequest;
struct TranslationsGetRequestDefaultTypeInternal;
extern TranslationsGetRequestDefaultTypeInternal _TranslationsGetRequest_default_instance_;
class TranslationsGetResponse;
struct TranslationsGetResponseDefaultTypeInternal;
extern TranslationsGetResponseDefaultTypeInternal _TranslationsGetResponse_default_instance_;
class TranslationsGetResponse_DataEntry_DoNotUse;
struct TranslationsGetResponse_DataEntry_DoNotUseDefaultTypeInternal;
extern TranslationsGetResponse_DataEntry_DoNotUseDefaultTypeInternal _TranslationsGetResponse_DataEntry_DoNotUse_default_instance_;
}  // namespace v1
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::v1::TranslationElement* Arena::CreateMaybeMessage<::common::v1::TranslationElement>(Arena*);
template<> ::common::v1::TranslationElements* Arena::CreateMaybeMessage<::common::v1::TranslationElements>(Arena*);
template<> ::common::v1::TranslationsForLangGetRequest* Arena::CreateMaybeMessage<::common::v1::TranslationsForLangGetRequest>(Arena*);
template<> ::common::v1::TranslationsForLangGetResponse* Arena::CreateMaybeMessage<::common::v1::TranslationsForLangGetResponse>(Arena*);
template<> ::common::v1::TranslationsGetRequest* Arena::CreateMaybeMessage<::common::v1::TranslationsGetRequest>(Arena*);
template<> ::common::v1::TranslationsGetResponse* Arena::CreateMaybeMessage<::common::v1::TranslationsGetResponse>(Arena*);
template<> ::common::v1::TranslationsGetResponse_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::common::v1::TranslationsGetResponse_DataEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {
namespace v1 {

// ===================================================================

class TranslationsGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:common.v1.TranslationsGetRequest) */ {
 public:
  inline TranslationsGetRequest() : TranslationsGetRequest(nullptr) {}
  explicit constexpr TranslationsGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TranslationsGetRequest(const TranslationsGetRequest& from);
  TranslationsGetRequest(TranslationsGetRequest&& from) noexcept
    : TranslationsGetRequest() {
    *this = ::std::move(from);
  }

  inline TranslationsGetRequest& operator=(const TranslationsGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TranslationsGetRequest& operator=(TranslationsGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TranslationsGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TranslationsGetRequest* internal_default_instance() {
    return reinterpret_cast<const TranslationsGetRequest*>(
               &_TranslationsGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TranslationsGetRequest& a, TranslationsGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TranslationsGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranslationsGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TranslationsGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TranslationsGetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TranslationsGetRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TranslationsGetRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.TranslationsGetRequest";
  }
  protected:
  explicit TranslationsGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:common.v1.TranslationsGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2ftrans_2eproto;
};
// -------------------------------------------------------------------

class TranslationsGetResponse_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TranslationsGetResponse_DataEntry_DoNotUse, 
    std::string, ::common::v1::TranslationElements,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TranslationsGetResponse_DataEntry_DoNotUse, 
    std::string, ::common::v1::TranslationElements,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TranslationsGetResponse_DataEntry_DoNotUse();
  explicit constexpr TranslationsGetResponse_DataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TranslationsGetResponse_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TranslationsGetResponse_DataEntry_DoNotUse& other);
  static const TranslationsGetResponse_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TranslationsGetResponse_DataEntry_DoNotUse*>(&_TranslationsGetResponse_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "common.v1.TranslationsGetResponse.DataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class TranslationsGetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.TranslationsGetResponse) */ {
 public:
  inline TranslationsGetResponse() : TranslationsGetResponse(nullptr) {}
  ~TranslationsGetResponse() override;
  explicit constexpr TranslationsGetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TranslationsGetResponse(const TranslationsGetResponse& from);
  TranslationsGetResponse(TranslationsGetResponse&& from) noexcept
    : TranslationsGetResponse() {
    *this = ::std::move(from);
  }

  inline TranslationsGetResponse& operator=(const TranslationsGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TranslationsGetResponse& operator=(TranslationsGetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TranslationsGetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TranslationsGetResponse* internal_default_instance() {
    return reinterpret_cast<const TranslationsGetResponse*>(
               &_TranslationsGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TranslationsGetResponse& a, TranslationsGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TranslationsGetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranslationsGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TranslationsGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TranslationsGetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TranslationsGetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TranslationsGetResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TranslationsGetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.TranslationsGetResponse";
  }
  protected:
  explicit TranslationsGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // map<string, .common.v1.TranslationElements> data = 1 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::common::v1::TranslationElements >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::common::v1::TranslationElements >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::common::v1::TranslationElements >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::common::v1::TranslationElements >*
      mutable_data();

  // .common.v1.AppError error = 2 [json_name = "error"];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::common::v1::AppError& error() const;
  PROTOBUF_NODISCARD ::common::v1::AppError* release_error();
  ::common::v1::AppError* mutable_error();
  void set_allocated_error(::common::v1::AppError* error);
  private:
  const ::common::v1::AppError& _internal_error() const;
  ::common::v1::AppError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::common::v1::AppError* error);
  ::common::v1::AppError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:common.v1.TranslationsGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TranslationsGetResponse_DataEntry_DoNotUse,
      std::string, ::common::v1::TranslationElements,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> data_;
  ::common::v1::AppError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2ftrans_2eproto;
};
// -------------------------------------------------------------------

class TranslationsForLangGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.TranslationsForLangGetRequest) */ {
 public:
  inline TranslationsForLangGetRequest() : TranslationsForLangGetRequest(nullptr) {}
  ~TranslationsForLangGetRequest() override;
  explicit constexpr TranslationsForLangGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TranslationsForLangGetRequest(const TranslationsForLangGetRequest& from);
  TranslationsForLangGetRequest(TranslationsForLangGetRequest&& from) noexcept
    : TranslationsForLangGetRequest() {
    *this = ::std::move(from);
  }

  inline TranslationsForLangGetRequest& operator=(const TranslationsForLangGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TranslationsForLangGetRequest& operator=(TranslationsForLangGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TranslationsForLangGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TranslationsForLangGetRequest* internal_default_instance() {
    return reinterpret_cast<const TranslationsForLangGetRequest*>(
               &_TranslationsForLangGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TranslationsForLangGetRequest& a, TranslationsForLangGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TranslationsForLangGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranslationsForLangGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TranslationsForLangGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TranslationsForLangGetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TranslationsForLangGetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TranslationsForLangGetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TranslationsForLangGetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.TranslationsForLangGetRequest";
  }
  protected:
  explicit TranslationsForLangGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLangFieldNumber = 1,
  };
  // string lang = 1 [json_name = "lang"];
  void clear_lang();
  const std::string& lang() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lang(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // @@protoc_insertion_point(class_scope:common.v1.TranslationsForLangGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2ftrans_2eproto;
};
// -------------------------------------------------------------------

class TranslationsForLangGetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.TranslationsForLangGetResponse) */ {
 public:
  inline TranslationsForLangGetResponse() : TranslationsForLangGetResponse(nullptr) {}
  ~TranslationsForLangGetResponse() override;
  explicit constexpr TranslationsForLangGetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TranslationsForLangGetResponse(const TranslationsForLangGetResponse& from);
  TranslationsForLangGetResponse(TranslationsForLangGetResponse&& from) noexcept
    : TranslationsForLangGetResponse() {
    *this = ::std::move(from);
  }

  inline TranslationsForLangGetResponse& operator=(const TranslationsForLangGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TranslationsForLangGetResponse& operator=(TranslationsForLangGetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TranslationsForLangGetResponse& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseCase {
    kData = 1,
    kError = 2,
    RESPONSE_NOT_SET = 0,
  };

  static inline const TranslationsForLangGetResponse* internal_default_instance() {
    return reinterpret_cast<const TranslationsForLangGetResponse*>(
               &_TranslationsForLangGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TranslationsForLangGetResponse& a, TranslationsForLangGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TranslationsForLangGetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranslationsForLangGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TranslationsForLangGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TranslationsForLangGetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TranslationsForLangGetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TranslationsForLangGetResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TranslationsForLangGetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.TranslationsForLangGetResponse";
  }
  protected:
  explicit TranslationsForLangGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // .common.v1.TranslationElements data = 1 [json_name = "data"];
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::common::v1::TranslationElements& data() const;
  PROTOBUF_NODISCARD ::common::v1::TranslationElements* release_data();
  ::common::v1::TranslationElements* mutable_data();
  void set_allocated_data(::common::v1::TranslationElements* data);
  private:
  const ::common::v1::TranslationElements& _internal_data() const;
  ::common::v1::TranslationElements* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::common::v1::TranslationElements* data);
  ::common::v1::TranslationElements* unsafe_arena_release_data();

  // .common.v1.AppError error = 2 [json_name = "error"];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::common::v1::AppError& error() const;
  PROTOBUF_NODISCARD ::common::v1::AppError* release_error();
  ::common::v1::AppError* mutable_error();
  void set_allocated_error(::common::v1::AppError* error);
  private:
  const ::common::v1::AppError& _internal_error() const;
  ::common::v1::AppError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::common::v1::AppError* error);
  ::common::v1::AppError* unsafe_arena_release_error();

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:common.v1.TranslationsForLangGetResponse)
 private:
  class _Internal;
  void set_has_data();
  void set_has_error();

  inline bool has_response() const;
  inline void clear_has_response();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ResponseUnion {
    constexpr ResponseUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::common::v1::TranslationElements* data_;
    ::common::v1::AppError* error_;
  } response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_common_2fv1_2ftrans_2eproto;
};
// -------------------------------------------------------------------

class TranslationElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.TranslationElement) */ {
 public:
  inline TranslationElement() : TranslationElement(nullptr) {}
  ~TranslationElement() override;
  explicit constexpr TranslationElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TranslationElement(const TranslationElement& from);
  TranslationElement(TranslationElement&& from) noexcept
    : TranslationElement() {
    *this = ::std::move(from);
  }

  inline TranslationElement& operator=(const TranslationElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TranslationElement& operator=(TranslationElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TranslationElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const TranslationElement* internal_default_instance() {
    return reinterpret_cast<const TranslationElement*>(
               &_TranslationElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TranslationElement& a, TranslationElement& b) {
    a.Swap(&b);
  }
  inline void Swap(TranslationElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranslationElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TranslationElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TranslationElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TranslationElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TranslationElement& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TranslationElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.TranslationElement";
  }
  protected:
  explicit TranslationElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTrFieldNumber = 2,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string tr = 2 [json_name = "tr"];
  void clear_tr();
  const std::string& tr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tr();
  PROTOBUF_NODISCARD std::string* release_tr();
  void set_allocated_tr(std::string* tr);
  private:
  const std::string& _internal_tr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tr(const std::string& value);
  std::string* _internal_mutable_tr();
  public:

  // @@protoc_insertion_point(class_scope:common.v1.TranslationElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2ftrans_2eproto;
};
// -------------------------------------------------------------------

class TranslationElements final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.TranslationElements) */ {
 public:
  inline TranslationElements() : TranslationElements(nullptr) {}
  ~TranslationElements() override;
  explicit constexpr TranslationElements(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TranslationElements(const TranslationElements& from);
  TranslationElements(TranslationElements&& from) noexcept
    : TranslationElements() {
    *this = ::std::move(from);
  }

  inline TranslationElements& operator=(const TranslationElements& from) {
    CopyFrom(from);
    return *this;
  }
  inline TranslationElements& operator=(TranslationElements&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TranslationElements& default_instance() {
    return *internal_default_instance();
  }
  static inline const TranslationElements* internal_default_instance() {
    return reinterpret_cast<const TranslationElements*>(
               &_TranslationElements_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TranslationElements& a, TranslationElements& b) {
    a.Swap(&b);
  }
  inline void Swap(TranslationElements* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranslationElements* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TranslationElements* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TranslationElements>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TranslationElements& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TranslationElements& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TranslationElements* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.TranslationElements";
  }
  protected:
  explicit TranslationElements(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransFieldNumber = 1,
  };
  // repeated .common.v1.TranslationElement trans = 1 [json_name = "trans"];
  int trans_size() const;
  private:
  int _internal_trans_size() const;
  public:
  void clear_trans();
  ::common::v1::TranslationElement* mutable_trans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::TranslationElement >*
      mutable_trans();
  private:
  const ::common::v1::TranslationElement& _internal_trans(int index) const;
  ::common::v1::TranslationElement* _internal_add_trans();
  public:
  const ::common::v1::TranslationElement& trans(int index) const;
  ::common::v1::TranslationElement* add_trans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::TranslationElement >&
      trans() const;

  // @@protoc_insertion_point(class_scope:common.v1.TranslationElements)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::TranslationElement > trans_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2ftrans_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TranslationsGetRequest

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TranslationsGetResponse

// map<string, .common.v1.TranslationElements> data = 1 [json_name = "data"];
inline int TranslationsGetResponse::_internal_data_size() const {
  return data_.size();
}
inline int TranslationsGetResponse::data_size() const {
  return _internal_data_size();
}
inline void TranslationsGetResponse::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::common::v1::TranslationElements >&
TranslationsGetResponse::_internal_data() const {
  return data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::common::v1::TranslationElements >&
TranslationsGetResponse::data() const {
  // @@protoc_insertion_point(field_map:common.v1.TranslationsGetResponse.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::common::v1::TranslationElements >*
TranslationsGetResponse::_internal_mutable_data() {
  return data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::common::v1::TranslationElements >*
TranslationsGetResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:common.v1.TranslationsGetResponse.data)
  return _internal_mutable_data();
}

// .common.v1.AppError error = 2 [json_name = "error"];
inline bool TranslationsGetResponse::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool TranslationsGetResponse::has_error() const {
  return _internal_has_error();
}
inline const ::common::v1::AppError& TranslationsGetResponse::_internal_error() const {
  const ::common::v1::AppError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::AppError&>(
      ::common::v1::_AppError_default_instance_);
}
inline const ::common::v1::AppError& TranslationsGetResponse::error() const {
  // @@protoc_insertion_point(field_get:common.v1.TranslationsGetResponse.error)
  return _internal_error();
}
inline void TranslationsGetResponse::unsafe_arena_set_allocated_error(
    ::common::v1::AppError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.TranslationsGetResponse.error)
}
inline ::common::v1::AppError* TranslationsGetResponse::release_error() {
  
  ::common::v1::AppError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::AppError* TranslationsGetResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:common.v1.TranslationsGetResponse.error)
  
  ::common::v1::AppError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::common::v1::AppError* TranslationsGetResponse::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::AppError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::common::v1::AppError* TranslationsGetResponse::mutable_error() {
  ::common::v1::AppError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:common.v1.TranslationsGetResponse.error)
  return _msg;
}
inline void TranslationsGetResponse::set_allocated_error(::common::v1::AppError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:common.v1.TranslationsGetResponse.error)
}

// -------------------------------------------------------------------

// TranslationsForLangGetRequest

// string lang = 1 [json_name = "lang"];
inline void TranslationsForLangGetRequest::clear_lang() {
  lang_.ClearToEmpty();
}
inline const std::string& TranslationsForLangGetRequest::lang() const {
  // @@protoc_insertion_point(field_get:common.v1.TranslationsForLangGetRequest.lang)
  return _internal_lang();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TranslationsForLangGetRequest::set_lang(ArgT0&& arg0, ArgT... args) {
 
 lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.TranslationsForLangGetRequest.lang)
}
inline std::string* TranslationsForLangGetRequest::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:common.v1.TranslationsForLangGetRequest.lang)
  return _s;
}
inline const std::string& TranslationsForLangGetRequest::_internal_lang() const {
  return lang_.Get();
}
inline void TranslationsForLangGetRequest::_internal_set_lang(const std::string& value) {
  
  lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TranslationsForLangGetRequest::_internal_mutable_lang() {
  
  return lang_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TranslationsForLangGetRequest::release_lang() {
  // @@protoc_insertion_point(field_release:common.v1.TranslationsForLangGetRequest.lang)
  return lang_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TranslationsForLangGetRequest::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  lang_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lang_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.TranslationsForLangGetRequest.lang)
}

// -------------------------------------------------------------------

// TranslationsForLangGetResponse

// .common.v1.TranslationElements data = 1 [json_name = "data"];
inline bool TranslationsForLangGetResponse::_internal_has_data() const {
  return response_case() == kData;
}
inline bool TranslationsForLangGetResponse::has_data() const {
  return _internal_has_data();
}
inline void TranslationsForLangGetResponse::set_has_data() {
  _oneof_case_[0] = kData;
}
inline void TranslationsForLangGetResponse::clear_data() {
  if (_internal_has_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.data_;
    }
    clear_has_response();
  }
}
inline ::common::v1::TranslationElements* TranslationsForLangGetResponse::release_data() {
  // @@protoc_insertion_point(field_release:common.v1.TranslationsForLangGetResponse.data)
  if (_internal_has_data()) {
    clear_has_response();
      ::common::v1::TranslationElements* temp = response_.data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::v1::TranslationElements& TranslationsForLangGetResponse::_internal_data() const {
  return _internal_has_data()
      ? *response_.data_
      : reinterpret_cast< ::common::v1::TranslationElements&>(::common::v1::_TranslationElements_default_instance_);
}
inline const ::common::v1::TranslationElements& TranslationsForLangGetResponse::data() const {
  // @@protoc_insertion_point(field_get:common.v1.TranslationsForLangGetResponse.data)
  return _internal_data();
}
inline ::common::v1::TranslationElements* TranslationsForLangGetResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:common.v1.TranslationsForLangGetResponse.data)
  if (_internal_has_data()) {
    clear_has_response();
    ::common::v1::TranslationElements* temp = response_.data_;
    response_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TranslationsForLangGetResponse::unsafe_arena_set_allocated_data(::common::v1::TranslationElements* data) {
  clear_response();
  if (data) {
    set_has_data();
    response_.data_ = data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.TranslationsForLangGetResponse.data)
}
inline ::common::v1::TranslationElements* TranslationsForLangGetResponse::_internal_mutable_data() {
  if (!_internal_has_data()) {
    clear_response();
    set_has_data();
    response_.data_ = CreateMaybeMessage< ::common::v1::TranslationElements >(GetArenaForAllocation());
  }
  return response_.data_;
}
inline ::common::v1::TranslationElements* TranslationsForLangGetResponse::mutable_data() {
  ::common::v1::TranslationElements* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:common.v1.TranslationsForLangGetResponse.data)
  return _msg;
}

// .common.v1.AppError error = 2 [json_name = "error"];
inline bool TranslationsForLangGetResponse::_internal_has_error() const {
  return response_case() == kError;
}
inline bool TranslationsForLangGetResponse::has_error() const {
  return _internal_has_error();
}
inline void TranslationsForLangGetResponse::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::common::v1::AppError* TranslationsForLangGetResponse::release_error() {
  // @@protoc_insertion_point(field_release:common.v1.TranslationsForLangGetResponse.error)
  if (_internal_has_error()) {
    clear_has_response();
      ::common::v1::AppError* temp = response_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::v1::AppError& TranslationsForLangGetResponse::_internal_error() const {
  return _internal_has_error()
      ? *response_.error_
      : reinterpret_cast< ::common::v1::AppError&>(::common::v1::_AppError_default_instance_);
}
inline const ::common::v1::AppError& TranslationsForLangGetResponse::error() const {
  // @@protoc_insertion_point(field_get:common.v1.TranslationsForLangGetResponse.error)
  return _internal_error();
}
inline ::common::v1::AppError* TranslationsForLangGetResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:common.v1.TranslationsForLangGetResponse.error)
  if (_internal_has_error()) {
    clear_has_response();
    ::common::v1::AppError* temp = response_.error_;
    response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TranslationsForLangGetResponse::unsafe_arena_set_allocated_error(::common::v1::AppError* error) {
  clear_response();
  if (error) {
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.TranslationsForLangGetResponse.error)
}
inline ::common::v1::AppError* TranslationsForLangGetResponse::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_response();
    set_has_error();
    response_.error_ = CreateMaybeMessage< ::common::v1::AppError >(GetArenaForAllocation());
  }
  return response_.error_;
}
inline ::common::v1::AppError* TranslationsForLangGetResponse::mutable_error() {
  ::common::v1::AppError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:common.v1.TranslationsForLangGetResponse.error)
  return _msg;
}

inline bool TranslationsForLangGetResponse::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void TranslationsForLangGetResponse::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline TranslationsForLangGetResponse::ResponseCase TranslationsForLangGetResponse::response_case() const {
  return TranslationsForLangGetResponse::ResponseCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TranslationElement

// string id = 1 [json_name = "id"];
inline void TranslationElement::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& TranslationElement::id() const {
  // @@protoc_insertion_point(field_get:common.v1.TranslationElement.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TranslationElement::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.TranslationElement.id)
}
inline std::string* TranslationElement::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:common.v1.TranslationElement.id)
  return _s;
}
inline const std::string& TranslationElement::_internal_id() const {
  return id_.Get();
}
inline void TranslationElement::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TranslationElement::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TranslationElement::release_id() {
  // @@protoc_insertion_point(field_release:common.v1.TranslationElement.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TranslationElement::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.TranslationElement.id)
}

// string tr = 2 [json_name = "tr"];
inline void TranslationElement::clear_tr() {
  tr_.ClearToEmpty();
}
inline const std::string& TranslationElement::tr() const {
  // @@protoc_insertion_point(field_get:common.v1.TranslationElement.tr)
  return _internal_tr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TranslationElement::set_tr(ArgT0&& arg0, ArgT... args) {
 
 tr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.TranslationElement.tr)
}
inline std::string* TranslationElement::mutable_tr() {
  std::string* _s = _internal_mutable_tr();
  // @@protoc_insertion_point(field_mutable:common.v1.TranslationElement.tr)
  return _s;
}
inline const std::string& TranslationElement::_internal_tr() const {
  return tr_.Get();
}
inline void TranslationElement::_internal_set_tr(const std::string& value) {
  
  tr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TranslationElement::_internal_mutable_tr() {
  
  return tr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TranslationElement::release_tr() {
  // @@protoc_insertion_point(field_release:common.v1.TranslationElement.tr)
  return tr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TranslationElement::set_allocated_tr(std::string* tr) {
  if (tr != nullptr) {
    
  } else {
    
  }
  tr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.TranslationElement.tr)
}

// -------------------------------------------------------------------

// TranslationElements

// repeated .common.v1.TranslationElement trans = 1 [json_name = "trans"];
inline int TranslationElements::_internal_trans_size() const {
  return trans_.size();
}
inline int TranslationElements::trans_size() const {
  return _internal_trans_size();
}
inline void TranslationElements::clear_trans() {
  trans_.Clear();
}
inline ::common::v1::TranslationElement* TranslationElements::mutable_trans(int index) {
  // @@protoc_insertion_point(field_mutable:common.v1.TranslationElements.trans)
  return trans_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::TranslationElement >*
TranslationElements::mutable_trans() {
  // @@protoc_insertion_point(field_mutable_list:common.v1.TranslationElements.trans)
  return &trans_;
}
inline const ::common::v1::TranslationElement& TranslationElements::_internal_trans(int index) const {
  return trans_.Get(index);
}
inline const ::common::v1::TranslationElement& TranslationElements::trans(int index) const {
  // @@protoc_insertion_point(field_get:common.v1.TranslationElements.trans)
  return _internal_trans(index);
}
inline ::common::v1::TranslationElement* TranslationElements::_internal_add_trans() {
  return trans_.Add();
}
inline ::common::v1::TranslationElement* TranslationElements::add_trans() {
  ::common::v1::TranslationElement* _add = _internal_add_trans();
  // @@protoc_insertion_point(field_add:common.v1.TranslationElements.trans)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::TranslationElement >&
TranslationElements::trans() const {
  // @@protoc_insertion_point(field_list:common.v1.TranslationElements.trans)
  return trans_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace common

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2fv1_2ftrans_2eproto
