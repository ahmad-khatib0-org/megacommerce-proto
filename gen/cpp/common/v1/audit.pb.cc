// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/v1/audit.proto

#include "common/v1/audit.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace common {
namespace v1 {
constexpr AuditRecord::AuditRecord(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_data_(nullptr)
  , actor_(nullptr)
  , meta_(nullptr)
  , error_(nullptr){}
struct AuditRecordDefaultTypeInternal {
  constexpr AuditRecordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuditRecordDefaultTypeInternal() {}
  union {
    AuditRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuditRecordDefaultTypeInternal _AuditRecord_default_instance_;
constexpr AuditEventData::AuditEventData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parameters_(nullptr)
  , prior_state_(nullptr)
  , resulting_state_(nullptr)
  , object_type_(nullptr){}
struct AuditEventDataDefaultTypeInternal {
  constexpr AuditEventDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuditEventDataDefaultTypeInternal() {}
  union {
    AuditEventData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuditEventDataDefaultTypeInternal _AuditEventData_default_instance_;
constexpr AuditEventActor::AuditEventActor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , x_forwarded_for_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AuditEventActorDefaultTypeInternal {
  constexpr AuditEventActorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuditEventActorDefaultTypeInternal() {}
  union {
    AuditEventActor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuditEventActorDefaultTypeInternal _AuditEventActor_default_instance_;
constexpr AuditEventError::AuditEventError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : api_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cluster_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AuditEventErrorDefaultTypeInternal {
  constexpr AuditEventErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuditEventErrorDefaultTypeInternal() {}
  union {
    AuditEventError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuditEventErrorDefaultTypeInternal _AuditEventError_default_instance_;
}  // namespace v1
}  // namespace common
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2fv1_2faudit_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_common_2fv1_2faudit_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2fv1_2faudit_2eproto = nullptr;

const uint32_t TableStruct_common_2fv1_2faudit_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::v1::AuditRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::AuditRecord, event_name_),
  PROTOBUF_FIELD_OFFSET(::common::v1::AuditRecord, status_),
  PROTOBUF_FIELD_OFFSET(::common::v1::AuditRecord, event_data_),
  PROTOBUF_FIELD_OFFSET(::common::v1::AuditRecord, actor_),
  PROTOBUF_FIELD_OFFSET(::common::v1::AuditRecord, meta_),
  PROTOBUF_FIELD_OFFSET(::common::v1::AuditRecord, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::v1::AuditEventData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::AuditEventData, parameters_),
  PROTOBUF_FIELD_OFFSET(::common::v1::AuditEventData, prior_state_),
  PROTOBUF_FIELD_OFFSET(::common::v1::AuditEventData, resulting_state_),
  PROTOBUF_FIELD_OFFSET(::common::v1::AuditEventData, object_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::v1::AuditEventActor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::AuditEventActor, user_id_),
  PROTOBUF_FIELD_OFFSET(::common::v1::AuditEventActor, session_id_),
  PROTOBUF_FIELD_OFFSET(::common::v1::AuditEventActor, client_),
  PROTOBUF_FIELD_OFFSET(::common::v1::AuditEventActor, ip_address_),
  PROTOBUF_FIELD_OFFSET(::common::v1::AuditEventActor, x_forwarded_for_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::v1::AuditEventError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::AuditEventError, api_path_),
  PROTOBUF_FIELD_OFFSET(::common::v1::AuditEventError, cluster_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::common::v1::AuditRecord)},
  { 12, -1, -1, sizeof(::common::v1::AuditEventData)},
  { 22, -1, -1, sizeof(::common::v1::AuditEventActor)},
  { 33, -1, -1, sizeof(::common::v1::AuditEventError)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_AuditRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_AuditEventData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_AuditEventActor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_AuditEventError_default_instance_),
};

const char descriptor_table_protodef_common_2fv1_2faudit_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025common/v1/audit.proto\022\tcommon.v1\032\031goog"
  "le/protobuf/any.proto\"\214\002\n\013AuditRecord\022\035\n"
  "\nevent_name\030\001 \001(\tR\teventName\022\026\n\006status\030\002"
  " \001(\tR\006status\0228\n\nevent_data\030\003 \001(\0132\031.commo"
  "n.v1.AuditEventDataR\teventData\0220\n\005actor\030"
  "\004 \001(\0132\032.common.v1.AuditEventActorR\005actor"
  "\022(\n\004meta\030\005 \001(\0132\024.google.protobuf.AnyR\004me"
  "ta\0220\n\005error\030\006 \001(\0132\032.common.v1.AuditEvent"
  "ErrorR\005error\"\363\001\n\016AuditEventData\0224\n\nparam"
  "eters\030\001 \001(\0132\024.google.protobuf.AnyR\nparam"
  "eters\0225\n\013prior_state\030\002 \001(\0132\024.google.prot"
  "obuf.AnyR\npriorState\022=\n\017resulting_state\030"
  "\003 \001(\0132\024.google.protobuf.AnyR\016resultingSt"
  "ate\0225\n\013object_type\030\004 \001(\0132\024.google.protob"
  "uf.AnyR\nobjectType\"\250\001\n\017AuditEventActor\022\027"
  "\n\007user_id\030\001 \001(\tR\006userId\022\035\n\nsession_id\030\002 "
  "\001(\tR\tsessionId\022\026\n\006client\030\003 \001(\tR\006client\022\035"
  "\n\nip_address\030\004 \001(\tR\tipAddress\022&\n\017x_forwa"
  "rded_for\030\005 \001(\tR\rxForwardedFor\"K\n\017AuditEv"
  "entError\022\031\n\010api_path\030\001 \001(\tR\007apiPath\022\035\n\nc"
  "luster_id\030\002 \001(\tR\tclusterIdB9\n\032org.megaco"
  "mmerce.common.v1B\nAuditProtoZ\014common/v1;"
  "v1\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2fv1_2faudit_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2fv1_2faudit_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fv1_2faudit_2eproto = {
  false, false, 893, descriptor_table_protodef_common_2fv1_2faudit_2eproto, "common/v1/audit.proto", 
  &descriptor_table_common_2fv1_2faudit_2eproto_once, descriptor_table_common_2fv1_2faudit_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_common_2fv1_2faudit_2eproto::offsets,
  file_level_metadata_common_2fv1_2faudit_2eproto, file_level_enum_descriptors_common_2fv1_2faudit_2eproto, file_level_service_descriptors_common_2fv1_2faudit_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_common_2fv1_2faudit_2eproto_getter() {
  return &descriptor_table_common_2fv1_2faudit_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_common_2fv1_2faudit_2eproto(&descriptor_table_common_2fv1_2faudit_2eproto);
namespace common {
namespace v1 {

// ===================================================================

class AuditRecord::_Internal {
 public:
  static const ::common::v1::AuditEventData& event_data(const AuditRecord* msg);
  static const ::common::v1::AuditEventActor& actor(const AuditRecord* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& meta(const AuditRecord* msg);
  static const ::common::v1::AuditEventError& error(const AuditRecord* msg);
};

const ::common::v1::AuditEventData&
AuditRecord::_Internal::event_data(const AuditRecord* msg) {
  return *msg->event_data_;
}
const ::common::v1::AuditEventActor&
AuditRecord::_Internal::actor(const AuditRecord* msg) {
  return *msg->actor_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
AuditRecord::_Internal::meta(const AuditRecord* msg) {
  return *msg->meta_;
}
const ::common::v1::AuditEventError&
AuditRecord::_Internal::error(const AuditRecord* msg) {
  return *msg->error_;
}
void AuditRecord::clear_meta() {
  if (GetArenaForAllocation() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
AuditRecord::AuditRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.AuditRecord)
}
AuditRecord::AuditRecord(const AuditRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    event_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_name().empty()) {
    event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_event_name(), 
      GetArenaForAllocation());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_event_data()) {
    event_data_ = new ::common::v1::AuditEventData(*from.event_data_);
  } else {
    event_data_ = nullptr;
  }
  if (from._internal_has_actor()) {
    actor_ = new ::common::v1::AuditEventActor(*from.actor_);
  } else {
    actor_ = nullptr;
  }
  if (from._internal_has_meta()) {
    meta_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from._internal_has_error()) {
    error_ = new ::common::v1::AuditEventError(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:common.v1.AuditRecord)
}

inline void AuditRecord::SharedCtor() {
event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  event_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&event_data_)) + sizeof(error_));
}

AuditRecord::~AuditRecord() {
  // @@protoc_insertion_point(destructor:common.v1.AuditRecord)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuditRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  event_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete event_data_;
  if (this != internal_default_instance()) delete actor_;
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete error_;
}

void AuditRecord::ArenaDtor(void* object) {
  AuditRecord* _this = reinterpret_cast< AuditRecord* >(object);
  (void)_this;
}
void AuditRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuditRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuditRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.AuditRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_name_.ClearToEmpty();
  status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && event_data_ != nullptr) {
    delete event_data_;
  }
  event_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && actor_ != nullptr) {
    delete actor_;
  }
  actor_ = nullptr;
  if (GetArenaForAllocation() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuditRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string event_name = 1 [json_name = "eventName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_event_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.AuditRecord.event_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.AuditRecord.status"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.AuditEventData event_data = 3 [json_name = "eventData"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.AuditEventActor actor = 4 [json_name = "actor"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_actor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any meta = 5 [json_name = "meta"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.AuditEventError error = 6 [json_name = "error"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuditRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.AuditRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_name = 1 [json_name = "eventName"];
  if (!this->_internal_event_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_name().data(), static_cast<int>(this->_internal_event_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.AuditRecord.event_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_name(), target);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.AuditRecord.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  // .common.v1.AuditEventData event_data = 3 [json_name = "eventData"];
  if (this->_internal_has_event_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::event_data(this), target, stream);
  }

  // .common.v1.AuditEventActor actor = 4 [json_name = "actor"];
  if (this->_internal_has_actor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::actor(this), target, stream);
  }

  // .google.protobuf.Any meta = 5 [json_name = "meta"];
  if (this->_internal_has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::meta(this), target, stream);
  }

  // .common.v1.AuditEventError error = 6 [json_name = "error"];
  if (this->_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.AuditRecord)
  return target;
}

size_t AuditRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.AuditRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event_name = 1 [json_name = "eventName"];
  if (!this->_internal_event_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_name());
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .common.v1.AuditEventData event_data = 3 [json_name = "eventData"];
  if (this->_internal_has_event_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_data_);
  }

  // .common.v1.AuditEventActor actor = 4 [json_name = "actor"];
  if (this->_internal_has_actor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actor_);
  }

  // .google.protobuf.Any meta = 5 [json_name = "meta"];
  if (this->_internal_has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .common.v1.AuditEventError error = 6 [json_name = "error"];
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuditRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuditRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuditRecord::GetClassData() const { return &_class_data_; }

void AuditRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuditRecord *>(to)->MergeFrom(
      static_cast<const AuditRecord &>(from));
}


void AuditRecord::MergeFrom(const AuditRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.AuditRecord)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_event_name().empty()) {
    _internal_set_event_name(from._internal_event_name());
  }
  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_event_data()) {
    _internal_mutable_event_data()->::common::v1::AuditEventData::MergeFrom(from._internal_event_data());
  }
  if (from._internal_has_actor()) {
    _internal_mutable_actor()->::common::v1::AuditEventActor::MergeFrom(from._internal_actor());
  }
  if (from._internal_has_meta()) {
    _internal_mutable_meta()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_meta());
  }
  if (from._internal_has_error()) {
    _internal_mutable_error()->::common::v1::AuditEventError::MergeFrom(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuditRecord::CopyFrom(const AuditRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.AuditRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuditRecord::IsInitialized() const {
  return true;
}

void AuditRecord::InternalSwap(AuditRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &event_name_, lhs_arena,
      &other->event_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, lhs_arena,
      &other->status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuditRecord, error_)
      + sizeof(AuditRecord::error_)
      - PROTOBUF_FIELD_OFFSET(AuditRecord, event_data_)>(
          reinterpret_cast<char*>(&event_data_),
          reinterpret_cast<char*>(&other->event_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuditRecord::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2faudit_2eproto_getter, &descriptor_table_common_2fv1_2faudit_2eproto_once,
      file_level_metadata_common_2fv1_2faudit_2eproto[0]);
}

// ===================================================================

class AuditEventData::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& parameters(const AuditEventData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& prior_state(const AuditEventData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& resulting_state(const AuditEventData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& object_type(const AuditEventData* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
AuditEventData::_Internal::parameters(const AuditEventData* msg) {
  return *msg->parameters_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
AuditEventData::_Internal::prior_state(const AuditEventData* msg) {
  return *msg->prior_state_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
AuditEventData::_Internal::resulting_state(const AuditEventData* msg) {
  return *msg->resulting_state_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
AuditEventData::_Internal::object_type(const AuditEventData* msg) {
  return *msg->object_type_;
}
void AuditEventData::clear_parameters() {
  if (GetArenaForAllocation() == nullptr && parameters_ != nullptr) {
    delete parameters_;
  }
  parameters_ = nullptr;
}
void AuditEventData::clear_prior_state() {
  if (GetArenaForAllocation() == nullptr && prior_state_ != nullptr) {
    delete prior_state_;
  }
  prior_state_ = nullptr;
}
void AuditEventData::clear_resulting_state() {
  if (GetArenaForAllocation() == nullptr && resulting_state_ != nullptr) {
    delete resulting_state_;
  }
  resulting_state_ = nullptr;
}
void AuditEventData::clear_object_type() {
  if (GetArenaForAllocation() == nullptr && object_type_ != nullptr) {
    delete object_type_;
  }
  object_type_ = nullptr;
}
AuditEventData::AuditEventData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.AuditEventData)
}
AuditEventData::AuditEventData(const AuditEventData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parameters()) {
    parameters_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.parameters_);
  } else {
    parameters_ = nullptr;
  }
  if (from._internal_has_prior_state()) {
    prior_state_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.prior_state_);
  } else {
    prior_state_ = nullptr;
  }
  if (from._internal_has_resulting_state()) {
    resulting_state_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.resulting_state_);
  } else {
    resulting_state_ = nullptr;
  }
  if (from._internal_has_object_type()) {
    object_type_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.object_type_);
  } else {
    object_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:common.v1.AuditEventData)
}

inline void AuditEventData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parameters_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&object_type_) -
    reinterpret_cast<char*>(&parameters_)) + sizeof(object_type_));
}

AuditEventData::~AuditEventData() {
  // @@protoc_insertion_point(destructor:common.v1.AuditEventData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuditEventData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parameters_;
  if (this != internal_default_instance()) delete prior_state_;
  if (this != internal_default_instance()) delete resulting_state_;
  if (this != internal_default_instance()) delete object_type_;
}

void AuditEventData::ArenaDtor(void* object) {
  AuditEventData* _this = reinterpret_cast< AuditEventData* >(object);
  (void)_this;
}
void AuditEventData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuditEventData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuditEventData::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.AuditEventData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && parameters_ != nullptr) {
    delete parameters_;
  }
  parameters_ = nullptr;
  if (GetArenaForAllocation() == nullptr && prior_state_ != nullptr) {
    delete prior_state_;
  }
  prior_state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && resulting_state_ != nullptr) {
    delete resulting_state_;
  }
  resulting_state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && object_type_ != nullptr) {
    delete object_type_;
  }
  object_type_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuditEventData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any parameters = 1 [json_name = "parameters"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any prior_state = 2 [json_name = "priorState"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prior_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any resulting_state = 3 [json_name = "resultingState"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_resulting_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any object_type = 4 [json_name = "objectType"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuditEventData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.AuditEventData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any parameters = 1 [json_name = "parameters"];
  if (this->_internal_has_parameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::parameters(this), target, stream);
  }

  // .google.protobuf.Any prior_state = 2 [json_name = "priorState"];
  if (this->_internal_has_prior_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::prior_state(this), target, stream);
  }

  // .google.protobuf.Any resulting_state = 3 [json_name = "resultingState"];
  if (this->_internal_has_resulting_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::resulting_state(this), target, stream);
  }

  // .google.protobuf.Any object_type = 4 [json_name = "objectType"];
  if (this->_internal_has_object_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::object_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.AuditEventData)
  return target;
}

size_t AuditEventData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.AuditEventData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any parameters = 1 [json_name = "parameters"];
  if (this->_internal_has_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parameters_);
  }

  // .google.protobuf.Any prior_state = 2 [json_name = "priorState"];
  if (this->_internal_has_prior_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prior_state_);
  }

  // .google.protobuf.Any resulting_state = 3 [json_name = "resultingState"];
  if (this->_internal_has_resulting_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resulting_state_);
  }

  // .google.protobuf.Any object_type = 4 [json_name = "objectType"];
  if (this->_internal_has_object_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_type_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuditEventData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuditEventData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuditEventData::GetClassData() const { return &_class_data_; }

void AuditEventData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuditEventData *>(to)->MergeFrom(
      static_cast<const AuditEventData &>(from));
}


void AuditEventData::MergeFrom(const AuditEventData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.AuditEventData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_parameters()) {
    _internal_mutable_parameters()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_parameters());
  }
  if (from._internal_has_prior_state()) {
    _internal_mutable_prior_state()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_prior_state());
  }
  if (from._internal_has_resulting_state()) {
    _internal_mutable_resulting_state()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_resulting_state());
  }
  if (from._internal_has_object_type()) {
    _internal_mutable_object_type()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_object_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuditEventData::CopyFrom(const AuditEventData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.AuditEventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuditEventData::IsInitialized() const {
  return true;
}

void AuditEventData::InternalSwap(AuditEventData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuditEventData, object_type_)
      + sizeof(AuditEventData::object_type_)
      - PROTOBUF_FIELD_OFFSET(AuditEventData, parameters_)>(
          reinterpret_cast<char*>(&parameters_),
          reinterpret_cast<char*>(&other->parameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuditEventData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2faudit_2eproto_getter, &descriptor_table_common_2fv1_2faudit_2eproto_once,
      file_level_metadata_common_2fv1_2faudit_2eproto[1]);
}

// ===================================================================

class AuditEventActor::_Internal {
 public:
};

AuditEventActor::AuditEventActor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.AuditEventActor)
}
AuditEventActor::AuditEventActor(const AuditEventActor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArenaForAllocation());
  }
  client_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client().empty()) {
    client_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client(), 
      GetArenaForAllocation());
  }
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_address().empty()) {
    ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip_address(), 
      GetArenaForAllocation());
  }
  x_forwarded_for_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    x_forwarded_for_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_x_forwarded_for().empty()) {
    x_forwarded_for_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_x_forwarded_for(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:common.v1.AuditEventActor)
}

inline void AuditEventActor::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
x_forwarded_for_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  x_forwarded_for_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuditEventActor::~AuditEventActor() {
  // @@protoc_insertion_point(destructor:common.v1.AuditEventActor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuditEventActor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  x_forwarded_for_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuditEventActor::ArenaDtor(void* object) {
  AuditEventActor* _this = reinterpret_cast< AuditEventActor* >(object);
  (void)_this;
}
void AuditEventActor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuditEventActor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuditEventActor::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.AuditEventActor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  session_id_.ClearToEmpty();
  client_.ClearToEmpty();
  ip_address_.ClearToEmpty();
  x_forwarded_for_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuditEventActor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1 [json_name = "userId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.AuditEventActor.user_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session_id = 2 [json_name = "sessionId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.AuditEventActor.session_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string client = 3 [json_name = "client"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_client();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.AuditEventActor.client"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip_address = 4 [json_name = "ipAddress"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.AuditEventActor.ip_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string x_forwarded_for = 5 [json_name = "xForwardedFor"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_x_forwarded_for();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.AuditEventActor.x_forwarded_for"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuditEventActor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.AuditEventActor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.AuditEventActor.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string session_id = 2 [json_name = "sessionId"];
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.AuditEventActor.session_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_id(), target);
  }

  // string client = 3 [json_name = "client"];
  if (!this->_internal_client().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client().data(), static_cast<int>(this->_internal_client().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.AuditEventActor.client");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_client(), target);
  }

  // string ip_address = 4 [json_name = "ipAddress"];
  if (!this->_internal_ip_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.AuditEventActor.ip_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ip_address(), target);
  }

  // string x_forwarded_for = 5 [json_name = "xForwardedFor"];
  if (!this->_internal_x_forwarded_for().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_x_forwarded_for().data(), static_cast<int>(this->_internal_x_forwarded_for().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.AuditEventActor.x_forwarded_for");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_x_forwarded_for(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.AuditEventActor)
  return target;
}

size_t AuditEventActor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.AuditEventActor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string session_id = 2 [json_name = "sessionId"];
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string client = 3 [json_name = "client"];
  if (!this->_internal_client().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client());
  }

  // string ip_address = 4 [json_name = "ipAddress"];
  if (!this->_internal_ip_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // string x_forwarded_for = 5 [json_name = "xForwardedFor"];
  if (!this->_internal_x_forwarded_for().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_x_forwarded_for());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuditEventActor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuditEventActor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuditEventActor::GetClassData() const { return &_class_data_; }

void AuditEventActor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuditEventActor *>(to)->MergeFrom(
      static_cast<const AuditEventActor &>(from));
}


void AuditEventActor::MergeFrom(const AuditEventActor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.AuditEventActor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_session_id().empty()) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_client().empty()) {
    _internal_set_client(from._internal_client());
  }
  if (!from._internal_ip_address().empty()) {
    _internal_set_ip_address(from._internal_ip_address());
  }
  if (!from._internal_x_forwarded_for().empty()) {
    _internal_set_x_forwarded_for(from._internal_x_forwarded_for());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuditEventActor::CopyFrom(const AuditEventActor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.AuditEventActor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuditEventActor::IsInitialized() const {
  return true;
}

void AuditEventActor::InternalSwap(AuditEventActor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &client_, lhs_arena,
      &other->client_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_address_, lhs_arena,
      &other->ip_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &x_forwarded_for_, lhs_arena,
      &other->x_forwarded_for_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AuditEventActor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2faudit_2eproto_getter, &descriptor_table_common_2fv1_2faudit_2eproto_once,
      file_level_metadata_common_2fv1_2faudit_2eproto[2]);
}

// ===================================================================

class AuditEventError::_Internal {
 public:
};

AuditEventError::AuditEventError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.AuditEventError)
}
AuditEventError::AuditEventError(const AuditEventError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  api_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    api_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_api_path().empty()) {
    api_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_api_path(), 
      GetArenaForAllocation());
  }
  cluster_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cluster_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cluster_id().empty()) {
    cluster_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cluster_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:common.v1.AuditEventError)
}

inline void AuditEventError::SharedCtor() {
api_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  api_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cluster_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cluster_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuditEventError::~AuditEventError() {
  // @@protoc_insertion_point(destructor:common.v1.AuditEventError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuditEventError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  api_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuditEventError::ArenaDtor(void* object) {
  AuditEventError* _this = reinterpret_cast< AuditEventError* >(object);
  (void)_this;
}
void AuditEventError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuditEventError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuditEventError::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.AuditEventError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  api_path_.ClearToEmpty();
  cluster_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuditEventError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string api_path = 1 [json_name = "apiPath"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_api_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.AuditEventError.api_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cluster_id = 2 [json_name = "clusterId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cluster_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.AuditEventError.cluster_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuditEventError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.AuditEventError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string api_path = 1 [json_name = "apiPath"];
  if (!this->_internal_api_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_api_path().data(), static_cast<int>(this->_internal_api_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.AuditEventError.api_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_api_path(), target);
  }

  // string cluster_id = 2 [json_name = "clusterId"];
  if (!this->_internal_cluster_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cluster_id().data(), static_cast<int>(this->_internal_cluster_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.AuditEventError.cluster_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cluster_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.AuditEventError)
  return target;
}

size_t AuditEventError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.AuditEventError)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string api_path = 1 [json_name = "apiPath"];
  if (!this->_internal_api_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_api_path());
  }

  // string cluster_id = 2 [json_name = "clusterId"];
  if (!this->_internal_cluster_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cluster_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuditEventError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuditEventError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuditEventError::GetClassData() const { return &_class_data_; }

void AuditEventError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuditEventError *>(to)->MergeFrom(
      static_cast<const AuditEventError &>(from));
}


void AuditEventError::MergeFrom(const AuditEventError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.AuditEventError)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_api_path().empty()) {
    _internal_set_api_path(from._internal_api_path());
  }
  if (!from._internal_cluster_id().empty()) {
    _internal_set_cluster_id(from._internal_cluster_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuditEventError::CopyFrom(const AuditEventError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.AuditEventError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuditEventError::IsInitialized() const {
  return true;
}

void AuditEventError::InternalSwap(AuditEventError* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &api_path_, lhs_arena,
      &other->api_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cluster_id_, lhs_arena,
      &other->cluster_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AuditEventError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2faudit_2eproto_getter, &descriptor_table_common_2fv1_2faudit_2eproto_once,
      file_level_metadata_common_2fv1_2faudit_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::common::v1::AuditRecord* Arena::CreateMaybeMessage< ::common::v1::AuditRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::AuditRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::AuditEventData* Arena::CreateMaybeMessage< ::common::v1::AuditEventData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::AuditEventData >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::AuditEventActor* Arena::CreateMaybeMessage< ::common::v1::AuditEventActor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::AuditEventActor >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::AuditEventError* Arena::CreateMaybeMessage< ::common::v1::AuditEventError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::AuditEventError >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
