// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/v1/audit.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2fv1_2faudit_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2fv1_2faudit_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2fv1_2faudit_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2fv1_2faudit_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fv1_2faudit_2eproto;
namespace common {
namespace v1 {
class AuditEventActor;
struct AuditEventActorDefaultTypeInternal;
extern AuditEventActorDefaultTypeInternal _AuditEventActor_default_instance_;
class AuditEventData;
struct AuditEventDataDefaultTypeInternal;
extern AuditEventDataDefaultTypeInternal _AuditEventData_default_instance_;
class AuditEventError;
struct AuditEventErrorDefaultTypeInternal;
extern AuditEventErrorDefaultTypeInternal _AuditEventError_default_instance_;
class AuditRecord;
struct AuditRecordDefaultTypeInternal;
extern AuditRecordDefaultTypeInternal _AuditRecord_default_instance_;
class AuditRecordMeta;
struct AuditRecordMetaDefaultTypeInternal;
extern AuditRecordMetaDefaultTypeInternal _AuditRecordMeta_default_instance_;
}  // namespace v1
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::v1::AuditEventActor* Arena::CreateMaybeMessage<::common::v1::AuditEventActor>(Arena*);
template<> ::common::v1::AuditEventData* Arena::CreateMaybeMessage<::common::v1::AuditEventData>(Arena*);
template<> ::common::v1::AuditEventError* Arena::CreateMaybeMessage<::common::v1::AuditEventError>(Arena*);
template<> ::common::v1::AuditRecord* Arena::CreateMaybeMessage<::common::v1::AuditRecord>(Arena*);
template<> ::common::v1::AuditRecordMeta* Arena::CreateMaybeMessage<::common::v1::AuditRecordMeta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {
namespace v1 {

// ===================================================================

class AuditRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.AuditRecord) */ {
 public:
  inline AuditRecord() : AuditRecord(nullptr) {}
  ~AuditRecord() override;
  explicit constexpr AuditRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuditRecord(const AuditRecord& from);
  AuditRecord(AuditRecord&& from) noexcept
    : AuditRecord() {
    *this = ::std::move(from);
  }

  inline AuditRecord& operator=(const AuditRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuditRecord& operator=(AuditRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuditRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuditRecord* internal_default_instance() {
    return reinterpret_cast<const AuditRecord*>(
               &_AuditRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AuditRecord& a, AuditRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(AuditRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuditRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuditRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuditRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuditRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuditRecord& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuditRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.AuditRecord";
  }
  protected:
  explicit AuditRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventNameFieldNumber = 1,
    kStatusFieldNumber = 2,
    kEventDataFieldNumber = 3,
    kActorFieldNumber = 4,
    kMetaFieldNumber = 5,
    kErrorFieldNumber = 6,
  };
  // string event_name = 1 [json_name = "eventName"];
  void clear_event_name();
  const std::string& event_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_name();
  PROTOBUF_NODISCARD std::string* release_event_name();
  void set_allocated_event_name(std::string* event_name);
  private:
  const std::string& _internal_event_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_name(const std::string& value);
  std::string* _internal_mutable_event_name();
  public:

  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .common.v1.AuditEventData event_data = 3 [json_name = "eventData"];
  bool has_event_data() const;
  private:
  bool _internal_has_event_data() const;
  public:
  void clear_event_data();
  const ::common::v1::AuditEventData& event_data() const;
  PROTOBUF_NODISCARD ::common::v1::AuditEventData* release_event_data();
  ::common::v1::AuditEventData* mutable_event_data();
  void set_allocated_event_data(::common::v1::AuditEventData* event_data);
  private:
  const ::common::v1::AuditEventData& _internal_event_data() const;
  ::common::v1::AuditEventData* _internal_mutable_event_data();
  public:
  void unsafe_arena_set_allocated_event_data(
      ::common::v1::AuditEventData* event_data);
  ::common::v1::AuditEventData* unsafe_arena_release_event_data();

  // .common.v1.AuditEventActor actor = 4 [json_name = "actor"];
  bool has_actor() const;
  private:
  bool _internal_has_actor() const;
  public:
  void clear_actor();
  const ::common::v1::AuditEventActor& actor() const;
  PROTOBUF_NODISCARD ::common::v1::AuditEventActor* release_actor();
  ::common::v1::AuditEventActor* mutable_actor();
  void set_allocated_actor(::common::v1::AuditEventActor* actor);
  private:
  const ::common::v1::AuditEventActor& _internal_actor() const;
  ::common::v1::AuditEventActor* _internal_mutable_actor();
  public:
  void unsafe_arena_set_allocated_actor(
      ::common::v1::AuditEventActor* actor);
  ::common::v1::AuditEventActor* unsafe_arena_release_actor();

  // .common.v1.AuditRecordMeta meta = 5 [json_name = "meta"];
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::common::v1::AuditRecordMeta& meta() const;
  PROTOBUF_NODISCARD ::common::v1::AuditRecordMeta* release_meta();
  ::common::v1::AuditRecordMeta* mutable_meta();
  void set_allocated_meta(::common::v1::AuditRecordMeta* meta);
  private:
  const ::common::v1::AuditRecordMeta& _internal_meta() const;
  ::common::v1::AuditRecordMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::common::v1::AuditRecordMeta* meta);
  ::common::v1::AuditRecordMeta* unsafe_arena_release_meta();

  // .common.v1.AuditEventError error = 6 [json_name = "error"];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::common::v1::AuditEventError& error() const;
  PROTOBUF_NODISCARD ::common::v1::AuditEventError* release_error();
  ::common::v1::AuditEventError* mutable_error();
  void set_allocated_error(::common::v1::AuditEventError* error);
  private:
  const ::common::v1::AuditEventError& _internal_error() const;
  ::common::v1::AuditEventError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::common::v1::AuditEventError* error);
  ::common::v1::AuditEventError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:common.v1.AuditRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::common::v1::AuditEventData* event_data_;
  ::common::v1::AuditEventActor* actor_;
  ::common::v1::AuditRecordMeta* meta_;
  ::common::v1::AuditEventError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2faudit_2eproto;
};
// -------------------------------------------------------------------

class AuditEventData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.AuditEventData) */ {
 public:
  inline AuditEventData() : AuditEventData(nullptr) {}
  ~AuditEventData() override;
  explicit constexpr AuditEventData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuditEventData(const AuditEventData& from);
  AuditEventData(AuditEventData&& from) noexcept
    : AuditEventData() {
    *this = ::std::move(from);
  }

  inline AuditEventData& operator=(const AuditEventData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuditEventData& operator=(AuditEventData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuditEventData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuditEventData* internal_default_instance() {
    return reinterpret_cast<const AuditEventData*>(
               &_AuditEventData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AuditEventData& a, AuditEventData& b) {
    a.Swap(&b);
  }
  inline void Swap(AuditEventData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuditEventData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuditEventData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuditEventData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuditEventData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuditEventData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuditEventData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.AuditEventData";
  }
  protected:
  explicit AuditEventData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 1,
    kPriorStateFieldNumber = 2,
    kResultingStateFieldNumber = 3,
    kObjectTypeFieldNumber = 4,
  };
  // .google.protobuf.Any parameters = 1 [json_name = "parameters"];
  bool has_parameters() const;
  private:
  bool _internal_has_parameters() const;
  public:
  void clear_parameters();
  const ::PROTOBUF_NAMESPACE_ID::Any& parameters() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_parameters();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_parameters();
  void set_allocated_parameters(::PROTOBUF_NAMESPACE_ID::Any* parameters);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_parameters();
  public:
  void unsafe_arena_set_allocated_parameters(
      ::PROTOBUF_NAMESPACE_ID::Any* parameters);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_parameters();

  // .google.protobuf.Any prior_state = 2 [json_name = "priorState"];
  bool has_prior_state() const;
  private:
  bool _internal_has_prior_state() const;
  public:
  void clear_prior_state();
  const ::PROTOBUF_NAMESPACE_ID::Any& prior_state() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_prior_state();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_prior_state();
  void set_allocated_prior_state(::PROTOBUF_NAMESPACE_ID::Any* prior_state);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_prior_state() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_prior_state();
  public:
  void unsafe_arena_set_allocated_prior_state(
      ::PROTOBUF_NAMESPACE_ID::Any* prior_state);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_prior_state();

  // .google.protobuf.Any resulting_state = 3 [json_name = "resultingState"];
  bool has_resulting_state() const;
  private:
  bool _internal_has_resulting_state() const;
  public:
  void clear_resulting_state();
  const ::PROTOBUF_NAMESPACE_ID::Any& resulting_state() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_resulting_state();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_resulting_state();
  void set_allocated_resulting_state(::PROTOBUF_NAMESPACE_ID::Any* resulting_state);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_resulting_state() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_resulting_state();
  public:
  void unsafe_arena_set_allocated_resulting_state(
      ::PROTOBUF_NAMESPACE_ID::Any* resulting_state);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_resulting_state();

  // .google.protobuf.Any object_type = 4 [json_name = "objectType"];
  bool has_object_type() const;
  private:
  bool _internal_has_object_type() const;
  public:
  void clear_object_type();
  const ::PROTOBUF_NAMESPACE_ID::Any& object_type() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_object_type();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_object_type();
  void set_allocated_object_type(::PROTOBUF_NAMESPACE_ID::Any* object_type);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_object_type() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_object_type();
  public:
  void unsafe_arena_set_allocated_object_type(
      ::PROTOBUF_NAMESPACE_ID::Any* object_type);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_object_type();

  // @@protoc_insertion_point(class_scope:common.v1.AuditEventData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Any* parameters_;
  ::PROTOBUF_NAMESPACE_ID::Any* prior_state_;
  ::PROTOBUF_NAMESPACE_ID::Any* resulting_state_;
  ::PROTOBUF_NAMESPACE_ID::Any* object_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2faudit_2eproto;
};
// -------------------------------------------------------------------

class AuditEventActor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.AuditEventActor) */ {
 public:
  inline AuditEventActor() : AuditEventActor(nullptr) {}
  ~AuditEventActor() override;
  explicit constexpr AuditEventActor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuditEventActor(const AuditEventActor& from);
  AuditEventActor(AuditEventActor&& from) noexcept
    : AuditEventActor() {
    *this = ::std::move(from);
  }

  inline AuditEventActor& operator=(const AuditEventActor& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuditEventActor& operator=(AuditEventActor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuditEventActor& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuditEventActor* internal_default_instance() {
    return reinterpret_cast<const AuditEventActor*>(
               &_AuditEventActor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AuditEventActor& a, AuditEventActor& b) {
    a.Swap(&b);
  }
  inline void Swap(AuditEventActor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuditEventActor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuditEventActor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuditEventActor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuditEventActor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuditEventActor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuditEventActor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.AuditEventActor";
  }
  protected:
  explicit AuditEventActor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kClientFieldNumber = 3,
    kIpAddressFieldNumber = 4,
    kXForwardedForFieldNumber = 5,
  };
  // string user_id = 1 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string session_id = 2 [json_name = "sessionId"];
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string client = 3 [json_name = "client"];
  void clear_client();
  const std::string& client() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client();
  PROTOBUF_NODISCARD std::string* release_client();
  void set_allocated_client(std::string* client);
  private:
  const std::string& _internal_client() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client(const std::string& value);
  std::string* _internal_mutable_client();
  public:

  // string ip_address = 4 [json_name = "ipAddress"];
  void clear_ip_address();
  const std::string& ip_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip_address();
  PROTOBUF_NODISCARD std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // string x_forwarded_for = 5 [json_name = "xForwardedFor"];
  void clear_x_forwarded_for();
  const std::string& x_forwarded_for() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_x_forwarded_for(ArgT0&& arg0, ArgT... args);
  std::string* mutable_x_forwarded_for();
  PROTOBUF_NODISCARD std::string* release_x_forwarded_for();
  void set_allocated_x_forwarded_for(std::string* x_forwarded_for);
  private:
  const std::string& _internal_x_forwarded_for() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x_forwarded_for(const std::string& value);
  std::string* _internal_mutable_x_forwarded_for();
  public:

  // @@protoc_insertion_point(class_scope:common.v1.AuditEventActor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_forwarded_for_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2faudit_2eproto;
};
// -------------------------------------------------------------------

class AuditRecordMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.AuditRecordMeta) */ {
 public:
  inline AuditRecordMeta() : AuditRecordMeta(nullptr) {}
  ~AuditRecordMeta() override;
  explicit constexpr AuditRecordMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuditRecordMeta(const AuditRecordMeta& from);
  AuditRecordMeta(AuditRecordMeta&& from) noexcept
    : AuditRecordMeta() {
    *this = ::std::move(from);
  }

  inline AuditRecordMeta& operator=(const AuditRecordMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuditRecordMeta& operator=(AuditRecordMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuditRecordMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuditRecordMeta* internal_default_instance() {
    return reinterpret_cast<const AuditRecordMeta*>(
               &_AuditRecordMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AuditRecordMeta& a, AuditRecordMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(AuditRecordMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuditRecordMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuditRecordMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuditRecordMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuditRecordMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuditRecordMeta& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuditRecordMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.AuditRecordMeta";
  }
  protected:
  explicit AuditRecordMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1 [json_name = "path"];
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:common.v1.AuditRecordMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2faudit_2eproto;
};
// -------------------------------------------------------------------

class AuditEventError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.AuditEventError) */ {
 public:
  inline AuditEventError() : AuditEventError(nullptr) {}
  ~AuditEventError() override;
  explicit constexpr AuditEventError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuditEventError(const AuditEventError& from);
  AuditEventError(AuditEventError&& from) noexcept
    : AuditEventError() {
    *this = ::std::move(from);
  }

  inline AuditEventError& operator=(const AuditEventError& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuditEventError& operator=(AuditEventError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuditEventError& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuditEventError* internal_default_instance() {
    return reinterpret_cast<const AuditEventError*>(
               &_AuditEventError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AuditEventError& a, AuditEventError& b) {
    a.Swap(&b);
  }
  inline void Swap(AuditEventError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuditEventError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuditEventError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuditEventError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuditEventError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuditEventError& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuditEventError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.AuditEventError";
  }
  protected:
  explicit AuditEventError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApiPathFieldNumber = 1,
    kClusterIdFieldNumber = 2,
  };
  // string api_path = 1 [json_name = "apiPath"];
  void clear_api_path();
  const std::string& api_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_api_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_api_path();
  PROTOBUF_NODISCARD std::string* release_api_path();
  void set_allocated_api_path(std::string* api_path);
  private:
  const std::string& _internal_api_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_api_path(const std::string& value);
  std::string* _internal_mutable_api_path();
  public:

  // string cluster_id = 2 [json_name = "clusterId"];
  void clear_cluster_id();
  const std::string& cluster_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cluster_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cluster_id();
  PROTOBUF_NODISCARD std::string* release_cluster_id();
  void set_allocated_cluster_id(std::string* cluster_id);
  private:
  const std::string& _internal_cluster_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cluster_id(const std::string& value);
  std::string* _internal_mutable_cluster_id();
  public:

  // @@protoc_insertion_point(class_scope:common.v1.AuditEventError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cluster_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2faudit_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuditRecord

// string event_name = 1 [json_name = "eventName"];
inline void AuditRecord::clear_event_name() {
  event_name_.ClearToEmpty();
}
inline const std::string& AuditRecord::event_name() const {
  // @@protoc_insertion_point(field_get:common.v1.AuditRecord.event_name)
  return _internal_event_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuditRecord::set_event_name(ArgT0&& arg0, ArgT... args) {
 
 event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.AuditRecord.event_name)
}
inline std::string* AuditRecord::mutable_event_name() {
  std::string* _s = _internal_mutable_event_name();
  // @@protoc_insertion_point(field_mutable:common.v1.AuditRecord.event_name)
  return _s;
}
inline const std::string& AuditRecord::_internal_event_name() const {
  return event_name_.Get();
}
inline void AuditRecord::_internal_set_event_name(const std::string& value) {
  
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuditRecord::_internal_mutable_event_name() {
  
  return event_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuditRecord::release_event_name() {
  // @@protoc_insertion_point(field_release:common.v1.AuditRecord.event_name)
  return event_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuditRecord::set_allocated_event_name(std::string* event_name) {
  if (event_name != nullptr) {
    
  } else {
    
  }
  event_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (event_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    event_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.AuditRecord.event_name)
}

// string status = 2 [json_name = "status"];
inline void AuditRecord::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& AuditRecord::status() const {
  // @@protoc_insertion_point(field_get:common.v1.AuditRecord.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuditRecord::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.AuditRecord.status)
}
inline std::string* AuditRecord::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:common.v1.AuditRecord.status)
  return _s;
}
inline const std::string& AuditRecord::_internal_status() const {
  return status_.Get();
}
inline void AuditRecord::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuditRecord::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuditRecord::release_status() {
  // @@protoc_insertion_point(field_release:common.v1.AuditRecord.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuditRecord::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.AuditRecord.status)
}

// .common.v1.AuditEventData event_data = 3 [json_name = "eventData"];
inline bool AuditRecord::_internal_has_event_data() const {
  return this != internal_default_instance() && event_data_ != nullptr;
}
inline bool AuditRecord::has_event_data() const {
  return _internal_has_event_data();
}
inline void AuditRecord::clear_event_data() {
  if (GetArenaForAllocation() == nullptr && event_data_ != nullptr) {
    delete event_data_;
  }
  event_data_ = nullptr;
}
inline const ::common::v1::AuditEventData& AuditRecord::_internal_event_data() const {
  const ::common::v1::AuditEventData* p = event_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::AuditEventData&>(
      ::common::v1::_AuditEventData_default_instance_);
}
inline const ::common::v1::AuditEventData& AuditRecord::event_data() const {
  // @@protoc_insertion_point(field_get:common.v1.AuditRecord.event_data)
  return _internal_event_data();
}
inline void AuditRecord::unsafe_arena_set_allocated_event_data(
    ::common::v1::AuditEventData* event_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_data_);
  }
  event_data_ = event_data;
  if (event_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.AuditRecord.event_data)
}
inline ::common::v1::AuditEventData* AuditRecord::release_event_data() {
  
  ::common::v1::AuditEventData* temp = event_data_;
  event_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::AuditEventData* AuditRecord::unsafe_arena_release_event_data() {
  // @@protoc_insertion_point(field_release:common.v1.AuditRecord.event_data)
  
  ::common::v1::AuditEventData* temp = event_data_;
  event_data_ = nullptr;
  return temp;
}
inline ::common::v1::AuditEventData* AuditRecord::_internal_mutable_event_data() {
  
  if (event_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::AuditEventData>(GetArenaForAllocation());
    event_data_ = p;
  }
  return event_data_;
}
inline ::common::v1::AuditEventData* AuditRecord::mutable_event_data() {
  ::common::v1::AuditEventData* _msg = _internal_mutable_event_data();
  // @@protoc_insertion_point(field_mutable:common.v1.AuditRecord.event_data)
  return _msg;
}
inline void AuditRecord::set_allocated_event_data(::common::v1::AuditEventData* event_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete event_data_;
  }
  if (event_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::common::v1::AuditEventData>::GetOwningArena(event_data);
    if (message_arena != submessage_arena) {
      event_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_data, submessage_arena);
    }
    
  } else {
    
  }
  event_data_ = event_data;
  // @@protoc_insertion_point(field_set_allocated:common.v1.AuditRecord.event_data)
}

// .common.v1.AuditEventActor actor = 4 [json_name = "actor"];
inline bool AuditRecord::_internal_has_actor() const {
  return this != internal_default_instance() && actor_ != nullptr;
}
inline bool AuditRecord::has_actor() const {
  return _internal_has_actor();
}
inline void AuditRecord::clear_actor() {
  if (GetArenaForAllocation() == nullptr && actor_ != nullptr) {
    delete actor_;
  }
  actor_ = nullptr;
}
inline const ::common::v1::AuditEventActor& AuditRecord::_internal_actor() const {
  const ::common::v1::AuditEventActor* p = actor_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::AuditEventActor&>(
      ::common::v1::_AuditEventActor_default_instance_);
}
inline const ::common::v1::AuditEventActor& AuditRecord::actor() const {
  // @@protoc_insertion_point(field_get:common.v1.AuditRecord.actor)
  return _internal_actor();
}
inline void AuditRecord::unsafe_arena_set_allocated_actor(
    ::common::v1::AuditEventActor* actor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_);
  }
  actor_ = actor;
  if (actor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.AuditRecord.actor)
}
inline ::common::v1::AuditEventActor* AuditRecord::release_actor() {
  
  ::common::v1::AuditEventActor* temp = actor_;
  actor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::AuditEventActor* AuditRecord::unsafe_arena_release_actor() {
  // @@protoc_insertion_point(field_release:common.v1.AuditRecord.actor)
  
  ::common::v1::AuditEventActor* temp = actor_;
  actor_ = nullptr;
  return temp;
}
inline ::common::v1::AuditEventActor* AuditRecord::_internal_mutable_actor() {
  
  if (actor_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::AuditEventActor>(GetArenaForAllocation());
    actor_ = p;
  }
  return actor_;
}
inline ::common::v1::AuditEventActor* AuditRecord::mutable_actor() {
  ::common::v1::AuditEventActor* _msg = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:common.v1.AuditRecord.actor)
  return _msg;
}
inline void AuditRecord::set_allocated_actor(::common::v1::AuditEventActor* actor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete actor_;
  }
  if (actor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::common::v1::AuditEventActor>::GetOwningArena(actor);
    if (message_arena != submessage_arena) {
      actor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actor, submessage_arena);
    }
    
  } else {
    
  }
  actor_ = actor;
  // @@protoc_insertion_point(field_set_allocated:common.v1.AuditRecord.actor)
}

// .common.v1.AuditRecordMeta meta = 5 [json_name = "meta"];
inline bool AuditRecord::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool AuditRecord::has_meta() const {
  return _internal_has_meta();
}
inline void AuditRecord::clear_meta() {
  if (GetArenaForAllocation() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
inline const ::common::v1::AuditRecordMeta& AuditRecord::_internal_meta() const {
  const ::common::v1::AuditRecordMeta* p = meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::AuditRecordMeta&>(
      ::common::v1::_AuditRecordMeta_default_instance_);
}
inline const ::common::v1::AuditRecordMeta& AuditRecord::meta() const {
  // @@protoc_insertion_point(field_get:common.v1.AuditRecord.meta)
  return _internal_meta();
}
inline void AuditRecord::unsafe_arena_set_allocated_meta(
    ::common::v1::AuditRecordMeta* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.AuditRecord.meta)
}
inline ::common::v1::AuditRecordMeta* AuditRecord::release_meta() {
  
  ::common::v1::AuditRecordMeta* temp = meta_;
  meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::AuditRecordMeta* AuditRecord::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:common.v1.AuditRecord.meta)
  
  ::common::v1::AuditRecordMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::common::v1::AuditRecordMeta* AuditRecord::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::AuditRecordMeta>(GetArenaForAllocation());
    meta_ = p;
  }
  return meta_;
}
inline ::common::v1::AuditRecordMeta* AuditRecord::mutable_meta() {
  ::common::v1::AuditRecordMeta* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:common.v1.AuditRecord.meta)
  return _msg;
}
inline void AuditRecord::set_allocated_meta(::common::v1::AuditRecordMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::common::v1::AuditRecordMeta>::GetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:common.v1.AuditRecord.meta)
}

// .common.v1.AuditEventError error = 6 [json_name = "error"];
inline bool AuditRecord::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool AuditRecord::has_error() const {
  return _internal_has_error();
}
inline void AuditRecord::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::common::v1::AuditEventError& AuditRecord::_internal_error() const {
  const ::common::v1::AuditEventError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::AuditEventError&>(
      ::common::v1::_AuditEventError_default_instance_);
}
inline const ::common::v1::AuditEventError& AuditRecord::error() const {
  // @@protoc_insertion_point(field_get:common.v1.AuditRecord.error)
  return _internal_error();
}
inline void AuditRecord::unsafe_arena_set_allocated_error(
    ::common::v1::AuditEventError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.AuditRecord.error)
}
inline ::common::v1::AuditEventError* AuditRecord::release_error() {
  
  ::common::v1::AuditEventError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::AuditEventError* AuditRecord::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:common.v1.AuditRecord.error)
  
  ::common::v1::AuditEventError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::common::v1::AuditEventError* AuditRecord::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::AuditEventError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::common::v1::AuditEventError* AuditRecord::mutable_error() {
  ::common::v1::AuditEventError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:common.v1.AuditRecord.error)
  return _msg;
}
inline void AuditRecord::set_allocated_error(::common::v1::AuditEventError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::common::v1::AuditEventError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:common.v1.AuditRecord.error)
}

// -------------------------------------------------------------------

// AuditEventData

// .google.protobuf.Any parameters = 1 [json_name = "parameters"];
inline bool AuditEventData::_internal_has_parameters() const {
  return this != internal_default_instance() && parameters_ != nullptr;
}
inline bool AuditEventData::has_parameters() const {
  return _internal_has_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& AuditEventData::_internal_parameters() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& AuditEventData::parameters() const {
  // @@protoc_insertion_point(field_get:common.v1.AuditEventData.parameters)
  return _internal_parameters();
}
inline void AuditEventData::unsafe_arena_set_allocated_parameters(
    ::PROTOBUF_NAMESPACE_ID::Any* parameters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  parameters_ = parameters;
  if (parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.AuditEventData.parameters)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AuditEventData::release_parameters() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = parameters_;
  parameters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AuditEventData::unsafe_arena_release_parameters() {
  // @@protoc_insertion_point(field_release:common.v1.AuditEventData.parameters)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = parameters_;
  parameters_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AuditEventData::_internal_mutable_parameters() {
  
  if (parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    parameters_ = p;
  }
  return parameters_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AuditEventData::mutable_parameters() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_parameters();
  // @@protoc_insertion_point(field_mutable:common.v1.AuditEventData.parameters)
  return _msg;
}
inline void AuditEventData::set_allocated_parameters(::PROTOBUF_NAMESPACE_ID::Any* parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  if (parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters));
    if (message_arena != submessage_arena) {
      parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:common.v1.AuditEventData.parameters)
}

// .google.protobuf.Any prior_state = 2 [json_name = "priorState"];
inline bool AuditEventData::_internal_has_prior_state() const {
  return this != internal_default_instance() && prior_state_ != nullptr;
}
inline bool AuditEventData::has_prior_state() const {
  return _internal_has_prior_state();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& AuditEventData::_internal_prior_state() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = prior_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& AuditEventData::prior_state() const {
  // @@protoc_insertion_point(field_get:common.v1.AuditEventData.prior_state)
  return _internal_prior_state();
}
inline void AuditEventData::unsafe_arena_set_allocated_prior_state(
    ::PROTOBUF_NAMESPACE_ID::Any* prior_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prior_state_);
  }
  prior_state_ = prior_state;
  if (prior_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.AuditEventData.prior_state)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AuditEventData::release_prior_state() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = prior_state_;
  prior_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AuditEventData::unsafe_arena_release_prior_state() {
  // @@protoc_insertion_point(field_release:common.v1.AuditEventData.prior_state)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = prior_state_;
  prior_state_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AuditEventData::_internal_mutable_prior_state() {
  
  if (prior_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    prior_state_ = p;
  }
  return prior_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AuditEventData::mutable_prior_state() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_prior_state();
  // @@protoc_insertion_point(field_mutable:common.v1.AuditEventData.prior_state)
  return _msg;
}
inline void AuditEventData::set_allocated_prior_state(::PROTOBUF_NAMESPACE_ID::Any* prior_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(prior_state_);
  }
  if (prior_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prior_state));
    if (message_arena != submessage_arena) {
      prior_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prior_state, submessage_arena);
    }
    
  } else {
    
  }
  prior_state_ = prior_state;
  // @@protoc_insertion_point(field_set_allocated:common.v1.AuditEventData.prior_state)
}

// .google.protobuf.Any resulting_state = 3 [json_name = "resultingState"];
inline bool AuditEventData::_internal_has_resulting_state() const {
  return this != internal_default_instance() && resulting_state_ != nullptr;
}
inline bool AuditEventData::has_resulting_state() const {
  return _internal_has_resulting_state();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& AuditEventData::_internal_resulting_state() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = resulting_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& AuditEventData::resulting_state() const {
  // @@protoc_insertion_point(field_get:common.v1.AuditEventData.resulting_state)
  return _internal_resulting_state();
}
inline void AuditEventData::unsafe_arena_set_allocated_resulting_state(
    ::PROTOBUF_NAMESPACE_ID::Any* resulting_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resulting_state_);
  }
  resulting_state_ = resulting_state;
  if (resulting_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.AuditEventData.resulting_state)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AuditEventData::release_resulting_state() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = resulting_state_;
  resulting_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AuditEventData::unsafe_arena_release_resulting_state() {
  // @@protoc_insertion_point(field_release:common.v1.AuditEventData.resulting_state)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = resulting_state_;
  resulting_state_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AuditEventData::_internal_mutable_resulting_state() {
  
  if (resulting_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    resulting_state_ = p;
  }
  return resulting_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AuditEventData::mutable_resulting_state() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_resulting_state();
  // @@protoc_insertion_point(field_mutable:common.v1.AuditEventData.resulting_state)
  return _msg;
}
inline void AuditEventData::set_allocated_resulting_state(::PROTOBUF_NAMESPACE_ID::Any* resulting_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(resulting_state_);
  }
  if (resulting_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resulting_state));
    if (message_arena != submessage_arena) {
      resulting_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resulting_state, submessage_arena);
    }
    
  } else {
    
  }
  resulting_state_ = resulting_state;
  // @@protoc_insertion_point(field_set_allocated:common.v1.AuditEventData.resulting_state)
}

// .google.protobuf.Any object_type = 4 [json_name = "objectType"];
inline bool AuditEventData::_internal_has_object_type() const {
  return this != internal_default_instance() && object_type_ != nullptr;
}
inline bool AuditEventData::has_object_type() const {
  return _internal_has_object_type();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& AuditEventData::_internal_object_type() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = object_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& AuditEventData::object_type() const {
  // @@protoc_insertion_point(field_get:common.v1.AuditEventData.object_type)
  return _internal_object_type();
}
inline void AuditEventData::unsafe_arena_set_allocated_object_type(
    ::PROTOBUF_NAMESPACE_ID::Any* object_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_type_);
  }
  object_type_ = object_type;
  if (object_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.AuditEventData.object_type)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AuditEventData::release_object_type() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = object_type_;
  object_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AuditEventData::unsafe_arena_release_object_type() {
  // @@protoc_insertion_point(field_release:common.v1.AuditEventData.object_type)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = object_type_;
  object_type_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AuditEventData::_internal_mutable_object_type() {
  
  if (object_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    object_type_ = p;
  }
  return object_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AuditEventData::mutable_object_type() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_object_type();
  // @@protoc_insertion_point(field_mutable:common.v1.AuditEventData.object_type)
  return _msg;
}
inline void AuditEventData::set_allocated_object_type(::PROTOBUF_NAMESPACE_ID::Any* object_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_type_);
  }
  if (object_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_type));
    if (message_arena != submessage_arena) {
      object_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_type, submessage_arena);
    }
    
  } else {
    
  }
  object_type_ = object_type;
  // @@protoc_insertion_point(field_set_allocated:common.v1.AuditEventData.object_type)
}

// -------------------------------------------------------------------

// AuditEventActor

// string user_id = 1 [json_name = "userId"];
inline void AuditEventActor::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& AuditEventActor::user_id() const {
  // @@protoc_insertion_point(field_get:common.v1.AuditEventActor.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuditEventActor::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.AuditEventActor.user_id)
}
inline std::string* AuditEventActor::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:common.v1.AuditEventActor.user_id)
  return _s;
}
inline const std::string& AuditEventActor::_internal_user_id() const {
  return user_id_.Get();
}
inline void AuditEventActor::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuditEventActor::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuditEventActor::release_user_id() {
  // @@protoc_insertion_point(field_release:common.v1.AuditEventActor.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuditEventActor::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.AuditEventActor.user_id)
}

// string session_id = 2 [json_name = "sessionId"];
inline void AuditEventActor::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& AuditEventActor::session_id() const {
  // @@protoc_insertion_point(field_get:common.v1.AuditEventActor.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuditEventActor::set_session_id(ArgT0&& arg0, ArgT... args) {
 
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.AuditEventActor.session_id)
}
inline std::string* AuditEventActor::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:common.v1.AuditEventActor.session_id)
  return _s;
}
inline const std::string& AuditEventActor::_internal_session_id() const {
  return session_id_.Get();
}
inline void AuditEventActor::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuditEventActor::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuditEventActor::release_session_id() {
  // @@protoc_insertion_point(field_release:common.v1.AuditEventActor.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuditEventActor::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.AuditEventActor.session_id)
}

// string client = 3 [json_name = "client"];
inline void AuditEventActor::clear_client() {
  client_.ClearToEmpty();
}
inline const std::string& AuditEventActor::client() const {
  // @@protoc_insertion_point(field_get:common.v1.AuditEventActor.client)
  return _internal_client();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuditEventActor::set_client(ArgT0&& arg0, ArgT... args) {
 
 client_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.AuditEventActor.client)
}
inline std::string* AuditEventActor::mutable_client() {
  std::string* _s = _internal_mutable_client();
  // @@protoc_insertion_point(field_mutable:common.v1.AuditEventActor.client)
  return _s;
}
inline const std::string& AuditEventActor::_internal_client() const {
  return client_.Get();
}
inline void AuditEventActor::_internal_set_client(const std::string& value) {
  
  client_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuditEventActor::_internal_mutable_client() {
  
  return client_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuditEventActor::release_client() {
  // @@protoc_insertion_point(field_release:common.v1.AuditEventActor.client)
  return client_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuditEventActor::set_allocated_client(std::string* client) {
  if (client != nullptr) {
    
  } else {
    
  }
  client_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    client_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.AuditEventActor.client)
}

// string ip_address = 4 [json_name = "ipAddress"];
inline void AuditEventActor::clear_ip_address() {
  ip_address_.ClearToEmpty();
}
inline const std::string& AuditEventActor::ip_address() const {
  // @@protoc_insertion_point(field_get:common.v1.AuditEventActor.ip_address)
  return _internal_ip_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuditEventActor::set_ip_address(ArgT0&& arg0, ArgT... args) {
 
 ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.AuditEventActor.ip_address)
}
inline std::string* AuditEventActor::mutable_ip_address() {
  std::string* _s = _internal_mutable_ip_address();
  // @@protoc_insertion_point(field_mutable:common.v1.AuditEventActor.ip_address)
  return _s;
}
inline const std::string& AuditEventActor::_internal_ip_address() const {
  return ip_address_.Get();
}
inline void AuditEventActor::_internal_set_ip_address(const std::string& value) {
  
  ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuditEventActor::_internal_mutable_ip_address() {
  
  return ip_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuditEventActor::release_ip_address() {
  // @@protoc_insertion_point(field_release:common.v1.AuditEventActor.ip_address)
  return ip_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuditEventActor::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.AuditEventActor.ip_address)
}

// string x_forwarded_for = 5 [json_name = "xForwardedFor"];
inline void AuditEventActor::clear_x_forwarded_for() {
  x_forwarded_for_.ClearToEmpty();
}
inline const std::string& AuditEventActor::x_forwarded_for() const {
  // @@protoc_insertion_point(field_get:common.v1.AuditEventActor.x_forwarded_for)
  return _internal_x_forwarded_for();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuditEventActor::set_x_forwarded_for(ArgT0&& arg0, ArgT... args) {
 
 x_forwarded_for_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.AuditEventActor.x_forwarded_for)
}
inline std::string* AuditEventActor::mutable_x_forwarded_for() {
  std::string* _s = _internal_mutable_x_forwarded_for();
  // @@protoc_insertion_point(field_mutable:common.v1.AuditEventActor.x_forwarded_for)
  return _s;
}
inline const std::string& AuditEventActor::_internal_x_forwarded_for() const {
  return x_forwarded_for_.Get();
}
inline void AuditEventActor::_internal_set_x_forwarded_for(const std::string& value) {
  
  x_forwarded_for_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuditEventActor::_internal_mutable_x_forwarded_for() {
  
  return x_forwarded_for_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuditEventActor::release_x_forwarded_for() {
  // @@protoc_insertion_point(field_release:common.v1.AuditEventActor.x_forwarded_for)
  return x_forwarded_for_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuditEventActor::set_allocated_x_forwarded_for(std::string* x_forwarded_for) {
  if (x_forwarded_for != nullptr) {
    
  } else {
    
  }
  x_forwarded_for_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), x_forwarded_for,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_forwarded_for_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    x_forwarded_for_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.AuditEventActor.x_forwarded_for)
}

// -------------------------------------------------------------------

// AuditRecordMeta

// string path = 1 [json_name = "path"];
inline void AuditRecordMeta::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& AuditRecordMeta::path() const {
  // @@protoc_insertion_point(field_get:common.v1.AuditRecordMeta.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuditRecordMeta::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.AuditRecordMeta.path)
}
inline std::string* AuditRecordMeta::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:common.v1.AuditRecordMeta.path)
  return _s;
}
inline const std::string& AuditRecordMeta::_internal_path() const {
  return path_.Get();
}
inline void AuditRecordMeta::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuditRecordMeta::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuditRecordMeta::release_path() {
  // @@protoc_insertion_point(field_release:common.v1.AuditRecordMeta.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuditRecordMeta::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.AuditRecordMeta.path)
}

// -------------------------------------------------------------------

// AuditEventError

// string api_path = 1 [json_name = "apiPath"];
inline void AuditEventError::clear_api_path() {
  api_path_.ClearToEmpty();
}
inline const std::string& AuditEventError::api_path() const {
  // @@protoc_insertion_point(field_get:common.v1.AuditEventError.api_path)
  return _internal_api_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuditEventError::set_api_path(ArgT0&& arg0, ArgT... args) {
 
 api_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.AuditEventError.api_path)
}
inline std::string* AuditEventError::mutable_api_path() {
  std::string* _s = _internal_mutable_api_path();
  // @@protoc_insertion_point(field_mutable:common.v1.AuditEventError.api_path)
  return _s;
}
inline const std::string& AuditEventError::_internal_api_path() const {
  return api_path_.Get();
}
inline void AuditEventError::_internal_set_api_path(const std::string& value) {
  
  api_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuditEventError::_internal_mutable_api_path() {
  
  return api_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuditEventError::release_api_path() {
  // @@protoc_insertion_point(field_release:common.v1.AuditEventError.api_path)
  return api_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuditEventError::set_allocated_api_path(std::string* api_path) {
  if (api_path != nullptr) {
    
  } else {
    
  }
  api_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), api_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (api_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    api_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.AuditEventError.api_path)
}

// string cluster_id = 2 [json_name = "clusterId"];
inline void AuditEventError::clear_cluster_id() {
  cluster_id_.ClearToEmpty();
}
inline const std::string& AuditEventError::cluster_id() const {
  // @@protoc_insertion_point(field_get:common.v1.AuditEventError.cluster_id)
  return _internal_cluster_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuditEventError::set_cluster_id(ArgT0&& arg0, ArgT... args) {
 
 cluster_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.AuditEventError.cluster_id)
}
inline std::string* AuditEventError::mutable_cluster_id() {
  std::string* _s = _internal_mutable_cluster_id();
  // @@protoc_insertion_point(field_mutable:common.v1.AuditEventError.cluster_id)
  return _s;
}
inline const std::string& AuditEventError::_internal_cluster_id() const {
  return cluster_id_.Get();
}
inline void AuditEventError::_internal_set_cluster_id(const std::string& value) {
  
  cluster_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuditEventError::_internal_mutable_cluster_id() {
  
  return cluster_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuditEventError::release_cluster_id() {
  // @@protoc_insertion_point(field_release:common.v1.AuditEventError.cluster_id)
  return cluster_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuditEventError::set_allocated_cluster_id(std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cluster_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cluster_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cluster_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.AuditEventError.cluster_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace common

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2fv1_2faudit_2eproto
