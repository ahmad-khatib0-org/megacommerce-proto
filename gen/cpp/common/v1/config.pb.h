// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common/v1/config.proto
// Protobuf C++ Version: 6.31.1

#ifndef common_2fv1_2fconfig_2eproto_2epb_2eh
#define common_2fv1_2fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_type_handler.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field.h"
#include "google/protobuf/unknown_field_set.h"
#include "shared/v1/error.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_common_2fv1_2fconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2fv1_2fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_common_2fv1_2fconfig_2eproto;
}  // extern "C"
namespace common {
namespace v1 {
class CacheConfig;
struct CacheConfigDefaultTypeInternal;
extern CacheConfigDefaultTypeInternal _CacheConfig_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull CacheConfig_class_data_;
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Config_class_data_;
class ConfigBleve;
struct ConfigBleveDefaultTypeInternal;
extern ConfigBleveDefaultTypeInternal _ConfigBleve_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigBleve_class_data_;
class ConfigDataRetention;
struct ConfigDataRetentionDefaultTypeInternal;
extern ConfigDataRetentionDefaultTypeInternal _ConfigDataRetention_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigDataRetention_class_data_;
class ConfigEmail;
struct ConfigEmailDefaultTypeInternal;
extern ConfigEmailDefaultTypeInternal _ConfigEmail_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigEmail_class_data_;
class ConfigFile;
struct ConfigFileDefaultTypeInternal;
extern ConfigFileDefaultTypeInternal _ConfigFile_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigFile_class_data_;
class ConfigGetRequest;
struct ConfigGetRequestDefaultTypeInternal;
extern ConfigGetRequestDefaultTypeInternal _ConfigGetRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigGetRequest_class_data_;
class ConfigGetResponse;
struct ConfigGetResponseDefaultTypeInternal;
extern ConfigGetResponseDefaultTypeInternal _ConfigGetResponse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigGetResponse_class_data_;
class ConfigImageProxy;
struct ConfigImageProxyDefaultTypeInternal;
extern ConfigImageProxyDefaultTypeInternal _ConfigImageProxy_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigImageProxy_class_data_;
class ConfigLdap;
struct ConfigLdapDefaultTypeInternal;
extern ConfigLdapDefaultTypeInternal _ConfigLdap_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigLdap_class_data_;
class ConfigListenerRequest;
struct ConfigListenerRequestDefaultTypeInternal;
extern ConfigListenerRequestDefaultTypeInternal _ConfigListenerRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigListenerRequest_class_data_;
class ConfigListenerResponse;
struct ConfigListenerResponseDefaultTypeInternal;
extern ConfigListenerResponseDefaultTypeInternal _ConfigListenerResponse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigListenerResponse_class_data_;
class ConfigLocalization;
struct ConfigLocalizationDefaultTypeInternal;
extern ConfigLocalizationDefaultTypeInternal _ConfigLocalization_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigLocalization_class_data_;
class ConfigMain;
struct ConfigMainDefaultTypeInternal;
extern ConfigMainDefaultTypeInternal _ConfigMain_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigMain_class_data_;
class ConfigMeilisearch;
struct ConfigMeilisearchDefaultTypeInternal;
extern ConfigMeilisearchDefaultTypeInternal _ConfigMeilisearch_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigMeilisearch_class_data_;
class ConfigMetrics;
struct ConfigMetricsDefaultTypeInternal;
extern ConfigMetricsDefaultTypeInternal _ConfigMetrics_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigMetrics_class_data_;
class ConfigNativeApp;
struct ConfigNativeAppDefaultTypeInternal;
extern ConfigNativeAppDefaultTypeInternal _ConfigNativeApp_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigNativeApp_class_data_;
class ConfigPassword;
struct ConfigPasswordDefaultTypeInternal;
extern ConfigPasswordDefaultTypeInternal _ConfigPassword_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigPassword_class_data_;
class ConfigPrivacy;
struct ConfigPrivacyDefaultTypeInternal;
extern ConfigPrivacyDefaultTypeInternal _ConfigPrivacy_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigPrivacy_class_data_;
class ConfigRateLimit;
struct ConfigRateLimitDefaultTypeInternal;
extern ConfigRateLimitDefaultTypeInternal _ConfigRateLimit_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigRateLimit_class_data_;
class ConfigSSO;
struct ConfigSSODefaultTypeInternal;
extern ConfigSSODefaultTypeInternal _ConfigSSO_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigSSO_class_data_;
class ConfigSaml;
struct ConfigSamlDefaultTypeInternal;
extern ConfigSamlDefaultTypeInternal _ConfigSaml_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigSaml_class_data_;
class ConfigSecurity;
struct ConfigSecurityDefaultTypeInternal;
extern ConfigSecurityDefaultTypeInternal _ConfigSecurity_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigSecurity_class_data_;
class ConfigSecurity_RestrictedUsernamesEntry_DoNotUse;
struct ConfigSecurity_RestrictedUsernamesEntry_DoNotUseDefaultTypeInternal;
extern ConfigSecurity_RestrictedUsernamesEntry_DoNotUseDefaultTypeInternal _ConfigSecurity_RestrictedUsernamesEntry_DoNotUse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigSecurity_RestrictedUsernamesEntry_DoNotUse_class_data_;
class ConfigServices;
struct ConfigServicesDefaultTypeInternal;
extern ConfigServicesDefaultTypeInternal _ConfigServices_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigServices_class_data_;
class ConfigSql;
struct ConfigSqlDefaultTypeInternal;
extern ConfigSqlDefaultTypeInternal _ConfigSql_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigSql_class_data_;
class ConfigSupport;
struct ConfigSupportDefaultTypeInternal;
extern ConfigSupportDefaultTypeInternal _ConfigSupport_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigSupport_class_data_;
class ConfigUpdateRequest;
struct ConfigUpdateRequestDefaultTypeInternal;
extern ConfigUpdateRequestDefaultTypeInternal _ConfigUpdateRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigUpdateRequest_class_data_;
class ConfigUpdateResponse;
struct ConfigUpdateResponseDefaultTypeInternal;
extern ConfigUpdateResponseDefaultTypeInternal _ConfigUpdateResponse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfigUpdateResponse_class_data_;
}  // namespace v1
}  // namespace common
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace common {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class ConfigSupport final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigSupport) */ {
 public:
  inline ConfigSupport() : ConfigSupport(nullptr) {}
  ~ConfigSupport() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigSupport* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigSupport));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigSupport(::google::protobuf::internal::ConstantInitialized);

  inline ConfigSupport(const ConfigSupport& from) : ConfigSupport(nullptr, from) {}
  inline ConfigSupport(ConfigSupport&& from) noexcept
      : ConfigSupport(nullptr, ::std::move(from)) {}
  inline ConfigSupport& operator=(const ConfigSupport& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigSupport& operator=(ConfigSupport&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigSupport& default_instance() {
    return *reinterpret_cast<const ConfigSupport*>(
        &_ConfigSupport_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(ConfigSupport& a, ConfigSupport& b) { a.Swap(&b); }
  inline void Swap(ConfigSupport* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigSupport* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigSupport* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigSupport>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigSupport& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigSupport& from) { ConfigSupport::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigSupport* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigSupport"; }

 protected:
  explicit ConfigSupport(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigSupport(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigSupport& from);
  ConfigSupport(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigSupport&& from) noexcept
      : ConfigSupport(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTermsOfServiceLinkFieldNumber = 1,
    kPrivacyPolicyLinkFieldNumber = 2,
    kAboutLinkFieldNumber = 3,
    kHelpLinkFieldNumber = 4,
    kReportAProblemLinkFieldNumber = 5,
    kForgotPasswordLinkFieldNumber = 6,
    kSupportEmailFieldNumber = 7,
  };
  // optional string terms_of_service_link = 1 [json_name = "termsOfServiceLink"];
  bool has_terms_of_service_link() const;
  void clear_terms_of_service_link() ;
  const ::std::string& terms_of_service_link() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_terms_of_service_link(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_terms_of_service_link();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_terms_of_service_link();
  void set_allocated_terms_of_service_link(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_terms_of_service_link() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_terms_of_service_link(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_terms_of_service_link();

  public:
  // optional string privacy_policy_link = 2 [json_name = "privacyPolicyLink"];
  bool has_privacy_policy_link() const;
  void clear_privacy_policy_link() ;
  const ::std::string& privacy_policy_link() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_privacy_policy_link(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_privacy_policy_link();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_privacy_policy_link();
  void set_allocated_privacy_policy_link(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_privacy_policy_link() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_privacy_policy_link(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_privacy_policy_link();

  public:
  // optional string about_link = 3 [json_name = "aboutLink"];
  bool has_about_link() const;
  void clear_about_link() ;
  const ::std::string& about_link() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_about_link(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_about_link();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_about_link();
  void set_allocated_about_link(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_about_link() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_about_link(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_about_link();

  public:
  // optional string help_link = 4 [json_name = "helpLink"];
  bool has_help_link() const;
  void clear_help_link() ;
  const ::std::string& help_link() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_help_link(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_help_link();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_help_link();
  void set_allocated_help_link(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_help_link() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_help_link(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_help_link();

  public:
  // optional string report_a_problem_link = 5 [json_name = "reportAProblemLink"];
  bool has_report_a_problem_link() const;
  void clear_report_a_problem_link() ;
  const ::std::string& report_a_problem_link() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_report_a_problem_link(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_report_a_problem_link();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_report_a_problem_link();
  void set_allocated_report_a_problem_link(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_report_a_problem_link() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_report_a_problem_link(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_report_a_problem_link();

  public:
  // optional string forgot_password_link = 6 [json_name = "forgotPasswordLink"];
  bool has_forgot_password_link() const;
  void clear_forgot_password_link() ;
  const ::std::string& forgot_password_link() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_forgot_password_link(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_forgot_password_link();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_forgot_password_link();
  void set_allocated_forgot_password_link(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_forgot_password_link() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_forgot_password_link(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_forgot_password_link();

  public:
  // optional string support_email = 7 [json_name = "supportEmail"];
  bool has_support_email() const;
  void clear_support_email() ;
  const ::std::string& support_email() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_support_email(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_support_email();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_support_email();
  void set_allocated_support_email(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_support_email() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_support_email(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_support_email();

  public:
  // @@protoc_insertion_point(class_scope:common.v1.ConfigSupport)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7,
                                   0, 145,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigSupport& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr terms_of_service_link_;
    ::google::protobuf::internal::ArenaStringPtr privacy_policy_link_;
    ::google::protobuf::internal::ArenaStringPtr about_link_;
    ::google::protobuf::internal::ArenaStringPtr help_link_;
    ::google::protobuf::internal::ArenaStringPtr report_a_problem_link_;
    ::google::protobuf::internal::ArenaStringPtr forgot_password_link_;
    ::google::protobuf::internal::ArenaStringPtr support_email_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigSupport_class_data_;
// -------------------------------------------------------------------

class ConfigSql final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigSql) */ {
 public:
  inline ConfigSql() : ConfigSql(nullptr) {}
  ~ConfigSql() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigSql* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigSql));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigSql(::google::protobuf::internal::ConstantInitialized);

  inline ConfigSql(const ConfigSql& from) : ConfigSql(nullptr, from) {}
  inline ConfigSql(ConfigSql&& from) noexcept
      : ConfigSql(nullptr, ::std::move(from)) {}
  inline ConfigSql& operator=(const ConfigSql& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigSql& operator=(ConfigSql&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigSql& default_instance() {
    return *reinterpret_cast<const ConfigSql*>(
        &_ConfigSql_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(ConfigSql& a, ConfigSql& b) { a.Swap(&b); }
  inline void Swap(ConfigSql* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigSql* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigSql* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigSql>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigSql& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigSql& from) { ConfigSql::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigSql* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigSql"; }

 protected:
  explicit ConfigSql(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigSql(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigSql& from);
  ConfigSql(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigSql&& from) noexcept
      : ConfigSql(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDriverNameFieldNumber = 1,
    kDataSourceFieldNumber = 2,
    kAtRestEncryptKeyFieldNumber = 8,
    kMaxIdleConnsFieldNumber = 3,
    kConnMaxLifetimeMillisecondsFieldNumber = 4,
    kConnMaxIdleTimeMillisecondsFieldNumber = 5,
    kMaxOpenConnsFieldNumber = 6,
    kTraceFieldNumber = 7,
    kDisableDatabaseSearchFieldNumber = 10,
    kQueryTimeoutFieldNumber = 9,
  };
  // optional string driver_name = 1 [json_name = "driverName"];
  bool has_driver_name() const;
  void clear_driver_name() ;
  const ::std::string& driver_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_driver_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_driver_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_driver_name();
  void set_allocated_driver_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_driver_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_driver_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_driver_name();

  public:
  // optional string data_source = 2 [json_name = "dataSource"];
  bool has_data_source() const;
  void clear_data_source() ;
  const ::std::string& data_source() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_data_source(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_data_source();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_data_source();
  void set_allocated_data_source(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_data_source() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_data_source(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_data_source();

  public:
  // optional string at_rest_encrypt_key = 8 [json_name = "atRestEncryptKey"];
  bool has_at_rest_encrypt_key() const;
  void clear_at_rest_encrypt_key() ;
  const ::std::string& at_rest_encrypt_key() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_at_rest_encrypt_key(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_at_rest_encrypt_key();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_at_rest_encrypt_key();
  void set_allocated_at_rest_encrypt_key(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_at_rest_encrypt_key() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_at_rest_encrypt_key(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_at_rest_encrypt_key();

  public:
  // optional int32 max_idle_conns = 3 [json_name = "maxIdleConns"];
  bool has_max_idle_conns() const;
  void clear_max_idle_conns() ;
  ::int32_t max_idle_conns() const;
  void set_max_idle_conns(::int32_t value);

  private:
  ::int32_t _internal_max_idle_conns() const;
  void _internal_set_max_idle_conns(::int32_t value);

  public:
  // optional int32 conn_max_lifetime_milliseconds = 4 [json_name = "connMaxLifetimeMilliseconds"];
  bool has_conn_max_lifetime_milliseconds() const;
  void clear_conn_max_lifetime_milliseconds() ;
  ::int32_t conn_max_lifetime_milliseconds() const;
  void set_conn_max_lifetime_milliseconds(::int32_t value);

  private:
  ::int32_t _internal_conn_max_lifetime_milliseconds() const;
  void _internal_set_conn_max_lifetime_milliseconds(::int32_t value);

  public:
  // optional int32 conn_max_idle_time_milliseconds = 5 [json_name = "connMaxIdleTimeMilliseconds"];
  bool has_conn_max_idle_time_milliseconds() const;
  void clear_conn_max_idle_time_milliseconds() ;
  ::int32_t conn_max_idle_time_milliseconds() const;
  void set_conn_max_idle_time_milliseconds(::int32_t value);

  private:
  ::int32_t _internal_conn_max_idle_time_milliseconds() const;
  void _internal_set_conn_max_idle_time_milliseconds(::int32_t value);

  public:
  // optional int32 max_open_conns = 6 [json_name = "maxOpenConns"];
  bool has_max_open_conns() const;
  void clear_max_open_conns() ;
  ::int32_t max_open_conns() const;
  void set_max_open_conns(::int32_t value);

  private:
  ::int32_t _internal_max_open_conns() const;
  void _internal_set_max_open_conns(::int32_t value);

  public:
  // optional bool trace = 7 [json_name = "trace"];
  bool has_trace() const;
  void clear_trace() ;
  bool trace() const;
  void set_trace(bool value);

  private:
  bool _internal_trace() const;
  void _internal_set_trace(bool value);

  public:
  // optional bool disable_database_search = 10 [json_name = "disableDatabaseSearch"];
  bool has_disable_database_search() const;
  void clear_disable_database_search() ;
  bool disable_database_search() const;
  void set_disable_database_search(bool value);

  private:
  bool _internal_disable_database_search() const;
  void _internal_set_disable_database_search(bool value);

  public:
  // optional int32 query_timeout = 9 [json_name = "queryTimeout"];
  bool has_query_timeout() const;
  void clear_query_timeout() ;
  ::int32_t query_timeout() const;
  void set_query_timeout(::int32_t value);

  private:
  ::int32_t _internal_query_timeout() const;
  void _internal_set_query_timeout(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:common.v1.ConfigSql)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 10,
                                   0, 77,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigSql& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr driver_name_;
    ::google::protobuf::internal::ArenaStringPtr data_source_;
    ::google::protobuf::internal::ArenaStringPtr at_rest_encrypt_key_;
    ::int32_t max_idle_conns_;
    ::int32_t conn_max_lifetime_milliseconds_;
    ::int32_t conn_max_idle_time_milliseconds_;
    ::int32_t max_open_conns_;
    bool trace_;
    bool disable_database_search_;
    ::int32_t query_timeout_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigSql_class_data_;
// -------------------------------------------------------------------

class ConfigServices final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigServices) */ {
 public:
  inline ConfigServices() : ConfigServices(nullptr) {}
  ~ConfigServices() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigServices* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigServices));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigServices(::google::protobuf::internal::ConstantInitialized);

  inline ConfigServices(const ConfigServices& from) : ConfigServices(nullptr, from) {}
  inline ConfigServices(ConfigServices&& from) noexcept
      : ConfigServices(nullptr, ::std::move(from)) {}
  inline ConfigServices& operator=(const ConfigServices& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigServices& operator=(ConfigServices&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigServices& default_instance() {
    return *reinterpret_cast<const ConfigServices*>(
        &_ConfigServices_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ConfigServices& a, ConfigServices& b) { a.Swap(&b); }
  inline void Swap(ConfigServices* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigServices* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigServices* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigServices>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigServices& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigServices& from) { ConfigServices::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigServices* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigServices"; }

 protected:
  explicit ConfigServices(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigServices(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigServices& from);
  ConfigServices(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigServices&& from) noexcept
      : ConfigServices(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCommonServiceGrpcUrlFieldNumber = 1,
    kUserServiceGrpcUrlFieldNumber = 2,
    kProductsServiceGrpcUrlFieldNumber = 3,
    kJaegerCollectorUrlFieldNumber = 4,
    kCommonServicePrometheusUrlFieldNumber = 5,
    kUserServicePrometheusUrlFieldNumber = 6,
    kProductsServicePrometheusUrlFieldNumber = 7,
    kUsersServiceMaxReceiveMessageSizeBytesFieldNumber = 8,
  };
  // optional string common_service_grpc_url = 1 [json_name = "commonServiceGrpcUrl"];
  bool has_common_service_grpc_url() const;
  void clear_common_service_grpc_url() ;
  const ::std::string& common_service_grpc_url() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_common_service_grpc_url(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_common_service_grpc_url();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_common_service_grpc_url();
  void set_allocated_common_service_grpc_url(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_common_service_grpc_url() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_common_service_grpc_url(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_common_service_grpc_url();

  public:
  // optional string user_service_grpc_url = 2 [json_name = "userServiceGrpcUrl"];
  bool has_user_service_grpc_url() const;
  void clear_user_service_grpc_url() ;
  const ::std::string& user_service_grpc_url() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_user_service_grpc_url(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_user_service_grpc_url();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_user_service_grpc_url();
  void set_allocated_user_service_grpc_url(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_user_service_grpc_url() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_user_service_grpc_url(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_user_service_grpc_url();

  public:
  // optional string products_service_grpc_url = 3 [json_name = "productsServiceGrpcUrl"];
  bool has_products_service_grpc_url() const;
  void clear_products_service_grpc_url() ;
  const ::std::string& products_service_grpc_url() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_products_service_grpc_url(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_products_service_grpc_url();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_products_service_grpc_url();
  void set_allocated_products_service_grpc_url(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_products_service_grpc_url() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_products_service_grpc_url(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_products_service_grpc_url();

  public:
  // optional string jaeger_collector_url = 4 [json_name = "jaegerCollectorUrl"];
  bool has_jaeger_collector_url() const;
  void clear_jaeger_collector_url() ;
  const ::std::string& jaeger_collector_url() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_jaeger_collector_url(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_jaeger_collector_url();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_jaeger_collector_url();
  void set_allocated_jaeger_collector_url(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_jaeger_collector_url() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_jaeger_collector_url(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_jaeger_collector_url();

  public:
  // optional string common_service_prometheus_url = 5 [json_name = "commonServicePrometheusUrl"];
  bool has_common_service_prometheus_url() const;
  void clear_common_service_prometheus_url() ;
  const ::std::string& common_service_prometheus_url() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_common_service_prometheus_url(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_common_service_prometheus_url();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_common_service_prometheus_url();
  void set_allocated_common_service_prometheus_url(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_common_service_prometheus_url() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_common_service_prometheus_url(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_common_service_prometheus_url();

  public:
  // optional string user_service_prometheus_url = 6 [json_name = "userServicePrometheusUrl"];
  bool has_user_service_prometheus_url() const;
  void clear_user_service_prometheus_url() ;
  const ::std::string& user_service_prometheus_url() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_user_service_prometheus_url(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_user_service_prometheus_url();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_user_service_prometheus_url();
  void set_allocated_user_service_prometheus_url(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_user_service_prometheus_url() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_user_service_prometheus_url(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_user_service_prometheus_url();

  public:
  // optional string products_service_prometheus_url = 7 [json_name = "productsServicePrometheusUrl"];
  bool has_products_service_prometheus_url() const;
  void clear_products_service_prometheus_url() ;
  const ::std::string& products_service_prometheus_url() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_products_service_prometheus_url(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_products_service_prometheus_url();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_products_service_prometheus_url();
  void set_allocated_products_service_prometheus_url(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_products_service_prometheus_url() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_products_service_prometheus_url(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_products_service_prometheus_url();

  public:
  // optional string users_service_max_receive_message_size_bytes = 8 [json_name = "usersServiceMaxReceiveMessageSizeBytes"];
  bool has_users_service_max_receive_message_size_bytes() const;
  void clear_users_service_max_receive_message_size_bytes() ;
  const ::std::string& users_service_max_receive_message_size_bytes() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_users_service_max_receive_message_size_bytes(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_users_service_max_receive_message_size_bytes();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_users_service_max_receive_message_size_bytes();
  void set_allocated_users_service_max_receive_message_size_bytes(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_users_service_max_receive_message_size_bytes() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_users_service_max_receive_message_size_bytes(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_users_service_max_receive_message_size_bytes();

  public:
  // @@protoc_insertion_point(class_scope:common.v1.ConfigServices)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8,
                                   0, 261,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigServices& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr common_service_grpc_url_;
    ::google::protobuf::internal::ArenaStringPtr user_service_grpc_url_;
    ::google::protobuf::internal::ArenaStringPtr products_service_grpc_url_;
    ::google::protobuf::internal::ArenaStringPtr jaeger_collector_url_;
    ::google::protobuf::internal::ArenaStringPtr common_service_prometheus_url_;
    ::google::protobuf::internal::ArenaStringPtr user_service_prometheus_url_;
    ::google::protobuf::internal::ArenaStringPtr products_service_prometheus_url_;
    ::google::protobuf::internal::ArenaStringPtr users_service_max_receive_message_size_bytes_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigServices_class_data_;
// -------------------------------------------------------------------

class ConfigSecurity_RestrictedUsernamesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<std::string, std::string,
                             ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                             ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType =
      ::google::protobuf::internal::MapEntry<std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  ConfigSecurity_RestrictedUsernamesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigSecurity_RestrictedUsernamesEntry_DoNotUse(::google::protobuf::internal::ConstantInitialized);
  explicit ConfigSecurity_RestrictedUsernamesEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr const void* PROTOBUF_NONNULL internal_default_instance() {
    return &_ConfigSecurity_RestrictedUsernamesEntry_DoNotUse_default_instance_;
  }


  static constexpr auto InternalGenerateClassData_();

 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 66,
                                   2>
      _table_;

  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();
};
extern const ::google::protobuf::internal::ClassDataFull ConfigSecurity_RestrictedUsernamesEntry_DoNotUse_class_data_;
// -------------------------------------------------------------------

class ConfigSaml final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigSaml) */ {
 public:
  inline ConfigSaml() : ConfigSaml(nullptr) {}
  ~ConfigSaml() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigSaml* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigSaml));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigSaml(::google::protobuf::internal::ConstantInitialized);

  inline ConfigSaml(const ConfigSaml& from) : ConfigSaml(nullptr, from) {}
  inline ConfigSaml(ConfigSaml&& from) noexcept
      : ConfigSaml(nullptr, ::std::move(from)) {}
  inline ConfigSaml& operator=(const ConfigSaml& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigSaml& operator=(ConfigSaml&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigSaml& default_instance() {
    return *reinterpret_cast<const ConfigSaml*>(
        &_ConfigSaml_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(ConfigSaml& a, ConfigSaml& b) { a.Swap(&b); }
  inline void Swap(ConfigSaml* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigSaml* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigSaml* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigSaml>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigSaml& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigSaml& from) { ConfigSaml::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigSaml* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigSaml"; }

 protected:
  explicit ConfigSaml(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigSaml(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigSaml& from);
  ConfigSaml(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigSaml&& from) noexcept
      : ConfigSaml(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdpUrlFieldNumber = 8,
    kIdpDescriptorUrlFieldNumber = 9,
    kIdpMetadataUrlFieldNumber = 10,
    kServiceProviderIdentifierFieldNumber = 11,
    kAssertionConsumerServiceUrlFieldNumber = 12,
    kSignatureAlgorithmFieldNumber = 13,
    kCanonicalAlgorithmFieldNumber = 14,
    kScopingIdpProviderIdFieldNumber = 15,
    kScopingIdpNameFieldNumber = 16,
    kIdpCertificateFileFieldNumber = 17,
    kPublicCertificateFileFieldNumber = 18,
    kPrivateKeyFileFieldNumber = 19,
    kIdAttributeFieldNumber = 20,
    kAdminAttributeFieldNumber = 22,
    kFirstNameAttributeFieldNumber = 23,
    kLastNameAttributeFieldNumber = 24,
    kEmailAttributeFieldNumber = 25,
    kUsernameAttributeFieldNumber = 26,
    kNicknameAttributeFieldNumber = 27,
    kLocaleAttributeFieldNumber = 28,
    kPositionAttributeFieldNumber = 29,
    kLoginButtonTextFieldNumber = 30,
    kLoginButtonColorFieldNumber = 31,
    kLoginButtonBorderColorFieldNumber = 32,
    kLoginButtonTextColorFieldNumber = 33,
    kEnableFieldNumber = 1,
    kEnableSyncWithLdapFieldNumber = 2,
    kEnableSyncWithLdapIncludeAuthFieldNumber = 3,
    kIgnoreGuestsLdapSyncFieldNumber = 4,
    kVerifyFieldNumber = 5,
    kEncryptFieldNumber = 6,
    kSignRequestFieldNumber = 7,
    kEnableAdminAttributeFieldNumber = 21,
  };
  // optional string idp_url = 8 [json_name = "idpUrl"];
  bool has_idp_url() const;
  void clear_idp_url() ;
  const ::std::string& idp_url() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_idp_url(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_idp_url();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_idp_url();
  void set_allocated_idp_url(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_idp_url() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_idp_url(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_idp_url();

  public:
  // optional string idp_descriptor_url = 9 [json_name = "idpDescriptorUrl"];
  bool has_idp_descriptor_url() const;
  void clear_idp_descriptor_url() ;
  const ::std::string& idp_descriptor_url() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_idp_descriptor_url(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_idp_descriptor_url();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_idp_descriptor_url();
  void set_allocated_idp_descriptor_url(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_idp_descriptor_url() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_idp_descriptor_url(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_idp_descriptor_url();

  public:
  // optional string idp_metadata_url = 10 [json_name = "idpMetadataUrl"];
  bool has_idp_metadata_url() const;
  void clear_idp_metadata_url() ;
  const ::std::string& idp_metadata_url() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_idp_metadata_url(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_idp_metadata_url();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_idp_metadata_url();
  void set_allocated_idp_metadata_url(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_idp_metadata_url() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_idp_metadata_url(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_idp_metadata_url();

  public:
  // optional string service_provider_identifier = 11 [json_name = "serviceProviderIdentifier"];
  bool has_service_provider_identifier() const;
  void clear_service_provider_identifier() ;
  const ::std::string& service_provider_identifier() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_service_provider_identifier(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_service_provider_identifier();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_service_provider_identifier();
  void set_allocated_service_provider_identifier(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_service_provider_identifier() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_service_provider_identifier(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_service_provider_identifier();

  public:
  // optional string assertion_consumer_service_url = 12 [json_name = "assertionConsumerServiceUrl"];
  bool has_assertion_consumer_service_url() const;
  void clear_assertion_consumer_service_url() ;
  const ::std::string& assertion_consumer_service_url() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_assertion_consumer_service_url(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_assertion_consumer_service_url();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_assertion_consumer_service_url();
  void set_allocated_assertion_consumer_service_url(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_assertion_consumer_service_url() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_assertion_consumer_service_url(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_assertion_consumer_service_url();

  public:
  // optional string signature_algorithm = 13 [json_name = "signatureAlgorithm"];
  bool has_signature_algorithm() const;
  void clear_signature_algorithm() ;
  const ::std::string& signature_algorithm() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_signature_algorithm(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_signature_algorithm();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_signature_algorithm();
  void set_allocated_signature_algorithm(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_signature_algorithm() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_signature_algorithm(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_signature_algorithm();

  public:
  // optional string canonical_algorithm = 14 [json_name = "canonicalAlgorithm"];
  bool has_canonical_algorithm() const;
  void clear_canonical_algorithm() ;
  const ::std::string& canonical_algorithm() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_canonical_algorithm(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_canonical_algorithm();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_canonical_algorithm();
  void set_allocated_canonical_algorithm(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_canonical_algorithm() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_canonical_algorithm(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_canonical_algorithm();

  public:
  // optional string scoping_idp_provider_id = 15 [json_name = "scopingIdpProviderId"];
  bool has_scoping_idp_provider_id() const;
  void clear_scoping_idp_provider_id() ;
  const ::std::string& scoping_idp_provider_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_scoping_idp_provider_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_scoping_idp_provider_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_scoping_idp_provider_id();
  void set_allocated_scoping_idp_provider_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_scoping_idp_provider_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_scoping_idp_provider_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_scoping_idp_provider_id();

  public:
  // optional string scoping_idp_name = 16 [json_name = "scopingIdpName"];
  bool has_scoping_idp_name() const;
  void clear_scoping_idp_name() ;
  const ::std::string& scoping_idp_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_scoping_idp_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_scoping_idp_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_scoping_idp_name();
  void set_allocated_scoping_idp_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_scoping_idp_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_scoping_idp_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_scoping_idp_name();

  public:
  // optional string idp_certificate_file = 17 [json_name = "idpCertificateFile"];
  bool has_idp_certificate_file() const;
  void clear_idp_certificate_file() ;
  const ::std::string& idp_certificate_file() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_idp_certificate_file(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_idp_certificate_file();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_idp_certificate_file();
  void set_allocated_idp_certificate_file(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_idp_certificate_file() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_idp_certificate_file(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_idp_certificate_file();

  public:
  // optional string public_certificate_file = 18 [json_name = "publicCertificateFile"];
  bool has_public_certificate_file() const;
  void clear_public_certificate_file() ;
  const ::std::string& public_certificate_file() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_public_certificate_file(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_public_certificate_file();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_public_certificate_file();
  void set_allocated_public_certificate_file(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_public_certificate_file() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_public_certificate_file(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_public_certificate_file();

  public:
  // optional string private_key_file = 19 [json_name = "privateKeyFile"];
  bool has_private_key_file() const;
  void clear_private_key_file() ;
  const ::std::string& private_key_file() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_private_key_file(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_private_key_file();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_private_key_file();
  void set_allocated_private_key_file(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_private_key_file() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_private_key_file(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_private_key_file();

  public:
  // optional string id_attribute = 20 [json_name = "idAttribute"];
  bool has_id_attribute() const;
  void clear_id_attribute() ;
  const ::std::string& id_attribute() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_id_attribute(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_id_attribute();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_id_attribute();
  void set_allocated_id_attribute(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_id_attribute() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_id_attribute(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_id_attribute();

  public:
  // optional string admin_attribute = 22 [json_name = "adminAttribute"];
  bool has_admin_attribute() const;
  void clear_admin_attribute() ;
  const ::std::string& admin_attribute() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_admin_attribute(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_admin_attribute();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_admin_attribute();
  void set_allocated_admin_attribute(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_admin_attribute() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_admin_attribute(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_admin_attribute();

  public:
  // optional string first_name_attribute = 23 [json_name = "firstNameAttribute"];
  bool has_first_name_attribute() const;
  void clear_first_name_attribute() ;
  const ::std::string& first_name_attribute() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_first_name_attribute(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_first_name_attribute();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_first_name_attribute();
  void set_allocated_first_name_attribute(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_first_name_attribute() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_first_name_attribute(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_first_name_attribute();

  public:
  // optional string last_name_attribute = 24 [json_name = "lastNameAttribute"];
  bool has_last_name_attribute() const;
  void clear_last_name_attribute() ;
  const ::std::string& last_name_attribute() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_last_name_attribute(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_last_name_attribute();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_last_name_attribute();
  void set_allocated_last_name_attribute(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_last_name_attribute() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_last_name_attribute(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_last_name_attribute();

  public:
  // optional string email_attribute = 25 [json_name = "emailAttribute"];
  bool has_email_attribute() const;
  void clear_email_attribute() ;
  const ::std::string& email_attribute() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_email_attribute(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_email_attribute();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_email_attribute();
  void set_allocated_email_attribute(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_email_attribute() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_email_attribute(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_email_attribute();

  public:
  // optional string username_attribute = 26 [json_name = "usernameAttribute"];
  bool has_username_attribute() const;
  void clear_username_attribute() ;
  const ::std::string& username_attribute() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_username_attribute(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_username_attribute();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_username_attribute();
  void set_allocated_username_attribute(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_username_attribute() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_username_attribute(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_username_attribute();

  public:
  // optional string nickname_attribute = 27 [json_name = "nicknameAttribute"];
  bool has_nickname_attribute() const;
  void clear_nickname_attribute() ;
  const ::std::string& nickname_attribute() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_nickname_attribute(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_nickname_attribute();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_nickname_attribute();
  void set_allocated_nickname_attribute(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_nickname_attribute() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_nickname_attribute(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_nickname_attribute();

  public:
  // optional string locale_attribute = 28 [json_name = "localeAttribute"];
  bool has_locale_attribute() const;
  void clear_locale_attribute() ;
  const ::std::string& locale_attribute() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_locale_attribute(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_locale_attribute();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_locale_attribute();
  void set_allocated_locale_attribute(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_locale_attribute() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_locale_attribute(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_locale_attribute();

  public:
  // optional string position_attribute = 29 [json_name = "positionAttribute"];
  bool has_position_attribute() const;
  void clear_position_attribute() ;
  const ::std::string& position_attribute() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_position_attribute(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_position_attribute();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_position_attribute();
  void set_allocated_position_attribute(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_position_attribute() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_position_attribute(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_position_attribute();

  public:
  // optional string login_button_text = 30 [json_name = "loginButtonText"];
  bool has_login_button_text() const;
  void clear_login_button_text() ;
  const ::std::string& login_button_text() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_login_button_text(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_login_button_text();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_login_button_text();
  void set_allocated_login_button_text(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_login_button_text() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_login_button_text(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_login_button_text();

  public:
  // optional string login_button_color = 31 [json_name = "loginButtonColor"];
  bool has_login_button_color() const;
  void clear_login_button_color() ;
  const ::std::string& login_button_color() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_login_button_color(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_login_button_color();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_login_button_color();
  void set_allocated_login_button_color(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_login_button_color() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_login_button_color(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_login_button_color();

  public:
  // optional string login_button_border_color = 32 [json_name = "loginButtonBorderColor"];
  bool has_login_button_border_color() const;
  void clear_login_button_border_color() ;
  const ::std::string& login_button_border_color() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_login_button_border_color(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_login_button_border_color();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_login_button_border_color();
  void set_allocated_login_button_border_color(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_login_button_border_color() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_login_button_border_color(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_login_button_border_color();

  public:
  // optional string login_button_text_color = 33 [json_name = "loginButtonTextColor"];
  bool has_login_button_text_color() const;
  void clear_login_button_text_color() ;
  const ::std::string& login_button_text_color() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_login_button_text_color(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_login_button_text_color();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_login_button_text_color();
  void set_allocated_login_button_text_color(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_login_button_text_color() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_login_button_text_color(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_login_button_text_color();

  public:
  // optional bool enable = 1 [json_name = "enable"];
  bool has_enable() const;
  void clear_enable() ;
  bool enable() const;
  void set_enable(bool value);

  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);

  public:
  // optional bool enable_sync_with_ldap = 2 [json_name = "enableSyncWithLdap"];
  bool has_enable_sync_with_ldap() const;
  void clear_enable_sync_with_ldap() ;
  bool enable_sync_with_ldap() const;
  void set_enable_sync_with_ldap(bool value);

  private:
  bool _internal_enable_sync_with_ldap() const;
  void _internal_set_enable_sync_with_ldap(bool value);

  public:
  // optional bool enable_sync_with_ldap_include_auth = 3 [json_name = "enableSyncWithLdapIncludeAuth"];
  bool has_enable_sync_with_ldap_include_auth() const;
  void clear_enable_sync_with_ldap_include_auth() ;
  bool enable_sync_with_ldap_include_auth() const;
  void set_enable_sync_with_ldap_include_auth(bool value);

  private:
  bool _internal_enable_sync_with_ldap_include_auth() const;
  void _internal_set_enable_sync_with_ldap_include_auth(bool value);

  public:
  // optional bool ignore_guests_ldap_sync = 4 [json_name = "ignoreGuestsLdapSync"];
  bool has_ignore_guests_ldap_sync() const;
  void clear_ignore_guests_ldap_sync() ;
  bool ignore_guests_ldap_sync() const;
  void set_ignore_guests_ldap_sync(bool value);

  private:
  bool _internal_ignore_guests_ldap_sync() const;
  void _internal_set_ignore_guests_ldap_sync(bool value);

  public:
  // optional bool verify = 5 [json_name = "verify"];
  bool has_verify() const;
  void clear_verify() ;
  bool verify() const;
  void set_verify(bool value);

  private:
  bool _internal_verify() const;
  void _internal_set_verify(bool value);

  public:
  // optional bool encrypt = 6 [json_name = "encrypt"];
  bool has_encrypt() const;
  void clear_encrypt() ;
  bool encrypt() const;
  void set_encrypt(bool value);

  private:
  bool _internal_encrypt() const;
  void _internal_set_encrypt(bool value);

  public:
  // optional bool sign_request = 7 [json_name = "signRequest"];
  bool has_sign_request() const;
  void clear_sign_request() ;
  bool sign_request() const;
  void set_sign_request(bool value);

  private:
  bool _internal_sign_request() const;
  void _internal_set_sign_request(bool value);

  public:
  // optional bool enable_admin_attribute = 21 [json_name = "enableAdminAttribute"];
  bool has_enable_admin_attribute() const;
  void clear_enable_admin_attribute() ;
  bool enable_admin_attribute() const;
  void set_enable_admin_attribute(bool value);

  private:
  bool _internal_enable_admin_attribute() const;
  void _internal_set_enable_admin_attribute(bool value);

  public:
  // @@protoc_insertion_point(class_scope:common.v1.ConfigSaml)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 33,
                                   0, 529,
                                   7>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigSaml& from_msg);
    ::google::protobuf::internal::HasBits<2> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr idp_url_;
    ::google::protobuf::internal::ArenaStringPtr idp_descriptor_url_;
    ::google::protobuf::internal::ArenaStringPtr idp_metadata_url_;
    ::google::protobuf::internal::ArenaStringPtr service_provider_identifier_;
    ::google::protobuf::internal::ArenaStringPtr assertion_consumer_service_url_;
    ::google::protobuf::internal::ArenaStringPtr signature_algorithm_;
    ::google::protobuf::internal::ArenaStringPtr canonical_algorithm_;
    ::google::protobuf::internal::ArenaStringPtr scoping_idp_provider_id_;
    ::google::protobuf::internal::ArenaStringPtr scoping_idp_name_;
    ::google::protobuf::internal::ArenaStringPtr idp_certificate_file_;
    ::google::protobuf::internal::ArenaStringPtr public_certificate_file_;
    ::google::protobuf::internal::ArenaStringPtr private_key_file_;
    ::google::protobuf::internal::ArenaStringPtr id_attribute_;
    ::google::protobuf::internal::ArenaStringPtr admin_attribute_;
    ::google::protobuf::internal::ArenaStringPtr first_name_attribute_;
    ::google::protobuf::internal::ArenaStringPtr last_name_attribute_;
    ::google::protobuf::internal::ArenaStringPtr email_attribute_;
    ::google::protobuf::internal::ArenaStringPtr username_attribute_;
    ::google::protobuf::internal::ArenaStringPtr nickname_attribute_;
    ::google::protobuf::internal::ArenaStringPtr locale_attribute_;
    ::google::protobuf::internal::ArenaStringPtr position_attribute_;
    ::google::protobuf::internal::ArenaStringPtr login_button_text_;
    ::google::protobuf::internal::ArenaStringPtr login_button_color_;
    ::google::protobuf::internal::ArenaStringPtr login_button_border_color_;
    ::google::protobuf::internal::ArenaStringPtr login_button_text_color_;
    bool enable_;
    bool enable_sync_with_ldap_;
    bool enable_sync_with_ldap_include_auth_;
    bool ignore_guests_ldap_sync_;
    bool verify_;
    bool encrypt_;
    bool sign_request_;
    bool enable_admin_attribute_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigSaml_class_data_;
// -------------------------------------------------------------------

class ConfigSSO final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigSSO) */ {
 public:
  inline ConfigSSO() : ConfigSSO(nullptr) {}
  ~ConfigSSO() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigSSO* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigSSO));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigSSO(::google::protobuf::internal::ConstantInitialized);

  inline ConfigSSO(const ConfigSSO& from) : ConfigSSO(nullptr, from) {}
  inline ConfigSSO(ConfigSSO&& from) noexcept
      : ConfigSSO(nullptr, ::std::move(from)) {}
  inline ConfigSSO& operator=(const ConfigSSO& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigSSO& operator=(ConfigSSO&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigSSO& default_instance() {
    return *reinterpret_cast<const ConfigSSO*>(
        &_ConfigSSO_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(ConfigSSO& a, ConfigSSO& b) { a.Swap(&b); }
  inline void Swap(ConfigSSO* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigSSO* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigSSO* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigSSO>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigSSO& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigSSO& from) { ConfigSSO::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigSSO* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigSSO"; }

 protected:
  explicit ConfigSSO(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigSSO(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigSSO& from);
  ConfigSSO(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigSSO&& from) noexcept
      : ConfigSSO(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSecretFieldNumber = 2,
    kIdFieldNumber = 3,
    kScopeFieldNumber = 4,
    kAuthEndpointFieldNumber = 5,
    kTokenEndpointFieldNumber = 6,
    kUserApiEndpointFieldNumber = 7,
    kDiscoveryEndpointFieldNumber = 8,
    kButtonTextFieldNumber = 9,
    kButtonColorFieldNumber = 10,
    kEnableFieldNumber = 1,
  };
  // optional string secret = 2 [json_name = "secret"];
  bool has_secret() const;
  void clear_secret() ;
  const ::std::string& secret() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_secret(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_secret();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_secret();
  void set_allocated_secret(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_secret() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_secret(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_secret();

  public:
  // optional string id = 3 [json_name = "id"];
  bool has_id() const;
  void clear_id() ;
  const ::std::string& id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_id();
  void set_allocated_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_id();

  public:
  // optional string scope = 4 [json_name = "scope"];
  bool has_scope() const;
  void clear_scope() ;
  const ::std::string& scope() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_scope(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_scope();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_scope();
  void set_allocated_scope(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_scope() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_scope(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_scope();

  public:
  // optional string auth_endpoint = 5 [json_name = "authEndpoint"];
  bool has_auth_endpoint() const;
  void clear_auth_endpoint() ;
  const ::std::string& auth_endpoint() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_auth_endpoint(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_auth_endpoint();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_auth_endpoint();
  void set_allocated_auth_endpoint(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_auth_endpoint() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_auth_endpoint(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_auth_endpoint();

  public:
  // optional string token_endpoint = 6 [json_name = "tokenEndpoint"];
  bool has_token_endpoint() const;
  void clear_token_endpoint() ;
  const ::std::string& token_endpoint() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_token_endpoint(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_token_endpoint();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_token_endpoint();
  void set_allocated_token_endpoint(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_token_endpoint() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_token_endpoint(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_token_endpoint();

  public:
  // optional string user_api_endpoint = 7 [json_name = "userApiEndpoint"];
  bool has_user_api_endpoint() const;
  void clear_user_api_endpoint() ;
  const ::std::string& user_api_endpoint() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_user_api_endpoint(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_user_api_endpoint();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_user_api_endpoint();
  void set_allocated_user_api_endpoint(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_user_api_endpoint() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_user_api_endpoint(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_user_api_endpoint();

  public:
  // optional string discovery_endpoint = 8 [json_name = "discoveryEndpoint"];
  bool has_discovery_endpoint() const;
  void clear_discovery_endpoint() ;
  const ::std::string& discovery_endpoint() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_discovery_endpoint(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_discovery_endpoint();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_discovery_endpoint();
  void set_allocated_discovery_endpoint(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_discovery_endpoint() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_discovery_endpoint(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_discovery_endpoint();

  public:
  // optional string button_text = 9 [json_name = "buttonText"];
  bool has_button_text() const;
  void clear_button_text() ;
  const ::std::string& button_text() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_button_text(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_button_text();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_button_text();
  void set_allocated_button_text(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_button_text() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_button_text(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_button_text();

  public:
  // optional string button_color = 10 [json_name = "buttonColor"];
  bool has_button_color() const;
  void clear_button_color() ;
  const ::std::string& button_color() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_button_color(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_button_color();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_button_color();
  void set_allocated_button_color(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_button_color() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_button_color(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_button_color();

  public:
  // optional bool enable = 1 [json_name = "enable"];
  bool has_enable() const;
  void clear_enable() ;
  bool enable() const;
  void set_enable(bool value);

  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:common.v1.ConfigSSO)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 10,
                                   0, 134,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigSSO& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr secret_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr scope_;
    ::google::protobuf::internal::ArenaStringPtr auth_endpoint_;
    ::google::protobuf::internal::ArenaStringPtr token_endpoint_;
    ::google::protobuf::internal::ArenaStringPtr user_api_endpoint_;
    ::google::protobuf::internal::ArenaStringPtr discovery_endpoint_;
    ::google::protobuf::internal::ArenaStringPtr button_text_;
    ::google::protobuf::internal::ArenaStringPtr button_color_;
    bool enable_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigSSO_class_data_;
// -------------------------------------------------------------------

class ConfigRateLimit final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigRateLimit) */ {
 public:
  inline ConfigRateLimit() : ConfigRateLimit(nullptr) {}
  ~ConfigRateLimit() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigRateLimit* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigRateLimit));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigRateLimit(::google::protobuf::internal::ConstantInitialized);

  inline ConfigRateLimit(const ConfigRateLimit& from) : ConfigRateLimit(nullptr, from) {}
  inline ConfigRateLimit(ConfigRateLimit&& from) noexcept
      : ConfigRateLimit(nullptr, ::std::move(from)) {}
  inline ConfigRateLimit& operator=(const ConfigRateLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigRateLimit& operator=(ConfigRateLimit&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigRateLimit& default_instance() {
    return *reinterpret_cast<const ConfigRateLimit*>(
        &_ConfigRateLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(ConfigRateLimit& a, ConfigRateLimit& b) { a.Swap(&b); }
  inline void Swap(ConfigRateLimit* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigRateLimit* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigRateLimit* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigRateLimit>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigRateLimit& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigRateLimit& from) { ConfigRateLimit::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigRateLimit* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigRateLimit"; }

 protected:
  explicit ConfigRateLimit(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigRateLimit(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigRateLimit& from);
  ConfigRateLimit(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigRateLimit&& from) noexcept
      : ConfigRateLimit(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVaryByHeaderFieldNumber = 7,
    kPerSecFieldNumber = 2,
    kMaxBurstFieldNumber = 3,
    kMemoryStoreSizeFieldNumber = 4,
    kEnableFieldNumber = 1,
    kVaryByRemoteAddrFieldNumber = 5,
    kVaryByUserFieldNumber = 6,
  };
  // string vary_by_header = 7 [json_name = "varyByHeader"];
  void clear_vary_by_header() ;
  const ::std::string& vary_by_header() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_vary_by_header(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_vary_by_header();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_vary_by_header();
  void set_allocated_vary_by_header(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_vary_by_header() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_vary_by_header(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_vary_by_header();

  public:
  // optional int32 per_sec = 2 [json_name = "perSec"];
  bool has_per_sec() const;
  void clear_per_sec() ;
  ::int32_t per_sec() const;
  void set_per_sec(::int32_t value);

  private:
  ::int32_t _internal_per_sec() const;
  void _internal_set_per_sec(::int32_t value);

  public:
  // optional int32 max_burst = 3 [json_name = "maxBurst"];
  bool has_max_burst() const;
  void clear_max_burst() ;
  ::int32_t max_burst() const;
  void set_max_burst(::int32_t value);

  private:
  ::int32_t _internal_max_burst() const;
  void _internal_set_max_burst(::int32_t value);

  public:
  // optional int32 memory_store_size = 4 [json_name = "memoryStoreSize"];
  bool has_memory_store_size() const;
  void clear_memory_store_size() ;
  ::int32_t memory_store_size() const;
  void set_memory_store_size(::int32_t value);

  private:
  ::int32_t _internal_memory_store_size() const;
  void _internal_set_memory_store_size(::int32_t value);

  public:
  // optional bool enable = 1 [json_name = "enable"];
  bool has_enable() const;
  void clear_enable() ;
  bool enable() const;
  void set_enable(bool value);

  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);

  public:
  // optional bool vary_by_remote_addr = 5 [json_name = "varyByRemoteAddr"];
  bool has_vary_by_remote_addr() const;
  void clear_vary_by_remote_addr() ;
  bool vary_by_remote_addr() const;
  void set_vary_by_remote_addr(bool value);

  private:
  bool _internal_vary_by_remote_addr() const;
  void _internal_set_vary_by_remote_addr(bool value);

  public:
  // optional bool vary_by_user = 6 [json_name = "varyByUser"];
  bool has_vary_by_user() const;
  void clear_vary_by_user() ;
  bool vary_by_user() const;
  void set_vary_by_user(bool value);

  private:
  bool _internal_vary_by_user() const;
  void _internal_set_vary_by_user(bool value);

  public:
  // @@protoc_insertion_point(class_scope:common.v1.ConfigRateLimit)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7,
                                   0, 48,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigRateLimit& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr vary_by_header_;
    ::int32_t per_sec_;
    ::int32_t max_burst_;
    ::int32_t memory_store_size_;
    bool enable_;
    bool vary_by_remote_addr_;
    bool vary_by_user_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigRateLimit_class_data_;
// -------------------------------------------------------------------

class ConfigPrivacy final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigPrivacy) */ {
 public:
  inline ConfigPrivacy() : ConfigPrivacy(nullptr) {}
  ~ConfigPrivacy() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigPrivacy* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigPrivacy));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigPrivacy(::google::protobuf::internal::ConstantInitialized);

  inline ConfigPrivacy(const ConfigPrivacy& from) : ConfigPrivacy(nullptr, from) {}
  inline ConfigPrivacy(ConfigPrivacy&& from) noexcept
      : ConfigPrivacy(nullptr, ::std::move(from)) {}
  inline ConfigPrivacy& operator=(const ConfigPrivacy& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigPrivacy& operator=(ConfigPrivacy&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigPrivacy& default_instance() {
    return *reinterpret_cast<const ConfigPrivacy*>(
        &_ConfigPrivacy_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(ConfigPrivacy& a, ConfigPrivacy& b) { a.Swap(&b); }
  inline void Swap(ConfigPrivacy* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigPrivacy* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigPrivacy* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigPrivacy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigPrivacy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigPrivacy& from) { ConfigPrivacy::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigPrivacy* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigPrivacy"; }

 protected:
  explicit ConfigPrivacy(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigPrivacy(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigPrivacy& from);
  ConfigPrivacy(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigPrivacy&& from) noexcept
      : ConfigPrivacy(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kShowEmailAddressFieldNumber = 1,
    kShowFullNameFieldNumber = 2,
  };
  // optional bool show_email_address = 1 [json_name = "showEmailAddress"];
  bool has_show_email_address() const;
  void clear_show_email_address() ;
  bool show_email_address() const;
  void set_show_email_address(bool value);

  private:
  bool _internal_show_email_address() const;
  void _internal_set_show_email_address(bool value);

  public:
  // optional bool show_full_name = 2 [json_name = "showFullName"];
  bool has_show_full_name() const;
  void clear_show_full_name() ;
  bool show_full_name() const;
  void set_show_full_name(bool value);

  private:
  bool _internal_show_full_name() const;
  void _internal_set_show_full_name(bool value);

  public:
  // @@protoc_insertion_point(class_scope:common.v1.ConfigPrivacy)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigPrivacy& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    bool show_email_address_;
    bool show_full_name_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigPrivacy_class_data_;
// -------------------------------------------------------------------

class ConfigPassword final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigPassword) */ {
 public:
  inline ConfigPassword() : ConfigPassword(nullptr) {}
  ~ConfigPassword() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigPassword* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigPassword));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigPassword(::google::protobuf::internal::ConstantInitialized);

  inline ConfigPassword(const ConfigPassword& from) : ConfigPassword(nullptr, from) {}
  inline ConfigPassword(ConfigPassword&& from) noexcept
      : ConfigPassword(nullptr, ::std::move(from)) {}
  inline ConfigPassword& operator=(const ConfigPassword& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigPassword& operator=(ConfigPassword&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigPassword& default_instance() {
    return *reinterpret_cast<const ConfigPassword*>(
        &_ConfigPassword_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(ConfigPassword& a, ConfigPassword& b) { a.Swap(&b); }
  inline void Swap(ConfigPassword* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigPassword* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigPassword* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigPassword>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigPassword& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigPassword& from) { ConfigPassword::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigPassword* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigPassword"; }

 protected:
  explicit ConfigPassword(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigPassword(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigPassword& from);
  ConfigPassword(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigPassword&& from) noexcept
      : ConfigPassword(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMinimumLengthFieldNumber = 1,
    kMaximumLengthFieldNumber = 2,
    kLowercaseFieldNumber = 3,
    kNumberFieldNumber = 4,
    kUppercaseFieldNumber = 5,
    kSymbolFieldNumber = 6,
    kEnableForgotLinkFieldNumber = 7,
  };
  // optional int32 minimum_length = 1 [json_name = "minimumLength"];
  bool has_minimum_length() const;
  void clear_minimum_length() ;
  ::int32_t minimum_length() const;
  void set_minimum_length(::int32_t value);

  private:
  ::int32_t _internal_minimum_length() const;
  void _internal_set_minimum_length(::int32_t value);

  public:
  // optional int32 maximum_length = 2 [json_name = "maximumLength"];
  bool has_maximum_length() const;
  void clear_maximum_length() ;
  ::int32_t maximum_length() const;
  void set_maximum_length(::int32_t value);

  private:
  ::int32_t _internal_maximum_length() const;
  void _internal_set_maximum_length(::int32_t value);

  public:
  // optional bool lowercase = 3 [json_name = "lowercase"];
  bool has_lowercase() const;
  void clear_lowercase() ;
  bool lowercase() const;
  void set_lowercase(bool value);

  private:
  bool _internal_lowercase() const;
  void _internal_set_lowercase(bool value);

  public:
  // optional bool number = 4 [json_name = "number"];
  bool has_number() const;
  void clear_number() ;
  bool number() const;
  void set_number(bool value);

  private:
  bool _internal_number() const;
  void _internal_set_number(bool value);

  public:
  // optional bool uppercase = 5 [json_name = "uppercase"];
  bool has_uppercase() const;
  void clear_uppercase() ;
  bool uppercase() const;
  void set_uppercase(bool value);

  private:
  bool _internal_uppercase() const;
  void _internal_set_uppercase(bool value);

  public:
  // optional bool symbol = 6 [json_name = "symbol"];
  bool has_symbol() const;
  void clear_symbol() ;
  bool symbol() const;
  void set_symbol(bool value);

  private:
  bool _internal_symbol() const;
  void _internal_set_symbol(bool value);

  public:
  // optional bool enable_forgot_link = 7 [json_name = "enableForgotLink"];
  bool has_enable_forgot_link() const;
  void clear_enable_forgot_link() ;
  bool enable_forgot_link() const;
  void set_enable_forgot_link(bool value);

  private:
  bool _internal_enable_forgot_link() const;
  void _internal_set_enable_forgot_link(bool value);

  public:
  // @@protoc_insertion_point(class_scope:common.v1.ConfigPassword)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigPassword& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t minimum_length_;
    ::int32_t maximum_length_;
    bool lowercase_;
    bool number_;
    bool uppercase_;
    bool symbol_;
    bool enable_forgot_link_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigPassword_class_data_;
// -------------------------------------------------------------------

class ConfigNativeApp final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigNativeApp) */ {
 public:
  inline ConfigNativeApp() : ConfigNativeApp(nullptr) {}
  ~ConfigNativeApp() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigNativeApp* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigNativeApp));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigNativeApp(::google::protobuf::internal::ConstantInitialized);

  inline ConfigNativeApp(const ConfigNativeApp& from) : ConfigNativeApp(nullptr, from) {}
  inline ConfigNativeApp(ConfigNativeApp&& from) noexcept
      : ConfigNativeApp(nullptr, ::std::move(from)) {}
  inline ConfigNativeApp& operator=(const ConfigNativeApp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigNativeApp& operator=(ConfigNativeApp&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigNativeApp& default_instance() {
    return *reinterpret_cast<const ConfigNativeApp*>(
        &_ConfigNativeApp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(ConfigNativeApp& a, ConfigNativeApp& b) { a.Swap(&b); }
  inline void Swap(ConfigNativeApp* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigNativeApp* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigNativeApp* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigNativeApp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigNativeApp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigNativeApp& from) { ConfigNativeApp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigNativeApp* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigNativeApp"; }

 protected:
  explicit ConfigNativeApp(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigNativeApp(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigNativeApp& from);
  ConfigNativeApp(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigNativeApp&& from) noexcept
      : ConfigNativeApp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAppCustomUrlSchemesFieldNumber = 1,
    kAppDownloadLinkFieldNumber = 2,
    kAndroidAppDownloadLinkFieldNumber = 3,
    kIosAppDownloadLinkFieldNumber = 4,
    kMobileExternalBrowserFieldNumber = 5,
    kMobileEnableBiometricsFieldNumber = 6,
    kMobilePreventScreenCaptureFieldNumber = 7,
    kMobileJailbreakProtectionFieldNumber = 8,
  };
  // repeated string app_custom_url_schemes = 1 [json_name = "appCustomUrlSchemes"];
  int app_custom_url_schemes_size() const;
  private:
  int _internal_app_custom_url_schemes_size() const;

  public:
  void clear_app_custom_url_schemes() ;
  const ::std::string& app_custom_url_schemes(int index) const;
  ::std::string* PROTOBUF_NONNULL mutable_app_custom_url_schemes(int index);
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_app_custom_url_schemes(int index, Arg_&& value, Args_... args);
  ::std::string* PROTOBUF_NONNULL add_app_custom_url_schemes();
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void add_app_custom_url_schemes(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<::std::string>& app_custom_url_schemes() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL mutable_app_custom_url_schemes();

  private:
  const ::google::protobuf::RepeatedPtrField<::std::string>& _internal_app_custom_url_schemes() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL _internal_mutable_app_custom_url_schemes();

  public:
  // optional string app_download_link = 2 [json_name = "appDownloadLink"];
  bool has_app_download_link() const;
  void clear_app_download_link() ;
  const ::std::string& app_download_link() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_app_download_link(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_app_download_link();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_app_download_link();
  void set_allocated_app_download_link(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_app_download_link() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_app_download_link(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_app_download_link();

  public:
  // optional string android_app_download_link = 3 [json_name = "androidAppDownloadLink"];
  bool has_android_app_download_link() const;
  void clear_android_app_download_link() ;
  const ::std::string& android_app_download_link() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_android_app_download_link(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_android_app_download_link();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_android_app_download_link();
  void set_allocated_android_app_download_link(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_android_app_download_link() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_android_app_download_link(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_android_app_download_link();

  public:
  // optional string ios_app_download_link = 4 [json_name = "iosAppDownloadLink"];
  bool has_ios_app_download_link() const;
  void clear_ios_app_download_link() ;
  const ::std::string& ios_app_download_link() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_ios_app_download_link(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_ios_app_download_link();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_ios_app_download_link();
  void set_allocated_ios_app_download_link(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_ios_app_download_link() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_ios_app_download_link(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_ios_app_download_link();

  public:
  // optional bool mobile_external_browser = 5 [json_name = "mobileExternalBrowser"];
  bool has_mobile_external_browser() const;
  void clear_mobile_external_browser() ;
  bool mobile_external_browser() const;
  void set_mobile_external_browser(bool value);

  private:
  bool _internal_mobile_external_browser() const;
  void _internal_set_mobile_external_browser(bool value);

  public:
  // optional bool mobile_enable_biometrics = 6 [json_name = "mobileEnableBiometrics"];
  bool has_mobile_enable_biometrics() const;
  void clear_mobile_enable_biometrics() ;
  bool mobile_enable_biometrics() const;
  void set_mobile_enable_biometrics(bool value);

  private:
  bool _internal_mobile_enable_biometrics() const;
  void _internal_set_mobile_enable_biometrics(bool value);

  public:
  // optional bool mobile_prevent_screen_capture = 7 [json_name = "mobilePreventScreenCapture"];
  bool has_mobile_prevent_screen_capture() const;
  void clear_mobile_prevent_screen_capture() ;
  bool mobile_prevent_screen_capture() const;
  void set_mobile_prevent_screen_capture(bool value);

  private:
  bool _internal_mobile_prevent_screen_capture() const;
  void _internal_set_mobile_prevent_screen_capture(bool value);

  public:
  // optional bool mobile_jailbreak_protection = 8 [json_name = "mobileJailbreakProtection"];
  bool has_mobile_jailbreak_protection() const;
  void clear_mobile_jailbreak_protection() ;
  bool mobile_jailbreak_protection() const;
  void set_mobile_jailbreak_protection(bool value);

  private:
  bool _internal_mobile_jailbreak_protection() const;
  void _internal_set_mobile_jailbreak_protection(bool value);

  public:
  // @@protoc_insertion_point(class_scope:common.v1.ConfigNativeApp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8,
                                   0, 127,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigNativeApp& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<::std::string> app_custom_url_schemes_;
    ::google::protobuf::internal::ArenaStringPtr app_download_link_;
    ::google::protobuf::internal::ArenaStringPtr android_app_download_link_;
    ::google::protobuf::internal::ArenaStringPtr ios_app_download_link_;
    bool mobile_external_browser_;
    bool mobile_enable_biometrics_;
    bool mobile_prevent_screen_capture_;
    bool mobile_jailbreak_protection_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigNativeApp_class_data_;
// -------------------------------------------------------------------

class ConfigMetrics final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigMetrics) */ {
 public:
  inline ConfigMetrics() : ConfigMetrics(nullptr) {}
  ~ConfigMetrics() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigMetrics* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigMetrics));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigMetrics(::google::protobuf::internal::ConstantInitialized);

  inline ConfigMetrics(const ConfigMetrics& from) : ConfigMetrics(nullptr, from) {}
  inline ConfigMetrics(ConfigMetrics&& from) noexcept
      : ConfigMetrics(nullptr, ::std::move(from)) {}
  inline ConfigMetrics& operator=(const ConfigMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigMetrics& operator=(ConfigMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigMetrics& default_instance() {
    return *reinterpret_cast<const ConfigMetrics*>(
        &_ConfigMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(ConfigMetrics& a, ConfigMetrics& b) { a.Swap(&b); }
  inline void Swap(ConfigMetrics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigMetrics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigMetrics* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigMetrics>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigMetrics& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigMetrics& from) { ConfigMetrics::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigMetrics* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigMetrics"; }

 protected:
  explicit ConfigMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigMetrics& from);
  ConfigMetrics(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigMetrics&& from) noexcept
      : ConfigMetrics(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClientSideUserIdsFieldNumber = 6,
    kListenAddressFieldNumber = 3,
    kBlockProfileRateFieldNumber = 2,
    kEnableFieldNumber = 1,
    kEnableClientMetricsFieldNumber = 4,
    kEnableNotificationMetricsFieldNumber = 5,
  };
  // repeated string client_side_user_ids = 6 [json_name = "clientSideUserIds"];
  int client_side_user_ids_size() const;
  private:
  int _internal_client_side_user_ids_size() const;

  public:
  void clear_client_side_user_ids() ;
  const ::std::string& client_side_user_ids(int index) const;
  ::std::string* PROTOBUF_NONNULL mutable_client_side_user_ids(int index);
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_client_side_user_ids(int index, Arg_&& value, Args_... args);
  ::std::string* PROTOBUF_NONNULL add_client_side_user_ids();
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void add_client_side_user_ids(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<::std::string>& client_side_user_ids() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL mutable_client_side_user_ids();

  private:
  const ::google::protobuf::RepeatedPtrField<::std::string>& _internal_client_side_user_ids() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL _internal_mutable_client_side_user_ids();

  public:
  // optional string listen_address = 3 [json_name = "listenAddress"];
  bool has_listen_address() const;
  void clear_listen_address() ;
  const ::std::string& listen_address() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_listen_address(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_listen_address();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_listen_address();
  void set_allocated_listen_address(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_listen_address() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_listen_address(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_listen_address();

  public:
  // optional int32 block_profile_rate = 2 [json_name = "blockProfileRate"];
  bool has_block_profile_rate() const;
  void clear_block_profile_rate() ;
  ::int32_t block_profile_rate() const;
  void set_block_profile_rate(::int32_t value);

  private:
  ::int32_t _internal_block_profile_rate() const;
  void _internal_set_block_profile_rate(::int32_t value);

  public:
  // optional bool enable = 1 [json_name = "enable"];
  bool has_enable() const;
  void clear_enable() ;
  bool enable() const;
  void set_enable(bool value);

  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);

  public:
  // optional bool enable_client_metrics = 4 [json_name = "enableClientMetrics"];
  bool has_enable_client_metrics() const;
  void clear_enable_client_metrics() ;
  bool enable_client_metrics() const;
  void set_enable_client_metrics(bool value);

  private:
  bool _internal_enable_client_metrics() const;
  void _internal_set_enable_client_metrics(bool value);

  public:
  // optional bool enable_notification_metrics = 5 [json_name = "enableNotificationMetrics"];
  bool has_enable_notification_metrics() const;
  void clear_enable_notification_metrics() ;
  bool enable_notification_metrics() const;
  void set_enable_notification_metrics(bool value);

  private:
  bool _internal_enable_notification_metrics() const;
  void _internal_set_enable_notification_metrics(bool value);

  public:
  // @@protoc_insertion_point(class_scope:common.v1.ConfigMetrics)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6,
                                   0, 66,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigMetrics& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<::std::string> client_side_user_ids_;
    ::google::protobuf::internal::ArenaStringPtr listen_address_;
    ::int32_t block_profile_rate_;
    bool enable_;
    bool enable_client_metrics_;
    bool enable_notification_metrics_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigMetrics_class_data_;
// -------------------------------------------------------------------

class ConfigMeilisearch final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigMeilisearch) */ {
 public:
  inline ConfigMeilisearch() : ConfigMeilisearch(nullptr) {}
  ~ConfigMeilisearch() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigMeilisearch* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigMeilisearch));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigMeilisearch(::google::protobuf::internal::ConstantInitialized);

  inline ConfigMeilisearch(const ConfigMeilisearch& from) : ConfigMeilisearch(nullptr, from) {}
  inline ConfigMeilisearch(ConfigMeilisearch&& from) noexcept
      : ConfigMeilisearch(nullptr, ::std::move(from)) {}
  inline ConfigMeilisearch& operator=(const ConfigMeilisearch& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigMeilisearch& operator=(ConfigMeilisearch&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigMeilisearch& default_instance() {
    return *reinterpret_cast<const ConfigMeilisearch*>(
        &_ConfigMeilisearch_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(ConfigMeilisearch& a, ConfigMeilisearch& b) { a.Swap(&b); }
  inline void Swap(ConfigMeilisearch* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigMeilisearch* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigMeilisearch* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigMeilisearch>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigMeilisearch& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigMeilisearch& from) { ConfigMeilisearch::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigMeilisearch* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigMeilisearch"; }

 protected:
  explicit ConfigMeilisearch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigMeilisearch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigMeilisearch& from);
  ConfigMeilisearch(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigMeilisearch&& from) noexcept
      : ConfigMeilisearch(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServerUrlFieldNumber = 1,
    kMasterKeyFieldNumber = 2,
    kIndexPrefixFieldNumber = 8,
    kEnableIndexingFieldNumber = 3,
    kEnableSearchingFieldNumber = 4,
    kEnableAutocompleteFieldNumber = 5,
    kEnableTypoToleranceFieldNumber = 10,
    kBatchSizeFieldNumber = 6,
    kRequestTimeoutSecondsFieldNumber = 7,
    kSearchCutoffMsFieldNumber = 9,
  };
  // optional string server_url = 1 [json_name = "server_url"];
  bool has_server_url() const;
  void clear_server_url() ;
  const ::std::string& server_url() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_server_url(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_server_url();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_server_url();
  void set_allocated_server_url(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_server_url() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_server_url(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_server_url();

  public:
  // optional string master_key = 2 [json_name = "masterKey"];
  bool has_master_key() const;
  void clear_master_key() ;
  const ::std::string& master_key() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_master_key(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_master_key();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_master_key();
  void set_allocated_master_key(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_master_key() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_master_key(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_master_key();

  public:
  // optional string index_prefix = 8 [json_name = "indexPrefix"];
  bool has_index_prefix() const;
  void clear_index_prefix() ;
  const ::std::string& index_prefix() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_index_prefix(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_index_prefix();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_index_prefix();
  void set_allocated_index_prefix(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_index_prefix() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_index_prefix(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_index_prefix();

  public:
  // optional bool enable_indexing = 3 [json_name = "enableIndexing"];
  bool has_enable_indexing() const;
  void clear_enable_indexing() ;
  bool enable_indexing() const;
  void set_enable_indexing(bool value);

  private:
  bool _internal_enable_indexing() const;
  void _internal_set_enable_indexing(bool value);

  public:
  // optional bool enable_searching = 4 [json_name = "enableSearching"];
  bool has_enable_searching() const;
  void clear_enable_searching() ;
  bool enable_searching() const;
  void set_enable_searching(bool value);

  private:
  bool _internal_enable_searching() const;
  void _internal_set_enable_searching(bool value);

  public:
  // optional bool enable_autocomplete = 5 [json_name = "enableAutocomplete"];
  bool has_enable_autocomplete() const;
  void clear_enable_autocomplete() ;
  bool enable_autocomplete() const;
  void set_enable_autocomplete(bool value);

  private:
  bool _internal_enable_autocomplete() const;
  void _internal_set_enable_autocomplete(bool value);

  public:
  // optional bool enable_typo_tolerance = 10 [json_name = "enableTypoTolerance"];
  bool has_enable_typo_tolerance() const;
  void clear_enable_typo_tolerance() ;
  bool enable_typo_tolerance() const;
  void set_enable_typo_tolerance(bool value);

  private:
  bool _internal_enable_typo_tolerance() const;
  void _internal_set_enable_typo_tolerance(bool value);

  public:
  // optional int32 batch_size = 6 [json_name = "batchSize"];
  bool has_batch_size() const;
  void clear_batch_size() ;
  ::int32_t batch_size() const;
  void set_batch_size(::int32_t value);

  private:
  ::int32_t _internal_batch_size() const;
  void _internal_set_batch_size(::int32_t value);

  public:
  // optional int32 request_timeout_seconds = 7 [json_name = "requestTimeoutSeconds"];
  bool has_request_timeout_seconds() const;
  void clear_request_timeout_seconds() ;
  ::int32_t request_timeout_seconds() const;
  void set_request_timeout_seconds(::int32_t value);

  private:
  ::int32_t _internal_request_timeout_seconds() const;
  void _internal_set_request_timeout_seconds(::int32_t value);

  public:
  // optional int32 search_cutoff_ms = 9 [json_name = "searchCutoffMs"];
  bool has_search_cutoff_ms() const;
  void clear_search_cutoff_ms() ;
  ::int32_t search_cutoff_ms() const;
  void set_search_cutoff_ms(::int32_t value);

  private:
  ::int32_t _internal_search_cutoff_ms() const;
  void _internal_set_search_cutoff_ms(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:common.v1.ConfigMeilisearch)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 10,
                                   0, 76,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigMeilisearch& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr server_url_;
    ::google::protobuf::internal::ArenaStringPtr master_key_;
    ::google::protobuf::internal::ArenaStringPtr index_prefix_;
    bool enable_indexing_;
    bool enable_searching_;
    bool enable_autocomplete_;
    bool enable_typo_tolerance_;
    ::int32_t batch_size_;
    ::int32_t request_timeout_seconds_;
    ::int32_t search_cutoff_ms_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigMeilisearch_class_data_;
// -------------------------------------------------------------------

class ConfigMain final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigMain) */ {
 public:
  inline ConfigMain() : ConfigMain(nullptr) {}
  ~ConfigMain() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigMain* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigMain));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigMain(::google::protobuf::internal::ConstantInitialized);

  inline ConfigMain(const ConfigMain& from) : ConfigMain(nullptr, from) {}
  inline ConfigMain(ConfigMain&& from) noexcept
      : ConfigMain(nullptr, ::std::move(from)) {}
  inline ConfigMain& operator=(const ConfigMain& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigMain& operator=(ConfigMain&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigMain& default_instance() {
    return *reinterpret_cast<const ConfigMain*>(
        &_ConfigMain_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ConfigMain& a, ConfigMain& b) { a.Swap(&b); }
  inline void Swap(ConfigMain* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigMain* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigMain* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigMain>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigMain& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigMain& from) { ConfigMain::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigMain* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigMain"; }

 protected:
  explicit ConfigMain(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigMain(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigMain& from);
  ConfigMain(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigMain&& from) noexcept
      : ConfigMain(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEnvFieldNumber = 1,
    kSiteNameFieldNumber = 2,
    kSiteUrlFieldNumber = 3,
    kRestrictLinkPreviewsFieldNumber = 6,
    kEnableLinkPreviewsFieldNumber = 5,
    kEnableClientPerformanceDebuggingFieldNumber = 7,
    kEnableGifPickerFieldNumber = 8,
    kEnableCustomEmojiFieldNumber = 9,
    kEnableEmojiPickerFieldNumber = 10,
    kEnableFileSearchFieldNumber = 12,
    kEnableUserTypingMessagesFieldNumber = 13,
    kEnableUserStatusesFieldNumber = 14,
    kTimeBetweenUserTypingUpdatesMillisecondsFieldNumber = 11,
    kEnableEmailInvitationsFieldNumber = 15,
    kEnableSvgsFieldNumber = 16,
    kAllowPersistentNotificationsFieldNumber = 17,
    kAllowSyncedDraftsFieldNumber = 22,
    kPersistentNotificationIntervalMinutesFieldNumber = 18,
    kPersistentNotificationMaxCountFieldNumber = 19,
    kPersistentNotificationMaxRecipientsFieldNumber = 20,
    kFeatureFlagSyncIntervalSecondsFieldNumber = 21,
  };
  // optional string env = 1 [json_name = "env"];
  bool has_env() const;
  void clear_env() ;
  const ::std::string& env() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_env(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_env();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_env();
  void set_allocated_env(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_env() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_env(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_env();

  public:
  // optional string site_name = 2 [json_name = "siteName"];
  bool has_site_name() const;
  void clear_site_name() ;
  const ::std::string& site_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_site_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_site_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_site_name();
  void set_allocated_site_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_site_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_site_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_site_name();

  public:
  // optional string site_url = 3 [json_name = "siteUrl"];
  bool has_site_url() const;
  void clear_site_url() ;
  const ::std::string& site_url() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_site_url(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_site_url();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_site_url();
  void set_allocated_site_url(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_site_url() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_site_url(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_site_url();

  public:
  // optional string restrict_link_previews = 6 [json_name = "restrictLinkPreviews"];
  bool has_restrict_link_previews() const;
  void clear_restrict_link_previews() ;
  const ::std::string& restrict_link_previews() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_restrict_link_previews(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_restrict_link_previews();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_restrict_link_previews();
  void set_allocated_restrict_link_previews(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_restrict_link_previews() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_restrict_link_previews(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_restrict_link_previews();

  public:
  // optional bool enable_link_previews = 5 [json_name = "enableLinkPreviews"];
  bool has_enable_link_previews() const;
  void clear_enable_link_previews() ;
  bool enable_link_previews() const;
  void set_enable_link_previews(bool value);

  private:
  bool _internal_enable_link_previews() const;
  void _internal_set_enable_link_previews(bool value);

  public:
  // optional bool enable_client_performance_debugging = 7 [json_name = "enableClientPerformanceDebugging"];
  bool has_enable_client_performance_debugging() const;
  void clear_enable_client_performance_debugging() ;
  bool enable_client_performance_debugging() const;
  void set_enable_client_performance_debugging(bool value);

  private:
  bool _internal_enable_client_performance_debugging() const;
  void _internal_set_enable_client_performance_debugging(bool value);

  public:
  // optional bool enable_gif_picker = 8 [json_name = "enableGifPicker"];
  bool has_enable_gif_picker() const;
  void clear_enable_gif_picker() ;
  bool enable_gif_picker() const;
  void set_enable_gif_picker(bool value);

  private:
  bool _internal_enable_gif_picker() const;
  void _internal_set_enable_gif_picker(bool value);

  public:
  // optional bool enable_custom_emoji = 9 [json_name = "enableCustomEmoji"];
  bool has_enable_custom_emoji() const;
  void clear_enable_custom_emoji() ;
  bool enable_custom_emoji() const;
  void set_enable_custom_emoji(bool value);

  private:
  bool _internal_enable_custom_emoji() const;
  void _internal_set_enable_custom_emoji(bool value);

  public:
  // optional bool enable_emoji_picker = 10 [json_name = "enableEmojiPicker"];
  bool has_enable_emoji_picker() const;
  void clear_enable_emoji_picker() ;
  bool enable_emoji_picker() const;
  void set_enable_emoji_picker(bool value);

  private:
  bool _internal_enable_emoji_picker() const;
  void _internal_set_enable_emoji_picker(bool value);

  public:
  // optional bool enable_file_search = 12 [json_name = "enableFileSearch"];
  bool has_enable_file_search() const;
  void clear_enable_file_search() ;
  bool enable_file_search() const;
  void set_enable_file_search(bool value);

  private:
  bool _internal_enable_file_search() const;
  void _internal_set_enable_file_search(bool value);

  public:
  // optional bool enable_user_typing_messages = 13 [json_name = "enableUserTypingMessages"];
  bool has_enable_user_typing_messages() const;
  void clear_enable_user_typing_messages() ;
  bool enable_user_typing_messages() const;
  void set_enable_user_typing_messages(bool value);

  private:
  bool _internal_enable_user_typing_messages() const;
  void _internal_set_enable_user_typing_messages(bool value);

  public:
  // optional bool enable_user_statuses = 14 [json_name = "enableUserStatuses"];
  bool has_enable_user_statuses() const;
  void clear_enable_user_statuses() ;
  bool enable_user_statuses() const;
  void set_enable_user_statuses(bool value);

  private:
  bool _internal_enable_user_statuses() const;
  void _internal_set_enable_user_statuses(bool value);

  public:
  // optional int64 time_between_user_typing_updates_milliseconds = 11 [json_name = "timeBetweenUserTypingUpdatesMilliseconds"];
  bool has_time_between_user_typing_updates_milliseconds() const;
  void clear_time_between_user_typing_updates_milliseconds() ;
  ::int64_t time_between_user_typing_updates_milliseconds() const;
  void set_time_between_user_typing_updates_milliseconds(::int64_t value);

  private:
  ::int64_t _internal_time_between_user_typing_updates_milliseconds() const;
  void _internal_set_time_between_user_typing_updates_milliseconds(::int64_t value);

  public:
  // optional bool enable_email_invitations = 15 [json_name = "enableEmailInvitations"];
  bool has_enable_email_invitations() const;
  void clear_enable_email_invitations() ;
  bool enable_email_invitations() const;
  void set_enable_email_invitations(bool value);

  private:
  bool _internal_enable_email_invitations() const;
  void _internal_set_enable_email_invitations(bool value);

  public:
  // optional bool enable_svgs = 16 [json_name = "enableSvgs"];
  bool has_enable_svgs() const;
  void clear_enable_svgs() ;
  bool enable_svgs() const;
  void set_enable_svgs(bool value);

  private:
  bool _internal_enable_svgs() const;
  void _internal_set_enable_svgs(bool value);

  public:
  // optional bool allow_persistent_notifications = 17 [json_name = "allowPersistentNotifications"];
  bool has_allow_persistent_notifications() const;
  void clear_allow_persistent_notifications() ;
  bool allow_persistent_notifications() const;
  void set_allow_persistent_notifications(bool value);

  private:
  bool _internal_allow_persistent_notifications() const;
  void _internal_set_allow_persistent_notifications(bool value);

  public:
  // optional bool allow_synced_drafts = 22 [json_name = "allowSyncedDrafts"];
  bool has_allow_synced_drafts() const;
  void clear_allow_synced_drafts() ;
  bool allow_synced_drafts() const;
  void set_allow_synced_drafts(bool value);

  private:
  bool _internal_allow_synced_drafts() const;
  void _internal_set_allow_synced_drafts(bool value);

  public:
  // optional int32 persistent_notification_interval_minutes = 18 [json_name = "persistentNotificationIntervalMinutes"];
  bool has_persistent_notification_interval_minutes() const;
  void clear_persistent_notification_interval_minutes() ;
  ::int32_t persistent_notification_interval_minutes() const;
  void set_persistent_notification_interval_minutes(::int32_t value);

  private:
  ::int32_t _internal_persistent_notification_interval_minutes() const;
  void _internal_set_persistent_notification_interval_minutes(::int32_t value);

  public:
  // optional int32 persistent_notification_max_count = 19 [json_name = "persistentNotificationMaxCount"];
  bool has_persistent_notification_max_count() const;
  void clear_persistent_notification_max_count() ;
  ::int32_t persistent_notification_max_count() const;
  void set_persistent_notification_max_count(::int32_t value);

  private:
  ::int32_t _internal_persistent_notification_max_count() const;
  void _internal_set_persistent_notification_max_count(::int32_t value);

  public:
  // optional int32 persistent_notification_max_recipients = 20 [json_name = "persistentNotificationMaxRecipients"];
  bool has_persistent_notification_max_recipients() const;
  void clear_persistent_notification_max_recipients() ;
  ::int32_t persistent_notification_max_recipients() const;
  void set_persistent_notification_max_recipients(::int32_t value);

  private:
  ::int32_t _internal_persistent_notification_max_recipients() const;
  void _internal_set_persistent_notification_max_recipients(::int32_t value);

  public:
  // optional int32 feature_flag_sync_interval_seconds = 21 [json_name = "featureFlagSyncIntervalSeconds"];
  bool has_feature_flag_sync_interval_seconds() const;
  void clear_feature_flag_sync_interval_seconds() ;
  ::int32_t feature_flag_sync_interval_seconds() const;
  void set_feature_flag_sync_interval_seconds(::int32_t value);

  private:
  ::int32_t _internal_feature_flag_sync_interval_seconds() const;
  void _internal_set_feature_flag_sync_interval_seconds(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:common.v1.ConfigMain)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 21,
                                   0, 87,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigMain& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr env_;
    ::google::protobuf::internal::ArenaStringPtr site_name_;
    ::google::protobuf::internal::ArenaStringPtr site_url_;
    ::google::protobuf::internal::ArenaStringPtr restrict_link_previews_;
    bool enable_link_previews_;
    bool enable_client_performance_debugging_;
    bool enable_gif_picker_;
    bool enable_custom_emoji_;
    bool enable_emoji_picker_;
    bool enable_file_search_;
    bool enable_user_typing_messages_;
    bool enable_user_statuses_;
    ::int64_t time_between_user_typing_updates_milliseconds_;
    bool enable_email_invitations_;
    bool enable_svgs_;
    bool allow_persistent_notifications_;
    bool allow_synced_drafts_;
    ::int32_t persistent_notification_interval_minutes_;
    ::int32_t persistent_notification_max_count_;
    ::int32_t persistent_notification_max_recipients_;
    ::int32_t feature_flag_sync_interval_seconds_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigMain_class_data_;
// -------------------------------------------------------------------

class ConfigLocalization final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigLocalization) */ {
 public:
  inline ConfigLocalization() : ConfigLocalization(nullptr) {}
  ~ConfigLocalization() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigLocalization* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigLocalization));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigLocalization(::google::protobuf::internal::ConstantInitialized);

  inline ConfigLocalization(const ConfigLocalization& from) : ConfigLocalization(nullptr, from) {}
  inline ConfigLocalization(ConfigLocalization&& from) noexcept
      : ConfigLocalization(nullptr, ::std::move(from)) {}
  inline ConfigLocalization& operator=(const ConfigLocalization& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigLocalization& operator=(ConfigLocalization&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigLocalization& default_instance() {
    return *reinterpret_cast<const ConfigLocalization*>(
        &_ConfigLocalization_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(ConfigLocalization& a, ConfigLocalization& b) { a.Swap(&b); }
  inline void Swap(ConfigLocalization* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigLocalization* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigLocalization* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigLocalization>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigLocalization& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigLocalization& from) { ConfigLocalization::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigLocalization* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigLocalization"; }

 protected:
  explicit ConfigLocalization(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigLocalization(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigLocalization& from);
  ConfigLocalization(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigLocalization&& from) noexcept
      : ConfigLocalization(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAvailableLocalesFieldNumber = 3,
    kDefaultServerLocaleFieldNumber = 1,
    kDefaultClientLocaleFieldNumber = 2,
  };
  // repeated string available_locales = 3 [json_name = "availableLocales"];
  int available_locales_size() const;
  private:
  int _internal_available_locales_size() const;

  public:
  void clear_available_locales() ;
  const ::std::string& available_locales(int index) const;
  ::std::string* PROTOBUF_NONNULL mutable_available_locales(int index);
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_available_locales(int index, Arg_&& value, Args_... args);
  ::std::string* PROTOBUF_NONNULL add_available_locales();
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void add_available_locales(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<::std::string>& available_locales() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL mutable_available_locales();

  private:
  const ::google::protobuf::RepeatedPtrField<::std::string>& _internal_available_locales() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL _internal_mutable_available_locales();

  public:
  // optional string default_server_locale = 1 [json_name = "defaultServerLocale"];
  bool has_default_server_locale() const;
  void clear_default_server_locale() ;
  const ::std::string& default_server_locale() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_default_server_locale(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_default_server_locale();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_default_server_locale();
  void set_allocated_default_server_locale(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_default_server_locale() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_default_server_locale(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_default_server_locale();

  public:
  // optional string default_client_locale = 2 [json_name = "defaultClientLocale"];
  bool has_default_client_locale() const;
  void clear_default_client_locale() ;
  const ::std::string& default_client_locale() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_default_client_locale(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_default_client_locale();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_default_client_locale();
  void set_allocated_default_client_locale(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_default_client_locale() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_default_client_locale(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_default_client_locale();

  public:
  // @@protoc_insertion_point(class_scope:common.v1.ConfigLocalization)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   0, 96,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigLocalization& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<::std::string> available_locales_;
    ::google::protobuf::internal::ArenaStringPtr default_server_locale_;
    ::google::protobuf::internal::ArenaStringPtr default_client_locale_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigLocalization_class_data_;
// -------------------------------------------------------------------

class ConfigListenerRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigListenerRequest) */ {
 public:
  inline ConfigListenerRequest() : ConfigListenerRequest(nullptr) {}
  ~ConfigListenerRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigListenerRequest* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigListenerRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigListenerRequest(::google::protobuf::internal::ConstantInitialized);

  inline ConfigListenerRequest(const ConfigListenerRequest& from) : ConfigListenerRequest(nullptr, from) {}
  inline ConfigListenerRequest(ConfigListenerRequest&& from) noexcept
      : ConfigListenerRequest(nullptr, ::std::move(from)) {}
  inline ConfigListenerRequest& operator=(const ConfigListenerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigListenerRequest& operator=(ConfigListenerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigListenerRequest& default_instance() {
    return *reinterpret_cast<const ConfigListenerRequest*>(
        &_ConfigListenerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 28;
  friend void swap(ConfigListenerRequest& a, ConfigListenerRequest& b) { a.Swap(&b); }
  inline void Swap(ConfigListenerRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigListenerRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigListenerRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigListenerRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigListenerRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigListenerRequest& from) { ConfigListenerRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigListenerRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigListenerRequest"; }

 protected:
  explicit ConfigListenerRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigListenerRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigListenerRequest& from);
  ConfigListenerRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigListenerRequest&& from) noexcept
      : ConfigListenerRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClientIdFieldNumber = 1,
  };
  // string client_id = 1 [json_name = "clientId"];
  void clear_client_id() ;
  const ::std::string& client_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_client_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_client_id();
  void set_allocated_client_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_client_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_client_id();

  public:
  // @@protoc_insertion_point(class_scope:common.v1.ConfigListenerRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   0, 49,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigListenerRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr client_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigListenerRequest_class_data_;
// -------------------------------------------------------------------

class ConfigLdap final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigLdap) */ {
 public:
  inline ConfigLdap() : ConfigLdap(nullptr) {}
  ~ConfigLdap() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigLdap* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigLdap));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigLdap(::google::protobuf::internal::ConstantInitialized);

  inline ConfigLdap(const ConfigLdap& from) : ConfigLdap(nullptr, from) {}
  inline ConfigLdap(ConfigLdap&& from) noexcept
      : ConfigLdap(nullptr, ::std::move(from)) {}
  inline ConfigLdap& operator=(const ConfigLdap& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigLdap& operator=(ConfigLdap&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigLdap& default_instance() {
    return *reinterpret_cast<const ConfigLdap*>(
        &_ConfigLdap_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(ConfigLdap& a, ConfigLdap& b) { a.Swap(&b); }
  inline void Swap(ConfigLdap* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigLdap* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigLdap* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigLdap>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigLdap& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigLdap& from) { ConfigLdap::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigLdap* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigLdap"; }

 protected:
  explicit ConfigLdap(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigLdap(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigLdap& from);
  ConfigLdap(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigLdap&& from) noexcept
      : ConfigLdap(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLdapServerFieldNumber = 3,
    kConnectionSecurityFieldNumber = 5,
    kBaseDnFieldNumber = 6,
    kBindUsernameFieldNumber = 7,
    kBindPasswordFieldNumber = 8,
    kUserFilterFieldNumber = 10,
    kGroupFilterFieldNumber = 11,
    kAdminFilterFieldNumber = 13,
    kGroupDisplayNameAttributeFieldNumber = 14,
    kGroupIdAttributeFieldNumber = 15,
    kFirstNameAttributeFieldNumber = 16,
    kLastNameAttributeFieldNumber = 17,
    kEmailAttributeFieldNumber = 18,
    kUsernameAttributeFieldNumber = 19,
    kNicknameAttributeFieldNumber = 20,
    kIdAttributeFieldNumber = 21,
    kPositionAttributeFieldNumber = 22,
    kLoginIdAttributeFieldNumber = 23,
    kPictureAttributeFieldNumber = 24,
    kLoginFieldNameFieldNumber = 28,
    kLoginButtonColorFieldNumber = 29,
    kLoginButtonBorderColorFieldNumber = 30,
    kLoginButtonTextColorFieldNumber = 31,
    kLdapPortFieldNumber = 4,
    kEnableFieldNumber = 1,
    kEnableSyncFieldNumber = 2,
    kEnableAdminFilterFieldNumber = 12,
    kMaximumLoginAttemptsFieldNumber = 9,
    kSyncIntervalMinutesFieldNumber = 25,
    kQueryTimeoutFieldNumber = 26,
    kMaxPageSizeFieldNumber = 27,
  };
  // optional string ldap_server = 3 [json_name = "ldapServer"];
  bool has_ldap_server() const;
  void clear_ldap_server() ;
  const ::std::string& ldap_server() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_ldap_server(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_ldap_server();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_ldap_server();
  void set_allocated_ldap_server(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_ldap_server() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_ldap_server(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_ldap_server();

  public:
  // optional string connection_security = 5 [json_name = "connectionSecurity"];
  bool has_connection_security() const;
  void clear_connection_security() ;
  const ::std::string& connection_security() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_connection_security(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_connection_security();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_connection_security();
  void set_allocated_connection_security(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_connection_security() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_connection_security(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_connection_security();

  public:
  // optional string base_dn = 6 [json_name = "baseDn"];
  bool has_base_dn() const;
  void clear_base_dn() ;
  const ::std::string& base_dn() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_base_dn(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_base_dn();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_base_dn();
  void set_allocated_base_dn(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_base_dn() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_base_dn(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_base_dn();

  public:
  // optional string bind_username = 7 [json_name = "bindUsername"];
  bool has_bind_username() const;
  void clear_bind_username() ;
  const ::std::string& bind_username() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_bind_username(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_bind_username();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_bind_username();
  void set_allocated_bind_username(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_bind_username() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_bind_username(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_bind_username();

  public:
  // optional string bind_password = 8 [json_name = "bindPassword"];
  bool has_bind_password() const;
  void clear_bind_password() ;
  const ::std::string& bind_password() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_bind_password(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_bind_password();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_bind_password();
  void set_allocated_bind_password(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_bind_password() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_bind_password(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_bind_password();

  public:
  // optional string user_filter = 10 [json_name = "userFilter"];
  bool has_user_filter() const;
  void clear_user_filter() ;
  const ::std::string& user_filter() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_user_filter(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_user_filter();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_user_filter();
  void set_allocated_user_filter(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_user_filter() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_user_filter(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_user_filter();

  public:
  // optional string group_filter = 11 [json_name = "groupFilter"];
  bool has_group_filter() const;
  void clear_group_filter() ;
  const ::std::string& group_filter() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_group_filter(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_group_filter();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_group_filter();
  void set_allocated_group_filter(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_group_filter() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_group_filter(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_group_filter();

  public:
  // optional string admin_filter = 13 [json_name = "adminFilter"];
  bool has_admin_filter() const;
  void clear_admin_filter() ;
  const ::std::string& admin_filter() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_admin_filter(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_admin_filter();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_admin_filter();
  void set_allocated_admin_filter(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_admin_filter() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_admin_filter(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_admin_filter();

  public:
  // optional string group_display_name_attribute = 14 [json_name = "groupDisplayNameAttribute"];
  bool has_group_display_name_attribute() const;
  void clear_group_display_name_attribute() ;
  const ::std::string& group_display_name_attribute() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_group_display_name_attribute(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_group_display_name_attribute();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_group_display_name_attribute();
  void set_allocated_group_display_name_attribute(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_group_display_name_attribute() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_group_display_name_attribute(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_group_display_name_attribute();

  public:
  // optional string group_id_attribute = 15 [json_name = "groupIdAttribute"];
  bool has_group_id_attribute() const;
  void clear_group_id_attribute() ;
  const ::std::string& group_id_attribute() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_group_id_attribute(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_group_id_attribute();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_group_id_attribute();
  void set_allocated_group_id_attribute(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_group_id_attribute() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_group_id_attribute(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_group_id_attribute();

  public:
  // optional string first_name_attribute = 16 [json_name = "firstNameAttribute"];
  bool has_first_name_attribute() const;
  void clear_first_name_attribute() ;
  const ::std::string& first_name_attribute() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_first_name_attribute(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_first_name_attribute();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_first_name_attribute();
  void set_allocated_first_name_attribute(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_first_name_attribute() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_first_name_attribute(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_first_name_attribute();

  public:
  // optional string last_name_attribute = 17 [json_name = "lastNameAttribute"];
  bool has_last_name_attribute() const;
  void clear_last_name_attribute() ;
  const ::std::string& last_name_attribute() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_last_name_attribute(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_last_name_attribute();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_last_name_attribute();
  void set_allocated_last_name_attribute(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_last_name_attribute() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_last_name_attribute(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_last_name_attribute();

  public:
  // optional string email_attribute = 18 [json_name = "emailAttribute"];
  bool has_email_attribute() const;
  void clear_email_attribute() ;
  const ::std::string& email_attribute() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_email_attribute(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_email_attribute();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_email_attribute();
  void set_allocated_email_attribute(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_email_attribute() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_email_attribute(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_email_attribute();

  public:
  // optional string username_attribute = 19 [json_name = "usernameAttribute"];
  bool has_username_attribute() const;
  void clear_username_attribute() ;
  const ::std::string& username_attribute() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_username_attribute(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_username_attribute();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_username_attribute();
  void set_allocated_username_attribute(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_username_attribute() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_username_attribute(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_username_attribute();

  public:
  // optional string nickname_attribute = 20 [json_name = "nicknameAttribute"];
  bool has_nickname_attribute() const;
  void clear_nickname_attribute() ;
  const ::std::string& nickname_attribute() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_nickname_attribute(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_nickname_attribute();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_nickname_attribute();
  void set_allocated_nickname_attribute(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_nickname_attribute() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_nickname_attribute(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_nickname_attribute();

  public:
  // optional string id_attribute = 21 [json_name = "idAttribute"];
  bool has_id_attribute() const;
  void clear_id_attribute() ;
  const ::std::string& id_attribute() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_id_attribute(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_id_attribute();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_id_attribute();
  void set_allocated_id_attribute(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_id_attribute() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_id_attribute(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_id_attribute();

  public:
  // optional string position_attribute = 22 [json_name = "positionAttribute"];
  bool has_position_attribute() const;
  void clear_position_attribute() ;
  const ::std::string& position_attribute() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_position_attribute(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_position_attribute();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_position_attribute();
  void set_allocated_position_attribute(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_position_attribute() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_position_attribute(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_position_attribute();

  public:
  // optional string login_id_attribute = 23 [json_name = "loginIdAttribute"];
  bool has_login_id_attribute() const;
  void clear_login_id_attribute() ;
  const ::std::string& login_id_attribute() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_login_id_attribute(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_login_id_attribute();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_login_id_attribute();
  void set_allocated_login_id_attribute(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_login_id_attribute() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_login_id_attribute(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_login_id_attribute();

  public:
  // optional string picture_attribute = 24 [json_name = "pictureAttribute"];
  bool has_picture_attribute() const;
  void clear_picture_attribute() ;
  const ::std::string& picture_attribute() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_picture_attribute(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_picture_attribute();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_picture_attribute();
  void set_allocated_picture_attribute(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_picture_attribute() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_picture_attribute(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_picture_attribute();

  public:
  // optional string login_field_name = 28 [json_name = "loginFieldName"];
  bool has_login_field_name() const;
  void clear_login_field_name() ;
  const ::std::string& login_field_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_login_field_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_login_field_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_login_field_name();
  void set_allocated_login_field_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_login_field_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_login_field_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_login_field_name();

  public:
  // optional string login_button_color = 29 [json_name = "loginButtonColor"];
  bool has_login_button_color() const;
  void clear_login_button_color() ;
  const ::std::string& login_button_color() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_login_button_color(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_login_button_color();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_login_button_color();
  void set_allocated_login_button_color(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_login_button_color() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_login_button_color(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_login_button_color();

  public:
  // optional string login_button_border_color = 30 [json_name = "loginButtonBorderColor"];
  bool has_login_button_border_color() const;
  void clear_login_button_border_color() ;
  const ::std::string& login_button_border_color() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_login_button_border_color(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_login_button_border_color();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_login_button_border_color();
  void set_allocated_login_button_border_color(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_login_button_border_color() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_login_button_border_color(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_login_button_border_color();

  public:
  // optional string login_button_text_color = 31 [json_name = "loginButtonTextColor"];
  bool has_login_button_text_color() const;
  void clear_login_button_text_color() ;
  const ::std::string& login_button_text_color() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_login_button_text_color(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_login_button_text_color();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_login_button_text_color();
  void set_allocated_login_button_text_color(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_login_button_text_color() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_login_button_text_color(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_login_button_text_color();

  public:
  // optional int32 ldap_port = 4 [json_name = "ldapPort"];
  bool has_ldap_port() const;
  void clear_ldap_port() ;
  ::int32_t ldap_port() const;
  void set_ldap_port(::int32_t value);

  private:
  ::int32_t _internal_ldap_port() const;
  void _internal_set_ldap_port(::int32_t value);

  public:
  // optional bool enable = 1 [json_name = "enable"];
  bool has_enable() const;
  void clear_enable() ;
  bool enable() const;
  void set_enable(bool value);

  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);

  public:
  // optional bool enable_sync = 2 [json_name = "enableSync"];
  bool has_enable_sync() const;
  void clear_enable_sync() ;
  bool enable_sync() const;
  void set_enable_sync(bool value);

  private:
  bool _internal_enable_sync() const;
  void _internal_set_enable_sync(bool value);

  public:
  // optional bool enable_admin_filter = 12 [json_name = "enableAdminFilter"];
  bool has_enable_admin_filter() const;
  void clear_enable_admin_filter() ;
  bool enable_admin_filter() const;
  void set_enable_admin_filter(bool value);

  private:
  bool _internal_enable_admin_filter() const;
  void _internal_set_enable_admin_filter(bool value);

  public:
  // optional int32 maximum_login_attempts = 9 [json_name = "maximumLoginAttempts"];
  bool has_maximum_login_attempts() const;
  void clear_maximum_login_attempts() ;
  ::int32_t maximum_login_attempts() const;
  void set_maximum_login_attempts(::int32_t value);

  private:
  ::int32_t _internal_maximum_login_attempts() const;
  void _internal_set_maximum_login_attempts(::int32_t value);

  public:
  // optional int32 sync_interval_minutes = 25 [json_name = "syncIntervalMinutes"];
  bool has_sync_interval_minutes() const;
  void clear_sync_interval_minutes() ;
  ::int32_t sync_interval_minutes() const;
  void set_sync_interval_minutes(::int32_t value);

  private:
  ::int32_t _internal_sync_interval_minutes() const;
  void _internal_set_sync_interval_minutes(::int32_t value);

  public:
  // optional int32 query_timeout = 26 [json_name = "queryTimeout"];
  bool has_query_timeout() const;
  void clear_query_timeout() ;
  ::int32_t query_timeout() const;
  void set_query_timeout(::int32_t value);

  private:
  ::int32_t _internal_query_timeout() const;
  void _internal_set_query_timeout(::int32_t value);

  public:
  // optional int32 max_page_size = 27 [json_name = "maxPageSize"];
  bool has_max_page_size() const;
  void clear_max_page_size() ;
  ::int32_t max_page_size() const;
  void set_max_page_size(::int32_t value);

  private:
  ::int32_t _internal_max_page_size() const;
  void _internal_set_max_page_size(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:common.v1.ConfigLdap)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 31,
                                   0, 434,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigLdap& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr ldap_server_;
    ::google::protobuf::internal::ArenaStringPtr connection_security_;
    ::google::protobuf::internal::ArenaStringPtr base_dn_;
    ::google::protobuf::internal::ArenaStringPtr bind_username_;
    ::google::protobuf::internal::ArenaStringPtr bind_password_;
    ::google::protobuf::internal::ArenaStringPtr user_filter_;
    ::google::protobuf::internal::ArenaStringPtr group_filter_;
    ::google::protobuf::internal::ArenaStringPtr admin_filter_;
    ::google::protobuf::internal::ArenaStringPtr group_display_name_attribute_;
    ::google::protobuf::internal::ArenaStringPtr group_id_attribute_;
    ::google::protobuf::internal::ArenaStringPtr first_name_attribute_;
    ::google::protobuf::internal::ArenaStringPtr last_name_attribute_;
    ::google::protobuf::internal::ArenaStringPtr email_attribute_;
    ::google::protobuf::internal::ArenaStringPtr username_attribute_;
    ::google::protobuf::internal::ArenaStringPtr nickname_attribute_;
    ::google::protobuf::internal::ArenaStringPtr id_attribute_;
    ::google::protobuf::internal::ArenaStringPtr position_attribute_;
    ::google::protobuf::internal::ArenaStringPtr login_id_attribute_;
    ::google::protobuf::internal::ArenaStringPtr picture_attribute_;
    ::google::protobuf::internal::ArenaStringPtr login_field_name_;
    ::google::protobuf::internal::ArenaStringPtr login_button_color_;
    ::google::protobuf::internal::ArenaStringPtr login_button_border_color_;
    ::google::protobuf::internal::ArenaStringPtr login_button_text_color_;
    ::int32_t ldap_port_;
    bool enable_;
    bool enable_sync_;
    bool enable_admin_filter_;
    ::int32_t maximum_login_attempts_;
    ::int32_t sync_interval_minutes_;
    ::int32_t query_timeout_;
    ::int32_t max_page_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigLdap_class_data_;
// -------------------------------------------------------------------

class ConfigImageProxy final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigImageProxy) */ {
 public:
  inline ConfigImageProxy() : ConfigImageProxy(nullptr) {}
  ~ConfigImageProxy() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigImageProxy* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigImageProxy));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigImageProxy(::google::protobuf::internal::ConstantInitialized);

  inline ConfigImageProxy(const ConfigImageProxy& from) : ConfigImageProxy(nullptr, from) {}
  inline ConfigImageProxy(ConfigImageProxy&& from) noexcept
      : ConfigImageProxy(nullptr, ::std::move(from)) {}
  inline ConfigImageProxy& operator=(const ConfigImageProxy& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigImageProxy& operator=(ConfigImageProxy&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigImageProxy& default_instance() {
    return *reinterpret_cast<const ConfigImageProxy*>(
        &_ConfigImageProxy_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(ConfigImageProxy& a, ConfigImageProxy& b) { a.Swap(&b); }
  inline void Swap(ConfigImageProxy* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigImageProxy* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigImageProxy* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigImageProxy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigImageProxy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigImageProxy& from) { ConfigImageProxy::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigImageProxy* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigImageProxy"; }

 protected:
  explicit ConfigImageProxy(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigImageProxy(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigImageProxy& from);
  ConfigImageProxy(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigImageProxy&& from) noexcept
      : ConfigImageProxy(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kImageProxyTypeFieldNumber = 2,
    kRemoteImageProxyUrlFieldNumber = 3,
    kRemoteImageProxyOptionsFieldNumber = 4,
    kEnableFieldNumber = 1,
  };
  // optional string image_proxy_type = 2 [json_name = "imageProxyType"];
  bool has_image_proxy_type() const;
  void clear_image_proxy_type() ;
  const ::std::string& image_proxy_type() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_image_proxy_type(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_image_proxy_type();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_image_proxy_type();
  void set_allocated_image_proxy_type(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_image_proxy_type() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_image_proxy_type(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_image_proxy_type();

  public:
  // optional string remote_image_proxy_url = 3 [json_name = "remoteImageProxyUrl"];
  bool has_remote_image_proxy_url() const;
  void clear_remote_image_proxy_url() ;
  const ::std::string& remote_image_proxy_url() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_remote_image_proxy_url(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_remote_image_proxy_url();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_remote_image_proxy_url();
  void set_allocated_remote_image_proxy_url(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_remote_image_proxy_url() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_remote_image_proxy_url(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_remote_image_proxy_url();

  public:
  // optional string remote_image_proxy_options = 4 [json_name = "remoteImageProxyOptions"];
  bool has_remote_image_proxy_options() const;
  void clear_remote_image_proxy_options() ;
  const ::std::string& remote_image_proxy_options() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_remote_image_proxy_options(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_remote_image_proxy_options();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_remote_image_proxy_options();
  void set_allocated_remote_image_proxy_options(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_remote_image_proxy_options() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_remote_image_proxy_options(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_remote_image_proxy_options();

  public:
  // optional bool enable = 1 [json_name = "enable"];
  bool has_enable() const;
  void clear_enable() ;
  bool enable() const;
  void set_enable(bool value);

  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:common.v1.ConfigImageProxy)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   0, 99,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigImageProxy& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr image_proxy_type_;
    ::google::protobuf::internal::ArenaStringPtr remote_image_proxy_url_;
    ::google::protobuf::internal::ArenaStringPtr remote_image_proxy_options_;
    bool enable_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigImageProxy_class_data_;
// -------------------------------------------------------------------

class ConfigGetRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:common.v1.ConfigGetRequest) */ {
 public:
  inline ConfigGetRequest() : ConfigGetRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigGetRequest* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigGetRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigGetRequest(::google::protobuf::internal::ConstantInitialized);

  inline ConfigGetRequest(const ConfigGetRequest& from) : ConfigGetRequest(nullptr, from) {}
  inline ConfigGetRequest(ConfigGetRequest&& from) noexcept
      : ConfigGetRequest(nullptr, ::std::move(from)) {}
  inline ConfigGetRequest& operator=(const ConfigGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigGetRequest& operator=(ConfigGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigGetRequest& default_instance() {
    return *reinterpret_cast<const ConfigGetRequest*>(
        &_ConfigGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(ConfigGetRequest& a, ConfigGetRequest& b) { a.Swap(&b); }
  inline void Swap(ConfigGetRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigGetRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigGetRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<ConfigGetRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ConfigGetRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ConfigGetRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigGetRequest"; }

 protected:
  explicit ConfigGetRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigGetRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigGetRequest& from);
  ConfigGetRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigGetRequest&& from) noexcept
      : ConfigGetRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:common.v1.ConfigGetRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 0,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigGetRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigGetRequest_class_data_;
// -------------------------------------------------------------------

class ConfigFile final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigFile) */ {
 public:
  inline ConfigFile() : ConfigFile(nullptr) {}
  ~ConfigFile() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigFile* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigFile));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigFile(::google::protobuf::internal::ConstantInitialized);

  inline ConfigFile(const ConfigFile& from) : ConfigFile(nullptr, from) {}
  inline ConfigFile(ConfigFile&& from) noexcept
      : ConfigFile(nullptr, ::std::move(from)) {}
  inline ConfigFile& operator=(const ConfigFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigFile& operator=(ConfigFile&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigFile& default_instance() {
    return *reinterpret_cast<const ConfigFile*>(
        &_ConfigFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(ConfigFile& a, ConfigFile& b) { a.Swap(&b); }
  inline void Swap(ConfigFile* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigFile* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigFile* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigFile>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigFile& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigFile& from) { ConfigFile::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigFile* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigFile"; }

 protected:
  explicit ConfigFile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigFile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigFile& from);
  ConfigFile(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigFile&& from) noexcept
      : ConfigFile(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDriverNameFieldNumber = 6,
    kAmazonS3AccessKeyIdFieldNumber = 7,
    kAmazonS3SecretAccessKeyFieldNumber = 8,
    kAmazonS3BucketFieldNumber = 9,
    kAmazonS3PathPrefixFieldNumber = 10,
    kAmazonS3RegionFieldNumber = 11,
    kAmazonS3EndpointFieldNumber = 12,
    kAmazonS3StorageClassFieldNumber = 19,
    kMaxImageResolutionFieldNumber = 4,
    kMaxImageDecoderConcurrencyFieldNumber = 5,
    kEnableFileAttachmentsFieldNumber = 1,
    kEnableMobileUploadFieldNumber = 2,
    kEnableMobileDownloadFieldNumber = 3,
    kAmazonS3SslFieldNumber = 13,
    kAmazonS3SignV2FieldNumber = 14,
    kAmazonS3SseFieldNumber = 15,
    kAmazonS3TraceFieldNumber = 16,
    kAmazonS3RequestTimeoutMillisecondsFieldNumber = 17,
    kAmazonS3UploadPartSizeBytesFieldNumber = 18,
  };
  // optional string driver_name = 6 [json_name = "driverName"];
  bool has_driver_name() const;
  void clear_driver_name() ;
  const ::std::string& driver_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_driver_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_driver_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_driver_name();
  void set_allocated_driver_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_driver_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_driver_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_driver_name();

  public:
  // optional string amazon_s3_access_key_id = 7 [json_name = "amazonS3AccessKeyId"];
  bool has_amazon_s3_access_key_id() const;
  void clear_amazon_s3_access_key_id() ;
  const ::std::string& amazon_s3_access_key_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_amazon_s3_access_key_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_amazon_s3_access_key_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_amazon_s3_access_key_id();
  void set_allocated_amazon_s3_access_key_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_amazon_s3_access_key_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_amazon_s3_access_key_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_amazon_s3_access_key_id();

  public:
  // optional string amazon_s3_secret_access_key = 8 [json_name = "amazonS3SecretAccessKey"];
  bool has_amazon_s3_secret_access_key() const;
  void clear_amazon_s3_secret_access_key() ;
  const ::std::string& amazon_s3_secret_access_key() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_amazon_s3_secret_access_key(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_amazon_s3_secret_access_key();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_amazon_s3_secret_access_key();
  void set_allocated_amazon_s3_secret_access_key(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_amazon_s3_secret_access_key() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_amazon_s3_secret_access_key(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_amazon_s3_secret_access_key();

  public:
  // optional string amazon_s3_bucket = 9 [json_name = "amazonS3Bucket"];
  bool has_amazon_s3_bucket() const;
  void clear_amazon_s3_bucket() ;
  const ::std::string& amazon_s3_bucket() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_amazon_s3_bucket(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_amazon_s3_bucket();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_amazon_s3_bucket();
  void set_allocated_amazon_s3_bucket(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_amazon_s3_bucket() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_amazon_s3_bucket(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_amazon_s3_bucket();

  public:
  // optional string amazon_s3_path_prefix = 10 [json_name = "amazonS3PathPrefix"];
  bool has_amazon_s3_path_prefix() const;
  void clear_amazon_s3_path_prefix() ;
  const ::std::string& amazon_s3_path_prefix() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_amazon_s3_path_prefix(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_amazon_s3_path_prefix();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_amazon_s3_path_prefix();
  void set_allocated_amazon_s3_path_prefix(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_amazon_s3_path_prefix() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_amazon_s3_path_prefix(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_amazon_s3_path_prefix();

  public:
  // optional string amazon_s3_region = 11 [json_name = "amazonS3Region"];
  bool has_amazon_s3_region() const;
  void clear_amazon_s3_region() ;
  const ::std::string& amazon_s3_region() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_amazon_s3_region(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_amazon_s3_region();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_amazon_s3_region();
  void set_allocated_amazon_s3_region(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_amazon_s3_region() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_amazon_s3_region(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_amazon_s3_region();

  public:
  // optional string amazon_s3_endpoint = 12 [json_name = "amazonS3Endpoint"];
  bool has_amazon_s3_endpoint() const;
  void clear_amazon_s3_endpoint() ;
  const ::std::string& amazon_s3_endpoint() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_amazon_s3_endpoint(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_amazon_s3_endpoint();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_amazon_s3_endpoint();
  void set_allocated_amazon_s3_endpoint(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_amazon_s3_endpoint() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_amazon_s3_endpoint(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_amazon_s3_endpoint();

  public:
  // optional string amazon_s3_storage_class = 19 [json_name = "amazonS3StorageClass"];
  bool has_amazon_s3_storage_class() const;
  void clear_amazon_s3_storage_class() ;
  const ::std::string& amazon_s3_storage_class() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_amazon_s3_storage_class(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_amazon_s3_storage_class();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_amazon_s3_storage_class();
  void set_allocated_amazon_s3_storage_class(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_amazon_s3_storage_class() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_amazon_s3_storage_class(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_amazon_s3_storage_class();

  public:
  // optional int64 max_image_resolution = 4 [json_name = "maxImageResolution"];
  bool has_max_image_resolution() const;
  void clear_max_image_resolution() ;
  ::int64_t max_image_resolution() const;
  void set_max_image_resolution(::int64_t value);

  private:
  ::int64_t _internal_max_image_resolution() const;
  void _internal_set_max_image_resolution(::int64_t value);

  public:
  // optional int64 max_image_decoder_concurrency = 5 [json_name = "maxImageDecoderConcurrency"];
  bool has_max_image_decoder_concurrency() const;
  void clear_max_image_decoder_concurrency() ;
  ::int64_t max_image_decoder_concurrency() const;
  void set_max_image_decoder_concurrency(::int64_t value);

  private:
  ::int64_t _internal_max_image_decoder_concurrency() const;
  void _internal_set_max_image_decoder_concurrency(::int64_t value);

  public:
  // optional bool enable_file_attachments = 1 [json_name = "enableFileAttachments"];
  bool has_enable_file_attachments() const;
  void clear_enable_file_attachments() ;
  bool enable_file_attachments() const;
  void set_enable_file_attachments(bool value);

  private:
  bool _internal_enable_file_attachments() const;
  void _internal_set_enable_file_attachments(bool value);

  public:
  // optional bool enable_mobile_upload = 2 [json_name = "enableMobileUpload"];
  bool has_enable_mobile_upload() const;
  void clear_enable_mobile_upload() ;
  bool enable_mobile_upload() const;
  void set_enable_mobile_upload(bool value);

  private:
  bool _internal_enable_mobile_upload() const;
  void _internal_set_enable_mobile_upload(bool value);

  public:
  // optional bool enable_mobile_download = 3 [json_name = "enableMobileDownload"];
  bool has_enable_mobile_download() const;
  void clear_enable_mobile_download() ;
  bool enable_mobile_download() const;
  void set_enable_mobile_download(bool value);

  private:
  bool _internal_enable_mobile_download() const;
  void _internal_set_enable_mobile_download(bool value);

  public:
  // optional bool amazon_s3_ssl = 13 [json_name = "amazonS3Ssl"];
  bool has_amazon_s3_ssl() const;
  void clear_amazon_s3_ssl() ;
  bool amazon_s3_ssl() const;
  void set_amazon_s3_ssl(bool value);

  private:
  bool _internal_amazon_s3_ssl() const;
  void _internal_set_amazon_s3_ssl(bool value);

  public:
  // optional bool amazon_s3_sign_v2 = 14 [json_name = "amazonS3SignV2"];
  bool has_amazon_s3_sign_v2() const;
  void clear_amazon_s3_sign_v2() ;
  bool amazon_s3_sign_v2() const;
  void set_amazon_s3_sign_v2(bool value);

  private:
  bool _internal_amazon_s3_sign_v2() const;
  void _internal_set_amazon_s3_sign_v2(bool value);

  public:
  // optional bool amazon_s3_sse = 15 [json_name = "amazonS3Sse"];
  bool has_amazon_s3_sse() const;
  void clear_amazon_s3_sse() ;
  bool amazon_s3_sse() const;
  void set_amazon_s3_sse(bool value);

  private:
  bool _internal_amazon_s3_sse() const;
  void _internal_set_amazon_s3_sse(bool value);

  public:
  // optional bool amazon_s3_trace = 16 [json_name = "amazonS3Trace"];
  bool has_amazon_s3_trace() const;
  void clear_amazon_s3_trace() ;
  bool amazon_s3_trace() const;
  void set_amazon_s3_trace(bool value);

  private:
  bool _internal_amazon_s3_trace() const;
  void _internal_set_amazon_s3_trace(bool value);

  public:
  // optional int64 amazon_s3_request_timeout_milliseconds = 17 [json_name = "amazonS3RequestTimeoutMilliseconds"];
  bool has_amazon_s3_request_timeout_milliseconds() const;
  void clear_amazon_s3_request_timeout_milliseconds() ;
  ::int64_t amazon_s3_request_timeout_milliseconds() const;
  void set_amazon_s3_request_timeout_milliseconds(::int64_t value);

  private:
  ::int64_t _internal_amazon_s3_request_timeout_milliseconds() const;
  void _internal_set_amazon_s3_request_timeout_milliseconds(::int64_t value);

  public:
  // optional int64 amazon_s3_upload_part_size_bytes = 18 [json_name = "amazonS3UploadPartSizeBytes"];
  bool has_amazon_s3_upload_part_size_bytes() const;
  void clear_amazon_s3_upload_part_size_bytes() ;
  ::int64_t amazon_s3_upload_part_size_bytes() const;
  void set_amazon_s3_upload_part_size_bytes(::int64_t value);

  private:
  ::int64_t _internal_amazon_s3_upload_part_size_bytes() const;
  void _internal_set_amazon_s3_upload_part_size_bytes(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:common.v1.ConfigFile)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 19,
                                   0, 200,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigFile& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr driver_name_;
    ::google::protobuf::internal::ArenaStringPtr amazon_s3_access_key_id_;
    ::google::protobuf::internal::ArenaStringPtr amazon_s3_secret_access_key_;
    ::google::protobuf::internal::ArenaStringPtr amazon_s3_bucket_;
    ::google::protobuf::internal::ArenaStringPtr amazon_s3_path_prefix_;
    ::google::protobuf::internal::ArenaStringPtr amazon_s3_region_;
    ::google::protobuf::internal::ArenaStringPtr amazon_s3_endpoint_;
    ::google::protobuf::internal::ArenaStringPtr amazon_s3_storage_class_;
    ::int64_t max_image_resolution_;
    ::int64_t max_image_decoder_concurrency_;
    bool enable_file_attachments_;
    bool enable_mobile_upload_;
    bool enable_mobile_download_;
    bool amazon_s3_ssl_;
    bool amazon_s3_sign_v2_;
    bool amazon_s3_sse_;
    bool amazon_s3_trace_;
    ::int64_t amazon_s3_request_timeout_milliseconds_;
    ::int64_t amazon_s3_upload_part_size_bytes_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigFile_class_data_;
// -------------------------------------------------------------------

class ConfigEmail final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigEmail) */ {
 public:
  inline ConfigEmail() : ConfigEmail(nullptr) {}
  ~ConfigEmail() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigEmail* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigEmail));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigEmail(::google::protobuf::internal::ConstantInitialized);

  inline ConfigEmail(const ConfigEmail& from) : ConfigEmail(nullptr, from) {}
  inline ConfigEmail(ConfigEmail&& from) noexcept
      : ConfigEmail(nullptr, ::std::move(from)) {}
  inline ConfigEmail& operator=(const ConfigEmail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigEmail& operator=(ConfigEmail&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigEmail& default_instance() {
    return *reinterpret_cast<const ConfigEmail*>(
        &_ConfigEmail_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(ConfigEmail& a, ConfigEmail& b) { a.Swap(&b); }
  inline void Swap(ConfigEmail* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigEmail* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigEmail* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigEmail>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigEmail& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigEmail& from) { ConfigEmail::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigEmail* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigEmail"; }

 protected:
  explicit ConfigEmail(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigEmail(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigEmail& from);
  ConfigEmail(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigEmail&& from) noexcept
      : ConfigEmail(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFeedbackEmailFieldNumber = 3,
    kReplyToAddressFieldNumber = 4,
    kSmtpUsernameFieldNumber = 6,
    kSmtpPasswordFieldNumber = 7,
    kSmtpServerFieldNumber = 8,
    kSmtpPortFieldNumber = 9,
    kConnectionSecurityFieldNumber = 11,
    kPushNotificationServerFieldNumber = 13,
    kPushNotificationContentsFieldNumber = 14,
    kEmailNotificationContentsTypeFieldNumber = 20,
    kLoginButtonColorFieldNumber = 21,
    kLoginButtonBorderColorFieldNumber = 22,
    kLoginButtonTextColorFieldNumber = 23,
    kSendEmailNotificationsFieldNumber = 1,
    kRequireEmailVerificationFieldNumber = 2,
    kEnableSmtpAuthFieldNumber = 5,
    kSendPushNotificationsFieldNumber = 12,
    kSmtpServerTimeoutFieldNumber = 10,
    kPushNotificationBufferFieldNumber = 15,
    kEmailBatchingBufferSizeFieldNumber = 17,
    kEnableEmailBatchingFieldNumber = 16,
    kSkipServerCertificateVerificationFieldNumber = 19,
    kEmailBatchingIntervalFieldNumber = 18,
    kRateLimitingMemorySizeFieldNumber = 24,
    kRateLimitingPerHourFieldNumber = 25,
    kRateLimitingMaxBurstFieldNumber = 26,
  };
  // optional string feedback_email = 3 [json_name = "feedbackEmail"];
  bool has_feedback_email() const;
  void clear_feedback_email() ;
  const ::std::string& feedback_email() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_feedback_email(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_feedback_email();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_feedback_email();
  void set_allocated_feedback_email(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_feedback_email() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_feedback_email(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_feedback_email();

  public:
  // optional string reply_to_address = 4 [json_name = "replyToAddress"];
  bool has_reply_to_address() const;
  void clear_reply_to_address() ;
  const ::std::string& reply_to_address() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_reply_to_address(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_reply_to_address();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_reply_to_address();
  void set_allocated_reply_to_address(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_reply_to_address() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_reply_to_address(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_reply_to_address();

  public:
  // optional string smtp_username = 6 [json_name = "smtpUsername"];
  bool has_smtp_username() const;
  void clear_smtp_username() ;
  const ::std::string& smtp_username() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_smtp_username(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_smtp_username();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_smtp_username();
  void set_allocated_smtp_username(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_smtp_username() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_smtp_username(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_smtp_username();

  public:
  // optional string smtp_password = 7 [json_name = "smtpPassword"];
  bool has_smtp_password() const;
  void clear_smtp_password() ;
  const ::std::string& smtp_password() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_smtp_password(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_smtp_password();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_smtp_password();
  void set_allocated_smtp_password(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_smtp_password() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_smtp_password(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_smtp_password();

  public:
  // optional string smtp_server = 8 [json_name = "smtpServer"];
  bool has_smtp_server() const;
  void clear_smtp_server() ;
  const ::std::string& smtp_server() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_smtp_server(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_smtp_server();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_smtp_server();
  void set_allocated_smtp_server(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_smtp_server() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_smtp_server(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_smtp_server();

  public:
  // optional string smtp_port = 9 [json_name = "smtpPort"];
  bool has_smtp_port() const;
  void clear_smtp_port() ;
  const ::std::string& smtp_port() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_smtp_port(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_smtp_port();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_smtp_port();
  void set_allocated_smtp_port(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_smtp_port() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_smtp_port(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_smtp_port();

  public:
  // optional string connection_security = 11 [json_name = "connectionSecurity"];
  bool has_connection_security() const;
  void clear_connection_security() ;
  const ::std::string& connection_security() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_connection_security(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_connection_security();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_connection_security();
  void set_allocated_connection_security(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_connection_security() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_connection_security(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_connection_security();

  public:
  // optional string push_notification_server = 13 [json_name = "pushNotificationServer"];
  bool has_push_notification_server() const;
  void clear_push_notification_server() ;
  const ::std::string& push_notification_server() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_push_notification_server(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_push_notification_server();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_push_notification_server();
  void set_allocated_push_notification_server(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_push_notification_server() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_push_notification_server(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_push_notification_server();

  public:
  // optional string push_notification_contents = 14 [json_name = "pushNotificationContents"];
  bool has_push_notification_contents() const;
  void clear_push_notification_contents() ;
  const ::std::string& push_notification_contents() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_push_notification_contents(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_push_notification_contents();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_push_notification_contents();
  void set_allocated_push_notification_contents(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_push_notification_contents() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_push_notification_contents(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_push_notification_contents();

  public:
  // optional string email_notification_contents_type = 20 [json_name = "emailNotificationContentsType"];
  bool has_email_notification_contents_type() const;
  void clear_email_notification_contents_type() ;
  const ::std::string& email_notification_contents_type() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_email_notification_contents_type(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_email_notification_contents_type();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_email_notification_contents_type();
  void set_allocated_email_notification_contents_type(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_email_notification_contents_type() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_email_notification_contents_type(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_email_notification_contents_type();

  public:
  // optional string login_button_color = 21 [json_name = "loginButtonColor"];
  bool has_login_button_color() const;
  void clear_login_button_color() ;
  const ::std::string& login_button_color() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_login_button_color(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_login_button_color();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_login_button_color();
  void set_allocated_login_button_color(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_login_button_color() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_login_button_color(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_login_button_color();

  public:
  // optional string login_button_border_color = 22 [json_name = "loginButtonBorderColor"];
  bool has_login_button_border_color() const;
  void clear_login_button_border_color() ;
  const ::std::string& login_button_border_color() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_login_button_border_color(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_login_button_border_color();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_login_button_border_color();
  void set_allocated_login_button_border_color(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_login_button_border_color() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_login_button_border_color(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_login_button_border_color();

  public:
  // optional string login_button_text_color = 23 [json_name = "loginButtonTextColor"];
  bool has_login_button_text_color() const;
  void clear_login_button_text_color() ;
  const ::std::string& login_button_text_color() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_login_button_text_color(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_login_button_text_color();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_login_button_text_color();
  void set_allocated_login_button_text_color(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_login_button_text_color() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_login_button_text_color(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_login_button_text_color();

  public:
  // optional bool send_email_notifications = 1 [json_name = "sendEmailNotifications"];
  bool has_send_email_notifications() const;
  void clear_send_email_notifications() ;
  bool send_email_notifications() const;
  void set_send_email_notifications(bool value);

  private:
  bool _internal_send_email_notifications() const;
  void _internal_set_send_email_notifications(bool value);

  public:
  // optional bool require_email_verification = 2 [json_name = "requireEmailVerification"];
  bool has_require_email_verification() const;
  void clear_require_email_verification() ;
  bool require_email_verification() const;
  void set_require_email_verification(bool value);

  private:
  bool _internal_require_email_verification() const;
  void _internal_set_require_email_verification(bool value);

  public:
  // optional bool enable_smtp_auth = 5 [json_name = "enableSmtpAuth"];
  bool has_enable_smtp_auth() const;
  void clear_enable_smtp_auth() ;
  bool enable_smtp_auth() const;
  void set_enable_smtp_auth(bool value);

  private:
  bool _internal_enable_smtp_auth() const;
  void _internal_set_enable_smtp_auth(bool value);

  public:
  // optional bool send_push_notifications = 12 [json_name = "sendPushNotifications"];
  bool has_send_push_notifications() const;
  void clear_send_push_notifications() ;
  bool send_push_notifications() const;
  void set_send_push_notifications(bool value);

  private:
  bool _internal_send_push_notifications() const;
  void _internal_set_send_push_notifications(bool value);

  public:
  // optional int32 smtp_server_timeout = 10 [json_name = "smtpServerTimeout"];
  bool has_smtp_server_timeout() const;
  void clear_smtp_server_timeout() ;
  ::int32_t smtp_server_timeout() const;
  void set_smtp_server_timeout(::int32_t value);

  private:
  ::int32_t _internal_smtp_server_timeout() const;
  void _internal_set_smtp_server_timeout(::int32_t value);

  public:
  // optional int32 push_notification_buffer = 15 [json_name = "pushNotificationBuffer"];
  bool has_push_notification_buffer() const;
  void clear_push_notification_buffer() ;
  ::int32_t push_notification_buffer() const;
  void set_push_notification_buffer(::int32_t value);

  private:
  ::int32_t _internal_push_notification_buffer() const;
  void _internal_set_push_notification_buffer(::int32_t value);

  public:
  // optional int32 email_batching_buffer_size = 17 [json_name = "emailBatchingBufferSize"];
  bool has_email_batching_buffer_size() const;
  void clear_email_batching_buffer_size() ;
  ::int32_t email_batching_buffer_size() const;
  void set_email_batching_buffer_size(::int32_t value);

  private:
  ::int32_t _internal_email_batching_buffer_size() const;
  void _internal_set_email_batching_buffer_size(::int32_t value);

  public:
  // optional bool enable_email_batching = 16 [json_name = "enableEmailBatching"];
  bool has_enable_email_batching() const;
  void clear_enable_email_batching() ;
  bool enable_email_batching() const;
  void set_enable_email_batching(bool value);

  private:
  bool _internal_enable_email_batching() const;
  void _internal_set_enable_email_batching(bool value);

  public:
  // optional bool skip_server_certificate_verification = 19 [json_name = "skipServerCertificateVerification"];
  bool has_skip_server_certificate_verification() const;
  void clear_skip_server_certificate_verification() ;
  bool skip_server_certificate_verification() const;
  void set_skip_server_certificate_verification(bool value);

  private:
  bool _internal_skip_server_certificate_verification() const;
  void _internal_set_skip_server_certificate_verification(bool value);

  public:
  // optional int32 email_batching_interval = 18 [json_name = "emailBatchingInterval"];
  bool has_email_batching_interval() const;
  void clear_email_batching_interval() ;
  ::int32_t email_batching_interval() const;
  void set_email_batching_interval(::int32_t value);

  private:
  ::int32_t _internal_email_batching_interval() const;
  void _internal_set_email_batching_interval(::int32_t value);

  public:
  // optional int32 rate_limiting_memory_size = 24 [json_name = "rateLimitingMemorySize"];
  bool has_rate_limiting_memory_size() const;
  void clear_rate_limiting_memory_size() ;
  ::int32_t rate_limiting_memory_size() const;
  void set_rate_limiting_memory_size(::int32_t value);

  private:
  ::int32_t _internal_rate_limiting_memory_size() const;
  void _internal_set_rate_limiting_memory_size(::int32_t value);

  public:
  // optional int32 rate_limiting_per_hour = 25 [json_name = "rateLimitingPerHour"];
  bool has_rate_limiting_per_hour() const;
  void clear_rate_limiting_per_hour() ;
  ::int32_t rate_limiting_per_hour() const;
  void set_rate_limiting_per_hour(::int32_t value);

  private:
  ::int32_t _internal_rate_limiting_per_hour() const;
  void _internal_set_rate_limiting_per_hour(::int32_t value);

  public:
  // optional int32 rate_limiting_max_burst = 26 [json_name = "rateLimitingMaxBurst"];
  bool has_rate_limiting_max_burst() const;
  void clear_rate_limiting_max_burst() ;
  ::int32_t rate_limiting_max_burst() const;
  void set_rate_limiting_max_burst(::int32_t value);

  private:
  ::int32_t _internal_rate_limiting_max_burst() const;
  void _internal_set_rate_limiting_max_burst(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:common.v1.ConfigEmail)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 26,
                                   0, 297,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigEmail& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr feedback_email_;
    ::google::protobuf::internal::ArenaStringPtr reply_to_address_;
    ::google::protobuf::internal::ArenaStringPtr smtp_username_;
    ::google::protobuf::internal::ArenaStringPtr smtp_password_;
    ::google::protobuf::internal::ArenaStringPtr smtp_server_;
    ::google::protobuf::internal::ArenaStringPtr smtp_port_;
    ::google::protobuf::internal::ArenaStringPtr connection_security_;
    ::google::protobuf::internal::ArenaStringPtr push_notification_server_;
    ::google::protobuf::internal::ArenaStringPtr push_notification_contents_;
    ::google::protobuf::internal::ArenaStringPtr email_notification_contents_type_;
    ::google::protobuf::internal::ArenaStringPtr login_button_color_;
    ::google::protobuf::internal::ArenaStringPtr login_button_border_color_;
    ::google::protobuf::internal::ArenaStringPtr login_button_text_color_;
    bool send_email_notifications_;
    bool require_email_verification_;
    bool enable_smtp_auth_;
    bool send_push_notifications_;
    ::int32_t smtp_server_timeout_;
    ::int32_t push_notification_buffer_;
    ::int32_t email_batching_buffer_size_;
    bool enable_email_batching_;
    bool skip_server_certificate_verification_;
    ::int32_t email_batching_interval_;
    ::int32_t rate_limiting_memory_size_;
    ::int32_t rate_limiting_per_hour_;
    ::int32_t rate_limiting_max_burst_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigEmail_class_data_;
// -------------------------------------------------------------------

class ConfigDataRetention final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigDataRetention) */ {
 public:
  inline ConfigDataRetention() : ConfigDataRetention(nullptr) {}
  ~ConfigDataRetention() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigDataRetention* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigDataRetention));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigDataRetention(::google::protobuf::internal::ConstantInitialized);

  inline ConfigDataRetention(const ConfigDataRetention& from) : ConfigDataRetention(nullptr, from) {}
  inline ConfigDataRetention(ConfigDataRetention&& from) noexcept
      : ConfigDataRetention(nullptr, ::std::move(from)) {}
  inline ConfigDataRetention& operator=(const ConfigDataRetention& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigDataRetention& operator=(ConfigDataRetention&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigDataRetention& default_instance() {
    return *reinterpret_cast<const ConfigDataRetention*>(
        &_ConfigDataRetention_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(ConfigDataRetention& a, ConfigDataRetention& b) { a.Swap(&b); }
  inline void Swap(ConfigDataRetention* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigDataRetention* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigDataRetention* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigDataRetention>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigDataRetention& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigDataRetention& from) { ConfigDataRetention::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigDataRetention* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigDataRetention"; }

 protected:
  explicit ConfigDataRetention(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigDataRetention(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigDataRetention& from);
  ConfigDataRetention(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigDataRetention&& from) noexcept
      : ConfigDataRetention(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDeletionJobStartTimeFieldNumber = 7,
    kEnableMessageDeletionFieldNumber = 1,
    kEnableFileDeletionFieldNumber = 2,
    kEnableBoardsDeletionFieldNumber = 3,
    kMessageRetentionHoursFieldNumber = 4,
    kFileRetentionHoursFieldNumber = 5,
    kBoardsRetentionDaysFieldNumber = 6,
    kBatchSizeFieldNumber = 8,
    kTimeBetweenBatchesMillisecondsFieldNumber = 9,
    kRetentionIdsBatchSizeFieldNumber = 10,
  };
  // optional string deletion_job_start_time = 7 [json_name = "deletionJobStartTime"];
  bool has_deletion_job_start_time() const;
  void clear_deletion_job_start_time() ;
  const ::std::string& deletion_job_start_time() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_deletion_job_start_time(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_deletion_job_start_time();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_deletion_job_start_time();
  void set_allocated_deletion_job_start_time(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_deletion_job_start_time() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_deletion_job_start_time(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_deletion_job_start_time();

  public:
  // optional bool enable_message_deletion = 1 [json_name = "enableMessageDeletion"];
  bool has_enable_message_deletion() const;
  void clear_enable_message_deletion() ;
  bool enable_message_deletion() const;
  void set_enable_message_deletion(bool value);

  private:
  bool _internal_enable_message_deletion() const;
  void _internal_set_enable_message_deletion(bool value);

  public:
  // optional bool enable_file_deletion = 2 [json_name = "enableFileDeletion"];
  bool has_enable_file_deletion() const;
  void clear_enable_file_deletion() ;
  bool enable_file_deletion() const;
  void set_enable_file_deletion(bool value);

  private:
  bool _internal_enable_file_deletion() const;
  void _internal_set_enable_file_deletion(bool value);

  public:
  // optional bool enable_boards_deletion = 3 [json_name = "enableBoardsDeletion"];
  bool has_enable_boards_deletion() const;
  void clear_enable_boards_deletion() ;
  bool enable_boards_deletion() const;
  void set_enable_boards_deletion(bool value);

  private:
  bool _internal_enable_boards_deletion() const;
  void _internal_set_enable_boards_deletion(bool value);

  public:
  // optional int32 message_retention_hours = 4 [json_name = "messageRetentionHours"];
  bool has_message_retention_hours() const;
  void clear_message_retention_hours() ;
  ::int32_t message_retention_hours() const;
  void set_message_retention_hours(::int32_t value);

  private:
  ::int32_t _internal_message_retention_hours() const;
  void _internal_set_message_retention_hours(::int32_t value);

  public:
  // optional int32 file_retention_hours = 5 [json_name = "fileRetentionHours"];
  bool has_file_retention_hours() const;
  void clear_file_retention_hours() ;
  ::int32_t file_retention_hours() const;
  void set_file_retention_hours(::int32_t value);

  private:
  ::int32_t _internal_file_retention_hours() const;
  void _internal_set_file_retention_hours(::int32_t value);

  public:
  // optional int32 boards_retention_days = 6 [json_name = "boardsRetentionDays"];
  bool has_boards_retention_days() const;
  void clear_boards_retention_days() ;
  ::int32_t boards_retention_days() const;
  void set_boards_retention_days(::int32_t value);

  private:
  ::int32_t _internal_boards_retention_days() const;
  void _internal_set_boards_retention_days(::int32_t value);

  public:
  // optional int32 batch_size = 8 [json_name = "batchSize"];
  bool has_batch_size() const;
  void clear_batch_size() ;
  ::int32_t batch_size() const;
  void set_batch_size(::int32_t value);

  private:
  ::int32_t _internal_batch_size() const;
  void _internal_set_batch_size(::int32_t value);

  public:
  // optional int32 time_between_batches_milliseconds = 9 [json_name = "timeBetweenBatchesMilliseconds"];
  bool has_time_between_batches_milliseconds() const;
  void clear_time_between_batches_milliseconds() ;
  ::int32_t time_between_batches_milliseconds() const;
  void set_time_between_batches_milliseconds(::int32_t value);

  private:
  ::int32_t _internal_time_between_batches_milliseconds() const;
  void _internal_set_time_between_batches_milliseconds(::int32_t value);

  public:
  // optional int32 retention_ids_batch_size = 10 [json_name = "retentionIdsBatchSize"];
  bool has_retention_ids_batch_size() const;
  void clear_retention_ids_batch_size() ;
  ::int32_t retention_ids_batch_size() const;
  void set_retention_ids_batch_size(::int32_t value);

  private:
  ::int32_t _internal_retention_ids_batch_size() const;
  void _internal_set_retention_ids_batch_size(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:common.v1.ConfigDataRetention)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 10,
                                   0, 69,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigDataRetention& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr deletion_job_start_time_;
    bool enable_message_deletion_;
    bool enable_file_deletion_;
    bool enable_boards_deletion_;
    ::int32_t message_retention_hours_;
    ::int32_t file_retention_hours_;
    ::int32_t boards_retention_days_;
    ::int32_t batch_size_;
    ::int32_t time_between_batches_milliseconds_;
    ::int32_t retention_ids_batch_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigDataRetention_class_data_;
// -------------------------------------------------------------------

class ConfigBleve final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigBleve) */ {
 public:
  inline ConfigBleve() : ConfigBleve(nullptr) {}
  ~ConfigBleve() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigBleve* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigBleve));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigBleve(::google::protobuf::internal::ConstantInitialized);

  inline ConfigBleve(const ConfigBleve& from) : ConfigBleve(nullptr, from) {}
  inline ConfigBleve(ConfigBleve&& from) noexcept
      : ConfigBleve(nullptr, ::std::move(from)) {}
  inline ConfigBleve& operator=(const ConfigBleve& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigBleve& operator=(ConfigBleve&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigBleve& default_instance() {
    return *reinterpret_cast<const ConfigBleve*>(
        &_ConfigBleve_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(ConfigBleve& a, ConfigBleve& b) { a.Swap(&b); }
  inline void Swap(ConfigBleve* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigBleve* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigBleve* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigBleve>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigBleve& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigBleve& from) { ConfigBleve::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigBleve* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigBleve"; }

 protected:
  explicit ConfigBleve(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigBleve(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigBleve& from);
  ConfigBleve(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigBleve&& from) noexcept
      : ConfigBleve(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIndexDirFieldNumber = 1,
    kEnableIndexingFieldNumber = 2,
    kEnableSearchingFieldNumber = 3,
    kEnableAutocompleteFieldNumber = 4,
    kBulkIndexingTimeWindowSecondsFieldNumber = 5,
    kBatchSizeFieldNumber = 6,
  };
  // optional string index_dir = 1 [json_name = "indexDir"];
  bool has_index_dir() const;
  void clear_index_dir() ;
  const ::std::string& index_dir() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_index_dir(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_index_dir();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_index_dir();
  void set_allocated_index_dir(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_index_dir() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_index_dir(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_index_dir();

  public:
  // optional bool enable_indexing = 2 [json_name = "enableIndexing"];
  bool has_enable_indexing() const;
  void clear_enable_indexing() ;
  bool enable_indexing() const;
  void set_enable_indexing(bool value);

  private:
  bool _internal_enable_indexing() const;
  void _internal_set_enable_indexing(bool value);

  public:
  // optional bool enable_searching = 3 [json_name = "enableSearching"];
  bool has_enable_searching() const;
  void clear_enable_searching() ;
  bool enable_searching() const;
  void set_enable_searching(bool value);

  private:
  bool _internal_enable_searching() const;
  void _internal_set_enable_searching(bool value);

  public:
  // optional bool enable_autocomplete = 4 [json_name = "enableAutocomplete"];
  bool has_enable_autocomplete() const;
  void clear_enable_autocomplete() ;
  bool enable_autocomplete() const;
  void set_enable_autocomplete(bool value);

  private:
  bool _internal_enable_autocomplete() const;
  void _internal_set_enable_autocomplete(bool value);

  public:
  // optional int32 bulk_indexing_time_window_seconds = 5 [json_name = "bulkIndexingTimeWindowSeconds"];
  bool has_bulk_indexing_time_window_seconds() const;
  void clear_bulk_indexing_time_window_seconds() ;
  ::int32_t bulk_indexing_time_window_seconds() const;
  void set_bulk_indexing_time_window_seconds(::int32_t value);

  private:
  ::int32_t _internal_bulk_indexing_time_window_seconds() const;
  void _internal_set_bulk_indexing_time_window_seconds(::int32_t value);

  public:
  // optional int32 batch_size = 6 [json_name = "batchSize"];
  bool has_batch_size() const;
  void clear_batch_size() ;
  ::int32_t batch_size() const;
  void set_batch_size(::int32_t value);

  private:
  ::int32_t _internal_batch_size() const;
  void _internal_set_batch_size(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:common.v1.ConfigBleve)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6,
                                   0, 39,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigBleve& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr index_dir_;
    bool enable_indexing_;
    bool enable_searching_;
    bool enable_autocomplete_;
    ::int32_t bulk_indexing_time_window_seconds_;
    ::int32_t batch_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigBleve_class_data_;
// -------------------------------------------------------------------

class CacheConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.CacheConfig) */ {
 public:
  inline CacheConfig() : CacheConfig(nullptr) {}
  ~CacheConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CacheConfig* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CacheConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CacheConfig(::google::protobuf::internal::ConstantInitialized);

  inline CacheConfig(const CacheConfig& from) : CacheConfig(nullptr, from) {}
  inline CacheConfig(CacheConfig&& from) noexcept
      : CacheConfig(nullptr, ::std::move(from)) {}
  inline CacheConfig& operator=(const CacheConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheConfig& operator=(CacheConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CacheConfig& default_instance() {
    return *reinterpret_cast<const CacheConfig*>(
        &_CacheConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(CacheConfig& a, CacheConfig& b) { a.Swap(&b); }
  inline void Swap(CacheConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CacheConfig* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CacheConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CacheConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CacheConfig& from) { CacheConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CacheConfig* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.CacheConfig"; }

 protected:
  explicit CacheConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  CacheConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CacheConfig& from);
  CacheConfig(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, CacheConfig&& from) noexcept
      : CacheConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCacheTypeFieldNumber = 1,
    kRedisAddressFieldNumber = 2,
    kRedisPasswordFieldNumber = 3,
    kRedisCachePrefixFieldNumber = 5,
    kRedisDbFieldNumber = 4,
    kDisableClientCacheFieldNumber = 6,
  };
  // optional string cache_type = 1 [json_name = "cacheType"];
  bool has_cache_type() const;
  void clear_cache_type() ;
  const ::std::string& cache_type() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_cache_type(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_cache_type();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_cache_type();
  void set_allocated_cache_type(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_cache_type() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_cache_type(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_cache_type();

  public:
  // optional string redis_address = 2 [json_name = "redisAddress"];
  bool has_redis_address() const;
  void clear_redis_address() ;
  const ::std::string& redis_address() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_redis_address(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_redis_address();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_redis_address();
  void set_allocated_redis_address(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_redis_address() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_redis_address(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_redis_address();

  public:
  // optional string redis_password = 3 [json_name = "redisPassword"];
  bool has_redis_password() const;
  void clear_redis_password() ;
  const ::std::string& redis_password() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_redis_password(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_redis_password();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_redis_password();
  void set_allocated_redis_password(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_redis_password() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_redis_password(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_redis_password();

  public:
  // optional string redis_cache_prefix = 5 [json_name = "redisCachePrefix"];
  bool has_redis_cache_prefix() const;
  void clear_redis_cache_prefix() ;
  const ::std::string& redis_cache_prefix() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_redis_cache_prefix(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_redis_cache_prefix();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_redis_cache_prefix();
  void set_allocated_redis_cache_prefix(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_redis_cache_prefix() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_redis_cache_prefix(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_redis_cache_prefix();

  public:
  // optional int32 redis_db = 4 [json_name = "redisDb"];
  bool has_redis_db() const;
  void clear_redis_db() ;
  ::int32_t redis_db() const;
  void set_redis_db(::int32_t value);

  private:
  ::int32_t _internal_redis_db() const;
  void _internal_set_redis_db(::int32_t value);

  public:
  // optional bool disable_client_cache = 6 [json_name = "disableClientCache"];
  bool has_disable_client_cache() const;
  void clear_disable_client_cache() ;
  bool disable_client_cache() const;
  void set_disable_client_cache(bool value);

  private:
  bool _internal_disable_client_cache() const;
  void _internal_set_disable_client_cache(bool value);

  public:
  // @@protoc_insertion_point(class_scope:common.v1.CacheConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6,
                                   0, 85,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const CacheConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr cache_type_;
    ::google::protobuf::internal::ArenaStringPtr redis_address_;
    ::google::protobuf::internal::ArenaStringPtr redis_password_;
    ::google::protobuf::internal::ArenaStringPtr redis_cache_prefix_;
    ::int32_t redis_db_;
    bool disable_client_cache_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull CacheConfig_class_data_;
// -------------------------------------------------------------------

class ConfigSecurity final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigSecurity) */ {
 public:
  inline ConfigSecurity() : ConfigSecurity(nullptr) {}
  ~ConfigSecurity() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigSecurity* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigSecurity));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigSecurity(::google::protobuf::internal::ConstantInitialized);

  inline ConfigSecurity(const ConfigSecurity& from) : ConfigSecurity(nullptr, from) {}
  inline ConfigSecurity(ConfigSecurity&& from) noexcept
      : ConfigSecurity(nullptr, ::std::move(from)) {}
  inline ConfigSecurity& operator=(const ConfigSecurity& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigSecurity& operator=(ConfigSecurity&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigSecurity& default_instance() {
    return *reinterpret_cast<const ConfigSecurity*>(
        &_ConfigSecurity_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ConfigSecurity& a, ConfigSecurity& b) { a.Swap(&b); }
  inline void Swap(ConfigSecurity* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigSecurity* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigSecurity* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigSecurity>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigSecurity& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigSecurity& from) { ConfigSecurity::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigSecurity* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigSecurity"; }

 protected:
  explicit ConfigSecurity(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigSecurity(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigSecurity& from);
  ConfigSecurity(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigSecurity&& from) noexcept
      : ConfigSecurity(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRestrictedUsernamesFieldNumber = 1,
    kAllowCorsFromFieldNumber = 12,
    kCorsExposedHeadersFieldNumber = 13,
    kEmailConfirmationUrlFieldNumber = 18,
    kMaximumLoginAttemptsFieldNumber = 2,
    kEnableInsecureOutgoingConnectionsFieldNumber = 3,
    kEnableMultifactorAuthenticationFieldNumber = 4,
    kEnforceMultifactorAuthenticationFieldNumber = 5,
    kEnableOauthServiceProviderFieldNumber = 6,
    kSessionLengthWebInHoursFieldNumber = 9,
    kSessionLengthMobileInHoursFieldNumber = 10,
    kSessionLengthSsoInHoursFieldNumber = 11,
    kEnableOutgoingOauthConnectionsFieldNumber = 7,
    kTerminateSessionsOnPasswordChangeFieldNumber = 8,
    kCorsAllowCredentialsFieldNumber = 14,
    kCorsDebugFieldNumber = 15,
    kAllowCookiesForSubdomainsFieldNumber = 16,
    kSessionCacheInMinutesFieldNumber = 17,
    kTokenConfirmationExpiryInHoursFieldNumber = 19,
    kTokenPasswordResetExpiryInHoursFieldNumber = 20,
  };
  // map<string, string> restricted_usernames = 1 [json_name = "restrictedUsernames"];
  int restricted_usernames_size() const;
  private:
  int _internal_restricted_usernames_size() const;

  public:
  void clear_restricted_usernames() ;
  const ::google::protobuf::Map<std::string, std::string>& restricted_usernames() const;
  ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL mutable_restricted_usernames();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_restricted_usernames() const;
  ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL _internal_mutable_restricted_usernames();

  public:
  // optional string allow_cors_from = 12 [json_name = "allowCorsFrom"];
  bool has_allow_cors_from() const;
  void clear_allow_cors_from() ;
  const ::std::string& allow_cors_from() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_allow_cors_from(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_allow_cors_from();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_allow_cors_from();
  void set_allocated_allow_cors_from(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_allow_cors_from() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_allow_cors_from(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_allow_cors_from();

  public:
  // optional string cors_exposed_headers = 13 [json_name = "corsExposedHeaders"];
  bool has_cors_exposed_headers() const;
  void clear_cors_exposed_headers() ;
  const ::std::string& cors_exposed_headers() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_cors_exposed_headers(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_cors_exposed_headers();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_cors_exposed_headers();
  void set_allocated_cors_exposed_headers(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_cors_exposed_headers() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_cors_exposed_headers(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_cors_exposed_headers();

  public:
  // optional string email_confirmation_url = 18 [json_name = "emailConfirmationUrl"];
  bool has_email_confirmation_url() const;
  void clear_email_confirmation_url() ;
  const ::std::string& email_confirmation_url() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_email_confirmation_url(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_email_confirmation_url();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_email_confirmation_url();
  void set_allocated_email_confirmation_url(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_email_confirmation_url() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_email_confirmation_url(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_email_confirmation_url();

  public:
  // optional int32 maximum_login_attempts = 2 [json_name = "maximumLoginAttempts"];
  bool has_maximum_login_attempts() const;
  void clear_maximum_login_attempts() ;
  ::int32_t maximum_login_attempts() const;
  void set_maximum_login_attempts(::int32_t value);

  private:
  ::int32_t _internal_maximum_login_attempts() const;
  void _internal_set_maximum_login_attempts(::int32_t value);

  public:
  // optional bool enable_insecure_outgoing_connections = 3 [json_name = "enableInsecureOutgoingConnections"];
  bool has_enable_insecure_outgoing_connections() const;
  void clear_enable_insecure_outgoing_connections() ;
  bool enable_insecure_outgoing_connections() const;
  void set_enable_insecure_outgoing_connections(bool value);

  private:
  bool _internal_enable_insecure_outgoing_connections() const;
  void _internal_set_enable_insecure_outgoing_connections(bool value);

  public:
  // optional bool enable_multifactor_authentication = 4 [json_name = "enableMultifactorAuthentication"];
  bool has_enable_multifactor_authentication() const;
  void clear_enable_multifactor_authentication() ;
  bool enable_multifactor_authentication() const;
  void set_enable_multifactor_authentication(bool value);

  private:
  bool _internal_enable_multifactor_authentication() const;
  void _internal_set_enable_multifactor_authentication(bool value);

  public:
  // optional bool enforce_multifactor_authentication = 5 [json_name = "enforceMultifactorAuthentication"];
  bool has_enforce_multifactor_authentication() const;
  void clear_enforce_multifactor_authentication() ;
  bool enforce_multifactor_authentication() const;
  void set_enforce_multifactor_authentication(bool value);

  private:
  bool _internal_enforce_multifactor_authentication() const;
  void _internal_set_enforce_multifactor_authentication(bool value);

  public:
  // optional bool enable_oauth_service_provider = 6 [json_name = "enableOauthServiceProvider"];
  bool has_enable_oauth_service_provider() const;
  void clear_enable_oauth_service_provider() ;
  bool enable_oauth_service_provider() const;
  void set_enable_oauth_service_provider(bool value);

  private:
  bool _internal_enable_oauth_service_provider() const;
  void _internal_set_enable_oauth_service_provider(bool value);

  public:
  // optional int32 session_length_web_in_hours = 9 [json_name = "sessionLengthWebInHours"];
  bool has_session_length_web_in_hours() const;
  void clear_session_length_web_in_hours() ;
  ::int32_t session_length_web_in_hours() const;
  void set_session_length_web_in_hours(::int32_t value);

  private:
  ::int32_t _internal_session_length_web_in_hours() const;
  void _internal_set_session_length_web_in_hours(::int32_t value);

  public:
  // optional int32 session_length_mobile_in_hours = 10 [json_name = "sessionLengthMobileInHours"];
  bool has_session_length_mobile_in_hours() const;
  void clear_session_length_mobile_in_hours() ;
  ::int32_t session_length_mobile_in_hours() const;
  void set_session_length_mobile_in_hours(::int32_t value);

  private:
  ::int32_t _internal_session_length_mobile_in_hours() const;
  void _internal_set_session_length_mobile_in_hours(::int32_t value);

  public:
  // optional int32 session_length_sso_in_hours = 11 [json_name = "sessionLengthSsoInHours"];
  bool has_session_length_sso_in_hours() const;
  void clear_session_length_sso_in_hours() ;
  ::int32_t session_length_sso_in_hours() const;
  void set_session_length_sso_in_hours(::int32_t value);

  private:
  ::int32_t _internal_session_length_sso_in_hours() const;
  void _internal_set_session_length_sso_in_hours(::int32_t value);

  public:
  // optional bool enable_outgoing_oauth_connections = 7 [json_name = "enableOutgoingOauthConnections"];
  bool has_enable_outgoing_oauth_connections() const;
  void clear_enable_outgoing_oauth_connections() ;
  bool enable_outgoing_oauth_connections() const;
  void set_enable_outgoing_oauth_connections(bool value);

  private:
  bool _internal_enable_outgoing_oauth_connections() const;
  void _internal_set_enable_outgoing_oauth_connections(bool value);

  public:
  // optional bool terminate_sessions_on_password_change = 8 [json_name = "terminateSessionsOnPasswordChange"];
  bool has_terminate_sessions_on_password_change() const;
  void clear_terminate_sessions_on_password_change() ;
  bool terminate_sessions_on_password_change() const;
  void set_terminate_sessions_on_password_change(bool value);

  private:
  bool _internal_terminate_sessions_on_password_change() const;
  void _internal_set_terminate_sessions_on_password_change(bool value);

  public:
  // optional bool cors_allow_credentials = 14 [json_name = "corsAllowCredentials"];
  bool has_cors_allow_credentials() const;
  void clear_cors_allow_credentials() ;
  bool cors_allow_credentials() const;
  void set_cors_allow_credentials(bool value);

  private:
  bool _internal_cors_allow_credentials() const;
  void _internal_set_cors_allow_credentials(bool value);

  public:
  // optional bool cors_debug = 15 [json_name = "corsDebug"];
  bool has_cors_debug() const;
  void clear_cors_debug() ;
  bool cors_debug() const;
  void set_cors_debug(bool value);

  private:
  bool _internal_cors_debug() const;
  void _internal_set_cors_debug(bool value);

  public:
  // optional bool allow_cookies_for_subdomains = 16 [json_name = "allowCookiesForSubdomains"];
  bool has_allow_cookies_for_subdomains() const;
  void clear_allow_cookies_for_subdomains() ;
  bool allow_cookies_for_subdomains() const;
  void set_allow_cookies_for_subdomains(bool value);

  private:
  bool _internal_allow_cookies_for_subdomains() const;
  void _internal_set_allow_cookies_for_subdomains(bool value);

  public:
  // optional int32 session_cache_in_minutes = 17 [json_name = "sessionCacheInMinutes"];
  bool has_session_cache_in_minutes() const;
  void clear_session_cache_in_minutes() ;
  ::int32_t session_cache_in_minutes() const;
  void set_session_cache_in_minutes(::int32_t value);

  private:
  ::int32_t _internal_session_cache_in_minutes() const;
  void _internal_set_session_cache_in_minutes(::int32_t value);

  public:
  // optional uint32 token_confirmation_expiry_in_hours = 19 [json_name = "tokenConfirmationExpiryInHours"];
  bool has_token_confirmation_expiry_in_hours() const;
  void clear_token_confirmation_expiry_in_hours() ;
  ::uint32_t token_confirmation_expiry_in_hours() const;
  void set_token_confirmation_expiry_in_hours(::uint32_t value);

  private:
  ::uint32_t _internal_token_confirmation_expiry_in_hours() const;
  void _internal_set_token_confirmation_expiry_in_hours(::uint32_t value);

  public:
  // optional uint32 token_password_reset_expiry_in_hours = 20 [json_name = "tokenPasswordResetExpiryInHours"];
  bool has_token_password_reset_expiry_in_hours() const;
  void clear_token_password_reset_expiry_in_hours() ;
  ::uint32_t token_password_reset_expiry_in_hours() const;
  void set_token_password_reset_expiry_in_hours(::uint32_t value);

  private:
  ::uint32_t _internal_token_password_reset_expiry_in_hours() const;
  void _internal_set_token_password_reset_expiry_in_hours(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:common.v1.ConfigSecurity)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 20,
                                   1, 126,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigSecurity& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<ConfigSecurity_RestrictedUsernamesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        restricted_usernames_;
    ::google::protobuf::internal::ArenaStringPtr allow_cors_from_;
    ::google::protobuf::internal::ArenaStringPtr cors_exposed_headers_;
    ::google::protobuf::internal::ArenaStringPtr email_confirmation_url_;
    ::int32_t maximum_login_attempts_;
    bool enable_insecure_outgoing_connections_;
    bool enable_multifactor_authentication_;
    bool enforce_multifactor_authentication_;
    bool enable_oauth_service_provider_;
    ::int32_t session_length_web_in_hours_;
    ::int32_t session_length_mobile_in_hours_;
    ::int32_t session_length_sso_in_hours_;
    bool enable_outgoing_oauth_connections_;
    bool terminate_sessions_on_password_change_;
    bool cors_allow_credentials_;
    bool cors_debug_;
    bool allow_cookies_for_subdomains_;
    ::int32_t session_cache_in_minutes_;
    ::uint32_t token_confirmation_expiry_in_hours_;
    ::uint32_t token_password_reset_expiry_in_hours_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigSecurity_class_data_;
// -------------------------------------------------------------------

class Config final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Config* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Config));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Config(::google::protobuf::internal::ConstantInitialized);

  inline Config(const Config& from) : Config(nullptr, from) {}
  inline Config(Config&& from) noexcept
      : Config(nullptr, ::std::move(from)) {}
  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Config& default_instance() {
    return *reinterpret_cast<const Config*>(
        &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(Config& a, Config& b) { a.Swap(&b); }
  inline void Swap(Config* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Config* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Config>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Config& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Config& from) { Config::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Config* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.Config"; }

 protected:
  explicit Config(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Config(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Config& from);
  Config(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Config&& from) noexcept
      : Config(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMainFieldNumber = 1,
    kServicesFieldNumber = 2,
    kSecurityFieldNumber = 3,
    kCacheFieldNumber = 4,
    kMetricsFieldNumber = 5,
    kSsoFieldNumber = 6,
    kSqlFieldNumber = 7,
    kPasswordFieldNumber = 8,
    kFileFieldNumber = 9,
    kEmailFieldNumber = 10,
    kRateLimitFieldNumber = 11,
    kPrivacyFieldNumber = 12,
    kSupportFieldNumber = 13,
    kLocalizationFieldNumber = 14,
    kLdapFieldNumber = 15,
    kSamlFieldNumber = 16,
    kNativeAppFieldNumber = 17,
    kMeilisearchFieldNumber = 18,
    kBleveFieldNumber = 19,
    kDataRetentionFieldNumber = 20,
    kImageProxyFieldNumber = 21,
  };
  // .common.v1.ConfigMain main = 1 [json_name = "main"];
  bool has_main() const;
  void clear_main() ;
  const ::common::v1::ConfigMain& main() const;
  [[nodiscard]] ::common::v1::ConfigMain* PROTOBUF_NULLABLE release_main();
  ::common::v1::ConfigMain* PROTOBUF_NONNULL mutable_main();
  void set_allocated_main(::common::v1::ConfigMain* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_main(::common::v1::ConfigMain* PROTOBUF_NULLABLE value);
  ::common::v1::ConfigMain* PROTOBUF_NULLABLE unsafe_arena_release_main();

  private:
  const ::common::v1::ConfigMain& _internal_main() const;
  ::common::v1::ConfigMain* PROTOBUF_NONNULL _internal_mutable_main();

  public:
  // .common.v1.ConfigServices services = 2 [json_name = "services"];
  bool has_services() const;
  void clear_services() ;
  const ::common::v1::ConfigServices& services() const;
  [[nodiscard]] ::common::v1::ConfigServices* PROTOBUF_NULLABLE release_services();
  ::common::v1::ConfigServices* PROTOBUF_NONNULL mutable_services();
  void set_allocated_services(::common::v1::ConfigServices* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_services(::common::v1::ConfigServices* PROTOBUF_NULLABLE value);
  ::common::v1::ConfigServices* PROTOBUF_NULLABLE unsafe_arena_release_services();

  private:
  const ::common::v1::ConfigServices& _internal_services() const;
  ::common::v1::ConfigServices* PROTOBUF_NONNULL _internal_mutable_services();

  public:
  // .common.v1.ConfigSecurity security = 3 [json_name = "security"];
  bool has_security() const;
  void clear_security() ;
  const ::common::v1::ConfigSecurity& security() const;
  [[nodiscard]] ::common::v1::ConfigSecurity* PROTOBUF_NULLABLE release_security();
  ::common::v1::ConfigSecurity* PROTOBUF_NONNULL mutable_security();
  void set_allocated_security(::common::v1::ConfigSecurity* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_security(::common::v1::ConfigSecurity* PROTOBUF_NULLABLE value);
  ::common::v1::ConfigSecurity* PROTOBUF_NULLABLE unsafe_arena_release_security();

  private:
  const ::common::v1::ConfigSecurity& _internal_security() const;
  ::common::v1::ConfigSecurity* PROTOBUF_NONNULL _internal_mutable_security();

  public:
  // .common.v1.CacheConfig cache = 4 [json_name = "cache"];
  bool has_cache() const;
  void clear_cache() ;
  const ::common::v1::CacheConfig& cache() const;
  [[nodiscard]] ::common::v1::CacheConfig* PROTOBUF_NULLABLE release_cache();
  ::common::v1::CacheConfig* PROTOBUF_NONNULL mutable_cache();
  void set_allocated_cache(::common::v1::CacheConfig* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_cache(::common::v1::CacheConfig* PROTOBUF_NULLABLE value);
  ::common::v1::CacheConfig* PROTOBUF_NULLABLE unsafe_arena_release_cache();

  private:
  const ::common::v1::CacheConfig& _internal_cache() const;
  ::common::v1::CacheConfig* PROTOBUF_NONNULL _internal_mutable_cache();

  public:
  // .common.v1.ConfigMetrics metrics = 5 [json_name = "metrics"];
  bool has_metrics() const;
  void clear_metrics() ;
  const ::common::v1::ConfigMetrics& metrics() const;
  [[nodiscard]] ::common::v1::ConfigMetrics* PROTOBUF_NULLABLE release_metrics();
  ::common::v1::ConfigMetrics* PROTOBUF_NONNULL mutable_metrics();
  void set_allocated_metrics(::common::v1::ConfigMetrics* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_metrics(::common::v1::ConfigMetrics* PROTOBUF_NULLABLE value);
  ::common::v1::ConfigMetrics* PROTOBUF_NULLABLE unsafe_arena_release_metrics();

  private:
  const ::common::v1::ConfigMetrics& _internal_metrics() const;
  ::common::v1::ConfigMetrics* PROTOBUF_NONNULL _internal_mutable_metrics();

  public:
  // .common.v1.ConfigSSO sso = 6 [json_name = "sso"];
  bool has_sso() const;
  void clear_sso() ;
  const ::common::v1::ConfigSSO& sso() const;
  [[nodiscard]] ::common::v1::ConfigSSO* PROTOBUF_NULLABLE release_sso();
  ::common::v1::ConfigSSO* PROTOBUF_NONNULL mutable_sso();
  void set_allocated_sso(::common::v1::ConfigSSO* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_sso(::common::v1::ConfigSSO* PROTOBUF_NULLABLE value);
  ::common::v1::ConfigSSO* PROTOBUF_NULLABLE unsafe_arena_release_sso();

  private:
  const ::common::v1::ConfigSSO& _internal_sso() const;
  ::common::v1::ConfigSSO* PROTOBUF_NONNULL _internal_mutable_sso();

  public:
  // .common.v1.ConfigSql sql = 7 [json_name = "sql"];
  bool has_sql() const;
  void clear_sql() ;
  const ::common::v1::ConfigSql& sql() const;
  [[nodiscard]] ::common::v1::ConfigSql* PROTOBUF_NULLABLE release_sql();
  ::common::v1::ConfigSql* PROTOBUF_NONNULL mutable_sql();
  void set_allocated_sql(::common::v1::ConfigSql* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_sql(::common::v1::ConfigSql* PROTOBUF_NULLABLE value);
  ::common::v1::ConfigSql* PROTOBUF_NULLABLE unsafe_arena_release_sql();

  private:
  const ::common::v1::ConfigSql& _internal_sql() const;
  ::common::v1::ConfigSql* PROTOBUF_NONNULL _internal_mutable_sql();

  public:
  // .common.v1.ConfigPassword password = 8 [json_name = "password"];
  bool has_password() const;
  void clear_password() ;
  const ::common::v1::ConfigPassword& password() const;
  [[nodiscard]] ::common::v1::ConfigPassword* PROTOBUF_NULLABLE release_password();
  ::common::v1::ConfigPassword* PROTOBUF_NONNULL mutable_password();
  void set_allocated_password(::common::v1::ConfigPassword* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_password(::common::v1::ConfigPassword* PROTOBUF_NULLABLE value);
  ::common::v1::ConfigPassword* PROTOBUF_NULLABLE unsafe_arena_release_password();

  private:
  const ::common::v1::ConfigPassword& _internal_password() const;
  ::common::v1::ConfigPassword* PROTOBUF_NONNULL _internal_mutable_password();

  public:
  // .common.v1.ConfigFile file = 9 [json_name = "file"];
  bool has_file() const;
  void clear_file() ;
  const ::common::v1::ConfigFile& file() const;
  [[nodiscard]] ::common::v1::ConfigFile* PROTOBUF_NULLABLE release_file();
  ::common::v1::ConfigFile* PROTOBUF_NONNULL mutable_file();
  void set_allocated_file(::common::v1::ConfigFile* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_file(::common::v1::ConfigFile* PROTOBUF_NULLABLE value);
  ::common::v1::ConfigFile* PROTOBUF_NULLABLE unsafe_arena_release_file();

  private:
  const ::common::v1::ConfigFile& _internal_file() const;
  ::common::v1::ConfigFile* PROTOBUF_NONNULL _internal_mutable_file();

  public:
  // .common.v1.ConfigEmail email = 10 [json_name = "email"];
  bool has_email() const;
  void clear_email() ;
  const ::common::v1::ConfigEmail& email() const;
  [[nodiscard]] ::common::v1::ConfigEmail* PROTOBUF_NULLABLE release_email();
  ::common::v1::ConfigEmail* PROTOBUF_NONNULL mutable_email();
  void set_allocated_email(::common::v1::ConfigEmail* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_email(::common::v1::ConfigEmail* PROTOBUF_NULLABLE value);
  ::common::v1::ConfigEmail* PROTOBUF_NULLABLE unsafe_arena_release_email();

  private:
  const ::common::v1::ConfigEmail& _internal_email() const;
  ::common::v1::ConfigEmail* PROTOBUF_NONNULL _internal_mutable_email();

  public:
  // .common.v1.ConfigRateLimit rate_limit = 11 [json_name = "rateLimit"];
  bool has_rate_limit() const;
  void clear_rate_limit() ;
  const ::common::v1::ConfigRateLimit& rate_limit() const;
  [[nodiscard]] ::common::v1::ConfigRateLimit* PROTOBUF_NULLABLE release_rate_limit();
  ::common::v1::ConfigRateLimit* PROTOBUF_NONNULL mutable_rate_limit();
  void set_allocated_rate_limit(::common::v1::ConfigRateLimit* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_rate_limit(::common::v1::ConfigRateLimit* PROTOBUF_NULLABLE value);
  ::common::v1::ConfigRateLimit* PROTOBUF_NULLABLE unsafe_arena_release_rate_limit();

  private:
  const ::common::v1::ConfigRateLimit& _internal_rate_limit() const;
  ::common::v1::ConfigRateLimit* PROTOBUF_NONNULL _internal_mutable_rate_limit();

  public:
  // .common.v1.ConfigPrivacy privacy = 12 [json_name = "privacy"];
  bool has_privacy() const;
  void clear_privacy() ;
  const ::common::v1::ConfigPrivacy& privacy() const;
  [[nodiscard]] ::common::v1::ConfigPrivacy* PROTOBUF_NULLABLE release_privacy();
  ::common::v1::ConfigPrivacy* PROTOBUF_NONNULL mutable_privacy();
  void set_allocated_privacy(::common::v1::ConfigPrivacy* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_privacy(::common::v1::ConfigPrivacy* PROTOBUF_NULLABLE value);
  ::common::v1::ConfigPrivacy* PROTOBUF_NULLABLE unsafe_arena_release_privacy();

  private:
  const ::common::v1::ConfigPrivacy& _internal_privacy() const;
  ::common::v1::ConfigPrivacy* PROTOBUF_NONNULL _internal_mutable_privacy();

  public:
  // .common.v1.ConfigSupport support = 13 [json_name = "support"];
  bool has_support() const;
  void clear_support() ;
  const ::common::v1::ConfigSupport& support() const;
  [[nodiscard]] ::common::v1::ConfigSupport* PROTOBUF_NULLABLE release_support();
  ::common::v1::ConfigSupport* PROTOBUF_NONNULL mutable_support();
  void set_allocated_support(::common::v1::ConfigSupport* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_support(::common::v1::ConfigSupport* PROTOBUF_NULLABLE value);
  ::common::v1::ConfigSupport* PROTOBUF_NULLABLE unsafe_arena_release_support();

  private:
  const ::common::v1::ConfigSupport& _internal_support() const;
  ::common::v1::ConfigSupport* PROTOBUF_NONNULL _internal_mutable_support();

  public:
  // .common.v1.ConfigLocalization localization = 14 [json_name = "localization"];
  bool has_localization() const;
  void clear_localization() ;
  const ::common::v1::ConfigLocalization& localization() const;
  [[nodiscard]] ::common::v1::ConfigLocalization* PROTOBUF_NULLABLE release_localization();
  ::common::v1::ConfigLocalization* PROTOBUF_NONNULL mutable_localization();
  void set_allocated_localization(::common::v1::ConfigLocalization* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_localization(::common::v1::ConfigLocalization* PROTOBUF_NULLABLE value);
  ::common::v1::ConfigLocalization* PROTOBUF_NULLABLE unsafe_arena_release_localization();

  private:
  const ::common::v1::ConfigLocalization& _internal_localization() const;
  ::common::v1::ConfigLocalization* PROTOBUF_NONNULL _internal_mutable_localization();

  public:
  // .common.v1.ConfigLdap ldap = 15 [json_name = "ldap"];
  bool has_ldap() const;
  void clear_ldap() ;
  const ::common::v1::ConfigLdap& ldap() const;
  [[nodiscard]] ::common::v1::ConfigLdap* PROTOBUF_NULLABLE release_ldap();
  ::common::v1::ConfigLdap* PROTOBUF_NONNULL mutable_ldap();
  void set_allocated_ldap(::common::v1::ConfigLdap* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_ldap(::common::v1::ConfigLdap* PROTOBUF_NULLABLE value);
  ::common::v1::ConfigLdap* PROTOBUF_NULLABLE unsafe_arena_release_ldap();

  private:
  const ::common::v1::ConfigLdap& _internal_ldap() const;
  ::common::v1::ConfigLdap* PROTOBUF_NONNULL _internal_mutable_ldap();

  public:
  // .common.v1.ConfigSaml saml = 16 [json_name = "saml"];
  bool has_saml() const;
  void clear_saml() ;
  const ::common::v1::ConfigSaml& saml() const;
  [[nodiscard]] ::common::v1::ConfigSaml* PROTOBUF_NULLABLE release_saml();
  ::common::v1::ConfigSaml* PROTOBUF_NONNULL mutable_saml();
  void set_allocated_saml(::common::v1::ConfigSaml* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_saml(::common::v1::ConfigSaml* PROTOBUF_NULLABLE value);
  ::common::v1::ConfigSaml* PROTOBUF_NULLABLE unsafe_arena_release_saml();

  private:
  const ::common::v1::ConfigSaml& _internal_saml() const;
  ::common::v1::ConfigSaml* PROTOBUF_NONNULL _internal_mutable_saml();

  public:
  // .common.v1.ConfigNativeApp native_app = 17 [json_name = "nativeApp"];
  bool has_native_app() const;
  void clear_native_app() ;
  const ::common::v1::ConfigNativeApp& native_app() const;
  [[nodiscard]] ::common::v1::ConfigNativeApp* PROTOBUF_NULLABLE release_native_app();
  ::common::v1::ConfigNativeApp* PROTOBUF_NONNULL mutable_native_app();
  void set_allocated_native_app(::common::v1::ConfigNativeApp* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_native_app(::common::v1::ConfigNativeApp* PROTOBUF_NULLABLE value);
  ::common::v1::ConfigNativeApp* PROTOBUF_NULLABLE unsafe_arena_release_native_app();

  private:
  const ::common::v1::ConfigNativeApp& _internal_native_app() const;
  ::common::v1::ConfigNativeApp* PROTOBUF_NONNULL _internal_mutable_native_app();

  public:
  // .common.v1.ConfigMeilisearch meilisearch = 18 [json_name = "meilisearch"];
  bool has_meilisearch() const;
  void clear_meilisearch() ;
  const ::common::v1::ConfigMeilisearch& meilisearch() const;
  [[nodiscard]] ::common::v1::ConfigMeilisearch* PROTOBUF_NULLABLE release_meilisearch();
  ::common::v1::ConfigMeilisearch* PROTOBUF_NONNULL mutable_meilisearch();
  void set_allocated_meilisearch(::common::v1::ConfigMeilisearch* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_meilisearch(::common::v1::ConfigMeilisearch* PROTOBUF_NULLABLE value);
  ::common::v1::ConfigMeilisearch* PROTOBUF_NULLABLE unsafe_arena_release_meilisearch();

  private:
  const ::common::v1::ConfigMeilisearch& _internal_meilisearch() const;
  ::common::v1::ConfigMeilisearch* PROTOBUF_NONNULL _internal_mutable_meilisearch();

  public:
  // .common.v1.ConfigBleve bleve = 19 [json_name = "bleve"];
  bool has_bleve() const;
  void clear_bleve() ;
  const ::common::v1::ConfigBleve& bleve() const;
  [[nodiscard]] ::common::v1::ConfigBleve* PROTOBUF_NULLABLE release_bleve();
  ::common::v1::ConfigBleve* PROTOBUF_NONNULL mutable_bleve();
  void set_allocated_bleve(::common::v1::ConfigBleve* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_bleve(::common::v1::ConfigBleve* PROTOBUF_NULLABLE value);
  ::common::v1::ConfigBleve* PROTOBUF_NULLABLE unsafe_arena_release_bleve();

  private:
  const ::common::v1::ConfigBleve& _internal_bleve() const;
  ::common::v1::ConfigBleve* PROTOBUF_NONNULL _internal_mutable_bleve();

  public:
  // .common.v1.ConfigDataRetention data_retention = 20 [json_name = "dataRetention"];
  bool has_data_retention() const;
  void clear_data_retention() ;
  const ::common::v1::ConfigDataRetention& data_retention() const;
  [[nodiscard]] ::common::v1::ConfigDataRetention* PROTOBUF_NULLABLE release_data_retention();
  ::common::v1::ConfigDataRetention* PROTOBUF_NONNULL mutable_data_retention();
  void set_allocated_data_retention(::common::v1::ConfigDataRetention* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_data_retention(::common::v1::ConfigDataRetention* PROTOBUF_NULLABLE value);
  ::common::v1::ConfigDataRetention* PROTOBUF_NULLABLE unsafe_arena_release_data_retention();

  private:
  const ::common::v1::ConfigDataRetention& _internal_data_retention() const;
  ::common::v1::ConfigDataRetention* PROTOBUF_NONNULL _internal_mutable_data_retention();

  public:
  // .common.v1.ConfigImageProxy image_proxy = 21 [json_name = "imageProxy"];
  bool has_image_proxy() const;
  void clear_image_proxy() ;
  const ::common::v1::ConfigImageProxy& image_proxy() const;
  [[nodiscard]] ::common::v1::ConfigImageProxy* PROTOBUF_NULLABLE release_image_proxy();
  ::common::v1::ConfigImageProxy* PROTOBUF_NONNULL mutable_image_proxy();
  void set_allocated_image_proxy(::common::v1::ConfigImageProxy* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_image_proxy(::common::v1::ConfigImageProxy* PROTOBUF_NULLABLE value);
  ::common::v1::ConfigImageProxy* PROTOBUF_NULLABLE unsafe_arena_release_image_proxy();

  private:
  const ::common::v1::ConfigImageProxy& _internal_image_proxy() const;
  ::common::v1::ConfigImageProxy* PROTOBUF_NONNULL _internal_mutable_image_proxy();

  public:
  // @@protoc_insertion_point(class_scope:common.v1.Config)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 21,
                                   21, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Config& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::common::v1::ConfigMain* PROTOBUF_NULLABLE main_;
    ::common::v1::ConfigServices* PROTOBUF_NULLABLE services_;
    ::common::v1::ConfigSecurity* PROTOBUF_NULLABLE security_;
    ::common::v1::CacheConfig* PROTOBUF_NULLABLE cache_;
    ::common::v1::ConfigMetrics* PROTOBUF_NULLABLE metrics_;
    ::common::v1::ConfigSSO* PROTOBUF_NULLABLE sso_;
    ::common::v1::ConfigSql* PROTOBUF_NULLABLE sql_;
    ::common::v1::ConfigPassword* PROTOBUF_NULLABLE password_;
    ::common::v1::ConfigFile* PROTOBUF_NULLABLE file_;
    ::common::v1::ConfigEmail* PROTOBUF_NULLABLE email_;
    ::common::v1::ConfigRateLimit* PROTOBUF_NULLABLE rate_limit_;
    ::common::v1::ConfigPrivacy* PROTOBUF_NULLABLE privacy_;
    ::common::v1::ConfigSupport* PROTOBUF_NULLABLE support_;
    ::common::v1::ConfigLocalization* PROTOBUF_NULLABLE localization_;
    ::common::v1::ConfigLdap* PROTOBUF_NULLABLE ldap_;
    ::common::v1::ConfigSaml* PROTOBUF_NULLABLE saml_;
    ::common::v1::ConfigNativeApp* PROTOBUF_NULLABLE native_app_;
    ::common::v1::ConfigMeilisearch* PROTOBUF_NULLABLE meilisearch_;
    ::common::v1::ConfigBleve* PROTOBUF_NULLABLE bleve_;
    ::common::v1::ConfigDataRetention* PROTOBUF_NULLABLE data_retention_;
    ::common::v1::ConfigImageProxy* PROTOBUF_NULLABLE image_proxy_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Config_class_data_;
// -------------------------------------------------------------------

class ConfigUpdateRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigUpdateRequest) */ {
 public:
  inline ConfigUpdateRequest() : ConfigUpdateRequest(nullptr) {}
  ~ConfigUpdateRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigUpdateRequest* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigUpdateRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigUpdateRequest(::google::protobuf::internal::ConstantInitialized);

  inline ConfigUpdateRequest(const ConfigUpdateRequest& from) : ConfigUpdateRequest(nullptr, from) {}
  inline ConfigUpdateRequest(ConfigUpdateRequest&& from) noexcept
      : ConfigUpdateRequest(nullptr, ::std::move(from)) {}
  inline ConfigUpdateRequest& operator=(const ConfigUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigUpdateRequest& operator=(ConfigUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigUpdateRequest& default_instance() {
    return *reinterpret_cast<const ConfigUpdateRequest*>(
        &_ConfigUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;
  friend void swap(ConfigUpdateRequest& a, ConfigUpdateRequest& b) { a.Swap(&b); }
  inline void Swap(ConfigUpdateRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigUpdateRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigUpdateRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigUpdateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigUpdateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigUpdateRequest& from) { ConfigUpdateRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigUpdateRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigUpdateRequest"; }

 protected:
  explicit ConfigUpdateRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigUpdateRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigUpdateRequest& from);
  ConfigUpdateRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigUpdateRequest&& from) noexcept
      : ConfigUpdateRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConfigFieldNumber = 1,
  };
  // .common.v1.Config config = 1 [json_name = "config"];
  bool has_config() const;
  void clear_config() ;
  const ::common::v1::Config& config() const;
  [[nodiscard]] ::common::v1::Config* PROTOBUF_NULLABLE release_config();
  ::common::v1::Config* PROTOBUF_NONNULL mutable_config();
  void set_allocated_config(::common::v1::Config* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_config(::common::v1::Config* PROTOBUF_NULLABLE value);
  ::common::v1::Config* PROTOBUF_NULLABLE unsafe_arena_release_config();

  private:
  const ::common::v1::Config& _internal_config() const;
  ::common::v1::Config* PROTOBUF_NONNULL _internal_mutable_config();

  public:
  // @@protoc_insertion_point(class_scope:common.v1.ConfigUpdateRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigUpdateRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::common::v1::Config* PROTOBUF_NULLABLE config_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigUpdateRequest_class_data_;
// -------------------------------------------------------------------

class ConfigUpdateResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigUpdateResponse) */ {
 public:
  inline ConfigUpdateResponse() : ConfigUpdateResponse(nullptr) {}
  ~ConfigUpdateResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigUpdateResponse* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigUpdateResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigUpdateResponse(::google::protobuf::internal::ConstantInitialized);

  inline ConfigUpdateResponse(const ConfigUpdateResponse& from) : ConfigUpdateResponse(nullptr, from) {}
  inline ConfigUpdateResponse(ConfigUpdateResponse&& from) noexcept
      : ConfigUpdateResponse(nullptr, ::std::move(from)) {}
  inline ConfigUpdateResponse& operator=(const ConfigUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigUpdateResponse& operator=(ConfigUpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigUpdateResponse& default_instance() {
    return *reinterpret_cast<const ConfigUpdateResponse*>(
        &_ConfigUpdateResponse_default_instance_);
  }
  enum ResponseCase {
    kData = 1,
    kError = 2,
    RESPONSE_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 26;
  friend void swap(ConfigUpdateResponse& a, ConfigUpdateResponse& b) { a.Swap(&b); }
  inline void Swap(ConfigUpdateResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigUpdateResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigUpdateResponse* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigUpdateResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigUpdateResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigUpdateResponse& from) { ConfigUpdateResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigUpdateResponse* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigUpdateResponse"; }

 protected:
  explicit ConfigUpdateResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigUpdateResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigUpdateResponse& from);
  ConfigUpdateResponse(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigUpdateResponse&& from) noexcept
      : ConfigUpdateResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // .common.v1.Config data = 1 [json_name = "data"];
  bool has_data() const;
  private:
  bool _internal_has_data() const;

  public:
  void clear_data() ;
  const ::common::v1::Config& data() const;
  [[nodiscard]] ::common::v1::Config* PROTOBUF_NULLABLE release_data();
  ::common::v1::Config* PROTOBUF_NONNULL mutable_data();
  void set_allocated_data(::common::v1::Config* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_data(::common::v1::Config* PROTOBUF_NULLABLE value);
  ::common::v1::Config* PROTOBUF_NULLABLE unsafe_arena_release_data();

  private:
  const ::common::v1::Config& _internal_data() const;
  ::common::v1::Config* PROTOBUF_NONNULL _internal_mutable_data();

  public:
  // .shared.v1.AppError error = 2 [json_name = "error"];
  bool has_error() const;
  private:
  bool _internal_has_error() const;

  public:
  void clear_error() ;
  const ::shared::v1::AppError& error() const;
  [[nodiscard]] ::shared::v1::AppError* PROTOBUF_NULLABLE release_error();
  ::shared::v1::AppError* PROTOBUF_NONNULL mutable_error();
  void set_allocated_error(::shared::v1::AppError* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_error(::shared::v1::AppError* PROTOBUF_NULLABLE value);
  ::shared::v1::AppError* PROTOBUF_NULLABLE unsafe_arena_release_error();

  private:
  const ::shared::v1::AppError& _internal_error() const;
  ::shared::v1::AppError* PROTOBUF_NONNULL _internal_mutable_error();

  public:
  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:common.v1.ConfigUpdateResponse)
 private:
  class _Internal;
  void set_has_data();
  void set_has_error();
  inline bool has_response() const;
  inline void clear_has_response();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigUpdateResponse& from_msg);
    union ResponseUnion {
      constexpr ResponseUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::common::v1::Config* PROTOBUF_NULLABLE data_;
      ::shared::v1::AppError* PROTOBUF_NULLABLE error_;
    } response_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigUpdateResponse_class_data_;
// -------------------------------------------------------------------

class ConfigListenerResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigListenerResponse) */ {
 public:
  inline ConfigListenerResponse() : ConfigListenerResponse(nullptr) {}
  ~ConfigListenerResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigListenerResponse* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigListenerResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigListenerResponse(::google::protobuf::internal::ConstantInitialized);

  inline ConfigListenerResponse(const ConfigListenerResponse& from) : ConfigListenerResponse(nullptr, from) {}
  inline ConfigListenerResponse(ConfigListenerResponse&& from) noexcept
      : ConfigListenerResponse(nullptr, ::std::move(from)) {}
  inline ConfigListenerResponse& operator=(const ConfigListenerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigListenerResponse& operator=(ConfigListenerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigListenerResponse& default_instance() {
    return *reinterpret_cast<const ConfigListenerResponse*>(
        &_ConfigListenerResponse_default_instance_);
  }
  enum ResponseCase {
    kData = 1,
    kError = 2,
    RESPONSE_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 27;
  friend void swap(ConfigListenerResponse& a, ConfigListenerResponse& b) { a.Swap(&b); }
  inline void Swap(ConfigListenerResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigListenerResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigListenerResponse* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigListenerResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigListenerResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigListenerResponse& from) { ConfigListenerResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigListenerResponse* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigListenerResponse"; }

 protected:
  explicit ConfigListenerResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigListenerResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigListenerResponse& from);
  ConfigListenerResponse(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigListenerResponse&& from) noexcept
      : ConfigListenerResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // .common.v1.Config data = 1 [json_name = "data"];
  bool has_data() const;
  private:
  bool _internal_has_data() const;

  public:
  void clear_data() ;
  const ::common::v1::Config& data() const;
  [[nodiscard]] ::common::v1::Config* PROTOBUF_NULLABLE release_data();
  ::common::v1::Config* PROTOBUF_NONNULL mutable_data();
  void set_allocated_data(::common::v1::Config* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_data(::common::v1::Config* PROTOBUF_NULLABLE value);
  ::common::v1::Config* PROTOBUF_NULLABLE unsafe_arena_release_data();

  private:
  const ::common::v1::Config& _internal_data() const;
  ::common::v1::Config* PROTOBUF_NONNULL _internal_mutable_data();

  public:
  // .shared.v1.AppError error = 2 [json_name = "error"];
  bool has_error() const;
  private:
  bool _internal_has_error() const;

  public:
  void clear_error() ;
  const ::shared::v1::AppError& error() const;
  [[nodiscard]] ::shared::v1::AppError* PROTOBUF_NULLABLE release_error();
  ::shared::v1::AppError* PROTOBUF_NONNULL mutable_error();
  void set_allocated_error(::shared::v1::AppError* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_error(::shared::v1::AppError* PROTOBUF_NULLABLE value);
  ::shared::v1::AppError* PROTOBUF_NULLABLE unsafe_arena_release_error();

  private:
  const ::shared::v1::AppError& _internal_error() const;
  ::shared::v1::AppError* PROTOBUF_NONNULL _internal_mutable_error();

  public:
  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:common.v1.ConfigListenerResponse)
 private:
  class _Internal;
  void set_has_data();
  void set_has_error();
  inline bool has_response() const;
  inline void clear_has_response();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigListenerResponse& from_msg);
    union ResponseUnion {
      constexpr ResponseUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::common::v1::Config* PROTOBUF_NULLABLE data_;
      ::shared::v1::AppError* PROTOBUF_NULLABLE error_;
    } response_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigListenerResponse_class_data_;
// -------------------------------------------------------------------

class ConfigGetResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:common.v1.ConfigGetResponse) */ {
 public:
  inline ConfigGetResponse() : ConfigGetResponse(nullptr) {}
  ~ConfigGetResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfigGetResponse* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfigGetResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigGetResponse(::google::protobuf::internal::ConstantInitialized);

  inline ConfigGetResponse(const ConfigGetResponse& from) : ConfigGetResponse(nullptr, from) {}
  inline ConfigGetResponse(ConfigGetResponse&& from) noexcept
      : ConfigGetResponse(nullptr, ::std::move(from)) {}
  inline ConfigGetResponse& operator=(const ConfigGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigGetResponse& operator=(ConfigGetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigGetResponse& default_instance() {
    return *reinterpret_cast<const ConfigGetResponse*>(
        &_ConfigGetResponse_default_instance_);
  }
  enum ResponseCase {
    kData = 1,
    kError = 2,
    RESPONSE_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(ConfigGetResponse& a, ConfigGetResponse& b) { a.Swap(&b); }
  inline void Swap(ConfigGetResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigGetResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigGetResponse* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfigGetResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigGetResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigGetResponse& from) { ConfigGetResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfigGetResponse* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "common.v1.ConfigGetResponse"; }

 protected:
  explicit ConfigGetResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfigGetResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigGetResponse& from);
  ConfigGetResponse(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfigGetResponse&& from) noexcept
      : ConfigGetResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // .common.v1.Config data = 1 [json_name = "data"];
  bool has_data() const;
  private:
  bool _internal_has_data() const;

  public:
  void clear_data() ;
  const ::common::v1::Config& data() const;
  [[nodiscard]] ::common::v1::Config* PROTOBUF_NULLABLE release_data();
  ::common::v1::Config* PROTOBUF_NONNULL mutable_data();
  void set_allocated_data(::common::v1::Config* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_data(::common::v1::Config* PROTOBUF_NULLABLE value);
  ::common::v1::Config* PROTOBUF_NULLABLE unsafe_arena_release_data();

  private:
  const ::common::v1::Config& _internal_data() const;
  ::common::v1::Config* PROTOBUF_NONNULL _internal_mutable_data();

  public:
  // .shared.v1.AppError error = 2 [json_name = "error"];
  bool has_error() const;
  private:
  bool _internal_has_error() const;

  public:
  void clear_error() ;
  const ::shared::v1::AppError& error() const;
  [[nodiscard]] ::shared::v1::AppError* PROTOBUF_NULLABLE release_error();
  ::shared::v1::AppError* PROTOBUF_NONNULL mutable_error();
  void set_allocated_error(::shared::v1::AppError* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_error(::shared::v1::AppError* PROTOBUF_NULLABLE value);
  ::shared::v1::AppError* PROTOBUF_NULLABLE unsafe_arena_release_error();

  private:
  const ::shared::v1::AppError& _internal_error() const;
  ::shared::v1::AppError* PROTOBUF_NONNULL _internal_mutable_error();

  public:
  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:common.v1.ConfigGetResponse)
 private:
  class _Internal;
  void set_has_data();
  void set_has_error();
  inline bool has_response() const;
  inline void clear_has_response();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfigGetResponse& from_msg);
    union ResponseUnion {
      constexpr ResponseUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::common::v1::Config* PROTOBUF_NULLABLE data_;
      ::shared::v1::AppError* PROTOBUF_NULLABLE error_;
    } response_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fv1_2fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfigGetResponse_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ConfigMain

// optional string env = 1 [json_name = "env"];
inline bool ConfigMain::has_env() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConfigMain::clear_env() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.env_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ConfigMain::env() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMain.env)
  return _internal_env();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigMain::set_env(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.env_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigMain.env)
}
inline ::std::string* PROTOBUF_NONNULL ConfigMain::mutable_env()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_env();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigMain.env)
  return _s;
}
inline const ::std::string& ConfigMain::_internal_env() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.env_.Get();
}
inline void ConfigMain::_internal_set_env(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.env_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigMain::_internal_mutable_env() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.env_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigMain::release_env() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigMain.env)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.env_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.env_.Set("", GetArena());
  }
  return released;
}
inline void ConfigMain::set_allocated_env(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.env_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.env_.IsDefault()) {
    _impl_.env_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigMain.env)
}

// optional string site_name = 2 [json_name = "siteName"];
inline bool ConfigMain::has_site_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConfigMain::clear_site_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.site_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& ConfigMain::site_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMain.site_name)
  return _internal_site_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigMain::set_site_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.site_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigMain.site_name)
}
inline ::std::string* PROTOBUF_NONNULL ConfigMain::mutable_site_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_site_name();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigMain.site_name)
  return _s;
}
inline const ::std::string& ConfigMain::_internal_site_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.site_name_.Get();
}
inline void ConfigMain::_internal_set_site_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.site_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigMain::_internal_mutable_site_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.site_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigMain::release_site_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigMain.site_name)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.site_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.site_name_.Set("", GetArena());
  }
  return released;
}
inline void ConfigMain::set_allocated_site_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.site_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.site_name_.IsDefault()) {
    _impl_.site_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigMain.site_name)
}

// optional string site_url = 3 [json_name = "siteUrl"];
inline bool ConfigMain::has_site_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ConfigMain::clear_site_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.site_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& ConfigMain::site_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMain.site_url)
  return _internal_site_url();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigMain::set_site_url(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.site_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigMain.site_url)
}
inline ::std::string* PROTOBUF_NONNULL ConfigMain::mutable_site_url()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_site_url();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigMain.site_url)
  return _s;
}
inline const ::std::string& ConfigMain::_internal_site_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.site_url_.Get();
}
inline void ConfigMain::_internal_set_site_url(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.site_url_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigMain::_internal_mutable_site_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.site_url_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigMain::release_site_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigMain.site_url)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.site_url_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.site_url_.Set("", GetArena());
  }
  return released;
}
inline void ConfigMain::set_allocated_site_url(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.site_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.site_url_.IsDefault()) {
    _impl_.site_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigMain.site_url)
}

// optional bool enable_link_previews = 5 [json_name = "enableLinkPreviews"];
inline bool ConfigMain::has_enable_link_previews() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ConfigMain::clear_enable_link_previews() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_link_previews_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool ConfigMain::enable_link_previews() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMain.enable_link_previews)
  return _internal_enable_link_previews();
}
inline void ConfigMain::set_enable_link_previews(bool value) {
  _internal_set_enable_link_previews(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMain.enable_link_previews)
}
inline bool ConfigMain::_internal_enable_link_previews() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_link_previews_;
}
inline void ConfigMain::_internal_set_enable_link_previews(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_link_previews_ = value;
}

// optional string restrict_link_previews = 6 [json_name = "restrictLinkPreviews"];
inline bool ConfigMain::has_restrict_link_previews() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ConfigMain::clear_restrict_link_previews() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.restrict_link_previews_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& ConfigMain::restrict_link_previews() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMain.restrict_link_previews)
  return _internal_restrict_link_previews();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigMain::set_restrict_link_previews(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.restrict_link_previews_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigMain.restrict_link_previews)
}
inline ::std::string* PROTOBUF_NONNULL ConfigMain::mutable_restrict_link_previews()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_restrict_link_previews();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigMain.restrict_link_previews)
  return _s;
}
inline const ::std::string& ConfigMain::_internal_restrict_link_previews() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.restrict_link_previews_.Get();
}
inline void ConfigMain::_internal_set_restrict_link_previews(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.restrict_link_previews_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigMain::_internal_mutable_restrict_link_previews() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.restrict_link_previews_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigMain::release_restrict_link_previews() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigMain.restrict_link_previews)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.restrict_link_previews_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.restrict_link_previews_.Set("", GetArena());
  }
  return released;
}
inline void ConfigMain::set_allocated_restrict_link_previews(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.restrict_link_previews_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.restrict_link_previews_.IsDefault()) {
    _impl_.restrict_link_previews_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigMain.restrict_link_previews)
}

// optional bool enable_client_performance_debugging = 7 [json_name = "enableClientPerformanceDebugging"];
inline bool ConfigMain::has_enable_client_performance_debugging() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ConfigMain::clear_enable_client_performance_debugging() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_client_performance_debugging_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool ConfigMain::enable_client_performance_debugging() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMain.enable_client_performance_debugging)
  return _internal_enable_client_performance_debugging();
}
inline void ConfigMain::set_enable_client_performance_debugging(bool value) {
  _internal_set_enable_client_performance_debugging(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMain.enable_client_performance_debugging)
}
inline bool ConfigMain::_internal_enable_client_performance_debugging() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_client_performance_debugging_;
}
inline void ConfigMain::_internal_set_enable_client_performance_debugging(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_client_performance_debugging_ = value;
}

// optional bool enable_gif_picker = 8 [json_name = "enableGifPicker"];
inline bool ConfigMain::has_enable_gif_picker() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ConfigMain::clear_enable_gif_picker() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_gif_picker_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool ConfigMain::enable_gif_picker() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMain.enable_gif_picker)
  return _internal_enable_gif_picker();
}
inline void ConfigMain::set_enable_gif_picker(bool value) {
  _internal_set_enable_gif_picker(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMain.enable_gif_picker)
}
inline bool ConfigMain::_internal_enable_gif_picker() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_gif_picker_;
}
inline void ConfigMain::_internal_set_enable_gif_picker(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_gif_picker_ = value;
}

// optional bool enable_custom_emoji = 9 [json_name = "enableCustomEmoji"];
inline bool ConfigMain::has_enable_custom_emoji() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ConfigMain::clear_enable_custom_emoji() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_custom_emoji_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool ConfigMain::enable_custom_emoji() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMain.enable_custom_emoji)
  return _internal_enable_custom_emoji();
}
inline void ConfigMain::set_enable_custom_emoji(bool value) {
  _internal_set_enable_custom_emoji(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMain.enable_custom_emoji)
}
inline bool ConfigMain::_internal_enable_custom_emoji() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_custom_emoji_;
}
inline void ConfigMain::_internal_set_enable_custom_emoji(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_custom_emoji_ = value;
}

// optional bool enable_emoji_picker = 10 [json_name = "enableEmojiPicker"];
inline bool ConfigMain::has_enable_emoji_picker() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void ConfigMain::clear_enable_emoji_picker() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_emoji_picker_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool ConfigMain::enable_emoji_picker() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMain.enable_emoji_picker)
  return _internal_enable_emoji_picker();
}
inline void ConfigMain::set_enable_emoji_picker(bool value) {
  _internal_set_enable_emoji_picker(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMain.enable_emoji_picker)
}
inline bool ConfigMain::_internal_enable_emoji_picker() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_emoji_picker_;
}
inline void ConfigMain::_internal_set_enable_emoji_picker(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_emoji_picker_ = value;
}

// optional int64 time_between_user_typing_updates_milliseconds = 11 [json_name = "timeBetweenUserTypingUpdatesMilliseconds"];
inline bool ConfigMain::has_time_between_user_typing_updates_milliseconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void ConfigMain::clear_time_between_user_typing_updates_milliseconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_between_user_typing_updates_milliseconds_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int64_t ConfigMain::time_between_user_typing_updates_milliseconds() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMain.time_between_user_typing_updates_milliseconds)
  return _internal_time_between_user_typing_updates_milliseconds();
}
inline void ConfigMain::set_time_between_user_typing_updates_milliseconds(::int64_t value) {
  _internal_set_time_between_user_typing_updates_milliseconds(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMain.time_between_user_typing_updates_milliseconds)
}
inline ::int64_t ConfigMain::_internal_time_between_user_typing_updates_milliseconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_between_user_typing_updates_milliseconds_;
}
inline void ConfigMain::_internal_set_time_between_user_typing_updates_milliseconds(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_between_user_typing_updates_milliseconds_ = value;
}

// optional bool enable_file_search = 12 [json_name = "enableFileSearch"];
inline bool ConfigMain::has_enable_file_search() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void ConfigMain::clear_enable_file_search() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_file_search_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool ConfigMain::enable_file_search() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMain.enable_file_search)
  return _internal_enable_file_search();
}
inline void ConfigMain::set_enable_file_search(bool value) {
  _internal_set_enable_file_search(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMain.enable_file_search)
}
inline bool ConfigMain::_internal_enable_file_search() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_file_search_;
}
inline void ConfigMain::_internal_set_enable_file_search(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_file_search_ = value;
}

// optional bool enable_user_typing_messages = 13 [json_name = "enableUserTypingMessages"];
inline bool ConfigMain::has_enable_user_typing_messages() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void ConfigMain::clear_enable_user_typing_messages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_user_typing_messages_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool ConfigMain::enable_user_typing_messages() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMain.enable_user_typing_messages)
  return _internal_enable_user_typing_messages();
}
inline void ConfigMain::set_enable_user_typing_messages(bool value) {
  _internal_set_enable_user_typing_messages(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMain.enable_user_typing_messages)
}
inline bool ConfigMain::_internal_enable_user_typing_messages() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_user_typing_messages_;
}
inline void ConfigMain::_internal_set_enable_user_typing_messages(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_user_typing_messages_ = value;
}

// optional bool enable_user_statuses = 14 [json_name = "enableUserStatuses"];
inline bool ConfigMain::has_enable_user_statuses() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void ConfigMain::clear_enable_user_statuses() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_user_statuses_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool ConfigMain::enable_user_statuses() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMain.enable_user_statuses)
  return _internal_enable_user_statuses();
}
inline void ConfigMain::set_enable_user_statuses(bool value) {
  _internal_set_enable_user_statuses(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMain.enable_user_statuses)
}
inline bool ConfigMain::_internal_enable_user_statuses() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_user_statuses_;
}
inline void ConfigMain::_internal_set_enable_user_statuses(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_user_statuses_ = value;
}

// optional bool enable_email_invitations = 15 [json_name = "enableEmailInvitations"];
inline bool ConfigMain::has_enable_email_invitations() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void ConfigMain::clear_enable_email_invitations() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_email_invitations_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool ConfigMain::enable_email_invitations() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMain.enable_email_invitations)
  return _internal_enable_email_invitations();
}
inline void ConfigMain::set_enable_email_invitations(bool value) {
  _internal_set_enable_email_invitations(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMain.enable_email_invitations)
}
inline bool ConfigMain::_internal_enable_email_invitations() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_email_invitations_;
}
inline void ConfigMain::_internal_set_enable_email_invitations(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_email_invitations_ = value;
}

// optional bool enable_svgs = 16 [json_name = "enableSvgs"];
inline bool ConfigMain::has_enable_svgs() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void ConfigMain::clear_enable_svgs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_svgs_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool ConfigMain::enable_svgs() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMain.enable_svgs)
  return _internal_enable_svgs();
}
inline void ConfigMain::set_enable_svgs(bool value) {
  _internal_set_enable_svgs(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMain.enable_svgs)
}
inline bool ConfigMain::_internal_enable_svgs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_svgs_;
}
inline void ConfigMain::_internal_set_enable_svgs(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_svgs_ = value;
}

// optional bool allow_persistent_notifications = 17 [json_name = "allowPersistentNotifications"];
inline bool ConfigMain::has_allow_persistent_notifications() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void ConfigMain::clear_allow_persistent_notifications() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_persistent_notifications_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool ConfigMain::allow_persistent_notifications() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMain.allow_persistent_notifications)
  return _internal_allow_persistent_notifications();
}
inline void ConfigMain::set_allow_persistent_notifications(bool value) {
  _internal_set_allow_persistent_notifications(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMain.allow_persistent_notifications)
}
inline bool ConfigMain::_internal_allow_persistent_notifications() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allow_persistent_notifications_;
}
inline void ConfigMain::_internal_set_allow_persistent_notifications(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_persistent_notifications_ = value;
}

// optional int32 persistent_notification_interval_minutes = 18 [json_name = "persistentNotificationIntervalMinutes"];
inline bool ConfigMain::has_persistent_notification_interval_minutes() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void ConfigMain::clear_persistent_notification_interval_minutes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.persistent_notification_interval_minutes_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::int32_t ConfigMain::persistent_notification_interval_minutes() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMain.persistent_notification_interval_minutes)
  return _internal_persistent_notification_interval_minutes();
}
inline void ConfigMain::set_persistent_notification_interval_minutes(::int32_t value) {
  _internal_set_persistent_notification_interval_minutes(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMain.persistent_notification_interval_minutes)
}
inline ::int32_t ConfigMain::_internal_persistent_notification_interval_minutes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.persistent_notification_interval_minutes_;
}
inline void ConfigMain::_internal_set_persistent_notification_interval_minutes(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.persistent_notification_interval_minutes_ = value;
}

// optional int32 persistent_notification_max_count = 19 [json_name = "persistentNotificationMaxCount"];
inline bool ConfigMain::has_persistent_notification_max_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void ConfigMain::clear_persistent_notification_max_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.persistent_notification_max_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::int32_t ConfigMain::persistent_notification_max_count() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMain.persistent_notification_max_count)
  return _internal_persistent_notification_max_count();
}
inline void ConfigMain::set_persistent_notification_max_count(::int32_t value) {
  _internal_set_persistent_notification_max_count(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMain.persistent_notification_max_count)
}
inline ::int32_t ConfigMain::_internal_persistent_notification_max_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.persistent_notification_max_count_;
}
inline void ConfigMain::_internal_set_persistent_notification_max_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.persistent_notification_max_count_ = value;
}

// optional int32 persistent_notification_max_recipients = 20 [json_name = "persistentNotificationMaxRecipients"];
inline bool ConfigMain::has_persistent_notification_max_recipients() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void ConfigMain::clear_persistent_notification_max_recipients() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.persistent_notification_max_recipients_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::int32_t ConfigMain::persistent_notification_max_recipients() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMain.persistent_notification_max_recipients)
  return _internal_persistent_notification_max_recipients();
}
inline void ConfigMain::set_persistent_notification_max_recipients(::int32_t value) {
  _internal_set_persistent_notification_max_recipients(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMain.persistent_notification_max_recipients)
}
inline ::int32_t ConfigMain::_internal_persistent_notification_max_recipients() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.persistent_notification_max_recipients_;
}
inline void ConfigMain::_internal_set_persistent_notification_max_recipients(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.persistent_notification_max_recipients_ = value;
}

// optional int32 feature_flag_sync_interval_seconds = 21 [json_name = "featureFlagSyncIntervalSeconds"];
inline bool ConfigMain::has_feature_flag_sync_interval_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void ConfigMain::clear_feature_flag_sync_interval_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.feature_flag_sync_interval_seconds_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::int32_t ConfigMain::feature_flag_sync_interval_seconds() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMain.feature_flag_sync_interval_seconds)
  return _internal_feature_flag_sync_interval_seconds();
}
inline void ConfigMain::set_feature_flag_sync_interval_seconds(::int32_t value) {
  _internal_set_feature_flag_sync_interval_seconds(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMain.feature_flag_sync_interval_seconds)
}
inline ::int32_t ConfigMain::_internal_feature_flag_sync_interval_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.feature_flag_sync_interval_seconds_;
}
inline void ConfigMain::_internal_set_feature_flag_sync_interval_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.feature_flag_sync_interval_seconds_ = value;
}

// optional bool allow_synced_drafts = 22 [json_name = "allowSyncedDrafts"];
inline bool ConfigMain::has_allow_synced_drafts() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void ConfigMain::clear_allow_synced_drafts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_synced_drafts_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool ConfigMain::allow_synced_drafts() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMain.allow_synced_drafts)
  return _internal_allow_synced_drafts();
}
inline void ConfigMain::set_allow_synced_drafts(bool value) {
  _internal_set_allow_synced_drafts(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMain.allow_synced_drafts)
}
inline bool ConfigMain::_internal_allow_synced_drafts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allow_synced_drafts_;
}
inline void ConfigMain::_internal_set_allow_synced_drafts(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_synced_drafts_ = value;
}

// -------------------------------------------------------------------

// ConfigServices

// optional string common_service_grpc_url = 1 [json_name = "commonServiceGrpcUrl"];
inline bool ConfigServices::has_common_service_grpc_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConfigServices::clear_common_service_grpc_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.common_service_grpc_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ConfigServices::common_service_grpc_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigServices.common_service_grpc_url)
  return _internal_common_service_grpc_url();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigServices::set_common_service_grpc_url(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.common_service_grpc_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigServices.common_service_grpc_url)
}
inline ::std::string* PROTOBUF_NONNULL ConfigServices::mutable_common_service_grpc_url()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_common_service_grpc_url();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigServices.common_service_grpc_url)
  return _s;
}
inline const ::std::string& ConfigServices::_internal_common_service_grpc_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.common_service_grpc_url_.Get();
}
inline void ConfigServices::_internal_set_common_service_grpc_url(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.common_service_grpc_url_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigServices::_internal_mutable_common_service_grpc_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.common_service_grpc_url_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigServices::release_common_service_grpc_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigServices.common_service_grpc_url)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.common_service_grpc_url_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.common_service_grpc_url_.Set("", GetArena());
  }
  return released;
}
inline void ConfigServices::set_allocated_common_service_grpc_url(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.common_service_grpc_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.common_service_grpc_url_.IsDefault()) {
    _impl_.common_service_grpc_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigServices.common_service_grpc_url)
}

// optional string user_service_grpc_url = 2 [json_name = "userServiceGrpcUrl"];
inline bool ConfigServices::has_user_service_grpc_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConfigServices::clear_user_service_grpc_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_service_grpc_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& ConfigServices::user_service_grpc_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigServices.user_service_grpc_url)
  return _internal_user_service_grpc_url();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigServices::set_user_service_grpc_url(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_service_grpc_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigServices.user_service_grpc_url)
}
inline ::std::string* PROTOBUF_NONNULL ConfigServices::mutable_user_service_grpc_url()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_user_service_grpc_url();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigServices.user_service_grpc_url)
  return _s;
}
inline const ::std::string& ConfigServices::_internal_user_service_grpc_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_service_grpc_url_.Get();
}
inline void ConfigServices::_internal_set_user_service_grpc_url(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_service_grpc_url_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigServices::_internal_mutable_user_service_grpc_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.user_service_grpc_url_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigServices::release_user_service_grpc_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigServices.user_service_grpc_url)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.user_service_grpc_url_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.user_service_grpc_url_.Set("", GetArena());
  }
  return released;
}
inline void ConfigServices::set_allocated_user_service_grpc_url(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.user_service_grpc_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_service_grpc_url_.IsDefault()) {
    _impl_.user_service_grpc_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigServices.user_service_grpc_url)
}

// optional string products_service_grpc_url = 3 [json_name = "productsServiceGrpcUrl"];
inline bool ConfigServices::has_products_service_grpc_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ConfigServices::clear_products_service_grpc_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.products_service_grpc_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& ConfigServices::products_service_grpc_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigServices.products_service_grpc_url)
  return _internal_products_service_grpc_url();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigServices::set_products_service_grpc_url(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.products_service_grpc_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigServices.products_service_grpc_url)
}
inline ::std::string* PROTOBUF_NONNULL ConfigServices::mutable_products_service_grpc_url()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_products_service_grpc_url();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigServices.products_service_grpc_url)
  return _s;
}
inline const ::std::string& ConfigServices::_internal_products_service_grpc_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.products_service_grpc_url_.Get();
}
inline void ConfigServices::_internal_set_products_service_grpc_url(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.products_service_grpc_url_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigServices::_internal_mutable_products_service_grpc_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.products_service_grpc_url_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigServices::release_products_service_grpc_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigServices.products_service_grpc_url)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.products_service_grpc_url_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.products_service_grpc_url_.Set("", GetArena());
  }
  return released;
}
inline void ConfigServices::set_allocated_products_service_grpc_url(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.products_service_grpc_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.products_service_grpc_url_.IsDefault()) {
    _impl_.products_service_grpc_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigServices.products_service_grpc_url)
}

// optional string jaeger_collector_url = 4 [json_name = "jaegerCollectorUrl"];
inline bool ConfigServices::has_jaeger_collector_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ConfigServices::clear_jaeger_collector_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jaeger_collector_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& ConfigServices::jaeger_collector_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigServices.jaeger_collector_url)
  return _internal_jaeger_collector_url();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigServices::set_jaeger_collector_url(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.jaeger_collector_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigServices.jaeger_collector_url)
}
inline ::std::string* PROTOBUF_NONNULL ConfigServices::mutable_jaeger_collector_url()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_jaeger_collector_url();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigServices.jaeger_collector_url)
  return _s;
}
inline const ::std::string& ConfigServices::_internal_jaeger_collector_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.jaeger_collector_url_.Get();
}
inline void ConfigServices::_internal_set_jaeger_collector_url(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.jaeger_collector_url_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigServices::_internal_mutable_jaeger_collector_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.jaeger_collector_url_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigServices::release_jaeger_collector_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigServices.jaeger_collector_url)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.jaeger_collector_url_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.jaeger_collector_url_.Set("", GetArena());
  }
  return released;
}
inline void ConfigServices::set_allocated_jaeger_collector_url(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.jaeger_collector_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.jaeger_collector_url_.IsDefault()) {
    _impl_.jaeger_collector_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigServices.jaeger_collector_url)
}

// optional string common_service_prometheus_url = 5 [json_name = "commonServicePrometheusUrl"];
inline bool ConfigServices::has_common_service_prometheus_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ConfigServices::clear_common_service_prometheus_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.common_service_prometheus_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& ConfigServices::common_service_prometheus_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigServices.common_service_prometheus_url)
  return _internal_common_service_prometheus_url();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigServices::set_common_service_prometheus_url(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.common_service_prometheus_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigServices.common_service_prometheus_url)
}
inline ::std::string* PROTOBUF_NONNULL ConfigServices::mutable_common_service_prometheus_url()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_common_service_prometheus_url();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigServices.common_service_prometheus_url)
  return _s;
}
inline const ::std::string& ConfigServices::_internal_common_service_prometheus_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.common_service_prometheus_url_.Get();
}
inline void ConfigServices::_internal_set_common_service_prometheus_url(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.common_service_prometheus_url_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigServices::_internal_mutable_common_service_prometheus_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.common_service_prometheus_url_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigServices::release_common_service_prometheus_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigServices.common_service_prometheus_url)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.common_service_prometheus_url_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.common_service_prometheus_url_.Set("", GetArena());
  }
  return released;
}
inline void ConfigServices::set_allocated_common_service_prometheus_url(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.common_service_prometheus_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.common_service_prometheus_url_.IsDefault()) {
    _impl_.common_service_prometheus_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigServices.common_service_prometheus_url)
}

// optional string user_service_prometheus_url = 6 [json_name = "userServicePrometheusUrl"];
inline bool ConfigServices::has_user_service_prometheus_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ConfigServices::clear_user_service_prometheus_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_service_prometheus_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::std::string& ConfigServices::user_service_prometheus_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigServices.user_service_prometheus_url)
  return _internal_user_service_prometheus_url();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigServices::set_user_service_prometheus_url(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.user_service_prometheus_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigServices.user_service_prometheus_url)
}
inline ::std::string* PROTOBUF_NONNULL ConfigServices::mutable_user_service_prometheus_url()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_user_service_prometheus_url();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigServices.user_service_prometheus_url)
  return _s;
}
inline const ::std::string& ConfigServices::_internal_user_service_prometheus_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_service_prometheus_url_.Get();
}
inline void ConfigServices::_internal_set_user_service_prometheus_url(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.user_service_prometheus_url_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigServices::_internal_mutable_user_service_prometheus_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.user_service_prometheus_url_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigServices::release_user_service_prometheus_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigServices.user_service_prometheus_url)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.user_service_prometheus_url_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.user_service_prometheus_url_.Set("", GetArena());
  }
  return released;
}
inline void ConfigServices::set_allocated_user_service_prometheus_url(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.user_service_prometheus_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_service_prometheus_url_.IsDefault()) {
    _impl_.user_service_prometheus_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigServices.user_service_prometheus_url)
}

// optional string products_service_prometheus_url = 7 [json_name = "productsServicePrometheusUrl"];
inline bool ConfigServices::has_products_service_prometheus_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ConfigServices::clear_products_service_prometheus_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.products_service_prometheus_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::std::string& ConfigServices::products_service_prometheus_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigServices.products_service_prometheus_url)
  return _internal_products_service_prometheus_url();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigServices::set_products_service_prometheus_url(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.products_service_prometheus_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigServices.products_service_prometheus_url)
}
inline ::std::string* PROTOBUF_NONNULL ConfigServices::mutable_products_service_prometheus_url()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_products_service_prometheus_url();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigServices.products_service_prometheus_url)
  return _s;
}
inline const ::std::string& ConfigServices::_internal_products_service_prometheus_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.products_service_prometheus_url_.Get();
}
inline void ConfigServices::_internal_set_products_service_prometheus_url(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.products_service_prometheus_url_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigServices::_internal_mutable_products_service_prometheus_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.products_service_prometheus_url_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigServices::release_products_service_prometheus_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigServices.products_service_prometheus_url)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.products_service_prometheus_url_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.products_service_prometheus_url_.Set("", GetArena());
  }
  return released;
}
inline void ConfigServices::set_allocated_products_service_prometheus_url(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.products_service_prometheus_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.products_service_prometheus_url_.IsDefault()) {
    _impl_.products_service_prometheus_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigServices.products_service_prometheus_url)
}

// optional string users_service_max_receive_message_size_bytes = 8 [json_name = "usersServiceMaxReceiveMessageSizeBytes"];
inline bool ConfigServices::has_users_service_max_receive_message_size_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ConfigServices::clear_users_service_max_receive_message_size_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.users_service_max_receive_message_size_bytes_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::std::string& ConfigServices::users_service_max_receive_message_size_bytes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigServices.users_service_max_receive_message_size_bytes)
  return _internal_users_service_max_receive_message_size_bytes();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigServices::set_users_service_max_receive_message_size_bytes(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.users_service_max_receive_message_size_bytes_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigServices.users_service_max_receive_message_size_bytes)
}
inline ::std::string* PROTOBUF_NONNULL ConfigServices::mutable_users_service_max_receive_message_size_bytes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_users_service_max_receive_message_size_bytes();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigServices.users_service_max_receive_message_size_bytes)
  return _s;
}
inline const ::std::string& ConfigServices::_internal_users_service_max_receive_message_size_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.users_service_max_receive_message_size_bytes_.Get();
}
inline void ConfigServices::_internal_set_users_service_max_receive_message_size_bytes(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.users_service_max_receive_message_size_bytes_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigServices::_internal_mutable_users_service_max_receive_message_size_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.users_service_max_receive_message_size_bytes_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigServices::release_users_service_max_receive_message_size_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigServices.users_service_max_receive_message_size_bytes)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.users_service_max_receive_message_size_bytes_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.users_service_max_receive_message_size_bytes_.Set("", GetArena());
  }
  return released;
}
inline void ConfigServices::set_allocated_users_service_max_receive_message_size_bytes(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.users_service_max_receive_message_size_bytes_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.users_service_max_receive_message_size_bytes_.IsDefault()) {
    _impl_.users_service_max_receive_message_size_bytes_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigServices.users_service_max_receive_message_size_bytes)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ConfigSecurity

// map<string, string> restricted_usernames = 1 [json_name = "restrictedUsernames"];
inline int ConfigSecurity::_internal_restricted_usernames_size() const {
  return _internal_restricted_usernames().size();
}
inline int ConfigSecurity::restricted_usernames_size() const {
  return _internal_restricted_usernames_size();
}
inline void ConfigSecurity::clear_restricted_usernames() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.restricted_usernames_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& ConfigSecurity::_internal_restricted_usernames() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.restricted_usernames_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& ConfigSecurity::restricted_usernames() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:common.v1.ConfigSecurity.restricted_usernames)
  return _internal_restricted_usernames();
}
inline ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL ConfigSecurity::_internal_mutable_restricted_usernames() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.restricted_usernames_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL ConfigSecurity::mutable_restricted_usernames()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:common.v1.ConfigSecurity.restricted_usernames)
  return _internal_mutable_restricted_usernames();
}

// optional int32 maximum_login_attempts = 2 [json_name = "maximumLoginAttempts"];
inline bool ConfigSecurity::has_maximum_login_attempts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ConfigSecurity::clear_maximum_login_attempts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maximum_login_attempts_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t ConfigSecurity::maximum_login_attempts() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSecurity.maximum_login_attempts)
  return _internal_maximum_login_attempts();
}
inline void ConfigSecurity::set_maximum_login_attempts(::int32_t value) {
  _internal_set_maximum_login_attempts(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSecurity.maximum_login_attempts)
}
inline ::int32_t ConfigSecurity::_internal_maximum_login_attempts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.maximum_login_attempts_;
}
inline void ConfigSecurity::_internal_set_maximum_login_attempts(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maximum_login_attempts_ = value;
}

// optional bool enable_insecure_outgoing_connections = 3 [json_name = "enableInsecureOutgoingConnections"];
inline bool ConfigSecurity::has_enable_insecure_outgoing_connections() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ConfigSecurity::clear_enable_insecure_outgoing_connections() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_insecure_outgoing_connections_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool ConfigSecurity::enable_insecure_outgoing_connections() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSecurity.enable_insecure_outgoing_connections)
  return _internal_enable_insecure_outgoing_connections();
}
inline void ConfigSecurity::set_enable_insecure_outgoing_connections(bool value) {
  _internal_set_enable_insecure_outgoing_connections(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSecurity.enable_insecure_outgoing_connections)
}
inline bool ConfigSecurity::_internal_enable_insecure_outgoing_connections() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_insecure_outgoing_connections_;
}
inline void ConfigSecurity::_internal_set_enable_insecure_outgoing_connections(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_insecure_outgoing_connections_ = value;
}

// optional bool enable_multifactor_authentication = 4 [json_name = "enableMultifactorAuthentication"];
inline bool ConfigSecurity::has_enable_multifactor_authentication() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ConfigSecurity::clear_enable_multifactor_authentication() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_multifactor_authentication_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool ConfigSecurity::enable_multifactor_authentication() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSecurity.enable_multifactor_authentication)
  return _internal_enable_multifactor_authentication();
}
inline void ConfigSecurity::set_enable_multifactor_authentication(bool value) {
  _internal_set_enable_multifactor_authentication(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSecurity.enable_multifactor_authentication)
}
inline bool ConfigSecurity::_internal_enable_multifactor_authentication() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_multifactor_authentication_;
}
inline void ConfigSecurity::_internal_set_enable_multifactor_authentication(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_multifactor_authentication_ = value;
}

// optional bool enforce_multifactor_authentication = 5 [json_name = "enforceMultifactorAuthentication"];
inline bool ConfigSecurity::has_enforce_multifactor_authentication() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ConfigSecurity::clear_enforce_multifactor_authentication() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enforce_multifactor_authentication_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool ConfigSecurity::enforce_multifactor_authentication() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSecurity.enforce_multifactor_authentication)
  return _internal_enforce_multifactor_authentication();
}
inline void ConfigSecurity::set_enforce_multifactor_authentication(bool value) {
  _internal_set_enforce_multifactor_authentication(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSecurity.enforce_multifactor_authentication)
}
inline bool ConfigSecurity::_internal_enforce_multifactor_authentication() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enforce_multifactor_authentication_;
}
inline void ConfigSecurity::_internal_set_enforce_multifactor_authentication(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enforce_multifactor_authentication_ = value;
}

// optional bool enable_oauth_service_provider = 6 [json_name = "enableOauthServiceProvider"];
inline bool ConfigSecurity::has_enable_oauth_service_provider() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ConfigSecurity::clear_enable_oauth_service_provider() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_oauth_service_provider_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool ConfigSecurity::enable_oauth_service_provider() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSecurity.enable_oauth_service_provider)
  return _internal_enable_oauth_service_provider();
}
inline void ConfigSecurity::set_enable_oauth_service_provider(bool value) {
  _internal_set_enable_oauth_service_provider(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSecurity.enable_oauth_service_provider)
}
inline bool ConfigSecurity::_internal_enable_oauth_service_provider() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_oauth_service_provider_;
}
inline void ConfigSecurity::_internal_set_enable_oauth_service_provider(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_oauth_service_provider_ = value;
}

// optional bool enable_outgoing_oauth_connections = 7 [json_name = "enableOutgoingOauthConnections"];
inline bool ConfigSecurity::has_enable_outgoing_oauth_connections() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void ConfigSecurity::clear_enable_outgoing_oauth_connections() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_outgoing_oauth_connections_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool ConfigSecurity::enable_outgoing_oauth_connections() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSecurity.enable_outgoing_oauth_connections)
  return _internal_enable_outgoing_oauth_connections();
}
inline void ConfigSecurity::set_enable_outgoing_oauth_connections(bool value) {
  _internal_set_enable_outgoing_oauth_connections(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSecurity.enable_outgoing_oauth_connections)
}
inline bool ConfigSecurity::_internal_enable_outgoing_oauth_connections() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_outgoing_oauth_connections_;
}
inline void ConfigSecurity::_internal_set_enable_outgoing_oauth_connections(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_outgoing_oauth_connections_ = value;
}

// optional bool terminate_sessions_on_password_change = 8 [json_name = "terminateSessionsOnPasswordChange"];
inline bool ConfigSecurity::has_terminate_sessions_on_password_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void ConfigSecurity::clear_terminate_sessions_on_password_change() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.terminate_sessions_on_password_change_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool ConfigSecurity::terminate_sessions_on_password_change() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSecurity.terminate_sessions_on_password_change)
  return _internal_terminate_sessions_on_password_change();
}
inline void ConfigSecurity::set_terminate_sessions_on_password_change(bool value) {
  _internal_set_terminate_sessions_on_password_change(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSecurity.terminate_sessions_on_password_change)
}
inline bool ConfigSecurity::_internal_terminate_sessions_on_password_change() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.terminate_sessions_on_password_change_;
}
inline void ConfigSecurity::_internal_set_terminate_sessions_on_password_change(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.terminate_sessions_on_password_change_ = value;
}

// optional int32 session_length_web_in_hours = 9 [json_name = "sessionLengthWebInHours"];
inline bool ConfigSecurity::has_session_length_web_in_hours() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void ConfigSecurity::clear_session_length_web_in_hours() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_length_web_in_hours_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t ConfigSecurity::session_length_web_in_hours() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSecurity.session_length_web_in_hours)
  return _internal_session_length_web_in_hours();
}
inline void ConfigSecurity::set_session_length_web_in_hours(::int32_t value) {
  _internal_set_session_length_web_in_hours(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSecurity.session_length_web_in_hours)
}
inline ::int32_t ConfigSecurity::_internal_session_length_web_in_hours() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_length_web_in_hours_;
}
inline void ConfigSecurity::_internal_set_session_length_web_in_hours(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_length_web_in_hours_ = value;
}

// optional int32 session_length_mobile_in_hours = 10 [json_name = "sessionLengthMobileInHours"];
inline bool ConfigSecurity::has_session_length_mobile_in_hours() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void ConfigSecurity::clear_session_length_mobile_in_hours() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_length_mobile_in_hours_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t ConfigSecurity::session_length_mobile_in_hours() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSecurity.session_length_mobile_in_hours)
  return _internal_session_length_mobile_in_hours();
}
inline void ConfigSecurity::set_session_length_mobile_in_hours(::int32_t value) {
  _internal_set_session_length_mobile_in_hours(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSecurity.session_length_mobile_in_hours)
}
inline ::int32_t ConfigSecurity::_internal_session_length_mobile_in_hours() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_length_mobile_in_hours_;
}
inline void ConfigSecurity::_internal_set_session_length_mobile_in_hours(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_length_mobile_in_hours_ = value;
}

// optional int32 session_length_sso_in_hours = 11 [json_name = "sessionLengthSsoInHours"];
inline bool ConfigSecurity::has_session_length_sso_in_hours() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void ConfigSecurity::clear_session_length_sso_in_hours() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_length_sso_in_hours_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t ConfigSecurity::session_length_sso_in_hours() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSecurity.session_length_sso_in_hours)
  return _internal_session_length_sso_in_hours();
}
inline void ConfigSecurity::set_session_length_sso_in_hours(::int32_t value) {
  _internal_set_session_length_sso_in_hours(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSecurity.session_length_sso_in_hours)
}
inline ::int32_t ConfigSecurity::_internal_session_length_sso_in_hours() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_length_sso_in_hours_;
}
inline void ConfigSecurity::_internal_set_session_length_sso_in_hours(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_length_sso_in_hours_ = value;
}

// optional string allow_cors_from = 12 [json_name = "allowCorsFrom"];
inline bool ConfigSecurity::has_allow_cors_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConfigSecurity::clear_allow_cors_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_cors_from_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ConfigSecurity::allow_cors_from() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSecurity.allow_cors_from)
  return _internal_allow_cors_from();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSecurity::set_allow_cors_from(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.allow_cors_from_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSecurity.allow_cors_from)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSecurity::mutable_allow_cors_from()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_allow_cors_from();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSecurity.allow_cors_from)
  return _s;
}
inline const ::std::string& ConfigSecurity::_internal_allow_cors_from() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allow_cors_from_.Get();
}
inline void ConfigSecurity::_internal_set_allow_cors_from(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.allow_cors_from_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSecurity::_internal_mutable_allow_cors_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.allow_cors_from_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSecurity::release_allow_cors_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSecurity.allow_cors_from)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.allow_cors_from_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.allow_cors_from_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSecurity::set_allocated_allow_cors_from(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.allow_cors_from_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.allow_cors_from_.IsDefault()) {
    _impl_.allow_cors_from_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSecurity.allow_cors_from)
}

// optional string cors_exposed_headers = 13 [json_name = "corsExposedHeaders"];
inline bool ConfigSecurity::has_cors_exposed_headers() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConfigSecurity::clear_cors_exposed_headers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cors_exposed_headers_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& ConfigSecurity::cors_exposed_headers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSecurity.cors_exposed_headers)
  return _internal_cors_exposed_headers();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSecurity::set_cors_exposed_headers(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cors_exposed_headers_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSecurity.cors_exposed_headers)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSecurity::mutable_cors_exposed_headers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_cors_exposed_headers();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSecurity.cors_exposed_headers)
  return _s;
}
inline const ::std::string& ConfigSecurity::_internal_cors_exposed_headers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cors_exposed_headers_.Get();
}
inline void ConfigSecurity::_internal_set_cors_exposed_headers(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cors_exposed_headers_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSecurity::_internal_mutable_cors_exposed_headers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.cors_exposed_headers_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSecurity::release_cors_exposed_headers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSecurity.cors_exposed_headers)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.cors_exposed_headers_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.cors_exposed_headers_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSecurity::set_allocated_cors_exposed_headers(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cors_exposed_headers_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.cors_exposed_headers_.IsDefault()) {
    _impl_.cors_exposed_headers_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSecurity.cors_exposed_headers)
}

// optional bool cors_allow_credentials = 14 [json_name = "corsAllowCredentials"];
inline bool ConfigSecurity::has_cors_allow_credentials() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void ConfigSecurity::clear_cors_allow_credentials() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cors_allow_credentials_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool ConfigSecurity::cors_allow_credentials() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSecurity.cors_allow_credentials)
  return _internal_cors_allow_credentials();
}
inline void ConfigSecurity::set_cors_allow_credentials(bool value) {
  _internal_set_cors_allow_credentials(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSecurity.cors_allow_credentials)
}
inline bool ConfigSecurity::_internal_cors_allow_credentials() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cors_allow_credentials_;
}
inline void ConfigSecurity::_internal_set_cors_allow_credentials(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cors_allow_credentials_ = value;
}

// optional bool cors_debug = 15 [json_name = "corsDebug"];
inline bool ConfigSecurity::has_cors_debug() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void ConfigSecurity::clear_cors_debug() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cors_debug_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool ConfigSecurity::cors_debug() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSecurity.cors_debug)
  return _internal_cors_debug();
}
inline void ConfigSecurity::set_cors_debug(bool value) {
  _internal_set_cors_debug(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSecurity.cors_debug)
}
inline bool ConfigSecurity::_internal_cors_debug() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cors_debug_;
}
inline void ConfigSecurity::_internal_set_cors_debug(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cors_debug_ = value;
}

// optional bool allow_cookies_for_subdomains = 16 [json_name = "allowCookiesForSubdomains"];
inline bool ConfigSecurity::has_allow_cookies_for_subdomains() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void ConfigSecurity::clear_allow_cookies_for_subdomains() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_cookies_for_subdomains_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool ConfigSecurity::allow_cookies_for_subdomains() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSecurity.allow_cookies_for_subdomains)
  return _internal_allow_cookies_for_subdomains();
}
inline void ConfigSecurity::set_allow_cookies_for_subdomains(bool value) {
  _internal_set_allow_cookies_for_subdomains(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSecurity.allow_cookies_for_subdomains)
}
inline bool ConfigSecurity::_internal_allow_cookies_for_subdomains() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allow_cookies_for_subdomains_;
}
inline void ConfigSecurity::_internal_set_allow_cookies_for_subdomains(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_cookies_for_subdomains_ = value;
}

// optional int32 session_cache_in_minutes = 17 [json_name = "sessionCacheInMinutes"];
inline bool ConfigSecurity::has_session_cache_in_minutes() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void ConfigSecurity::clear_session_cache_in_minutes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_cache_in_minutes_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int32_t ConfigSecurity::session_cache_in_minutes() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSecurity.session_cache_in_minutes)
  return _internal_session_cache_in_minutes();
}
inline void ConfigSecurity::set_session_cache_in_minutes(::int32_t value) {
  _internal_set_session_cache_in_minutes(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSecurity.session_cache_in_minutes)
}
inline ::int32_t ConfigSecurity::_internal_session_cache_in_minutes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_cache_in_minutes_;
}
inline void ConfigSecurity::_internal_set_session_cache_in_minutes(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_cache_in_minutes_ = value;
}

// optional string email_confirmation_url = 18 [json_name = "emailConfirmationUrl"];
inline bool ConfigSecurity::has_email_confirmation_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ConfigSecurity::clear_email_confirmation_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_confirmation_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& ConfigSecurity::email_confirmation_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSecurity.email_confirmation_url)
  return _internal_email_confirmation_url();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSecurity::set_email_confirmation_url(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.email_confirmation_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSecurity.email_confirmation_url)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSecurity::mutable_email_confirmation_url()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_email_confirmation_url();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSecurity.email_confirmation_url)
  return _s;
}
inline const ::std::string& ConfigSecurity::_internal_email_confirmation_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.email_confirmation_url_.Get();
}
inline void ConfigSecurity::_internal_set_email_confirmation_url(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.email_confirmation_url_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSecurity::_internal_mutable_email_confirmation_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.email_confirmation_url_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSecurity::release_email_confirmation_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSecurity.email_confirmation_url)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.email_confirmation_url_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.email_confirmation_url_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSecurity::set_allocated_email_confirmation_url(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.email_confirmation_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.email_confirmation_url_.IsDefault()) {
    _impl_.email_confirmation_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSecurity.email_confirmation_url)
}

// optional uint32 token_confirmation_expiry_in_hours = 19 [json_name = "tokenConfirmationExpiryInHours"];
inline bool ConfigSecurity::has_token_confirmation_expiry_in_hours() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void ConfigSecurity::clear_token_confirmation_expiry_in_hours() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_confirmation_expiry_in_hours_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::uint32_t ConfigSecurity::token_confirmation_expiry_in_hours() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSecurity.token_confirmation_expiry_in_hours)
  return _internal_token_confirmation_expiry_in_hours();
}
inline void ConfigSecurity::set_token_confirmation_expiry_in_hours(::uint32_t value) {
  _internal_set_token_confirmation_expiry_in_hours(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSecurity.token_confirmation_expiry_in_hours)
}
inline ::uint32_t ConfigSecurity::_internal_token_confirmation_expiry_in_hours() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_confirmation_expiry_in_hours_;
}
inline void ConfigSecurity::_internal_set_token_confirmation_expiry_in_hours(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_confirmation_expiry_in_hours_ = value;
}

// optional uint32 token_password_reset_expiry_in_hours = 20 [json_name = "tokenPasswordResetExpiryInHours"];
inline bool ConfigSecurity::has_token_password_reset_expiry_in_hours() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void ConfigSecurity::clear_token_password_reset_expiry_in_hours() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_password_reset_expiry_in_hours_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::uint32_t ConfigSecurity::token_password_reset_expiry_in_hours() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSecurity.token_password_reset_expiry_in_hours)
  return _internal_token_password_reset_expiry_in_hours();
}
inline void ConfigSecurity::set_token_password_reset_expiry_in_hours(::uint32_t value) {
  _internal_set_token_password_reset_expiry_in_hours(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSecurity.token_password_reset_expiry_in_hours)
}
inline ::uint32_t ConfigSecurity::_internal_token_password_reset_expiry_in_hours() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_password_reset_expiry_in_hours_;
}
inline void ConfigSecurity::_internal_set_token_password_reset_expiry_in_hours(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_password_reset_expiry_in_hours_ = value;
}

// -------------------------------------------------------------------

// CacheConfig

// optional string cache_type = 1 [json_name = "cacheType"];
inline bool CacheConfig::has_cache_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CacheConfig::clear_cache_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cache_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CacheConfig::cache_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.CacheConfig.cache_type)
  return _internal_cache_type();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CacheConfig::set_cache_type(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cache_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.CacheConfig.cache_type)
}
inline ::std::string* PROTOBUF_NONNULL CacheConfig::mutable_cache_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_cache_type();
  // @@protoc_insertion_point(field_mutable:common.v1.CacheConfig.cache_type)
  return _s;
}
inline const ::std::string& CacheConfig::_internal_cache_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cache_type_.Get();
}
inline void CacheConfig::_internal_set_cache_type(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cache_type_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL CacheConfig::_internal_mutable_cache_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.cache_type_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE CacheConfig::release_cache_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.CacheConfig.cache_type)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.cache_type_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.cache_type_.Set("", GetArena());
  }
  return released;
}
inline void CacheConfig::set_allocated_cache_type(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cache_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.cache_type_.IsDefault()) {
    _impl_.cache_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.CacheConfig.cache_type)
}

// optional string redis_address = 2 [json_name = "redisAddress"];
inline bool CacheConfig::has_redis_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CacheConfig::clear_redis_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.redis_address_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CacheConfig::redis_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.CacheConfig.redis_address)
  return _internal_redis_address();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CacheConfig::set_redis_address(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.redis_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.CacheConfig.redis_address)
}
inline ::std::string* PROTOBUF_NONNULL CacheConfig::mutable_redis_address()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_redis_address();
  // @@protoc_insertion_point(field_mutable:common.v1.CacheConfig.redis_address)
  return _s;
}
inline const ::std::string& CacheConfig::_internal_redis_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.redis_address_.Get();
}
inline void CacheConfig::_internal_set_redis_address(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.redis_address_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL CacheConfig::_internal_mutable_redis_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.redis_address_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE CacheConfig::release_redis_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.CacheConfig.redis_address)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.redis_address_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.redis_address_.Set("", GetArena());
  }
  return released;
}
inline void CacheConfig::set_allocated_redis_address(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.redis_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.redis_address_.IsDefault()) {
    _impl_.redis_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.CacheConfig.redis_address)
}

// optional string redis_password = 3 [json_name = "redisPassword"];
inline bool CacheConfig::has_redis_password() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CacheConfig::clear_redis_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.redis_password_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CacheConfig::redis_password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.CacheConfig.redis_password)
  return _internal_redis_password();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CacheConfig::set_redis_password(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.redis_password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.CacheConfig.redis_password)
}
inline ::std::string* PROTOBUF_NONNULL CacheConfig::mutable_redis_password()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_redis_password();
  // @@protoc_insertion_point(field_mutable:common.v1.CacheConfig.redis_password)
  return _s;
}
inline const ::std::string& CacheConfig::_internal_redis_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.redis_password_.Get();
}
inline void CacheConfig::_internal_set_redis_password(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.redis_password_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL CacheConfig::_internal_mutable_redis_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.redis_password_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE CacheConfig::release_redis_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.CacheConfig.redis_password)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.redis_password_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.redis_password_.Set("", GetArena());
  }
  return released;
}
inline void CacheConfig::set_allocated_redis_password(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.redis_password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.redis_password_.IsDefault()) {
    _impl_.redis_password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.CacheConfig.redis_password)
}

// optional int32 redis_db = 4 [json_name = "redisDb"];
inline bool CacheConfig::has_redis_db() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CacheConfig::clear_redis_db() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.redis_db_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t CacheConfig::redis_db() const {
  // @@protoc_insertion_point(field_get:common.v1.CacheConfig.redis_db)
  return _internal_redis_db();
}
inline void CacheConfig::set_redis_db(::int32_t value) {
  _internal_set_redis_db(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:common.v1.CacheConfig.redis_db)
}
inline ::int32_t CacheConfig::_internal_redis_db() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.redis_db_;
}
inline void CacheConfig::_internal_set_redis_db(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.redis_db_ = value;
}

// optional string redis_cache_prefix = 5 [json_name = "redisCachePrefix"];
inline bool CacheConfig::has_redis_cache_prefix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CacheConfig::clear_redis_cache_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.redis_cache_prefix_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& CacheConfig::redis_cache_prefix() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.CacheConfig.redis_cache_prefix)
  return _internal_redis_cache_prefix();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CacheConfig::set_redis_cache_prefix(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.redis_cache_prefix_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.CacheConfig.redis_cache_prefix)
}
inline ::std::string* PROTOBUF_NONNULL CacheConfig::mutable_redis_cache_prefix()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_redis_cache_prefix();
  // @@protoc_insertion_point(field_mutable:common.v1.CacheConfig.redis_cache_prefix)
  return _s;
}
inline const ::std::string& CacheConfig::_internal_redis_cache_prefix() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.redis_cache_prefix_.Get();
}
inline void CacheConfig::_internal_set_redis_cache_prefix(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.redis_cache_prefix_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL CacheConfig::_internal_mutable_redis_cache_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.redis_cache_prefix_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE CacheConfig::release_redis_cache_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.CacheConfig.redis_cache_prefix)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.redis_cache_prefix_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.redis_cache_prefix_.Set("", GetArena());
  }
  return released;
}
inline void CacheConfig::set_allocated_redis_cache_prefix(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.redis_cache_prefix_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.redis_cache_prefix_.IsDefault()) {
    _impl_.redis_cache_prefix_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.CacheConfig.redis_cache_prefix)
}

// optional bool disable_client_cache = 6 [json_name = "disableClientCache"];
inline bool CacheConfig::has_disable_client_cache() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void CacheConfig::clear_disable_client_cache() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_client_cache_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CacheConfig::disable_client_cache() const {
  // @@protoc_insertion_point(field_get:common.v1.CacheConfig.disable_client_cache)
  return _internal_disable_client_cache();
}
inline void CacheConfig::set_disable_client_cache(bool value) {
  _internal_set_disable_client_cache(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:common.v1.CacheConfig.disable_client_cache)
}
inline bool CacheConfig::_internal_disable_client_cache() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.disable_client_cache_;
}
inline void CacheConfig::_internal_set_disable_client_cache(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_client_cache_ = value;
}

// -------------------------------------------------------------------

// ConfigMetrics

// optional bool enable = 1 [json_name = "enable"];
inline bool ConfigMetrics::has_enable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ConfigMetrics::clear_enable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool ConfigMetrics::enable() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMetrics.enable)
  return _internal_enable();
}
inline void ConfigMetrics::set_enable(bool value) {
  _internal_set_enable(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMetrics.enable)
}
inline bool ConfigMetrics::_internal_enable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_;
}
inline void ConfigMetrics::_internal_set_enable(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_ = value;
}

// optional int32 block_profile_rate = 2 [json_name = "blockProfileRate"];
inline bool ConfigMetrics::has_block_profile_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConfigMetrics::clear_block_profile_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_profile_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ConfigMetrics::block_profile_rate() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMetrics.block_profile_rate)
  return _internal_block_profile_rate();
}
inline void ConfigMetrics::set_block_profile_rate(::int32_t value) {
  _internal_set_block_profile_rate(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMetrics.block_profile_rate)
}
inline ::int32_t ConfigMetrics::_internal_block_profile_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_profile_rate_;
}
inline void ConfigMetrics::_internal_set_block_profile_rate(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_profile_rate_ = value;
}

// optional string listen_address = 3 [json_name = "listenAddress"];
inline bool ConfigMetrics::has_listen_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConfigMetrics::clear_listen_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.listen_address_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ConfigMetrics::listen_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMetrics.listen_address)
  return _internal_listen_address();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigMetrics::set_listen_address(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.listen_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigMetrics.listen_address)
}
inline ::std::string* PROTOBUF_NONNULL ConfigMetrics::mutable_listen_address()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_listen_address();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigMetrics.listen_address)
  return _s;
}
inline const ::std::string& ConfigMetrics::_internal_listen_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.listen_address_.Get();
}
inline void ConfigMetrics::_internal_set_listen_address(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.listen_address_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigMetrics::_internal_mutable_listen_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.listen_address_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigMetrics::release_listen_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigMetrics.listen_address)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.listen_address_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.listen_address_.Set("", GetArena());
  }
  return released;
}
inline void ConfigMetrics::set_allocated_listen_address(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.listen_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.listen_address_.IsDefault()) {
    _impl_.listen_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigMetrics.listen_address)
}

// optional bool enable_client_metrics = 4 [json_name = "enableClientMetrics"];
inline bool ConfigMetrics::has_enable_client_metrics() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ConfigMetrics::clear_enable_client_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_client_metrics_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool ConfigMetrics::enable_client_metrics() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMetrics.enable_client_metrics)
  return _internal_enable_client_metrics();
}
inline void ConfigMetrics::set_enable_client_metrics(bool value) {
  _internal_set_enable_client_metrics(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMetrics.enable_client_metrics)
}
inline bool ConfigMetrics::_internal_enable_client_metrics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_client_metrics_;
}
inline void ConfigMetrics::_internal_set_enable_client_metrics(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_client_metrics_ = value;
}

// optional bool enable_notification_metrics = 5 [json_name = "enableNotificationMetrics"];
inline bool ConfigMetrics::has_enable_notification_metrics() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ConfigMetrics::clear_enable_notification_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_notification_metrics_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool ConfigMetrics::enable_notification_metrics() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMetrics.enable_notification_metrics)
  return _internal_enable_notification_metrics();
}
inline void ConfigMetrics::set_enable_notification_metrics(bool value) {
  _internal_set_enable_notification_metrics(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMetrics.enable_notification_metrics)
}
inline bool ConfigMetrics::_internal_enable_notification_metrics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_notification_metrics_;
}
inline void ConfigMetrics::_internal_set_enable_notification_metrics(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_notification_metrics_ = value;
}

// repeated string client_side_user_ids = 6 [json_name = "clientSideUserIds"];
inline int ConfigMetrics::_internal_client_side_user_ids_size() const {
  return _internal_client_side_user_ids().size();
}
inline int ConfigMetrics::client_side_user_ids_size() const {
  return _internal_client_side_user_ids_size();
}
inline void ConfigMetrics::clear_client_side_user_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_side_user_ids_.Clear();
}
inline ::std::string* PROTOBUF_NONNULL ConfigMetrics::add_client_side_user_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::std::string* _s = _internal_mutable_client_side_user_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:common.v1.ConfigMetrics.client_side_user_ids)
  return _s;
}
inline const ::std::string& ConfigMetrics::client_side_user_ids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMetrics.client_side_user_ids)
  return _internal_client_side_user_ids().Get(index);
}
inline ::std::string* PROTOBUF_NONNULL ConfigMetrics::mutable_client_side_user_ids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigMetrics.client_side_user_ids)
  return _internal_mutable_client_side_user_ids()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ConfigMetrics::set_client_side_user_ids(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(*_internal_mutable_client_side_user_ids()->Mutable(index), ::std::forward<Arg_>(value),
                        args... );
  // @@protoc_insertion_point(field_set:common.v1.ConfigMetrics.client_side_user_ids)
}
template <typename Arg_, typename... Args_>
inline void ConfigMetrics::add_client_side_user_ids(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_client_side_user_ids(),
                               ::std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:common.v1.ConfigMetrics.client_side_user_ids)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>& ConfigMetrics::client_side_user_ids()
    const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:common.v1.ConfigMetrics.client_side_user_ids)
  return _internal_client_side_user_ids();
}
inline ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL
ConfigMetrics::mutable_client_side_user_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:common.v1.ConfigMetrics.client_side_user_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_client_side_user_ids();
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ConfigMetrics::_internal_client_side_user_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_side_user_ids_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL
ConfigMetrics::_internal_mutable_client_side_user_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.client_side_user_ids_;
}

// -------------------------------------------------------------------

// ConfigSSO

// optional bool enable = 1 [json_name = "enable"];
inline bool ConfigSSO::has_enable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void ConfigSSO::clear_enable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool ConfigSSO::enable() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSSO.enable)
  return _internal_enable();
}
inline void ConfigSSO::set_enable(bool value) {
  _internal_set_enable(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSSO.enable)
}
inline bool ConfigSSO::_internal_enable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_;
}
inline void ConfigSSO::_internal_set_enable(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_ = value;
}

// optional string secret = 2 [json_name = "secret"];
inline bool ConfigSSO::has_secret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConfigSSO::clear_secret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secret_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ConfigSSO::secret() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSSO.secret)
  return _internal_secret();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSSO::set_secret(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.secret_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSSO.secret)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSSO::mutable_secret()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_secret();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSSO.secret)
  return _s;
}
inline const ::std::string& ConfigSSO::_internal_secret() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.secret_.Get();
}
inline void ConfigSSO::_internal_set_secret(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.secret_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSSO::_internal_mutable_secret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.secret_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSSO::release_secret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSSO.secret)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.secret_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.secret_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSSO::set_allocated_secret(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.secret_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.secret_.IsDefault()) {
    _impl_.secret_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSSO.secret)
}

// optional string id = 3 [json_name = "id"];
inline bool ConfigSSO::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConfigSSO::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& ConfigSSO::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSSO.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSSO::set_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSSO.id)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSSO::mutable_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSSO.id)
  return _s;
}
inline const ::std::string& ConfigSSO::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void ConfigSSO::_internal_set_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSSO::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSSO::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSSO.id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.id_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSSO::set_allocated_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSSO.id)
}

// optional string scope = 4 [json_name = "scope"];
inline bool ConfigSSO::has_scope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ConfigSSO::clear_scope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scope_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& ConfigSSO::scope() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSSO.scope)
  return _internal_scope();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSSO::set_scope(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.scope_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSSO.scope)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSSO::mutable_scope()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_scope();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSSO.scope)
  return _s;
}
inline const ::std::string& ConfigSSO::_internal_scope() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scope_.Get();
}
inline void ConfigSSO::_internal_set_scope(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.scope_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSSO::_internal_mutable_scope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.scope_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSSO::release_scope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSSO.scope)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.scope_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.scope_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSSO::set_allocated_scope(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.scope_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.scope_.IsDefault()) {
    _impl_.scope_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSSO.scope)
}

// optional string auth_endpoint = 5 [json_name = "authEndpoint"];
inline bool ConfigSSO::has_auth_endpoint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ConfigSSO::clear_auth_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auth_endpoint_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& ConfigSSO::auth_endpoint() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSSO.auth_endpoint)
  return _internal_auth_endpoint();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSSO::set_auth_endpoint(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.auth_endpoint_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSSO.auth_endpoint)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSSO::mutable_auth_endpoint()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_auth_endpoint();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSSO.auth_endpoint)
  return _s;
}
inline const ::std::string& ConfigSSO::_internal_auth_endpoint() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.auth_endpoint_.Get();
}
inline void ConfigSSO::_internal_set_auth_endpoint(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.auth_endpoint_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSSO::_internal_mutable_auth_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.auth_endpoint_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSSO::release_auth_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSSO.auth_endpoint)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.auth_endpoint_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.auth_endpoint_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSSO::set_allocated_auth_endpoint(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.auth_endpoint_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.auth_endpoint_.IsDefault()) {
    _impl_.auth_endpoint_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSSO.auth_endpoint)
}

// optional string token_endpoint = 6 [json_name = "tokenEndpoint"];
inline bool ConfigSSO::has_token_endpoint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ConfigSSO::clear_token_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_endpoint_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& ConfigSSO::token_endpoint() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSSO.token_endpoint)
  return _internal_token_endpoint();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSSO::set_token_endpoint(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.token_endpoint_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSSO.token_endpoint)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSSO::mutable_token_endpoint()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_token_endpoint();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSSO.token_endpoint)
  return _s;
}
inline const ::std::string& ConfigSSO::_internal_token_endpoint() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_endpoint_.Get();
}
inline void ConfigSSO::_internal_set_token_endpoint(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.token_endpoint_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSSO::_internal_mutable_token_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.token_endpoint_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSSO::release_token_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSSO.token_endpoint)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.token_endpoint_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.token_endpoint_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSSO::set_allocated_token_endpoint(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.token_endpoint_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.token_endpoint_.IsDefault()) {
    _impl_.token_endpoint_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSSO.token_endpoint)
}

// optional string user_api_endpoint = 7 [json_name = "userApiEndpoint"];
inline bool ConfigSSO::has_user_api_endpoint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ConfigSSO::clear_user_api_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_api_endpoint_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::std::string& ConfigSSO::user_api_endpoint() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSSO.user_api_endpoint)
  return _internal_user_api_endpoint();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSSO::set_user_api_endpoint(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.user_api_endpoint_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSSO.user_api_endpoint)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSSO::mutable_user_api_endpoint()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_user_api_endpoint();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSSO.user_api_endpoint)
  return _s;
}
inline const ::std::string& ConfigSSO::_internal_user_api_endpoint() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_api_endpoint_.Get();
}
inline void ConfigSSO::_internal_set_user_api_endpoint(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.user_api_endpoint_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSSO::_internal_mutable_user_api_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.user_api_endpoint_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSSO::release_user_api_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSSO.user_api_endpoint)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.user_api_endpoint_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.user_api_endpoint_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSSO::set_allocated_user_api_endpoint(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.user_api_endpoint_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_api_endpoint_.IsDefault()) {
    _impl_.user_api_endpoint_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSSO.user_api_endpoint)
}

// optional string discovery_endpoint = 8 [json_name = "discoveryEndpoint"];
inline bool ConfigSSO::has_discovery_endpoint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ConfigSSO::clear_discovery_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.discovery_endpoint_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::std::string& ConfigSSO::discovery_endpoint() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSSO.discovery_endpoint)
  return _internal_discovery_endpoint();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSSO::set_discovery_endpoint(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.discovery_endpoint_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSSO.discovery_endpoint)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSSO::mutable_discovery_endpoint()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_discovery_endpoint();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSSO.discovery_endpoint)
  return _s;
}
inline const ::std::string& ConfigSSO::_internal_discovery_endpoint() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.discovery_endpoint_.Get();
}
inline void ConfigSSO::_internal_set_discovery_endpoint(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.discovery_endpoint_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSSO::_internal_mutable_discovery_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.discovery_endpoint_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSSO::release_discovery_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSSO.discovery_endpoint)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.discovery_endpoint_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.discovery_endpoint_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSSO::set_allocated_discovery_endpoint(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.discovery_endpoint_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.discovery_endpoint_.IsDefault()) {
    _impl_.discovery_endpoint_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSSO.discovery_endpoint)
}

// optional string button_text = 9 [json_name = "buttonText"];
inline bool ConfigSSO::has_button_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ConfigSSO::clear_button_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button_text_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::std::string& ConfigSSO::button_text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSSO.button_text)
  return _internal_button_text();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSSO::set_button_text(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.button_text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSSO.button_text)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSSO::mutable_button_text()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_button_text();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSSO.button_text)
  return _s;
}
inline const ::std::string& ConfigSSO::_internal_button_text() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.button_text_.Get();
}
inline void ConfigSSO::_internal_set_button_text(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.button_text_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSSO::_internal_mutable_button_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.button_text_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSSO::release_button_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSSO.button_text)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.button_text_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.button_text_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSSO::set_allocated_button_text(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.button_text_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.button_text_.IsDefault()) {
    _impl_.button_text_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSSO.button_text)
}

// optional string button_color = 10 [json_name = "buttonColor"];
inline bool ConfigSSO::has_button_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void ConfigSSO::clear_button_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button_color_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::std::string& ConfigSSO::button_color() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSSO.button_color)
  return _internal_button_color();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSSO::set_button_color(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.button_color_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSSO.button_color)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSSO::mutable_button_color()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_button_color();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSSO.button_color)
  return _s;
}
inline const ::std::string& ConfigSSO::_internal_button_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.button_color_.Get();
}
inline void ConfigSSO::_internal_set_button_color(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.button_color_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSSO::_internal_mutable_button_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.button_color_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSSO::release_button_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSSO.button_color)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.button_color_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.button_color_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSSO::set_allocated_button_color(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.button_color_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.button_color_.IsDefault()) {
    _impl_.button_color_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSSO.button_color)
}

// -------------------------------------------------------------------

// ConfigSql

// optional string driver_name = 1 [json_name = "driverName"];
inline bool ConfigSql::has_driver_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConfigSql::clear_driver_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.driver_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ConfigSql::driver_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSql.driver_name)
  return _internal_driver_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSql::set_driver_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.driver_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSql.driver_name)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSql::mutable_driver_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_driver_name();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSql.driver_name)
  return _s;
}
inline const ::std::string& ConfigSql::_internal_driver_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.driver_name_.Get();
}
inline void ConfigSql::_internal_set_driver_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.driver_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSql::_internal_mutable_driver_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.driver_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSql::release_driver_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSql.driver_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.driver_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.driver_name_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSql::set_allocated_driver_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.driver_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.driver_name_.IsDefault()) {
    _impl_.driver_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSql.driver_name)
}

// optional string data_source = 2 [json_name = "dataSource"];
inline bool ConfigSql::has_data_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConfigSql::clear_data_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_source_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& ConfigSql::data_source() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSql.data_source)
  return _internal_data_source();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSql::set_data_source(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_source_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSql.data_source)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSql::mutable_data_source()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_data_source();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSql.data_source)
  return _s;
}
inline const ::std::string& ConfigSql::_internal_data_source() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_source_.Get();
}
inline void ConfigSql::_internal_set_data_source(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_source_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSql::_internal_mutable_data_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.data_source_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSql::release_data_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSql.data_source)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.data_source_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.data_source_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSql::set_allocated_data_source(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.data_source_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_source_.IsDefault()) {
    _impl_.data_source_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSql.data_source)
}

// optional int32 max_idle_conns = 3 [json_name = "maxIdleConns"];
inline bool ConfigSql::has_max_idle_conns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ConfigSql::clear_max_idle_conns() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_idle_conns_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t ConfigSql::max_idle_conns() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSql.max_idle_conns)
  return _internal_max_idle_conns();
}
inline void ConfigSql::set_max_idle_conns(::int32_t value) {
  _internal_set_max_idle_conns(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSql.max_idle_conns)
}
inline ::int32_t ConfigSql::_internal_max_idle_conns() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_idle_conns_;
}
inline void ConfigSql::_internal_set_max_idle_conns(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_idle_conns_ = value;
}

// optional int32 conn_max_lifetime_milliseconds = 4 [json_name = "connMaxLifetimeMilliseconds"];
inline bool ConfigSql::has_conn_max_lifetime_milliseconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ConfigSql::clear_conn_max_lifetime_milliseconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conn_max_lifetime_milliseconds_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t ConfigSql::conn_max_lifetime_milliseconds() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSql.conn_max_lifetime_milliseconds)
  return _internal_conn_max_lifetime_milliseconds();
}
inline void ConfigSql::set_conn_max_lifetime_milliseconds(::int32_t value) {
  _internal_set_conn_max_lifetime_milliseconds(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSql.conn_max_lifetime_milliseconds)
}
inline ::int32_t ConfigSql::_internal_conn_max_lifetime_milliseconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conn_max_lifetime_milliseconds_;
}
inline void ConfigSql::_internal_set_conn_max_lifetime_milliseconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conn_max_lifetime_milliseconds_ = value;
}

// optional int32 conn_max_idle_time_milliseconds = 5 [json_name = "connMaxIdleTimeMilliseconds"];
inline bool ConfigSql::has_conn_max_idle_time_milliseconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ConfigSql::clear_conn_max_idle_time_milliseconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conn_max_idle_time_milliseconds_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t ConfigSql::conn_max_idle_time_milliseconds() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSql.conn_max_idle_time_milliseconds)
  return _internal_conn_max_idle_time_milliseconds();
}
inline void ConfigSql::set_conn_max_idle_time_milliseconds(::int32_t value) {
  _internal_set_conn_max_idle_time_milliseconds(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSql.conn_max_idle_time_milliseconds)
}
inline ::int32_t ConfigSql::_internal_conn_max_idle_time_milliseconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conn_max_idle_time_milliseconds_;
}
inline void ConfigSql::_internal_set_conn_max_idle_time_milliseconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conn_max_idle_time_milliseconds_ = value;
}

// optional int32 max_open_conns = 6 [json_name = "maxOpenConns"];
inline bool ConfigSql::has_max_open_conns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ConfigSql::clear_max_open_conns() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_open_conns_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t ConfigSql::max_open_conns() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSql.max_open_conns)
  return _internal_max_open_conns();
}
inline void ConfigSql::set_max_open_conns(::int32_t value) {
  _internal_set_max_open_conns(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSql.max_open_conns)
}
inline ::int32_t ConfigSql::_internal_max_open_conns() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_open_conns_;
}
inline void ConfigSql::_internal_set_max_open_conns(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_open_conns_ = value;
}

// optional bool trace = 7 [json_name = "trace"];
inline bool ConfigSql::has_trace() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ConfigSql::clear_trace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trace_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool ConfigSql::trace() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSql.trace)
  return _internal_trace();
}
inline void ConfigSql::set_trace(bool value) {
  _internal_set_trace(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSql.trace)
}
inline bool ConfigSql::_internal_trace() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.trace_;
}
inline void ConfigSql::_internal_set_trace(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trace_ = value;
}

// optional string at_rest_encrypt_key = 8 [json_name = "atRestEncryptKey"];
inline bool ConfigSql::has_at_rest_encrypt_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ConfigSql::clear_at_rest_encrypt_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.at_rest_encrypt_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& ConfigSql::at_rest_encrypt_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSql.at_rest_encrypt_key)
  return _internal_at_rest_encrypt_key();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSql::set_at_rest_encrypt_key(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.at_rest_encrypt_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSql.at_rest_encrypt_key)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSql::mutable_at_rest_encrypt_key()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_at_rest_encrypt_key();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSql.at_rest_encrypt_key)
  return _s;
}
inline const ::std::string& ConfigSql::_internal_at_rest_encrypt_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.at_rest_encrypt_key_.Get();
}
inline void ConfigSql::_internal_set_at_rest_encrypt_key(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.at_rest_encrypt_key_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSql::_internal_mutable_at_rest_encrypt_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.at_rest_encrypt_key_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSql::release_at_rest_encrypt_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSql.at_rest_encrypt_key)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.at_rest_encrypt_key_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.at_rest_encrypt_key_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSql::set_allocated_at_rest_encrypt_key(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.at_rest_encrypt_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.at_rest_encrypt_key_.IsDefault()) {
    _impl_.at_rest_encrypt_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSql.at_rest_encrypt_key)
}

// optional int32 query_timeout = 9 [json_name = "queryTimeout"];
inline bool ConfigSql::has_query_timeout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void ConfigSql::clear_query_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.query_timeout_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t ConfigSql::query_timeout() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSql.query_timeout)
  return _internal_query_timeout();
}
inline void ConfigSql::set_query_timeout(::int32_t value) {
  _internal_set_query_timeout(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSql.query_timeout)
}
inline ::int32_t ConfigSql::_internal_query_timeout() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.query_timeout_;
}
inline void ConfigSql::_internal_set_query_timeout(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.query_timeout_ = value;
}

// optional bool disable_database_search = 10 [json_name = "disableDatabaseSearch"];
inline bool ConfigSql::has_disable_database_search() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void ConfigSql::clear_disable_database_search() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_database_search_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool ConfigSql::disable_database_search() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSql.disable_database_search)
  return _internal_disable_database_search();
}
inline void ConfigSql::set_disable_database_search(bool value) {
  _internal_set_disable_database_search(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSql.disable_database_search)
}
inline bool ConfigSql::_internal_disable_database_search() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.disable_database_search_;
}
inline void ConfigSql::_internal_set_disable_database_search(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_database_search_ = value;
}

// -------------------------------------------------------------------

// ConfigPassword

// optional int32 minimum_length = 1 [json_name = "minimumLength"];
inline bool ConfigPassword::has_minimum_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConfigPassword::clear_minimum_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minimum_length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t ConfigPassword::minimum_length() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigPassword.minimum_length)
  return _internal_minimum_length();
}
inline void ConfigPassword::set_minimum_length(::int32_t value) {
  _internal_set_minimum_length(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigPassword.minimum_length)
}
inline ::int32_t ConfigPassword::_internal_minimum_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.minimum_length_;
}
inline void ConfigPassword::_internal_set_minimum_length(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minimum_length_ = value;
}

// optional int32 maximum_length = 2 [json_name = "maximumLength"];
inline bool ConfigPassword::has_maximum_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConfigPassword::clear_maximum_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maximum_length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ConfigPassword::maximum_length() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigPassword.maximum_length)
  return _internal_maximum_length();
}
inline void ConfigPassword::set_maximum_length(::int32_t value) {
  _internal_set_maximum_length(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigPassword.maximum_length)
}
inline ::int32_t ConfigPassword::_internal_maximum_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.maximum_length_;
}
inline void ConfigPassword::_internal_set_maximum_length(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maximum_length_ = value;
}

// optional bool lowercase = 3 [json_name = "lowercase"];
inline bool ConfigPassword::has_lowercase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ConfigPassword::clear_lowercase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lowercase_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool ConfigPassword::lowercase() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigPassword.lowercase)
  return _internal_lowercase();
}
inline void ConfigPassword::set_lowercase(bool value) {
  _internal_set_lowercase(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigPassword.lowercase)
}
inline bool ConfigPassword::_internal_lowercase() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lowercase_;
}
inline void ConfigPassword::_internal_set_lowercase(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lowercase_ = value;
}

// optional bool number = 4 [json_name = "number"];
inline bool ConfigPassword::has_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ConfigPassword::clear_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool ConfigPassword::number() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigPassword.number)
  return _internal_number();
}
inline void ConfigPassword::set_number(bool value) {
  _internal_set_number(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigPassword.number)
}
inline bool ConfigPassword::_internal_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.number_;
}
inline void ConfigPassword::_internal_set_number(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_ = value;
}

// optional bool uppercase = 5 [json_name = "uppercase"];
inline bool ConfigPassword::has_uppercase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ConfigPassword::clear_uppercase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uppercase_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool ConfigPassword::uppercase() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigPassword.uppercase)
  return _internal_uppercase();
}
inline void ConfigPassword::set_uppercase(bool value) {
  _internal_set_uppercase(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigPassword.uppercase)
}
inline bool ConfigPassword::_internal_uppercase() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uppercase_;
}
inline void ConfigPassword::_internal_set_uppercase(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uppercase_ = value;
}

// optional bool symbol = 6 [json_name = "symbol"];
inline bool ConfigPassword::has_symbol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ConfigPassword::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool ConfigPassword::symbol() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigPassword.symbol)
  return _internal_symbol();
}
inline void ConfigPassword::set_symbol(bool value) {
  _internal_set_symbol(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigPassword.symbol)
}
inline bool ConfigPassword::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_;
}
inline void ConfigPassword::_internal_set_symbol(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_ = value;
}

// optional bool enable_forgot_link = 7 [json_name = "enableForgotLink"];
inline bool ConfigPassword::has_enable_forgot_link() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ConfigPassword::clear_enable_forgot_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_forgot_link_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool ConfigPassword::enable_forgot_link() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigPassword.enable_forgot_link)
  return _internal_enable_forgot_link();
}
inline void ConfigPassword::set_enable_forgot_link(bool value) {
  _internal_set_enable_forgot_link(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigPassword.enable_forgot_link)
}
inline bool ConfigPassword::_internal_enable_forgot_link() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_forgot_link_;
}
inline void ConfigPassword::_internal_set_enable_forgot_link(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_forgot_link_ = value;
}

// -------------------------------------------------------------------

// ConfigFile

// optional bool enable_file_attachments = 1 [json_name = "enableFileAttachments"];
inline bool ConfigFile::has_enable_file_attachments() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void ConfigFile::clear_enable_file_attachments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_file_attachments_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool ConfigFile::enable_file_attachments() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigFile.enable_file_attachments)
  return _internal_enable_file_attachments();
}
inline void ConfigFile::set_enable_file_attachments(bool value) {
  _internal_set_enable_file_attachments(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigFile.enable_file_attachments)
}
inline bool ConfigFile::_internal_enable_file_attachments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_file_attachments_;
}
inline void ConfigFile::_internal_set_enable_file_attachments(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_file_attachments_ = value;
}

// optional bool enable_mobile_upload = 2 [json_name = "enableMobileUpload"];
inline bool ConfigFile::has_enable_mobile_upload() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void ConfigFile::clear_enable_mobile_upload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_mobile_upload_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool ConfigFile::enable_mobile_upload() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigFile.enable_mobile_upload)
  return _internal_enable_mobile_upload();
}
inline void ConfigFile::set_enable_mobile_upload(bool value) {
  _internal_set_enable_mobile_upload(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigFile.enable_mobile_upload)
}
inline bool ConfigFile::_internal_enable_mobile_upload() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_mobile_upload_;
}
inline void ConfigFile::_internal_set_enable_mobile_upload(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_mobile_upload_ = value;
}

// optional bool enable_mobile_download = 3 [json_name = "enableMobileDownload"];
inline bool ConfigFile::has_enable_mobile_download() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void ConfigFile::clear_enable_mobile_download() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_mobile_download_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool ConfigFile::enable_mobile_download() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigFile.enable_mobile_download)
  return _internal_enable_mobile_download();
}
inline void ConfigFile::set_enable_mobile_download(bool value) {
  _internal_set_enable_mobile_download(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigFile.enable_mobile_download)
}
inline bool ConfigFile::_internal_enable_mobile_download() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_mobile_download_;
}
inline void ConfigFile::_internal_set_enable_mobile_download(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_mobile_download_ = value;
}

// optional int64 max_image_resolution = 4 [json_name = "maxImageResolution"];
inline bool ConfigFile::has_max_image_resolution() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void ConfigFile::clear_max_image_resolution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_image_resolution_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int64_t ConfigFile::max_image_resolution() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigFile.max_image_resolution)
  return _internal_max_image_resolution();
}
inline void ConfigFile::set_max_image_resolution(::int64_t value) {
  _internal_set_max_image_resolution(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigFile.max_image_resolution)
}
inline ::int64_t ConfigFile::_internal_max_image_resolution() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_image_resolution_;
}
inline void ConfigFile::_internal_set_max_image_resolution(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_image_resolution_ = value;
}

// optional int64 max_image_decoder_concurrency = 5 [json_name = "maxImageDecoderConcurrency"];
inline bool ConfigFile::has_max_image_decoder_concurrency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void ConfigFile::clear_max_image_decoder_concurrency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_image_decoder_concurrency_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int64_t ConfigFile::max_image_decoder_concurrency() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigFile.max_image_decoder_concurrency)
  return _internal_max_image_decoder_concurrency();
}
inline void ConfigFile::set_max_image_decoder_concurrency(::int64_t value) {
  _internal_set_max_image_decoder_concurrency(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigFile.max_image_decoder_concurrency)
}
inline ::int64_t ConfigFile::_internal_max_image_decoder_concurrency() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_image_decoder_concurrency_;
}
inline void ConfigFile::_internal_set_max_image_decoder_concurrency(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_image_decoder_concurrency_ = value;
}

// optional string driver_name = 6 [json_name = "driverName"];
inline bool ConfigFile::has_driver_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConfigFile::clear_driver_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.driver_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ConfigFile::driver_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigFile.driver_name)
  return _internal_driver_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigFile::set_driver_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.driver_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigFile.driver_name)
}
inline ::std::string* PROTOBUF_NONNULL ConfigFile::mutable_driver_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_driver_name();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigFile.driver_name)
  return _s;
}
inline const ::std::string& ConfigFile::_internal_driver_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.driver_name_.Get();
}
inline void ConfigFile::_internal_set_driver_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.driver_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigFile::_internal_mutable_driver_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.driver_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigFile::release_driver_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigFile.driver_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.driver_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.driver_name_.Set("", GetArena());
  }
  return released;
}
inline void ConfigFile::set_allocated_driver_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.driver_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.driver_name_.IsDefault()) {
    _impl_.driver_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigFile.driver_name)
}

// optional string amazon_s3_access_key_id = 7 [json_name = "amazonS3AccessKeyId"];
inline bool ConfigFile::has_amazon_s3_access_key_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConfigFile::clear_amazon_s3_access_key_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amazon_s3_access_key_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& ConfigFile::amazon_s3_access_key_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigFile.amazon_s3_access_key_id)
  return _internal_amazon_s3_access_key_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigFile::set_amazon_s3_access_key_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.amazon_s3_access_key_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigFile.amazon_s3_access_key_id)
}
inline ::std::string* PROTOBUF_NONNULL ConfigFile::mutable_amazon_s3_access_key_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_amazon_s3_access_key_id();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigFile.amazon_s3_access_key_id)
  return _s;
}
inline const ::std::string& ConfigFile::_internal_amazon_s3_access_key_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amazon_s3_access_key_id_.Get();
}
inline void ConfigFile::_internal_set_amazon_s3_access_key_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.amazon_s3_access_key_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigFile::_internal_mutable_amazon_s3_access_key_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.amazon_s3_access_key_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigFile::release_amazon_s3_access_key_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigFile.amazon_s3_access_key_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.amazon_s3_access_key_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.amazon_s3_access_key_id_.Set("", GetArena());
  }
  return released;
}
inline void ConfigFile::set_allocated_amazon_s3_access_key_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.amazon_s3_access_key_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.amazon_s3_access_key_id_.IsDefault()) {
    _impl_.amazon_s3_access_key_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigFile.amazon_s3_access_key_id)
}

// optional string amazon_s3_secret_access_key = 8 [json_name = "amazonS3SecretAccessKey"];
inline bool ConfigFile::has_amazon_s3_secret_access_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ConfigFile::clear_amazon_s3_secret_access_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amazon_s3_secret_access_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& ConfigFile::amazon_s3_secret_access_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigFile.amazon_s3_secret_access_key)
  return _internal_amazon_s3_secret_access_key();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigFile::set_amazon_s3_secret_access_key(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.amazon_s3_secret_access_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigFile.amazon_s3_secret_access_key)
}
inline ::std::string* PROTOBUF_NONNULL ConfigFile::mutable_amazon_s3_secret_access_key()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_amazon_s3_secret_access_key();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigFile.amazon_s3_secret_access_key)
  return _s;
}
inline const ::std::string& ConfigFile::_internal_amazon_s3_secret_access_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amazon_s3_secret_access_key_.Get();
}
inline void ConfigFile::_internal_set_amazon_s3_secret_access_key(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.amazon_s3_secret_access_key_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigFile::_internal_mutable_amazon_s3_secret_access_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.amazon_s3_secret_access_key_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigFile::release_amazon_s3_secret_access_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigFile.amazon_s3_secret_access_key)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.amazon_s3_secret_access_key_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.amazon_s3_secret_access_key_.Set("", GetArena());
  }
  return released;
}
inline void ConfigFile::set_allocated_amazon_s3_secret_access_key(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.amazon_s3_secret_access_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.amazon_s3_secret_access_key_.IsDefault()) {
    _impl_.amazon_s3_secret_access_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigFile.amazon_s3_secret_access_key)
}

// optional string amazon_s3_bucket = 9 [json_name = "amazonS3Bucket"];
inline bool ConfigFile::has_amazon_s3_bucket() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ConfigFile::clear_amazon_s3_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amazon_s3_bucket_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& ConfigFile::amazon_s3_bucket() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigFile.amazon_s3_bucket)
  return _internal_amazon_s3_bucket();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigFile::set_amazon_s3_bucket(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.amazon_s3_bucket_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigFile.amazon_s3_bucket)
}
inline ::std::string* PROTOBUF_NONNULL ConfigFile::mutable_amazon_s3_bucket()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_amazon_s3_bucket();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigFile.amazon_s3_bucket)
  return _s;
}
inline const ::std::string& ConfigFile::_internal_amazon_s3_bucket() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amazon_s3_bucket_.Get();
}
inline void ConfigFile::_internal_set_amazon_s3_bucket(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.amazon_s3_bucket_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigFile::_internal_mutable_amazon_s3_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.amazon_s3_bucket_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigFile::release_amazon_s3_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigFile.amazon_s3_bucket)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.amazon_s3_bucket_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.amazon_s3_bucket_.Set("", GetArena());
  }
  return released;
}
inline void ConfigFile::set_allocated_amazon_s3_bucket(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.amazon_s3_bucket_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.amazon_s3_bucket_.IsDefault()) {
    _impl_.amazon_s3_bucket_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigFile.amazon_s3_bucket)
}

// optional string amazon_s3_path_prefix = 10 [json_name = "amazonS3PathPrefix"];
inline bool ConfigFile::has_amazon_s3_path_prefix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ConfigFile::clear_amazon_s3_path_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amazon_s3_path_prefix_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& ConfigFile::amazon_s3_path_prefix() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigFile.amazon_s3_path_prefix)
  return _internal_amazon_s3_path_prefix();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigFile::set_amazon_s3_path_prefix(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.amazon_s3_path_prefix_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigFile.amazon_s3_path_prefix)
}
inline ::std::string* PROTOBUF_NONNULL ConfigFile::mutable_amazon_s3_path_prefix()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_amazon_s3_path_prefix();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigFile.amazon_s3_path_prefix)
  return _s;
}
inline const ::std::string& ConfigFile::_internal_amazon_s3_path_prefix() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amazon_s3_path_prefix_.Get();
}
inline void ConfigFile::_internal_set_amazon_s3_path_prefix(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.amazon_s3_path_prefix_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigFile::_internal_mutable_amazon_s3_path_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.amazon_s3_path_prefix_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigFile::release_amazon_s3_path_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigFile.amazon_s3_path_prefix)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.amazon_s3_path_prefix_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.amazon_s3_path_prefix_.Set("", GetArena());
  }
  return released;
}
inline void ConfigFile::set_allocated_amazon_s3_path_prefix(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.amazon_s3_path_prefix_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.amazon_s3_path_prefix_.IsDefault()) {
    _impl_.amazon_s3_path_prefix_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigFile.amazon_s3_path_prefix)
}

// optional string amazon_s3_region = 11 [json_name = "amazonS3Region"];
inline bool ConfigFile::has_amazon_s3_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ConfigFile::clear_amazon_s3_region() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amazon_s3_region_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::std::string& ConfigFile::amazon_s3_region() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigFile.amazon_s3_region)
  return _internal_amazon_s3_region();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigFile::set_amazon_s3_region(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.amazon_s3_region_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigFile.amazon_s3_region)
}
inline ::std::string* PROTOBUF_NONNULL ConfigFile::mutable_amazon_s3_region()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_amazon_s3_region();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigFile.amazon_s3_region)
  return _s;
}
inline const ::std::string& ConfigFile::_internal_amazon_s3_region() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amazon_s3_region_.Get();
}
inline void ConfigFile::_internal_set_amazon_s3_region(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.amazon_s3_region_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigFile::_internal_mutable_amazon_s3_region() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.amazon_s3_region_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigFile::release_amazon_s3_region() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigFile.amazon_s3_region)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.amazon_s3_region_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.amazon_s3_region_.Set("", GetArena());
  }
  return released;
}
inline void ConfigFile::set_allocated_amazon_s3_region(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.amazon_s3_region_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.amazon_s3_region_.IsDefault()) {
    _impl_.amazon_s3_region_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigFile.amazon_s3_region)
}

// optional string amazon_s3_endpoint = 12 [json_name = "amazonS3Endpoint"];
inline bool ConfigFile::has_amazon_s3_endpoint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ConfigFile::clear_amazon_s3_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amazon_s3_endpoint_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::std::string& ConfigFile::amazon_s3_endpoint() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigFile.amazon_s3_endpoint)
  return _internal_amazon_s3_endpoint();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigFile::set_amazon_s3_endpoint(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.amazon_s3_endpoint_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigFile.amazon_s3_endpoint)
}
inline ::std::string* PROTOBUF_NONNULL ConfigFile::mutable_amazon_s3_endpoint()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_amazon_s3_endpoint();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigFile.amazon_s3_endpoint)
  return _s;
}
inline const ::std::string& ConfigFile::_internal_amazon_s3_endpoint() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amazon_s3_endpoint_.Get();
}
inline void ConfigFile::_internal_set_amazon_s3_endpoint(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.amazon_s3_endpoint_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigFile::_internal_mutable_amazon_s3_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.amazon_s3_endpoint_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigFile::release_amazon_s3_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigFile.amazon_s3_endpoint)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.amazon_s3_endpoint_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.amazon_s3_endpoint_.Set("", GetArena());
  }
  return released;
}
inline void ConfigFile::set_allocated_amazon_s3_endpoint(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.amazon_s3_endpoint_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.amazon_s3_endpoint_.IsDefault()) {
    _impl_.amazon_s3_endpoint_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigFile.amazon_s3_endpoint)
}

// optional bool amazon_s3_ssl = 13 [json_name = "amazonS3Ssl"];
inline bool ConfigFile::has_amazon_s3_ssl() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void ConfigFile::clear_amazon_s3_ssl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amazon_s3_ssl_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool ConfigFile::amazon_s3_ssl() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigFile.amazon_s3_ssl)
  return _internal_amazon_s3_ssl();
}
inline void ConfigFile::set_amazon_s3_ssl(bool value) {
  _internal_set_amazon_s3_ssl(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigFile.amazon_s3_ssl)
}
inline bool ConfigFile::_internal_amazon_s3_ssl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amazon_s3_ssl_;
}
inline void ConfigFile::_internal_set_amazon_s3_ssl(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amazon_s3_ssl_ = value;
}

// optional bool amazon_s3_sign_v2 = 14 [json_name = "amazonS3SignV2"];
inline bool ConfigFile::has_amazon_s3_sign_v2() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void ConfigFile::clear_amazon_s3_sign_v2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amazon_s3_sign_v2_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool ConfigFile::amazon_s3_sign_v2() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigFile.amazon_s3_sign_v2)
  return _internal_amazon_s3_sign_v2();
}
inline void ConfigFile::set_amazon_s3_sign_v2(bool value) {
  _internal_set_amazon_s3_sign_v2(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigFile.amazon_s3_sign_v2)
}
inline bool ConfigFile::_internal_amazon_s3_sign_v2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amazon_s3_sign_v2_;
}
inline void ConfigFile::_internal_set_amazon_s3_sign_v2(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amazon_s3_sign_v2_ = value;
}

// optional bool amazon_s3_sse = 15 [json_name = "amazonS3Sse"];
inline bool ConfigFile::has_amazon_s3_sse() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void ConfigFile::clear_amazon_s3_sse() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amazon_s3_sse_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool ConfigFile::amazon_s3_sse() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigFile.amazon_s3_sse)
  return _internal_amazon_s3_sse();
}
inline void ConfigFile::set_amazon_s3_sse(bool value) {
  _internal_set_amazon_s3_sse(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigFile.amazon_s3_sse)
}
inline bool ConfigFile::_internal_amazon_s3_sse() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amazon_s3_sse_;
}
inline void ConfigFile::_internal_set_amazon_s3_sse(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amazon_s3_sse_ = value;
}

// optional bool amazon_s3_trace = 16 [json_name = "amazonS3Trace"];
inline bool ConfigFile::has_amazon_s3_trace() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void ConfigFile::clear_amazon_s3_trace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amazon_s3_trace_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool ConfigFile::amazon_s3_trace() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigFile.amazon_s3_trace)
  return _internal_amazon_s3_trace();
}
inline void ConfigFile::set_amazon_s3_trace(bool value) {
  _internal_set_amazon_s3_trace(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigFile.amazon_s3_trace)
}
inline bool ConfigFile::_internal_amazon_s3_trace() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amazon_s3_trace_;
}
inline void ConfigFile::_internal_set_amazon_s3_trace(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amazon_s3_trace_ = value;
}

// optional int64 amazon_s3_request_timeout_milliseconds = 17 [json_name = "amazonS3RequestTimeoutMilliseconds"];
inline bool ConfigFile::has_amazon_s3_request_timeout_milliseconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void ConfigFile::clear_amazon_s3_request_timeout_milliseconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amazon_s3_request_timeout_milliseconds_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::int64_t ConfigFile::amazon_s3_request_timeout_milliseconds() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigFile.amazon_s3_request_timeout_milliseconds)
  return _internal_amazon_s3_request_timeout_milliseconds();
}
inline void ConfigFile::set_amazon_s3_request_timeout_milliseconds(::int64_t value) {
  _internal_set_amazon_s3_request_timeout_milliseconds(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigFile.amazon_s3_request_timeout_milliseconds)
}
inline ::int64_t ConfigFile::_internal_amazon_s3_request_timeout_milliseconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amazon_s3_request_timeout_milliseconds_;
}
inline void ConfigFile::_internal_set_amazon_s3_request_timeout_milliseconds(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amazon_s3_request_timeout_milliseconds_ = value;
}

// optional int64 amazon_s3_upload_part_size_bytes = 18 [json_name = "amazonS3UploadPartSizeBytes"];
inline bool ConfigFile::has_amazon_s3_upload_part_size_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void ConfigFile::clear_amazon_s3_upload_part_size_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amazon_s3_upload_part_size_bytes_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::int64_t ConfigFile::amazon_s3_upload_part_size_bytes() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigFile.amazon_s3_upload_part_size_bytes)
  return _internal_amazon_s3_upload_part_size_bytes();
}
inline void ConfigFile::set_amazon_s3_upload_part_size_bytes(::int64_t value) {
  _internal_set_amazon_s3_upload_part_size_bytes(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigFile.amazon_s3_upload_part_size_bytes)
}
inline ::int64_t ConfigFile::_internal_amazon_s3_upload_part_size_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amazon_s3_upload_part_size_bytes_;
}
inline void ConfigFile::_internal_set_amazon_s3_upload_part_size_bytes(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amazon_s3_upload_part_size_bytes_ = value;
}

// optional string amazon_s3_storage_class = 19 [json_name = "amazonS3StorageClass"];
inline bool ConfigFile::has_amazon_s3_storage_class() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ConfigFile::clear_amazon_s3_storage_class() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amazon_s3_storage_class_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::std::string& ConfigFile::amazon_s3_storage_class() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigFile.amazon_s3_storage_class)
  return _internal_amazon_s3_storage_class();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigFile::set_amazon_s3_storage_class(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.amazon_s3_storage_class_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigFile.amazon_s3_storage_class)
}
inline ::std::string* PROTOBUF_NONNULL ConfigFile::mutable_amazon_s3_storage_class()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_amazon_s3_storage_class();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigFile.amazon_s3_storage_class)
  return _s;
}
inline const ::std::string& ConfigFile::_internal_amazon_s3_storage_class() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amazon_s3_storage_class_.Get();
}
inline void ConfigFile::_internal_set_amazon_s3_storage_class(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.amazon_s3_storage_class_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigFile::_internal_mutable_amazon_s3_storage_class() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.amazon_s3_storage_class_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigFile::release_amazon_s3_storage_class() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigFile.amazon_s3_storage_class)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.amazon_s3_storage_class_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.amazon_s3_storage_class_.Set("", GetArena());
  }
  return released;
}
inline void ConfigFile::set_allocated_amazon_s3_storage_class(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.amazon_s3_storage_class_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.amazon_s3_storage_class_.IsDefault()) {
    _impl_.amazon_s3_storage_class_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigFile.amazon_s3_storage_class)
}

// -------------------------------------------------------------------

// ConfigEmail

// optional bool send_email_notifications = 1 [json_name = "sendEmailNotifications"];
inline bool ConfigEmail::has_send_email_notifications() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void ConfigEmail::clear_send_email_notifications() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.send_email_notifications_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool ConfigEmail::send_email_notifications() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.send_email_notifications)
  return _internal_send_email_notifications();
}
inline void ConfigEmail::set_send_email_notifications(bool value) {
  _internal_set_send_email_notifications(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.send_email_notifications)
}
inline bool ConfigEmail::_internal_send_email_notifications() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.send_email_notifications_;
}
inline void ConfigEmail::_internal_set_send_email_notifications(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.send_email_notifications_ = value;
}

// optional bool require_email_verification = 2 [json_name = "requireEmailVerification"];
inline bool ConfigEmail::has_require_email_verification() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void ConfigEmail::clear_require_email_verification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.require_email_verification_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool ConfigEmail::require_email_verification() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.require_email_verification)
  return _internal_require_email_verification();
}
inline void ConfigEmail::set_require_email_verification(bool value) {
  _internal_set_require_email_verification(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.require_email_verification)
}
inline bool ConfigEmail::_internal_require_email_verification() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.require_email_verification_;
}
inline void ConfigEmail::_internal_set_require_email_verification(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.require_email_verification_ = value;
}

// optional string feedback_email = 3 [json_name = "feedbackEmail"];
inline bool ConfigEmail::has_feedback_email() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConfigEmail::clear_feedback_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.feedback_email_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ConfigEmail::feedback_email() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.feedback_email)
  return _internal_feedback_email();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigEmail::set_feedback_email(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.feedback_email_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.feedback_email)
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::mutable_feedback_email()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_feedback_email();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigEmail.feedback_email)
  return _s;
}
inline const ::std::string& ConfigEmail::_internal_feedback_email() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.feedback_email_.Get();
}
inline void ConfigEmail::_internal_set_feedback_email(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.feedback_email_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::_internal_mutable_feedback_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.feedback_email_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigEmail::release_feedback_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigEmail.feedback_email)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.feedback_email_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.feedback_email_.Set("", GetArena());
  }
  return released;
}
inline void ConfigEmail::set_allocated_feedback_email(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.feedback_email_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.feedback_email_.IsDefault()) {
    _impl_.feedback_email_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigEmail.feedback_email)
}

// optional string reply_to_address = 4 [json_name = "replyToAddress"];
inline bool ConfigEmail::has_reply_to_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConfigEmail::clear_reply_to_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reply_to_address_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& ConfigEmail::reply_to_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.reply_to_address)
  return _internal_reply_to_address();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigEmail::set_reply_to_address(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.reply_to_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.reply_to_address)
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::mutable_reply_to_address()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_reply_to_address();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigEmail.reply_to_address)
  return _s;
}
inline const ::std::string& ConfigEmail::_internal_reply_to_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reply_to_address_.Get();
}
inline void ConfigEmail::_internal_set_reply_to_address(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.reply_to_address_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::_internal_mutable_reply_to_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.reply_to_address_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigEmail::release_reply_to_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigEmail.reply_to_address)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.reply_to_address_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.reply_to_address_.Set("", GetArena());
  }
  return released;
}
inline void ConfigEmail::set_allocated_reply_to_address(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.reply_to_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reply_to_address_.IsDefault()) {
    _impl_.reply_to_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigEmail.reply_to_address)
}

// optional bool enable_smtp_auth = 5 [json_name = "enableSmtpAuth"];
inline bool ConfigEmail::has_enable_smtp_auth() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void ConfigEmail::clear_enable_smtp_auth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_smtp_auth_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool ConfigEmail::enable_smtp_auth() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.enable_smtp_auth)
  return _internal_enable_smtp_auth();
}
inline void ConfigEmail::set_enable_smtp_auth(bool value) {
  _internal_set_enable_smtp_auth(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.enable_smtp_auth)
}
inline bool ConfigEmail::_internal_enable_smtp_auth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_smtp_auth_;
}
inline void ConfigEmail::_internal_set_enable_smtp_auth(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_smtp_auth_ = value;
}

// optional string smtp_username = 6 [json_name = "smtpUsername"];
inline bool ConfigEmail::has_smtp_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ConfigEmail::clear_smtp_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.smtp_username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& ConfigEmail::smtp_username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.smtp_username)
  return _internal_smtp_username();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigEmail::set_smtp_username(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.smtp_username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.smtp_username)
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::mutable_smtp_username()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_smtp_username();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigEmail.smtp_username)
  return _s;
}
inline const ::std::string& ConfigEmail::_internal_smtp_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.smtp_username_.Get();
}
inline void ConfigEmail::_internal_set_smtp_username(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.smtp_username_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::_internal_mutable_smtp_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.smtp_username_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigEmail::release_smtp_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigEmail.smtp_username)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.smtp_username_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.smtp_username_.Set("", GetArena());
  }
  return released;
}
inline void ConfigEmail::set_allocated_smtp_username(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.smtp_username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.smtp_username_.IsDefault()) {
    _impl_.smtp_username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigEmail.smtp_username)
}

// optional string smtp_password = 7 [json_name = "smtpPassword"];
inline bool ConfigEmail::has_smtp_password() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ConfigEmail::clear_smtp_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.smtp_password_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& ConfigEmail::smtp_password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.smtp_password)
  return _internal_smtp_password();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigEmail::set_smtp_password(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.smtp_password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.smtp_password)
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::mutable_smtp_password()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_smtp_password();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigEmail.smtp_password)
  return _s;
}
inline const ::std::string& ConfigEmail::_internal_smtp_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.smtp_password_.Get();
}
inline void ConfigEmail::_internal_set_smtp_password(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.smtp_password_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::_internal_mutable_smtp_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.smtp_password_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigEmail::release_smtp_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigEmail.smtp_password)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.smtp_password_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.smtp_password_.Set("", GetArena());
  }
  return released;
}
inline void ConfigEmail::set_allocated_smtp_password(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.smtp_password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.smtp_password_.IsDefault()) {
    _impl_.smtp_password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigEmail.smtp_password)
}

// optional string smtp_server = 8 [json_name = "smtpServer"];
inline bool ConfigEmail::has_smtp_server() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ConfigEmail::clear_smtp_server() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.smtp_server_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& ConfigEmail::smtp_server() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.smtp_server)
  return _internal_smtp_server();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigEmail::set_smtp_server(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.smtp_server_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.smtp_server)
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::mutable_smtp_server()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_smtp_server();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigEmail.smtp_server)
  return _s;
}
inline const ::std::string& ConfigEmail::_internal_smtp_server() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.smtp_server_.Get();
}
inline void ConfigEmail::_internal_set_smtp_server(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.smtp_server_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::_internal_mutable_smtp_server() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.smtp_server_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigEmail::release_smtp_server() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigEmail.smtp_server)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.smtp_server_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.smtp_server_.Set("", GetArena());
  }
  return released;
}
inline void ConfigEmail::set_allocated_smtp_server(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.smtp_server_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.smtp_server_.IsDefault()) {
    _impl_.smtp_server_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigEmail.smtp_server)
}

// optional string smtp_port = 9 [json_name = "smtpPort"];
inline bool ConfigEmail::has_smtp_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ConfigEmail::clear_smtp_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.smtp_port_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::std::string& ConfigEmail::smtp_port() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.smtp_port)
  return _internal_smtp_port();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigEmail::set_smtp_port(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.smtp_port_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.smtp_port)
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::mutable_smtp_port()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_smtp_port();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigEmail.smtp_port)
  return _s;
}
inline const ::std::string& ConfigEmail::_internal_smtp_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.smtp_port_.Get();
}
inline void ConfigEmail::_internal_set_smtp_port(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.smtp_port_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::_internal_mutable_smtp_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.smtp_port_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigEmail::release_smtp_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigEmail.smtp_port)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.smtp_port_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.smtp_port_.Set("", GetArena());
  }
  return released;
}
inline void ConfigEmail::set_allocated_smtp_port(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.smtp_port_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.smtp_port_.IsDefault()) {
    _impl_.smtp_port_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigEmail.smtp_port)
}

// optional int32 smtp_server_timeout = 10 [json_name = "smtpServerTimeout"];
inline bool ConfigEmail::has_smtp_server_timeout() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void ConfigEmail::clear_smtp_server_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.smtp_server_timeout_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::int32_t ConfigEmail::smtp_server_timeout() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.smtp_server_timeout)
  return _internal_smtp_server_timeout();
}
inline void ConfigEmail::set_smtp_server_timeout(::int32_t value) {
  _internal_set_smtp_server_timeout(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.smtp_server_timeout)
}
inline ::int32_t ConfigEmail::_internal_smtp_server_timeout() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.smtp_server_timeout_;
}
inline void ConfigEmail::_internal_set_smtp_server_timeout(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.smtp_server_timeout_ = value;
}

// optional string connection_security = 11 [json_name = "connectionSecurity"];
inline bool ConfigEmail::has_connection_security() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ConfigEmail::clear_connection_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connection_security_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::std::string& ConfigEmail::connection_security() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.connection_security)
  return _internal_connection_security();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigEmail::set_connection_security(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.connection_security_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.connection_security)
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::mutable_connection_security()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_connection_security();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigEmail.connection_security)
  return _s;
}
inline const ::std::string& ConfigEmail::_internal_connection_security() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.connection_security_.Get();
}
inline void ConfigEmail::_internal_set_connection_security(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.connection_security_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::_internal_mutable_connection_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.connection_security_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigEmail::release_connection_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigEmail.connection_security)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.connection_security_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.connection_security_.Set("", GetArena());
  }
  return released;
}
inline void ConfigEmail::set_allocated_connection_security(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.connection_security_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.connection_security_.IsDefault()) {
    _impl_.connection_security_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigEmail.connection_security)
}

// optional bool send_push_notifications = 12 [json_name = "sendPushNotifications"];
inline bool ConfigEmail::has_send_push_notifications() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void ConfigEmail::clear_send_push_notifications() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.send_push_notifications_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool ConfigEmail::send_push_notifications() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.send_push_notifications)
  return _internal_send_push_notifications();
}
inline void ConfigEmail::set_send_push_notifications(bool value) {
  _internal_set_send_push_notifications(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.send_push_notifications)
}
inline bool ConfigEmail::_internal_send_push_notifications() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.send_push_notifications_;
}
inline void ConfigEmail::_internal_set_send_push_notifications(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.send_push_notifications_ = value;
}

// optional string push_notification_server = 13 [json_name = "pushNotificationServer"];
inline bool ConfigEmail::has_push_notification_server() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ConfigEmail::clear_push_notification_server() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.push_notification_server_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::std::string& ConfigEmail::push_notification_server() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.push_notification_server)
  return _internal_push_notification_server();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigEmail::set_push_notification_server(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.push_notification_server_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.push_notification_server)
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::mutable_push_notification_server()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_push_notification_server();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigEmail.push_notification_server)
  return _s;
}
inline const ::std::string& ConfigEmail::_internal_push_notification_server() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.push_notification_server_.Get();
}
inline void ConfigEmail::_internal_set_push_notification_server(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.push_notification_server_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::_internal_mutable_push_notification_server() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.push_notification_server_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigEmail::release_push_notification_server() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigEmail.push_notification_server)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.push_notification_server_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.push_notification_server_.Set("", GetArena());
  }
  return released;
}
inline void ConfigEmail::set_allocated_push_notification_server(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.push_notification_server_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.push_notification_server_.IsDefault()) {
    _impl_.push_notification_server_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigEmail.push_notification_server)
}

// optional string push_notification_contents = 14 [json_name = "pushNotificationContents"];
inline bool ConfigEmail::has_push_notification_contents() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void ConfigEmail::clear_push_notification_contents() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.push_notification_contents_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::std::string& ConfigEmail::push_notification_contents() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.push_notification_contents)
  return _internal_push_notification_contents();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigEmail::set_push_notification_contents(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.push_notification_contents_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.push_notification_contents)
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::mutable_push_notification_contents()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_push_notification_contents();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigEmail.push_notification_contents)
  return _s;
}
inline const ::std::string& ConfigEmail::_internal_push_notification_contents() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.push_notification_contents_.Get();
}
inline void ConfigEmail::_internal_set_push_notification_contents(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.push_notification_contents_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::_internal_mutable_push_notification_contents() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.push_notification_contents_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigEmail::release_push_notification_contents() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigEmail.push_notification_contents)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.push_notification_contents_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.push_notification_contents_.Set("", GetArena());
  }
  return released;
}
inline void ConfigEmail::set_allocated_push_notification_contents(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.push_notification_contents_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.push_notification_contents_.IsDefault()) {
    _impl_.push_notification_contents_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigEmail.push_notification_contents)
}

// optional int32 push_notification_buffer = 15 [json_name = "pushNotificationBuffer"];
inline bool ConfigEmail::has_push_notification_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void ConfigEmail::clear_push_notification_buffer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.push_notification_buffer_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::int32_t ConfigEmail::push_notification_buffer() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.push_notification_buffer)
  return _internal_push_notification_buffer();
}
inline void ConfigEmail::set_push_notification_buffer(::int32_t value) {
  _internal_set_push_notification_buffer(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.push_notification_buffer)
}
inline ::int32_t ConfigEmail::_internal_push_notification_buffer() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.push_notification_buffer_;
}
inline void ConfigEmail::_internal_set_push_notification_buffer(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.push_notification_buffer_ = value;
}

// optional bool enable_email_batching = 16 [json_name = "enableEmailBatching"];
inline bool ConfigEmail::has_enable_email_batching() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void ConfigEmail::clear_enable_email_batching() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_email_batching_ = false;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline bool ConfigEmail::enable_email_batching() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.enable_email_batching)
  return _internal_enable_email_batching();
}
inline void ConfigEmail::set_enable_email_batching(bool value) {
  _internal_set_enable_email_batching(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.enable_email_batching)
}
inline bool ConfigEmail::_internal_enable_email_batching() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_email_batching_;
}
inline void ConfigEmail::_internal_set_enable_email_batching(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_email_batching_ = value;
}

// optional int32 email_batching_buffer_size = 17 [json_name = "emailBatchingBufferSize"];
inline bool ConfigEmail::has_email_batching_buffer_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void ConfigEmail::clear_email_batching_buffer_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_batching_buffer_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::int32_t ConfigEmail::email_batching_buffer_size() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.email_batching_buffer_size)
  return _internal_email_batching_buffer_size();
}
inline void ConfigEmail::set_email_batching_buffer_size(::int32_t value) {
  _internal_set_email_batching_buffer_size(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.email_batching_buffer_size)
}
inline ::int32_t ConfigEmail::_internal_email_batching_buffer_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.email_batching_buffer_size_;
}
inline void ConfigEmail::_internal_set_email_batching_buffer_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_batching_buffer_size_ = value;
}

// optional int32 email_batching_interval = 18 [json_name = "emailBatchingInterval"];
inline bool ConfigEmail::has_email_batching_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void ConfigEmail::clear_email_batching_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_batching_interval_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::int32_t ConfigEmail::email_batching_interval() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.email_batching_interval)
  return _internal_email_batching_interval();
}
inline void ConfigEmail::set_email_batching_interval(::int32_t value) {
  _internal_set_email_batching_interval(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.email_batching_interval)
}
inline ::int32_t ConfigEmail::_internal_email_batching_interval() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.email_batching_interval_;
}
inline void ConfigEmail::_internal_set_email_batching_interval(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_batching_interval_ = value;
}

// optional bool skip_server_certificate_verification = 19 [json_name = "skipServerCertificateVerification"];
inline bool ConfigEmail::has_skip_server_certificate_verification() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void ConfigEmail::clear_skip_server_certificate_verification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.skip_server_certificate_verification_ = false;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline bool ConfigEmail::skip_server_certificate_verification() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.skip_server_certificate_verification)
  return _internal_skip_server_certificate_verification();
}
inline void ConfigEmail::set_skip_server_certificate_verification(bool value) {
  _internal_set_skip_server_certificate_verification(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.skip_server_certificate_verification)
}
inline bool ConfigEmail::_internal_skip_server_certificate_verification() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.skip_server_certificate_verification_;
}
inline void ConfigEmail::_internal_set_skip_server_certificate_verification(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.skip_server_certificate_verification_ = value;
}

// optional string email_notification_contents_type = 20 [json_name = "emailNotificationContentsType"];
inline bool ConfigEmail::has_email_notification_contents_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void ConfigEmail::clear_email_notification_contents_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_notification_contents_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::std::string& ConfigEmail::email_notification_contents_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.email_notification_contents_type)
  return _internal_email_notification_contents_type();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigEmail::set_email_notification_contents_type(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.email_notification_contents_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.email_notification_contents_type)
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::mutable_email_notification_contents_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_email_notification_contents_type();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigEmail.email_notification_contents_type)
  return _s;
}
inline const ::std::string& ConfigEmail::_internal_email_notification_contents_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.email_notification_contents_type_.Get();
}
inline void ConfigEmail::_internal_set_email_notification_contents_type(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.email_notification_contents_type_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::_internal_mutable_email_notification_contents_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.email_notification_contents_type_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigEmail::release_email_notification_contents_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigEmail.email_notification_contents_type)
  if ((_impl_._has_bits_[0] & 0x00000200u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* released = _impl_.email_notification_contents_type_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.email_notification_contents_type_.Set("", GetArena());
  }
  return released;
}
inline void ConfigEmail::set_allocated_email_notification_contents_type(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.email_notification_contents_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.email_notification_contents_type_.IsDefault()) {
    _impl_.email_notification_contents_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigEmail.email_notification_contents_type)
}

// optional string login_button_color = 21 [json_name = "loginButtonColor"];
inline bool ConfigEmail::has_login_button_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void ConfigEmail::clear_login_button_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.login_button_color_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::std::string& ConfigEmail::login_button_color() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.login_button_color)
  return _internal_login_button_color();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigEmail::set_login_button_color(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.login_button_color_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.login_button_color)
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::mutable_login_button_color()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_login_button_color();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigEmail.login_button_color)
  return _s;
}
inline const ::std::string& ConfigEmail::_internal_login_button_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.login_button_color_.Get();
}
inline void ConfigEmail::_internal_set_login_button_color(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.login_button_color_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::_internal_mutable_login_button_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.login_button_color_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigEmail::release_login_button_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigEmail.login_button_color)
  if ((_impl_._has_bits_[0] & 0x00000400u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* released = _impl_.login_button_color_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.login_button_color_.Set("", GetArena());
  }
  return released;
}
inline void ConfigEmail::set_allocated_login_button_color(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.login_button_color_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.login_button_color_.IsDefault()) {
    _impl_.login_button_color_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigEmail.login_button_color)
}

// optional string login_button_border_color = 22 [json_name = "loginButtonBorderColor"];
inline bool ConfigEmail::has_login_button_border_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void ConfigEmail::clear_login_button_border_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.login_button_border_color_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::std::string& ConfigEmail::login_button_border_color() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.login_button_border_color)
  return _internal_login_button_border_color();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigEmail::set_login_button_border_color(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.login_button_border_color_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.login_button_border_color)
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::mutable_login_button_border_color()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_login_button_border_color();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigEmail.login_button_border_color)
  return _s;
}
inline const ::std::string& ConfigEmail::_internal_login_button_border_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.login_button_border_color_.Get();
}
inline void ConfigEmail::_internal_set_login_button_border_color(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.login_button_border_color_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::_internal_mutable_login_button_border_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  return _impl_.login_button_border_color_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigEmail::release_login_button_border_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigEmail.login_button_border_color)
  if ((_impl_._has_bits_[0] & 0x00000800u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000800u;
  auto* released = _impl_.login_button_border_color_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.login_button_border_color_.Set("", GetArena());
  }
  return released;
}
inline void ConfigEmail::set_allocated_login_button_border_color(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.login_button_border_color_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.login_button_border_color_.IsDefault()) {
    _impl_.login_button_border_color_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigEmail.login_button_border_color)
}

// optional string login_button_text_color = 23 [json_name = "loginButtonTextColor"];
inline bool ConfigEmail::has_login_button_text_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void ConfigEmail::clear_login_button_text_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.login_button_text_color_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::std::string& ConfigEmail::login_button_text_color() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.login_button_text_color)
  return _internal_login_button_text_color();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigEmail::set_login_button_text_color(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.login_button_text_color_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.login_button_text_color)
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::mutable_login_button_text_color()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_login_button_text_color();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigEmail.login_button_text_color)
  return _s;
}
inline const ::std::string& ConfigEmail::_internal_login_button_text_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.login_button_text_color_.Get();
}
inline void ConfigEmail::_internal_set_login_button_text_color(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.login_button_text_color_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigEmail::_internal_mutable_login_button_text_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  return _impl_.login_button_text_color_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigEmail::release_login_button_text_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigEmail.login_button_text_color)
  if ((_impl_._has_bits_[0] & 0x00001000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00001000u;
  auto* released = _impl_.login_button_text_color_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.login_button_text_color_.Set("", GetArena());
  }
  return released;
}
inline void ConfigEmail::set_allocated_login_button_text_color(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.login_button_text_color_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.login_button_text_color_.IsDefault()) {
    _impl_.login_button_text_color_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigEmail.login_button_text_color)
}

// optional int32 rate_limiting_memory_size = 24 [json_name = "rateLimitingMemorySize"];
inline bool ConfigEmail::has_rate_limiting_memory_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void ConfigEmail::clear_rate_limiting_memory_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rate_limiting_memory_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline ::int32_t ConfigEmail::rate_limiting_memory_size() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.rate_limiting_memory_size)
  return _internal_rate_limiting_memory_size();
}
inline void ConfigEmail::set_rate_limiting_memory_size(::int32_t value) {
  _internal_set_rate_limiting_memory_size(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.rate_limiting_memory_size)
}
inline ::int32_t ConfigEmail::_internal_rate_limiting_memory_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rate_limiting_memory_size_;
}
inline void ConfigEmail::_internal_set_rate_limiting_memory_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rate_limiting_memory_size_ = value;
}

// optional int32 rate_limiting_per_hour = 25 [json_name = "rateLimitingPerHour"];
inline bool ConfigEmail::has_rate_limiting_per_hour() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void ConfigEmail::clear_rate_limiting_per_hour() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rate_limiting_per_hour_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::int32_t ConfigEmail::rate_limiting_per_hour() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.rate_limiting_per_hour)
  return _internal_rate_limiting_per_hour();
}
inline void ConfigEmail::set_rate_limiting_per_hour(::int32_t value) {
  _internal_set_rate_limiting_per_hour(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.rate_limiting_per_hour)
}
inline ::int32_t ConfigEmail::_internal_rate_limiting_per_hour() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rate_limiting_per_hour_;
}
inline void ConfigEmail::_internal_set_rate_limiting_per_hour(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rate_limiting_per_hour_ = value;
}

// optional int32 rate_limiting_max_burst = 26 [json_name = "rateLimitingMaxBurst"];
inline bool ConfigEmail::has_rate_limiting_max_burst() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void ConfigEmail::clear_rate_limiting_max_burst() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rate_limiting_max_burst_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::int32_t ConfigEmail::rate_limiting_max_burst() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigEmail.rate_limiting_max_burst)
  return _internal_rate_limiting_max_burst();
}
inline void ConfigEmail::set_rate_limiting_max_burst(::int32_t value) {
  _internal_set_rate_limiting_max_burst(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigEmail.rate_limiting_max_burst)
}
inline ::int32_t ConfigEmail::_internal_rate_limiting_max_burst() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rate_limiting_max_burst_;
}
inline void ConfigEmail::_internal_set_rate_limiting_max_burst(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rate_limiting_max_burst_ = value;
}

// -------------------------------------------------------------------

// ConfigRateLimit

// optional bool enable = 1 [json_name = "enable"];
inline bool ConfigRateLimit::has_enable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ConfigRateLimit::clear_enable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool ConfigRateLimit::enable() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigRateLimit.enable)
  return _internal_enable();
}
inline void ConfigRateLimit::set_enable(bool value) {
  _internal_set_enable(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigRateLimit.enable)
}
inline bool ConfigRateLimit::_internal_enable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_;
}
inline void ConfigRateLimit::_internal_set_enable(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_ = value;
}

// optional int32 per_sec = 2 [json_name = "perSec"];
inline bool ConfigRateLimit::has_per_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConfigRateLimit::clear_per_sec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.per_sec_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ConfigRateLimit::per_sec() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigRateLimit.per_sec)
  return _internal_per_sec();
}
inline void ConfigRateLimit::set_per_sec(::int32_t value) {
  _internal_set_per_sec(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigRateLimit.per_sec)
}
inline ::int32_t ConfigRateLimit::_internal_per_sec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.per_sec_;
}
inline void ConfigRateLimit::_internal_set_per_sec(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.per_sec_ = value;
}

// optional int32 max_burst = 3 [json_name = "maxBurst"];
inline bool ConfigRateLimit::has_max_burst() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ConfigRateLimit::clear_max_burst() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_burst_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t ConfigRateLimit::max_burst() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigRateLimit.max_burst)
  return _internal_max_burst();
}
inline void ConfigRateLimit::set_max_burst(::int32_t value) {
  _internal_set_max_burst(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigRateLimit.max_burst)
}
inline ::int32_t ConfigRateLimit::_internal_max_burst() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_burst_;
}
inline void ConfigRateLimit::_internal_set_max_burst(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_burst_ = value;
}

// optional int32 memory_store_size = 4 [json_name = "memoryStoreSize"];
inline bool ConfigRateLimit::has_memory_store_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ConfigRateLimit::clear_memory_store_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_store_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t ConfigRateLimit::memory_store_size() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigRateLimit.memory_store_size)
  return _internal_memory_store_size();
}
inline void ConfigRateLimit::set_memory_store_size(::int32_t value) {
  _internal_set_memory_store_size(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigRateLimit.memory_store_size)
}
inline ::int32_t ConfigRateLimit::_internal_memory_store_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.memory_store_size_;
}
inline void ConfigRateLimit::_internal_set_memory_store_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_store_size_ = value;
}

// optional bool vary_by_remote_addr = 5 [json_name = "varyByRemoteAddr"];
inline bool ConfigRateLimit::has_vary_by_remote_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ConfigRateLimit::clear_vary_by_remote_addr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vary_by_remote_addr_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool ConfigRateLimit::vary_by_remote_addr() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigRateLimit.vary_by_remote_addr)
  return _internal_vary_by_remote_addr();
}
inline void ConfigRateLimit::set_vary_by_remote_addr(bool value) {
  _internal_set_vary_by_remote_addr(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigRateLimit.vary_by_remote_addr)
}
inline bool ConfigRateLimit::_internal_vary_by_remote_addr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vary_by_remote_addr_;
}
inline void ConfigRateLimit::_internal_set_vary_by_remote_addr(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vary_by_remote_addr_ = value;
}

// optional bool vary_by_user = 6 [json_name = "varyByUser"];
inline bool ConfigRateLimit::has_vary_by_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ConfigRateLimit::clear_vary_by_user() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vary_by_user_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool ConfigRateLimit::vary_by_user() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigRateLimit.vary_by_user)
  return _internal_vary_by_user();
}
inline void ConfigRateLimit::set_vary_by_user(bool value) {
  _internal_set_vary_by_user(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigRateLimit.vary_by_user)
}
inline bool ConfigRateLimit::_internal_vary_by_user() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vary_by_user_;
}
inline void ConfigRateLimit::_internal_set_vary_by_user(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vary_by_user_ = value;
}

// string vary_by_header = 7 [json_name = "varyByHeader"];
inline void ConfigRateLimit::clear_vary_by_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vary_by_header_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ConfigRateLimit::vary_by_header() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigRateLimit.vary_by_header)
  return _internal_vary_by_header();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigRateLimit::set_vary_by_header(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vary_by_header_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigRateLimit.vary_by_header)
}
inline ::std::string* PROTOBUF_NONNULL ConfigRateLimit::mutable_vary_by_header()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_vary_by_header();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigRateLimit.vary_by_header)
  return _s;
}
inline const ::std::string& ConfigRateLimit::_internal_vary_by_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vary_by_header_.Get();
}
inline void ConfigRateLimit::_internal_set_vary_by_header(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vary_by_header_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigRateLimit::_internal_mutable_vary_by_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.vary_by_header_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigRateLimit::release_vary_by_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigRateLimit.vary_by_header)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.vary_by_header_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.vary_by_header_.Set("", GetArena());
  }
  return released;
}
inline void ConfigRateLimit::set_allocated_vary_by_header(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.vary_by_header_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.vary_by_header_.IsDefault()) {
    _impl_.vary_by_header_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigRateLimit.vary_by_header)
}

// -------------------------------------------------------------------

// ConfigPrivacy

// optional bool show_email_address = 1 [json_name = "showEmailAddress"];
inline bool ConfigPrivacy::has_show_email_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConfigPrivacy::clear_show_email_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_email_address_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ConfigPrivacy::show_email_address() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigPrivacy.show_email_address)
  return _internal_show_email_address();
}
inline void ConfigPrivacy::set_show_email_address(bool value) {
  _internal_set_show_email_address(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigPrivacy.show_email_address)
}
inline bool ConfigPrivacy::_internal_show_email_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.show_email_address_;
}
inline void ConfigPrivacy::_internal_set_show_email_address(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_email_address_ = value;
}

// optional bool show_full_name = 2 [json_name = "showFullName"];
inline bool ConfigPrivacy::has_show_full_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConfigPrivacy::clear_show_full_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_full_name_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool ConfigPrivacy::show_full_name() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigPrivacy.show_full_name)
  return _internal_show_full_name();
}
inline void ConfigPrivacy::set_show_full_name(bool value) {
  _internal_set_show_full_name(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigPrivacy.show_full_name)
}
inline bool ConfigPrivacy::_internal_show_full_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.show_full_name_;
}
inline void ConfigPrivacy::_internal_set_show_full_name(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_full_name_ = value;
}

// -------------------------------------------------------------------

// ConfigSupport

// optional string terms_of_service_link = 1 [json_name = "termsOfServiceLink"];
inline bool ConfigSupport::has_terms_of_service_link() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConfigSupport::clear_terms_of_service_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.terms_of_service_link_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ConfigSupport::terms_of_service_link() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSupport.terms_of_service_link)
  return _internal_terms_of_service_link();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSupport::set_terms_of_service_link(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.terms_of_service_link_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSupport.terms_of_service_link)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSupport::mutable_terms_of_service_link()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_terms_of_service_link();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSupport.terms_of_service_link)
  return _s;
}
inline const ::std::string& ConfigSupport::_internal_terms_of_service_link() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.terms_of_service_link_.Get();
}
inline void ConfigSupport::_internal_set_terms_of_service_link(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.terms_of_service_link_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSupport::_internal_mutable_terms_of_service_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.terms_of_service_link_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSupport::release_terms_of_service_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSupport.terms_of_service_link)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.terms_of_service_link_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.terms_of_service_link_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSupport::set_allocated_terms_of_service_link(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.terms_of_service_link_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.terms_of_service_link_.IsDefault()) {
    _impl_.terms_of_service_link_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSupport.terms_of_service_link)
}

// optional string privacy_policy_link = 2 [json_name = "privacyPolicyLink"];
inline bool ConfigSupport::has_privacy_policy_link() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConfigSupport::clear_privacy_policy_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.privacy_policy_link_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& ConfigSupport::privacy_policy_link() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSupport.privacy_policy_link)
  return _internal_privacy_policy_link();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSupport::set_privacy_policy_link(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.privacy_policy_link_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSupport.privacy_policy_link)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSupport::mutable_privacy_policy_link()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_privacy_policy_link();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSupport.privacy_policy_link)
  return _s;
}
inline const ::std::string& ConfigSupport::_internal_privacy_policy_link() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.privacy_policy_link_.Get();
}
inline void ConfigSupport::_internal_set_privacy_policy_link(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.privacy_policy_link_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSupport::_internal_mutable_privacy_policy_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.privacy_policy_link_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSupport::release_privacy_policy_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSupport.privacy_policy_link)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.privacy_policy_link_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.privacy_policy_link_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSupport::set_allocated_privacy_policy_link(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.privacy_policy_link_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.privacy_policy_link_.IsDefault()) {
    _impl_.privacy_policy_link_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSupport.privacy_policy_link)
}

// optional string about_link = 3 [json_name = "aboutLink"];
inline bool ConfigSupport::has_about_link() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ConfigSupport::clear_about_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.about_link_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& ConfigSupport::about_link() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSupport.about_link)
  return _internal_about_link();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSupport::set_about_link(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.about_link_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSupport.about_link)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSupport::mutable_about_link()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_about_link();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSupport.about_link)
  return _s;
}
inline const ::std::string& ConfigSupport::_internal_about_link() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.about_link_.Get();
}
inline void ConfigSupport::_internal_set_about_link(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.about_link_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSupport::_internal_mutable_about_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.about_link_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSupport::release_about_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSupport.about_link)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.about_link_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.about_link_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSupport::set_allocated_about_link(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.about_link_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.about_link_.IsDefault()) {
    _impl_.about_link_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSupport.about_link)
}

// optional string help_link = 4 [json_name = "helpLink"];
inline bool ConfigSupport::has_help_link() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ConfigSupport::clear_help_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.help_link_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& ConfigSupport::help_link() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSupport.help_link)
  return _internal_help_link();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSupport::set_help_link(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.help_link_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSupport.help_link)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSupport::mutable_help_link()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_help_link();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSupport.help_link)
  return _s;
}
inline const ::std::string& ConfigSupport::_internal_help_link() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.help_link_.Get();
}
inline void ConfigSupport::_internal_set_help_link(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.help_link_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSupport::_internal_mutable_help_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.help_link_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSupport::release_help_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSupport.help_link)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.help_link_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.help_link_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSupport::set_allocated_help_link(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.help_link_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.help_link_.IsDefault()) {
    _impl_.help_link_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSupport.help_link)
}

// optional string report_a_problem_link = 5 [json_name = "reportAProblemLink"];
inline bool ConfigSupport::has_report_a_problem_link() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ConfigSupport::clear_report_a_problem_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.report_a_problem_link_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& ConfigSupport::report_a_problem_link() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSupport.report_a_problem_link)
  return _internal_report_a_problem_link();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSupport::set_report_a_problem_link(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.report_a_problem_link_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSupport.report_a_problem_link)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSupport::mutable_report_a_problem_link()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_report_a_problem_link();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSupport.report_a_problem_link)
  return _s;
}
inline const ::std::string& ConfigSupport::_internal_report_a_problem_link() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.report_a_problem_link_.Get();
}
inline void ConfigSupport::_internal_set_report_a_problem_link(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.report_a_problem_link_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSupport::_internal_mutable_report_a_problem_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.report_a_problem_link_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSupport::release_report_a_problem_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSupport.report_a_problem_link)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.report_a_problem_link_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.report_a_problem_link_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSupport::set_allocated_report_a_problem_link(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.report_a_problem_link_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.report_a_problem_link_.IsDefault()) {
    _impl_.report_a_problem_link_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSupport.report_a_problem_link)
}

// optional string forgot_password_link = 6 [json_name = "forgotPasswordLink"];
inline bool ConfigSupport::has_forgot_password_link() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ConfigSupport::clear_forgot_password_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forgot_password_link_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::std::string& ConfigSupport::forgot_password_link() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSupport.forgot_password_link)
  return _internal_forgot_password_link();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSupport::set_forgot_password_link(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.forgot_password_link_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSupport.forgot_password_link)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSupport::mutable_forgot_password_link()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_forgot_password_link();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSupport.forgot_password_link)
  return _s;
}
inline const ::std::string& ConfigSupport::_internal_forgot_password_link() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.forgot_password_link_.Get();
}
inline void ConfigSupport::_internal_set_forgot_password_link(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.forgot_password_link_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSupport::_internal_mutable_forgot_password_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.forgot_password_link_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSupport::release_forgot_password_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSupport.forgot_password_link)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.forgot_password_link_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.forgot_password_link_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSupport::set_allocated_forgot_password_link(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.forgot_password_link_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.forgot_password_link_.IsDefault()) {
    _impl_.forgot_password_link_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSupport.forgot_password_link)
}

// optional string support_email = 7 [json_name = "supportEmail"];
inline bool ConfigSupport::has_support_email() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ConfigSupport::clear_support_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.support_email_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::std::string& ConfigSupport::support_email() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSupport.support_email)
  return _internal_support_email();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSupport::set_support_email(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.support_email_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSupport.support_email)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSupport::mutable_support_email()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_support_email();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSupport.support_email)
  return _s;
}
inline const ::std::string& ConfigSupport::_internal_support_email() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.support_email_.Get();
}
inline void ConfigSupport::_internal_set_support_email(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.support_email_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSupport::_internal_mutable_support_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.support_email_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSupport::release_support_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSupport.support_email)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.support_email_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.support_email_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSupport::set_allocated_support_email(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.support_email_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.support_email_.IsDefault()) {
    _impl_.support_email_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSupport.support_email)
}

// -------------------------------------------------------------------

// ConfigLocalization

// optional string default_server_locale = 1 [json_name = "defaultServerLocale"];
inline bool ConfigLocalization::has_default_server_locale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConfigLocalization::clear_default_server_locale() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_server_locale_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ConfigLocalization::default_server_locale() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLocalization.default_server_locale)
  return _internal_default_server_locale();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLocalization::set_default_server_locale(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.default_server_locale_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLocalization.default_server_locale)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLocalization::mutable_default_server_locale()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_default_server_locale();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLocalization.default_server_locale)
  return _s;
}
inline const ::std::string& ConfigLocalization::_internal_default_server_locale() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.default_server_locale_.Get();
}
inline void ConfigLocalization::_internal_set_default_server_locale(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.default_server_locale_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLocalization::_internal_mutable_default_server_locale() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.default_server_locale_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLocalization::release_default_server_locale() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLocalization.default_server_locale)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.default_server_locale_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.default_server_locale_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLocalization::set_allocated_default_server_locale(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.default_server_locale_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.default_server_locale_.IsDefault()) {
    _impl_.default_server_locale_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLocalization.default_server_locale)
}

// optional string default_client_locale = 2 [json_name = "defaultClientLocale"];
inline bool ConfigLocalization::has_default_client_locale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConfigLocalization::clear_default_client_locale() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_client_locale_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& ConfigLocalization::default_client_locale() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLocalization.default_client_locale)
  return _internal_default_client_locale();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLocalization::set_default_client_locale(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.default_client_locale_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLocalization.default_client_locale)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLocalization::mutable_default_client_locale()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_default_client_locale();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLocalization.default_client_locale)
  return _s;
}
inline const ::std::string& ConfigLocalization::_internal_default_client_locale() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.default_client_locale_.Get();
}
inline void ConfigLocalization::_internal_set_default_client_locale(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.default_client_locale_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLocalization::_internal_mutable_default_client_locale() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.default_client_locale_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLocalization::release_default_client_locale() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLocalization.default_client_locale)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.default_client_locale_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.default_client_locale_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLocalization::set_allocated_default_client_locale(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.default_client_locale_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.default_client_locale_.IsDefault()) {
    _impl_.default_client_locale_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLocalization.default_client_locale)
}

// repeated string available_locales = 3 [json_name = "availableLocales"];
inline int ConfigLocalization::_internal_available_locales_size() const {
  return _internal_available_locales().size();
}
inline int ConfigLocalization::available_locales_size() const {
  return _internal_available_locales_size();
}
inline void ConfigLocalization::clear_available_locales() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.available_locales_.Clear();
}
inline ::std::string* PROTOBUF_NONNULL ConfigLocalization::add_available_locales()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::std::string* _s = _internal_mutable_available_locales()->Add();
  // @@protoc_insertion_point(field_add_mutable:common.v1.ConfigLocalization.available_locales)
  return _s;
}
inline const ::std::string& ConfigLocalization::available_locales(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLocalization.available_locales)
  return _internal_available_locales().Get(index);
}
inline ::std::string* PROTOBUF_NONNULL ConfigLocalization::mutable_available_locales(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLocalization.available_locales)
  return _internal_mutable_available_locales()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ConfigLocalization::set_available_locales(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(*_internal_mutable_available_locales()->Mutable(index), ::std::forward<Arg_>(value),
                        args... );
  // @@protoc_insertion_point(field_set:common.v1.ConfigLocalization.available_locales)
}
template <typename Arg_, typename... Args_>
inline void ConfigLocalization::add_available_locales(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_available_locales(),
                               ::std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:common.v1.ConfigLocalization.available_locales)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>& ConfigLocalization::available_locales()
    const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:common.v1.ConfigLocalization.available_locales)
  return _internal_available_locales();
}
inline ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL
ConfigLocalization::mutable_available_locales() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:common.v1.ConfigLocalization.available_locales)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_available_locales();
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ConfigLocalization::_internal_available_locales() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.available_locales_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL
ConfigLocalization::_internal_mutable_available_locales() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.available_locales_;
}

// -------------------------------------------------------------------

// ConfigLdap

// optional bool enable = 1 [json_name = "enable"];
inline bool ConfigLdap::has_enable() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void ConfigLdap::clear_enable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_ = false;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline bool ConfigLdap::enable() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.enable)
  return _internal_enable();
}
inline void ConfigLdap::set_enable(bool value) {
  _internal_set_enable(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.enable)
}
inline bool ConfigLdap::_internal_enable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_;
}
inline void ConfigLdap::_internal_set_enable(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_ = value;
}

// optional bool enable_sync = 2 [json_name = "enableSync"];
inline bool ConfigLdap::has_enable_sync() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void ConfigLdap::clear_enable_sync() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_sync_ = false;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline bool ConfigLdap::enable_sync() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.enable_sync)
  return _internal_enable_sync();
}
inline void ConfigLdap::set_enable_sync(bool value) {
  _internal_set_enable_sync(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.enable_sync)
}
inline bool ConfigLdap::_internal_enable_sync() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_sync_;
}
inline void ConfigLdap::_internal_set_enable_sync(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_sync_ = value;
}

// optional string ldap_server = 3 [json_name = "ldapServer"];
inline bool ConfigLdap::has_ldap_server() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConfigLdap::clear_ldap_server() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ldap_server_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ConfigLdap::ldap_server() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.ldap_server)
  return _internal_ldap_server();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLdap::set_ldap_server(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ldap_server_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.ldap_server)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::mutable_ldap_server()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_ldap_server();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLdap.ldap_server)
  return _s;
}
inline const ::std::string& ConfigLdap::_internal_ldap_server() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ldap_server_.Get();
}
inline void ConfigLdap::_internal_set_ldap_server(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ldap_server_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::_internal_mutable_ldap_server() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.ldap_server_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLdap::release_ldap_server() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLdap.ldap_server)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.ldap_server_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.ldap_server_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLdap::set_allocated_ldap_server(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ldap_server_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.ldap_server_.IsDefault()) {
    _impl_.ldap_server_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLdap.ldap_server)
}

// optional int32 ldap_port = 4 [json_name = "ldapPort"];
inline bool ConfigLdap::has_ldap_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void ConfigLdap::clear_ldap_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ldap_port_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline ::int32_t ConfigLdap::ldap_port() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.ldap_port)
  return _internal_ldap_port();
}
inline void ConfigLdap::set_ldap_port(::int32_t value) {
  _internal_set_ldap_port(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.ldap_port)
}
inline ::int32_t ConfigLdap::_internal_ldap_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ldap_port_;
}
inline void ConfigLdap::_internal_set_ldap_port(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ldap_port_ = value;
}

// optional string connection_security = 5 [json_name = "connectionSecurity"];
inline bool ConfigLdap::has_connection_security() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConfigLdap::clear_connection_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connection_security_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& ConfigLdap::connection_security() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.connection_security)
  return _internal_connection_security();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLdap::set_connection_security(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.connection_security_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.connection_security)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::mutable_connection_security()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_connection_security();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLdap.connection_security)
  return _s;
}
inline const ::std::string& ConfigLdap::_internal_connection_security() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.connection_security_.Get();
}
inline void ConfigLdap::_internal_set_connection_security(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.connection_security_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::_internal_mutable_connection_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.connection_security_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLdap::release_connection_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLdap.connection_security)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.connection_security_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.connection_security_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLdap::set_allocated_connection_security(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.connection_security_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.connection_security_.IsDefault()) {
    _impl_.connection_security_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLdap.connection_security)
}

// optional string base_dn = 6 [json_name = "baseDn"];
inline bool ConfigLdap::has_base_dn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ConfigLdap::clear_base_dn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_dn_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& ConfigLdap::base_dn() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.base_dn)
  return _internal_base_dn();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLdap::set_base_dn(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.base_dn_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.base_dn)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::mutable_base_dn()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_base_dn();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLdap.base_dn)
  return _s;
}
inline const ::std::string& ConfigLdap::_internal_base_dn() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.base_dn_.Get();
}
inline void ConfigLdap::_internal_set_base_dn(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.base_dn_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::_internal_mutable_base_dn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.base_dn_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLdap::release_base_dn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLdap.base_dn)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.base_dn_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.base_dn_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLdap::set_allocated_base_dn(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.base_dn_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.base_dn_.IsDefault()) {
    _impl_.base_dn_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLdap.base_dn)
}

// optional string bind_username = 7 [json_name = "bindUsername"];
inline bool ConfigLdap::has_bind_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ConfigLdap::clear_bind_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bind_username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& ConfigLdap::bind_username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.bind_username)
  return _internal_bind_username();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLdap::set_bind_username(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.bind_username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.bind_username)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::mutable_bind_username()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_bind_username();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLdap.bind_username)
  return _s;
}
inline const ::std::string& ConfigLdap::_internal_bind_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bind_username_.Get();
}
inline void ConfigLdap::_internal_set_bind_username(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.bind_username_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::_internal_mutable_bind_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.bind_username_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLdap::release_bind_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLdap.bind_username)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.bind_username_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.bind_username_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLdap::set_allocated_bind_username(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.bind_username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.bind_username_.IsDefault()) {
    _impl_.bind_username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLdap.bind_username)
}

// optional string bind_password = 8 [json_name = "bindPassword"];
inline bool ConfigLdap::has_bind_password() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ConfigLdap::clear_bind_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bind_password_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& ConfigLdap::bind_password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.bind_password)
  return _internal_bind_password();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLdap::set_bind_password(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bind_password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.bind_password)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::mutable_bind_password()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_bind_password();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLdap.bind_password)
  return _s;
}
inline const ::std::string& ConfigLdap::_internal_bind_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bind_password_.Get();
}
inline void ConfigLdap::_internal_set_bind_password(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bind_password_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::_internal_mutable_bind_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.bind_password_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLdap::release_bind_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLdap.bind_password)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.bind_password_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.bind_password_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLdap::set_allocated_bind_password(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.bind_password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.bind_password_.IsDefault()) {
    _impl_.bind_password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLdap.bind_password)
}

// optional int32 maximum_login_attempts = 9 [json_name = "maximumLoginAttempts"];
inline bool ConfigLdap::has_maximum_login_attempts() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void ConfigLdap::clear_maximum_login_attempts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maximum_login_attempts_ = 0;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline ::int32_t ConfigLdap::maximum_login_attempts() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.maximum_login_attempts)
  return _internal_maximum_login_attempts();
}
inline void ConfigLdap::set_maximum_login_attempts(::int32_t value) {
  _internal_set_maximum_login_attempts(value);
  _impl_._has_bits_[0] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.maximum_login_attempts)
}
inline ::int32_t ConfigLdap::_internal_maximum_login_attempts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.maximum_login_attempts_;
}
inline void ConfigLdap::_internal_set_maximum_login_attempts(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maximum_login_attempts_ = value;
}

// optional string user_filter = 10 [json_name = "userFilter"];
inline bool ConfigLdap::has_user_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ConfigLdap::clear_user_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_filter_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::std::string& ConfigLdap::user_filter() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.user_filter)
  return _internal_user_filter();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLdap::set_user_filter(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.user_filter_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.user_filter)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::mutable_user_filter()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_user_filter();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLdap.user_filter)
  return _s;
}
inline const ::std::string& ConfigLdap::_internal_user_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_filter_.Get();
}
inline void ConfigLdap::_internal_set_user_filter(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.user_filter_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::_internal_mutable_user_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.user_filter_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLdap::release_user_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLdap.user_filter)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.user_filter_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.user_filter_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLdap::set_allocated_user_filter(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.user_filter_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_filter_.IsDefault()) {
    _impl_.user_filter_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLdap.user_filter)
}

// optional string group_filter = 11 [json_name = "groupFilter"];
inline bool ConfigLdap::has_group_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ConfigLdap::clear_group_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_filter_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::std::string& ConfigLdap::group_filter() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.group_filter)
  return _internal_group_filter();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLdap::set_group_filter(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.group_filter_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.group_filter)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::mutable_group_filter()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_group_filter();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLdap.group_filter)
  return _s;
}
inline const ::std::string& ConfigLdap::_internal_group_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_filter_.Get();
}
inline void ConfigLdap::_internal_set_group_filter(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.group_filter_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::_internal_mutable_group_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.group_filter_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLdap::release_group_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLdap.group_filter)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.group_filter_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.group_filter_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLdap::set_allocated_group_filter(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.group_filter_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.group_filter_.IsDefault()) {
    _impl_.group_filter_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLdap.group_filter)
}

// optional bool enable_admin_filter = 12 [json_name = "enableAdminFilter"];
inline bool ConfigLdap::has_enable_admin_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void ConfigLdap::clear_enable_admin_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_admin_filter_ = false;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline bool ConfigLdap::enable_admin_filter() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.enable_admin_filter)
  return _internal_enable_admin_filter();
}
inline void ConfigLdap::set_enable_admin_filter(bool value) {
  _internal_set_enable_admin_filter(value);
  _impl_._has_bits_[0] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.enable_admin_filter)
}
inline bool ConfigLdap::_internal_enable_admin_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_admin_filter_;
}
inline void ConfigLdap::_internal_set_enable_admin_filter(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_admin_filter_ = value;
}

// optional string admin_filter = 13 [json_name = "adminFilter"];
inline bool ConfigLdap::has_admin_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ConfigLdap::clear_admin_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_filter_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::std::string& ConfigLdap::admin_filter() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.admin_filter)
  return _internal_admin_filter();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLdap::set_admin_filter(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.admin_filter_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.admin_filter)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::mutable_admin_filter()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_admin_filter();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLdap.admin_filter)
  return _s;
}
inline const ::std::string& ConfigLdap::_internal_admin_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.admin_filter_.Get();
}
inline void ConfigLdap::_internal_set_admin_filter(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.admin_filter_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::_internal_mutable_admin_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.admin_filter_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLdap::release_admin_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLdap.admin_filter)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.admin_filter_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.admin_filter_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLdap::set_allocated_admin_filter(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.admin_filter_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.admin_filter_.IsDefault()) {
    _impl_.admin_filter_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLdap.admin_filter)
}

// optional string group_display_name_attribute = 14 [json_name = "groupDisplayNameAttribute"];
inline bool ConfigLdap::has_group_display_name_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void ConfigLdap::clear_group_display_name_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_display_name_attribute_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::std::string& ConfigLdap::group_display_name_attribute() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.group_display_name_attribute)
  return _internal_group_display_name_attribute();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLdap::set_group_display_name_attribute(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.group_display_name_attribute_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.group_display_name_attribute)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::mutable_group_display_name_attribute()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_group_display_name_attribute();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLdap.group_display_name_attribute)
  return _s;
}
inline const ::std::string& ConfigLdap::_internal_group_display_name_attribute() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_display_name_attribute_.Get();
}
inline void ConfigLdap::_internal_set_group_display_name_attribute(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.group_display_name_attribute_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::_internal_mutable_group_display_name_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.group_display_name_attribute_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLdap::release_group_display_name_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLdap.group_display_name_attribute)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.group_display_name_attribute_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.group_display_name_attribute_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLdap::set_allocated_group_display_name_attribute(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.group_display_name_attribute_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.group_display_name_attribute_.IsDefault()) {
    _impl_.group_display_name_attribute_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLdap.group_display_name_attribute)
}

// optional string group_id_attribute = 15 [json_name = "groupIdAttribute"];
inline bool ConfigLdap::has_group_id_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void ConfigLdap::clear_group_id_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_attribute_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::std::string& ConfigLdap::group_id_attribute() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.group_id_attribute)
  return _internal_group_id_attribute();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLdap::set_group_id_attribute(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.group_id_attribute_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.group_id_attribute)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::mutable_group_id_attribute()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_group_id_attribute();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLdap.group_id_attribute)
  return _s;
}
inline const ::std::string& ConfigLdap::_internal_group_id_attribute() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_id_attribute_.Get();
}
inline void ConfigLdap::_internal_set_group_id_attribute(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.group_id_attribute_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::_internal_mutable_group_id_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.group_id_attribute_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLdap::release_group_id_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLdap.group_id_attribute)
  if ((_impl_._has_bits_[0] & 0x00000200u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* released = _impl_.group_id_attribute_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.group_id_attribute_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLdap::set_allocated_group_id_attribute(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.group_id_attribute_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.group_id_attribute_.IsDefault()) {
    _impl_.group_id_attribute_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLdap.group_id_attribute)
}

// optional string first_name_attribute = 16 [json_name = "firstNameAttribute"];
inline bool ConfigLdap::has_first_name_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void ConfigLdap::clear_first_name_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.first_name_attribute_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::std::string& ConfigLdap::first_name_attribute() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.first_name_attribute)
  return _internal_first_name_attribute();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLdap::set_first_name_attribute(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.first_name_attribute_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.first_name_attribute)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::mutable_first_name_attribute()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_first_name_attribute();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLdap.first_name_attribute)
  return _s;
}
inline const ::std::string& ConfigLdap::_internal_first_name_attribute() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.first_name_attribute_.Get();
}
inline void ConfigLdap::_internal_set_first_name_attribute(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.first_name_attribute_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::_internal_mutable_first_name_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.first_name_attribute_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLdap::release_first_name_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLdap.first_name_attribute)
  if ((_impl_._has_bits_[0] & 0x00000400u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* released = _impl_.first_name_attribute_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.first_name_attribute_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLdap::set_allocated_first_name_attribute(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.first_name_attribute_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.first_name_attribute_.IsDefault()) {
    _impl_.first_name_attribute_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLdap.first_name_attribute)
}

// optional string last_name_attribute = 17 [json_name = "lastNameAttribute"];
inline bool ConfigLdap::has_last_name_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void ConfigLdap::clear_last_name_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_name_attribute_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::std::string& ConfigLdap::last_name_attribute() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.last_name_attribute)
  return _internal_last_name_attribute();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLdap::set_last_name_attribute(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.last_name_attribute_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.last_name_attribute)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::mutable_last_name_attribute()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_last_name_attribute();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLdap.last_name_attribute)
  return _s;
}
inline const ::std::string& ConfigLdap::_internal_last_name_attribute() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_name_attribute_.Get();
}
inline void ConfigLdap::_internal_set_last_name_attribute(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.last_name_attribute_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::_internal_mutable_last_name_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  return _impl_.last_name_attribute_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLdap::release_last_name_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLdap.last_name_attribute)
  if ((_impl_._has_bits_[0] & 0x00000800u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000800u;
  auto* released = _impl_.last_name_attribute_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.last_name_attribute_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLdap::set_allocated_last_name_attribute(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.last_name_attribute_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_name_attribute_.IsDefault()) {
    _impl_.last_name_attribute_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLdap.last_name_attribute)
}

// optional string email_attribute = 18 [json_name = "emailAttribute"];
inline bool ConfigLdap::has_email_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void ConfigLdap::clear_email_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_attribute_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::std::string& ConfigLdap::email_attribute() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.email_attribute)
  return _internal_email_attribute();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLdap::set_email_attribute(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.email_attribute_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.email_attribute)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::mutable_email_attribute()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_email_attribute();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLdap.email_attribute)
  return _s;
}
inline const ::std::string& ConfigLdap::_internal_email_attribute() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.email_attribute_.Get();
}
inline void ConfigLdap::_internal_set_email_attribute(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.email_attribute_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::_internal_mutable_email_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  return _impl_.email_attribute_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLdap::release_email_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLdap.email_attribute)
  if ((_impl_._has_bits_[0] & 0x00001000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00001000u;
  auto* released = _impl_.email_attribute_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.email_attribute_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLdap::set_allocated_email_attribute(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.email_attribute_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.email_attribute_.IsDefault()) {
    _impl_.email_attribute_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLdap.email_attribute)
}

// optional string username_attribute = 19 [json_name = "usernameAttribute"];
inline bool ConfigLdap::has_username_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void ConfigLdap::clear_username_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_attribute_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const ::std::string& ConfigLdap::username_attribute() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.username_attribute)
  return _internal_username_attribute();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLdap::set_username_attribute(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.username_attribute_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.username_attribute)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::mutable_username_attribute()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_username_attribute();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLdap.username_attribute)
  return _s;
}
inline const ::std::string& ConfigLdap::_internal_username_attribute() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_attribute_.Get();
}
inline void ConfigLdap::_internal_set_username_attribute(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.username_attribute_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::_internal_mutable_username_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  return _impl_.username_attribute_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLdap::release_username_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLdap.username_attribute)
  if ((_impl_._has_bits_[0] & 0x00002000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00002000u;
  auto* released = _impl_.username_attribute_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.username_attribute_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLdap::set_allocated_username_attribute(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.username_attribute_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.username_attribute_.IsDefault()) {
    _impl_.username_attribute_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLdap.username_attribute)
}

// optional string nickname_attribute = 20 [json_name = "nicknameAttribute"];
inline bool ConfigLdap::has_nickname_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void ConfigLdap::clear_nickname_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nickname_attribute_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const ::std::string& ConfigLdap::nickname_attribute() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.nickname_attribute)
  return _internal_nickname_attribute();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLdap::set_nickname_attribute(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.nickname_attribute_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.nickname_attribute)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::mutable_nickname_attribute()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_nickname_attribute();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLdap.nickname_attribute)
  return _s;
}
inline const ::std::string& ConfigLdap::_internal_nickname_attribute() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nickname_attribute_.Get();
}
inline void ConfigLdap::_internal_set_nickname_attribute(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.nickname_attribute_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::_internal_mutable_nickname_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  return _impl_.nickname_attribute_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLdap::release_nickname_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLdap.nickname_attribute)
  if ((_impl_._has_bits_[0] & 0x00004000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00004000u;
  auto* released = _impl_.nickname_attribute_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.nickname_attribute_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLdap::set_allocated_nickname_attribute(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.nickname_attribute_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.nickname_attribute_.IsDefault()) {
    _impl_.nickname_attribute_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLdap.nickname_attribute)
}

// optional string id_attribute = 21 [json_name = "idAttribute"];
inline bool ConfigLdap::has_id_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void ConfigLdap::clear_id_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_attribute_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const ::std::string& ConfigLdap::id_attribute() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.id_attribute)
  return _internal_id_attribute();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLdap::set_id_attribute(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.id_attribute_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.id_attribute)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::mutable_id_attribute()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_id_attribute();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLdap.id_attribute)
  return _s;
}
inline const ::std::string& ConfigLdap::_internal_id_attribute() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_attribute_.Get();
}
inline void ConfigLdap::_internal_set_id_attribute(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.id_attribute_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::_internal_mutable_id_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  return _impl_.id_attribute_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLdap::release_id_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLdap.id_attribute)
  if ((_impl_._has_bits_[0] & 0x00008000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00008000u;
  auto* released = _impl_.id_attribute_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.id_attribute_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLdap::set_allocated_id_attribute(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.id_attribute_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_attribute_.IsDefault()) {
    _impl_.id_attribute_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLdap.id_attribute)
}

// optional string position_attribute = 22 [json_name = "positionAttribute"];
inline bool ConfigLdap::has_position_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void ConfigLdap::clear_position_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_attribute_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline const ::std::string& ConfigLdap::position_attribute() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.position_attribute)
  return _internal_position_attribute();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLdap::set_position_attribute(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.position_attribute_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.position_attribute)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::mutable_position_attribute()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_position_attribute();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLdap.position_attribute)
  return _s;
}
inline const ::std::string& ConfigLdap::_internal_position_attribute() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.position_attribute_.Get();
}
inline void ConfigLdap::_internal_set_position_attribute(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.position_attribute_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::_internal_mutable_position_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  return _impl_.position_attribute_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLdap::release_position_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLdap.position_attribute)
  if ((_impl_._has_bits_[0] & 0x00010000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00010000u;
  auto* released = _impl_.position_attribute_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.position_attribute_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLdap::set_allocated_position_attribute(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.position_attribute_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.position_attribute_.IsDefault()) {
    _impl_.position_attribute_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLdap.position_attribute)
}

// optional string login_id_attribute = 23 [json_name = "loginIdAttribute"];
inline bool ConfigLdap::has_login_id_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void ConfigLdap::clear_login_id_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.login_id_attribute_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline const ::std::string& ConfigLdap::login_id_attribute() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.login_id_attribute)
  return _internal_login_id_attribute();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLdap::set_login_id_attribute(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.login_id_attribute_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.login_id_attribute)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::mutable_login_id_attribute()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_login_id_attribute();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLdap.login_id_attribute)
  return _s;
}
inline const ::std::string& ConfigLdap::_internal_login_id_attribute() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.login_id_attribute_.Get();
}
inline void ConfigLdap::_internal_set_login_id_attribute(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.login_id_attribute_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::_internal_mutable_login_id_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00020000u;
  return _impl_.login_id_attribute_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLdap::release_login_id_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLdap.login_id_attribute)
  if ((_impl_._has_bits_[0] & 0x00020000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00020000u;
  auto* released = _impl_.login_id_attribute_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.login_id_attribute_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLdap::set_allocated_login_id_attribute(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.login_id_attribute_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.login_id_attribute_.IsDefault()) {
    _impl_.login_id_attribute_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLdap.login_id_attribute)
}

// optional string picture_attribute = 24 [json_name = "pictureAttribute"];
inline bool ConfigLdap::has_picture_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void ConfigLdap::clear_picture_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.picture_attribute_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline const ::std::string& ConfigLdap::picture_attribute() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.picture_attribute)
  return _internal_picture_attribute();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLdap::set_picture_attribute(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.picture_attribute_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.picture_attribute)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::mutable_picture_attribute()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_picture_attribute();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLdap.picture_attribute)
  return _s;
}
inline const ::std::string& ConfigLdap::_internal_picture_attribute() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.picture_attribute_.Get();
}
inline void ConfigLdap::_internal_set_picture_attribute(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.picture_attribute_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::_internal_mutable_picture_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00040000u;
  return _impl_.picture_attribute_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLdap::release_picture_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLdap.picture_attribute)
  if ((_impl_._has_bits_[0] & 0x00040000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00040000u;
  auto* released = _impl_.picture_attribute_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.picture_attribute_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLdap::set_allocated_picture_attribute(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  _impl_.picture_attribute_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.picture_attribute_.IsDefault()) {
    _impl_.picture_attribute_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLdap.picture_attribute)
}

// optional int32 sync_interval_minutes = 25 [json_name = "syncIntervalMinutes"];
inline bool ConfigLdap::has_sync_interval_minutes() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void ConfigLdap::clear_sync_interval_minutes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sync_interval_minutes_ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline ::int32_t ConfigLdap::sync_interval_minutes() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.sync_interval_minutes)
  return _internal_sync_interval_minutes();
}
inline void ConfigLdap::set_sync_interval_minutes(::int32_t value) {
  _internal_set_sync_interval_minutes(value);
  _impl_._has_bits_[0] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.sync_interval_minutes)
}
inline ::int32_t ConfigLdap::_internal_sync_interval_minutes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sync_interval_minutes_;
}
inline void ConfigLdap::_internal_set_sync_interval_minutes(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sync_interval_minutes_ = value;
}

// optional int32 query_timeout = 26 [json_name = "queryTimeout"];
inline bool ConfigLdap::has_query_timeout() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void ConfigLdap::clear_query_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.query_timeout_ = 0;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline ::int32_t ConfigLdap::query_timeout() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.query_timeout)
  return _internal_query_timeout();
}
inline void ConfigLdap::set_query_timeout(::int32_t value) {
  _internal_set_query_timeout(value);
  _impl_._has_bits_[0] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.query_timeout)
}
inline ::int32_t ConfigLdap::_internal_query_timeout() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.query_timeout_;
}
inline void ConfigLdap::_internal_set_query_timeout(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.query_timeout_ = value;
}

// optional int32 max_page_size = 27 [json_name = "maxPageSize"];
inline bool ConfigLdap::has_max_page_size() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void ConfigLdap::clear_max_page_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_page_size_ = 0;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline ::int32_t ConfigLdap::max_page_size() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.max_page_size)
  return _internal_max_page_size();
}
inline void ConfigLdap::set_max_page_size(::int32_t value) {
  _internal_set_max_page_size(value);
  _impl_._has_bits_[0] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.max_page_size)
}
inline ::int32_t ConfigLdap::_internal_max_page_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_page_size_;
}
inline void ConfigLdap::_internal_set_max_page_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_page_size_ = value;
}

// optional string login_field_name = 28 [json_name = "loginFieldName"];
inline bool ConfigLdap::has_login_field_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void ConfigLdap::clear_login_field_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.login_field_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline const ::std::string& ConfigLdap::login_field_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.login_field_name)
  return _internal_login_field_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLdap::set_login_field_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.login_field_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.login_field_name)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::mutable_login_field_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_login_field_name();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLdap.login_field_name)
  return _s;
}
inline const ::std::string& ConfigLdap::_internal_login_field_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.login_field_name_.Get();
}
inline void ConfigLdap::_internal_set_login_field_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.login_field_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::_internal_mutable_login_field_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00080000u;
  return _impl_.login_field_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLdap::release_login_field_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLdap.login_field_name)
  if ((_impl_._has_bits_[0] & 0x00080000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00080000u;
  auto* released = _impl_.login_field_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.login_field_name_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLdap::set_allocated_login_field_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  _impl_.login_field_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.login_field_name_.IsDefault()) {
    _impl_.login_field_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLdap.login_field_name)
}

// optional string login_button_color = 29 [json_name = "loginButtonColor"];
inline bool ConfigLdap::has_login_button_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void ConfigLdap::clear_login_button_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.login_button_color_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline const ::std::string& ConfigLdap::login_button_color() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.login_button_color)
  return _internal_login_button_color();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLdap::set_login_button_color(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.login_button_color_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.login_button_color)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::mutable_login_button_color()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_login_button_color();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLdap.login_button_color)
  return _s;
}
inline const ::std::string& ConfigLdap::_internal_login_button_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.login_button_color_.Get();
}
inline void ConfigLdap::_internal_set_login_button_color(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.login_button_color_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::_internal_mutable_login_button_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00100000u;
  return _impl_.login_button_color_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLdap::release_login_button_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLdap.login_button_color)
  if ((_impl_._has_bits_[0] & 0x00100000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00100000u;
  auto* released = _impl_.login_button_color_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.login_button_color_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLdap::set_allocated_login_button_color(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  _impl_.login_button_color_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.login_button_color_.IsDefault()) {
    _impl_.login_button_color_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLdap.login_button_color)
}

// optional string login_button_border_color = 30 [json_name = "loginButtonBorderColor"];
inline bool ConfigLdap::has_login_button_border_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void ConfigLdap::clear_login_button_border_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.login_button_border_color_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline const ::std::string& ConfigLdap::login_button_border_color() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.login_button_border_color)
  return _internal_login_button_border_color();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLdap::set_login_button_border_color(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.login_button_border_color_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.login_button_border_color)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::mutable_login_button_border_color()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_login_button_border_color();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLdap.login_button_border_color)
  return _s;
}
inline const ::std::string& ConfigLdap::_internal_login_button_border_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.login_button_border_color_.Get();
}
inline void ConfigLdap::_internal_set_login_button_border_color(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.login_button_border_color_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::_internal_mutable_login_button_border_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00200000u;
  return _impl_.login_button_border_color_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLdap::release_login_button_border_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLdap.login_button_border_color)
  if ((_impl_._has_bits_[0] & 0x00200000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00200000u;
  auto* released = _impl_.login_button_border_color_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.login_button_border_color_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLdap::set_allocated_login_button_border_color(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  _impl_.login_button_border_color_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.login_button_border_color_.IsDefault()) {
    _impl_.login_button_border_color_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLdap.login_button_border_color)
}

// optional string login_button_text_color = 31 [json_name = "loginButtonTextColor"];
inline bool ConfigLdap::has_login_button_text_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void ConfigLdap::clear_login_button_text_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.login_button_text_color_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline const ::std::string& ConfigLdap::login_button_text_color() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigLdap.login_button_text_color)
  return _internal_login_button_text_color();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigLdap::set_login_button_text_color(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.login_button_text_color_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigLdap.login_button_text_color)
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::mutable_login_button_text_color()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_login_button_text_color();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigLdap.login_button_text_color)
  return _s;
}
inline const ::std::string& ConfigLdap::_internal_login_button_text_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.login_button_text_color_.Get();
}
inline void ConfigLdap::_internal_set_login_button_text_color(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.login_button_text_color_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigLdap::_internal_mutable_login_button_text_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00400000u;
  return _impl_.login_button_text_color_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigLdap::release_login_button_text_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigLdap.login_button_text_color)
  if ((_impl_._has_bits_[0] & 0x00400000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00400000u;
  auto* released = _impl_.login_button_text_color_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.login_button_text_color_.Set("", GetArena());
  }
  return released;
}
inline void ConfigLdap::set_allocated_login_button_text_color(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  _impl_.login_button_text_color_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.login_button_text_color_.IsDefault()) {
    _impl_.login_button_text_color_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigLdap.login_button_text_color)
}

// -------------------------------------------------------------------

// ConfigSaml

// optional bool enable = 1 [json_name = "enable"];
inline bool ConfigSaml::has_enable() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void ConfigSaml::clear_enable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_ = false;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline bool ConfigSaml::enable() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.enable)
  return _internal_enable();
}
inline void ConfigSaml::set_enable(bool value) {
  _internal_set_enable(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.enable)
}
inline bool ConfigSaml::_internal_enable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_;
}
inline void ConfigSaml::_internal_set_enable(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_ = value;
}

// optional bool enable_sync_with_ldap = 2 [json_name = "enableSyncWithLdap"];
inline bool ConfigSaml::has_enable_sync_with_ldap() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void ConfigSaml::clear_enable_sync_with_ldap() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_sync_with_ldap_ = false;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline bool ConfigSaml::enable_sync_with_ldap() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.enable_sync_with_ldap)
  return _internal_enable_sync_with_ldap();
}
inline void ConfigSaml::set_enable_sync_with_ldap(bool value) {
  _internal_set_enable_sync_with_ldap(value);
  _impl_._has_bits_[0] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.enable_sync_with_ldap)
}
inline bool ConfigSaml::_internal_enable_sync_with_ldap() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_sync_with_ldap_;
}
inline void ConfigSaml::_internal_set_enable_sync_with_ldap(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_sync_with_ldap_ = value;
}

// optional bool enable_sync_with_ldap_include_auth = 3 [json_name = "enableSyncWithLdapIncludeAuth"];
inline bool ConfigSaml::has_enable_sync_with_ldap_include_auth() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void ConfigSaml::clear_enable_sync_with_ldap_include_auth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_sync_with_ldap_include_auth_ = false;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline bool ConfigSaml::enable_sync_with_ldap_include_auth() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.enable_sync_with_ldap_include_auth)
  return _internal_enable_sync_with_ldap_include_auth();
}
inline void ConfigSaml::set_enable_sync_with_ldap_include_auth(bool value) {
  _internal_set_enable_sync_with_ldap_include_auth(value);
  _impl_._has_bits_[0] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.enable_sync_with_ldap_include_auth)
}
inline bool ConfigSaml::_internal_enable_sync_with_ldap_include_auth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_sync_with_ldap_include_auth_;
}
inline void ConfigSaml::_internal_set_enable_sync_with_ldap_include_auth(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_sync_with_ldap_include_auth_ = value;
}

// optional bool ignore_guests_ldap_sync = 4 [json_name = "ignoreGuestsLdapSync"];
inline bool ConfigSaml::has_ignore_guests_ldap_sync() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void ConfigSaml::clear_ignore_guests_ldap_sync() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ignore_guests_ldap_sync_ = false;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline bool ConfigSaml::ignore_guests_ldap_sync() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.ignore_guests_ldap_sync)
  return _internal_ignore_guests_ldap_sync();
}
inline void ConfigSaml::set_ignore_guests_ldap_sync(bool value) {
  _internal_set_ignore_guests_ldap_sync(value);
  _impl_._has_bits_[0] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.ignore_guests_ldap_sync)
}
inline bool ConfigSaml::_internal_ignore_guests_ldap_sync() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ignore_guests_ldap_sync_;
}
inline void ConfigSaml::_internal_set_ignore_guests_ldap_sync(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ignore_guests_ldap_sync_ = value;
}

// optional bool verify = 5 [json_name = "verify"];
inline bool ConfigSaml::has_verify() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void ConfigSaml::clear_verify() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.verify_ = false;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline bool ConfigSaml::verify() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.verify)
  return _internal_verify();
}
inline void ConfigSaml::set_verify(bool value) {
  _internal_set_verify(value);
  _impl_._has_bits_[0] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.verify)
}
inline bool ConfigSaml::_internal_verify() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.verify_;
}
inline void ConfigSaml::_internal_set_verify(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.verify_ = value;
}

// optional bool encrypt = 6 [json_name = "encrypt"];
inline bool ConfigSaml::has_encrypt() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void ConfigSaml::clear_encrypt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypt_ = false;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline bool ConfigSaml::encrypt() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.encrypt)
  return _internal_encrypt();
}
inline void ConfigSaml::set_encrypt(bool value) {
  _internal_set_encrypt(value);
  _impl_._has_bits_[0] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.encrypt)
}
inline bool ConfigSaml::_internal_encrypt() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.encrypt_;
}
inline void ConfigSaml::_internal_set_encrypt(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypt_ = value;
}

// optional bool sign_request = 7 [json_name = "signRequest"];
inline bool ConfigSaml::has_sign_request() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void ConfigSaml::clear_sign_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sign_request_ = false;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline bool ConfigSaml::sign_request() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.sign_request)
  return _internal_sign_request();
}
inline void ConfigSaml::set_sign_request(bool value) {
  _internal_set_sign_request(value);
  _impl_._has_bits_[0] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.sign_request)
}
inline bool ConfigSaml::_internal_sign_request() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sign_request_;
}
inline void ConfigSaml::_internal_set_sign_request(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sign_request_ = value;
}

// optional string idp_url = 8 [json_name = "idpUrl"];
inline bool ConfigSaml::has_idp_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConfigSaml::clear_idp_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.idp_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ConfigSaml::idp_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.idp_url)
  return _internal_idp_url();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_idp_url(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.idp_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.idp_url)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_idp_url()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_idp_url();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.idp_url)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_idp_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.idp_url_.Get();
}
inline void ConfigSaml::_internal_set_idp_url(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.idp_url_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_idp_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.idp_url_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_idp_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.idp_url)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.idp_url_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.idp_url_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_idp_url(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.idp_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.idp_url_.IsDefault()) {
    _impl_.idp_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.idp_url)
}

// optional string idp_descriptor_url = 9 [json_name = "idpDescriptorUrl"];
inline bool ConfigSaml::has_idp_descriptor_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConfigSaml::clear_idp_descriptor_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.idp_descriptor_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& ConfigSaml::idp_descriptor_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.idp_descriptor_url)
  return _internal_idp_descriptor_url();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_idp_descriptor_url(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.idp_descriptor_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.idp_descriptor_url)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_idp_descriptor_url()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_idp_descriptor_url();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.idp_descriptor_url)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_idp_descriptor_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.idp_descriptor_url_.Get();
}
inline void ConfigSaml::_internal_set_idp_descriptor_url(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.idp_descriptor_url_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_idp_descriptor_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.idp_descriptor_url_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_idp_descriptor_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.idp_descriptor_url)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.idp_descriptor_url_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.idp_descriptor_url_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_idp_descriptor_url(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.idp_descriptor_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.idp_descriptor_url_.IsDefault()) {
    _impl_.idp_descriptor_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.idp_descriptor_url)
}

// optional string idp_metadata_url = 10 [json_name = "idpMetadataUrl"];
inline bool ConfigSaml::has_idp_metadata_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ConfigSaml::clear_idp_metadata_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.idp_metadata_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& ConfigSaml::idp_metadata_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.idp_metadata_url)
  return _internal_idp_metadata_url();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_idp_metadata_url(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.idp_metadata_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.idp_metadata_url)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_idp_metadata_url()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_idp_metadata_url();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.idp_metadata_url)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_idp_metadata_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.idp_metadata_url_.Get();
}
inline void ConfigSaml::_internal_set_idp_metadata_url(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.idp_metadata_url_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_idp_metadata_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.idp_metadata_url_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_idp_metadata_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.idp_metadata_url)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.idp_metadata_url_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.idp_metadata_url_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_idp_metadata_url(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.idp_metadata_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.idp_metadata_url_.IsDefault()) {
    _impl_.idp_metadata_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.idp_metadata_url)
}

// optional string service_provider_identifier = 11 [json_name = "serviceProviderIdentifier"];
inline bool ConfigSaml::has_service_provider_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ConfigSaml::clear_service_provider_identifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_provider_identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& ConfigSaml::service_provider_identifier() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.service_provider_identifier)
  return _internal_service_provider_identifier();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_service_provider_identifier(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.service_provider_identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.service_provider_identifier)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_service_provider_identifier()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_service_provider_identifier();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.service_provider_identifier)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_service_provider_identifier() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.service_provider_identifier_.Get();
}
inline void ConfigSaml::_internal_set_service_provider_identifier(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.service_provider_identifier_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_service_provider_identifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.service_provider_identifier_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_service_provider_identifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.service_provider_identifier)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.service_provider_identifier_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.service_provider_identifier_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_service_provider_identifier(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.service_provider_identifier_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.service_provider_identifier_.IsDefault()) {
    _impl_.service_provider_identifier_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.service_provider_identifier)
}

// optional string assertion_consumer_service_url = 12 [json_name = "assertionConsumerServiceUrl"];
inline bool ConfigSaml::has_assertion_consumer_service_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ConfigSaml::clear_assertion_consumer_service_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.assertion_consumer_service_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& ConfigSaml::assertion_consumer_service_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.assertion_consumer_service_url)
  return _internal_assertion_consumer_service_url();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_assertion_consumer_service_url(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.assertion_consumer_service_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.assertion_consumer_service_url)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_assertion_consumer_service_url()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_assertion_consumer_service_url();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.assertion_consumer_service_url)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_assertion_consumer_service_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.assertion_consumer_service_url_.Get();
}
inline void ConfigSaml::_internal_set_assertion_consumer_service_url(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.assertion_consumer_service_url_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_assertion_consumer_service_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.assertion_consumer_service_url_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_assertion_consumer_service_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.assertion_consumer_service_url)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.assertion_consumer_service_url_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.assertion_consumer_service_url_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_assertion_consumer_service_url(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.assertion_consumer_service_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.assertion_consumer_service_url_.IsDefault()) {
    _impl_.assertion_consumer_service_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.assertion_consumer_service_url)
}

// optional string signature_algorithm = 13 [json_name = "signatureAlgorithm"];
inline bool ConfigSaml::has_signature_algorithm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ConfigSaml::clear_signature_algorithm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_algorithm_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::std::string& ConfigSaml::signature_algorithm() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.signature_algorithm)
  return _internal_signature_algorithm();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_signature_algorithm(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.signature_algorithm_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.signature_algorithm)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_signature_algorithm()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_signature_algorithm();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.signature_algorithm)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_signature_algorithm() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.signature_algorithm_.Get();
}
inline void ConfigSaml::_internal_set_signature_algorithm(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.signature_algorithm_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_signature_algorithm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.signature_algorithm_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_signature_algorithm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.signature_algorithm)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.signature_algorithm_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.signature_algorithm_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_signature_algorithm(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.signature_algorithm_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.signature_algorithm_.IsDefault()) {
    _impl_.signature_algorithm_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.signature_algorithm)
}

// optional string canonical_algorithm = 14 [json_name = "canonicalAlgorithm"];
inline bool ConfigSaml::has_canonical_algorithm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ConfigSaml::clear_canonical_algorithm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.canonical_algorithm_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::std::string& ConfigSaml::canonical_algorithm() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.canonical_algorithm)
  return _internal_canonical_algorithm();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_canonical_algorithm(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.canonical_algorithm_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.canonical_algorithm)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_canonical_algorithm()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_canonical_algorithm();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.canonical_algorithm)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_canonical_algorithm() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.canonical_algorithm_.Get();
}
inline void ConfigSaml::_internal_set_canonical_algorithm(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.canonical_algorithm_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_canonical_algorithm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.canonical_algorithm_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_canonical_algorithm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.canonical_algorithm)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.canonical_algorithm_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.canonical_algorithm_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_canonical_algorithm(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.canonical_algorithm_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.canonical_algorithm_.IsDefault()) {
    _impl_.canonical_algorithm_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.canonical_algorithm)
}

// optional string scoping_idp_provider_id = 15 [json_name = "scopingIdpProviderId"];
inline bool ConfigSaml::has_scoping_idp_provider_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ConfigSaml::clear_scoping_idp_provider_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scoping_idp_provider_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::std::string& ConfigSaml::scoping_idp_provider_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.scoping_idp_provider_id)
  return _internal_scoping_idp_provider_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_scoping_idp_provider_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.scoping_idp_provider_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.scoping_idp_provider_id)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_scoping_idp_provider_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_scoping_idp_provider_id();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.scoping_idp_provider_id)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_scoping_idp_provider_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scoping_idp_provider_id_.Get();
}
inline void ConfigSaml::_internal_set_scoping_idp_provider_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.scoping_idp_provider_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_scoping_idp_provider_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.scoping_idp_provider_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_scoping_idp_provider_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.scoping_idp_provider_id)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.scoping_idp_provider_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.scoping_idp_provider_id_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_scoping_idp_provider_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.scoping_idp_provider_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.scoping_idp_provider_id_.IsDefault()) {
    _impl_.scoping_idp_provider_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.scoping_idp_provider_id)
}

// optional string scoping_idp_name = 16 [json_name = "scopingIdpName"];
inline bool ConfigSaml::has_scoping_idp_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void ConfigSaml::clear_scoping_idp_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scoping_idp_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::std::string& ConfigSaml::scoping_idp_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.scoping_idp_name)
  return _internal_scoping_idp_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_scoping_idp_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.scoping_idp_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.scoping_idp_name)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_scoping_idp_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_scoping_idp_name();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.scoping_idp_name)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_scoping_idp_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scoping_idp_name_.Get();
}
inline void ConfigSaml::_internal_set_scoping_idp_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.scoping_idp_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_scoping_idp_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.scoping_idp_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_scoping_idp_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.scoping_idp_name)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.scoping_idp_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.scoping_idp_name_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_scoping_idp_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.scoping_idp_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.scoping_idp_name_.IsDefault()) {
    _impl_.scoping_idp_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.scoping_idp_name)
}

// optional string idp_certificate_file = 17 [json_name = "idpCertificateFile"];
inline bool ConfigSaml::has_idp_certificate_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void ConfigSaml::clear_idp_certificate_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.idp_certificate_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::std::string& ConfigSaml::idp_certificate_file() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.idp_certificate_file)
  return _internal_idp_certificate_file();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_idp_certificate_file(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.idp_certificate_file_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.idp_certificate_file)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_idp_certificate_file()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_idp_certificate_file();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.idp_certificate_file)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_idp_certificate_file() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.idp_certificate_file_.Get();
}
inline void ConfigSaml::_internal_set_idp_certificate_file(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.idp_certificate_file_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_idp_certificate_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.idp_certificate_file_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_idp_certificate_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.idp_certificate_file)
  if ((_impl_._has_bits_[0] & 0x00000200u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* released = _impl_.idp_certificate_file_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.idp_certificate_file_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_idp_certificate_file(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.idp_certificate_file_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.idp_certificate_file_.IsDefault()) {
    _impl_.idp_certificate_file_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.idp_certificate_file)
}

// optional string public_certificate_file = 18 [json_name = "publicCertificateFile"];
inline bool ConfigSaml::has_public_certificate_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void ConfigSaml::clear_public_certificate_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.public_certificate_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::std::string& ConfigSaml::public_certificate_file() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.public_certificate_file)
  return _internal_public_certificate_file();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_public_certificate_file(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.public_certificate_file_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.public_certificate_file)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_public_certificate_file()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_public_certificate_file();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.public_certificate_file)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_public_certificate_file() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.public_certificate_file_.Get();
}
inline void ConfigSaml::_internal_set_public_certificate_file(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.public_certificate_file_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_public_certificate_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.public_certificate_file_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_public_certificate_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.public_certificate_file)
  if ((_impl_._has_bits_[0] & 0x00000400u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* released = _impl_.public_certificate_file_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.public_certificate_file_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_public_certificate_file(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.public_certificate_file_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.public_certificate_file_.IsDefault()) {
    _impl_.public_certificate_file_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.public_certificate_file)
}

// optional string private_key_file = 19 [json_name = "privateKeyFile"];
inline bool ConfigSaml::has_private_key_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void ConfigSaml::clear_private_key_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.private_key_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::std::string& ConfigSaml::private_key_file() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.private_key_file)
  return _internal_private_key_file();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_private_key_file(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.private_key_file_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.private_key_file)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_private_key_file()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_private_key_file();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.private_key_file)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_private_key_file() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.private_key_file_.Get();
}
inline void ConfigSaml::_internal_set_private_key_file(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.private_key_file_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_private_key_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  return _impl_.private_key_file_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_private_key_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.private_key_file)
  if ((_impl_._has_bits_[0] & 0x00000800u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000800u;
  auto* released = _impl_.private_key_file_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.private_key_file_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_private_key_file(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.private_key_file_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.private_key_file_.IsDefault()) {
    _impl_.private_key_file_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.private_key_file)
}

// optional string id_attribute = 20 [json_name = "idAttribute"];
inline bool ConfigSaml::has_id_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void ConfigSaml::clear_id_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_attribute_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::std::string& ConfigSaml::id_attribute() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.id_attribute)
  return _internal_id_attribute();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_id_attribute(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.id_attribute_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.id_attribute)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_id_attribute()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_id_attribute();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.id_attribute)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_id_attribute() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_attribute_.Get();
}
inline void ConfigSaml::_internal_set_id_attribute(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.id_attribute_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_id_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  return _impl_.id_attribute_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_id_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.id_attribute)
  if ((_impl_._has_bits_[0] & 0x00001000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00001000u;
  auto* released = _impl_.id_attribute_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.id_attribute_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_id_attribute(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.id_attribute_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_attribute_.IsDefault()) {
    _impl_.id_attribute_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.id_attribute)
}

// optional bool enable_admin_attribute = 21 [json_name = "enableAdminAttribute"];
inline bool ConfigSaml::has_enable_admin_attribute() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void ConfigSaml::clear_enable_admin_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_admin_attribute_ = false;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline bool ConfigSaml::enable_admin_attribute() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.enable_admin_attribute)
  return _internal_enable_admin_attribute();
}
inline void ConfigSaml::set_enable_admin_attribute(bool value) {
  _internal_set_enable_admin_attribute(value);
  _impl_._has_bits_[1] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.enable_admin_attribute)
}
inline bool ConfigSaml::_internal_enable_admin_attribute() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_admin_attribute_;
}
inline void ConfigSaml::_internal_set_enable_admin_attribute(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_admin_attribute_ = value;
}

// optional string admin_attribute = 22 [json_name = "adminAttribute"];
inline bool ConfigSaml::has_admin_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void ConfigSaml::clear_admin_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_attribute_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const ::std::string& ConfigSaml::admin_attribute() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.admin_attribute)
  return _internal_admin_attribute();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_admin_attribute(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.admin_attribute_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.admin_attribute)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_admin_attribute()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_admin_attribute();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.admin_attribute)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_admin_attribute() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.admin_attribute_.Get();
}
inline void ConfigSaml::_internal_set_admin_attribute(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.admin_attribute_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_admin_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  return _impl_.admin_attribute_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_admin_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.admin_attribute)
  if ((_impl_._has_bits_[0] & 0x00002000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00002000u;
  auto* released = _impl_.admin_attribute_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.admin_attribute_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_admin_attribute(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.admin_attribute_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.admin_attribute_.IsDefault()) {
    _impl_.admin_attribute_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.admin_attribute)
}

// optional string first_name_attribute = 23 [json_name = "firstNameAttribute"];
inline bool ConfigSaml::has_first_name_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void ConfigSaml::clear_first_name_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.first_name_attribute_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const ::std::string& ConfigSaml::first_name_attribute() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.first_name_attribute)
  return _internal_first_name_attribute();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_first_name_attribute(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.first_name_attribute_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.first_name_attribute)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_first_name_attribute()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_first_name_attribute();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.first_name_attribute)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_first_name_attribute() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.first_name_attribute_.Get();
}
inline void ConfigSaml::_internal_set_first_name_attribute(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.first_name_attribute_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_first_name_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  return _impl_.first_name_attribute_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_first_name_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.first_name_attribute)
  if ((_impl_._has_bits_[0] & 0x00004000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00004000u;
  auto* released = _impl_.first_name_attribute_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.first_name_attribute_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_first_name_attribute(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.first_name_attribute_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.first_name_attribute_.IsDefault()) {
    _impl_.first_name_attribute_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.first_name_attribute)
}

// optional string last_name_attribute = 24 [json_name = "lastNameAttribute"];
inline bool ConfigSaml::has_last_name_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void ConfigSaml::clear_last_name_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_name_attribute_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const ::std::string& ConfigSaml::last_name_attribute() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.last_name_attribute)
  return _internal_last_name_attribute();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_last_name_attribute(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.last_name_attribute_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.last_name_attribute)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_last_name_attribute()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_last_name_attribute();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.last_name_attribute)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_last_name_attribute() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_name_attribute_.Get();
}
inline void ConfigSaml::_internal_set_last_name_attribute(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.last_name_attribute_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_last_name_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  return _impl_.last_name_attribute_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_last_name_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.last_name_attribute)
  if ((_impl_._has_bits_[0] & 0x00008000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00008000u;
  auto* released = _impl_.last_name_attribute_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.last_name_attribute_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_last_name_attribute(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.last_name_attribute_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_name_attribute_.IsDefault()) {
    _impl_.last_name_attribute_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.last_name_attribute)
}

// optional string email_attribute = 25 [json_name = "emailAttribute"];
inline bool ConfigSaml::has_email_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void ConfigSaml::clear_email_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_attribute_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline const ::std::string& ConfigSaml::email_attribute() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.email_attribute)
  return _internal_email_attribute();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_email_attribute(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.email_attribute_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.email_attribute)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_email_attribute()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_email_attribute();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.email_attribute)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_email_attribute() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.email_attribute_.Get();
}
inline void ConfigSaml::_internal_set_email_attribute(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.email_attribute_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_email_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  return _impl_.email_attribute_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_email_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.email_attribute)
  if ((_impl_._has_bits_[0] & 0x00010000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00010000u;
  auto* released = _impl_.email_attribute_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.email_attribute_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_email_attribute(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.email_attribute_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.email_attribute_.IsDefault()) {
    _impl_.email_attribute_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.email_attribute)
}

// optional string username_attribute = 26 [json_name = "usernameAttribute"];
inline bool ConfigSaml::has_username_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void ConfigSaml::clear_username_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_attribute_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline const ::std::string& ConfigSaml::username_attribute() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.username_attribute)
  return _internal_username_attribute();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_username_attribute(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.username_attribute_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.username_attribute)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_username_attribute()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_username_attribute();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.username_attribute)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_username_attribute() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_attribute_.Get();
}
inline void ConfigSaml::_internal_set_username_attribute(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.username_attribute_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_username_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00020000u;
  return _impl_.username_attribute_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_username_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.username_attribute)
  if ((_impl_._has_bits_[0] & 0x00020000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00020000u;
  auto* released = _impl_.username_attribute_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.username_attribute_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_username_attribute(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.username_attribute_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.username_attribute_.IsDefault()) {
    _impl_.username_attribute_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.username_attribute)
}

// optional string nickname_attribute = 27 [json_name = "nicknameAttribute"];
inline bool ConfigSaml::has_nickname_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void ConfigSaml::clear_nickname_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nickname_attribute_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline const ::std::string& ConfigSaml::nickname_attribute() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.nickname_attribute)
  return _internal_nickname_attribute();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_nickname_attribute(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.nickname_attribute_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.nickname_attribute)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_nickname_attribute()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_nickname_attribute();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.nickname_attribute)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_nickname_attribute() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nickname_attribute_.Get();
}
inline void ConfigSaml::_internal_set_nickname_attribute(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.nickname_attribute_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_nickname_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00040000u;
  return _impl_.nickname_attribute_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_nickname_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.nickname_attribute)
  if ((_impl_._has_bits_[0] & 0x00040000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00040000u;
  auto* released = _impl_.nickname_attribute_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.nickname_attribute_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_nickname_attribute(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  _impl_.nickname_attribute_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.nickname_attribute_.IsDefault()) {
    _impl_.nickname_attribute_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.nickname_attribute)
}

// optional string locale_attribute = 28 [json_name = "localeAttribute"];
inline bool ConfigSaml::has_locale_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void ConfigSaml::clear_locale_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.locale_attribute_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline const ::std::string& ConfigSaml::locale_attribute() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.locale_attribute)
  return _internal_locale_attribute();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_locale_attribute(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.locale_attribute_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.locale_attribute)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_locale_attribute()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_locale_attribute();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.locale_attribute)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_locale_attribute() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.locale_attribute_.Get();
}
inline void ConfigSaml::_internal_set_locale_attribute(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.locale_attribute_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_locale_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00080000u;
  return _impl_.locale_attribute_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_locale_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.locale_attribute)
  if ((_impl_._has_bits_[0] & 0x00080000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00080000u;
  auto* released = _impl_.locale_attribute_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.locale_attribute_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_locale_attribute(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  _impl_.locale_attribute_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.locale_attribute_.IsDefault()) {
    _impl_.locale_attribute_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.locale_attribute)
}

// optional string position_attribute = 29 [json_name = "positionAttribute"];
inline bool ConfigSaml::has_position_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void ConfigSaml::clear_position_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_attribute_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline const ::std::string& ConfigSaml::position_attribute() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.position_attribute)
  return _internal_position_attribute();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_position_attribute(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.position_attribute_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.position_attribute)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_position_attribute()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_position_attribute();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.position_attribute)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_position_attribute() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.position_attribute_.Get();
}
inline void ConfigSaml::_internal_set_position_attribute(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.position_attribute_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_position_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00100000u;
  return _impl_.position_attribute_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_position_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.position_attribute)
  if ((_impl_._has_bits_[0] & 0x00100000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00100000u;
  auto* released = _impl_.position_attribute_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.position_attribute_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_position_attribute(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  _impl_.position_attribute_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.position_attribute_.IsDefault()) {
    _impl_.position_attribute_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.position_attribute)
}

// optional string login_button_text = 30 [json_name = "loginButtonText"];
inline bool ConfigSaml::has_login_button_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void ConfigSaml::clear_login_button_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.login_button_text_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline const ::std::string& ConfigSaml::login_button_text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.login_button_text)
  return _internal_login_button_text();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_login_button_text(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.login_button_text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.login_button_text)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_login_button_text()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_login_button_text();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.login_button_text)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_login_button_text() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.login_button_text_.Get();
}
inline void ConfigSaml::_internal_set_login_button_text(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.login_button_text_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_login_button_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00200000u;
  return _impl_.login_button_text_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_login_button_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.login_button_text)
  if ((_impl_._has_bits_[0] & 0x00200000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00200000u;
  auto* released = _impl_.login_button_text_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.login_button_text_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_login_button_text(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  _impl_.login_button_text_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.login_button_text_.IsDefault()) {
    _impl_.login_button_text_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.login_button_text)
}

// optional string login_button_color = 31 [json_name = "loginButtonColor"];
inline bool ConfigSaml::has_login_button_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void ConfigSaml::clear_login_button_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.login_button_color_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline const ::std::string& ConfigSaml::login_button_color() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.login_button_color)
  return _internal_login_button_color();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_login_button_color(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.login_button_color_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.login_button_color)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_login_button_color()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_login_button_color();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.login_button_color)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_login_button_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.login_button_color_.Get();
}
inline void ConfigSaml::_internal_set_login_button_color(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.login_button_color_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_login_button_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00400000u;
  return _impl_.login_button_color_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_login_button_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.login_button_color)
  if ((_impl_._has_bits_[0] & 0x00400000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00400000u;
  auto* released = _impl_.login_button_color_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.login_button_color_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_login_button_color(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  _impl_.login_button_color_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.login_button_color_.IsDefault()) {
    _impl_.login_button_color_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.login_button_color)
}

// optional string login_button_border_color = 32 [json_name = "loginButtonBorderColor"];
inline bool ConfigSaml::has_login_button_border_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void ConfigSaml::clear_login_button_border_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.login_button_border_color_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline const ::std::string& ConfigSaml::login_button_border_color() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.login_button_border_color)
  return _internal_login_button_border_color();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_login_button_border_color(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.login_button_border_color_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.login_button_border_color)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_login_button_border_color()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_login_button_border_color();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.login_button_border_color)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_login_button_border_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.login_button_border_color_.Get();
}
inline void ConfigSaml::_internal_set_login_button_border_color(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.login_button_border_color_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_login_button_border_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00800000u;
  return _impl_.login_button_border_color_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_login_button_border_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.login_button_border_color)
  if ((_impl_._has_bits_[0] & 0x00800000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00800000u;
  auto* released = _impl_.login_button_border_color_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.login_button_border_color_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_login_button_border_color(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  _impl_.login_button_border_color_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.login_button_border_color_.IsDefault()) {
    _impl_.login_button_border_color_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.login_button_border_color)
}

// optional string login_button_text_color = 33 [json_name = "loginButtonTextColor"];
inline bool ConfigSaml::has_login_button_text_color() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void ConfigSaml::clear_login_button_text_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.login_button_text_color_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline const ::std::string& ConfigSaml::login_button_text_color() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigSaml.login_button_text_color)
  return _internal_login_button_text_color();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigSaml::set_login_button_text_color(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.login_button_text_color_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigSaml.login_button_text_color)
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::mutable_login_button_text_color()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_login_button_text_color();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigSaml.login_button_text_color)
  return _s;
}
inline const ::std::string& ConfigSaml::_internal_login_button_text_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.login_button_text_color_.Get();
}
inline void ConfigSaml::_internal_set_login_button_text_color(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.login_button_text_color_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigSaml::_internal_mutable_login_button_text_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x01000000u;
  return _impl_.login_button_text_color_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigSaml::release_login_button_text_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigSaml.login_button_text_color)
  if ((_impl_._has_bits_[0] & 0x01000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x01000000u;
  auto* released = _impl_.login_button_text_color_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.login_button_text_color_.Set("", GetArena());
  }
  return released;
}
inline void ConfigSaml::set_allocated_login_button_text_color(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  _impl_.login_button_text_color_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.login_button_text_color_.IsDefault()) {
    _impl_.login_button_text_color_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigSaml.login_button_text_color)
}

// -------------------------------------------------------------------

// ConfigNativeApp

// repeated string app_custom_url_schemes = 1 [json_name = "appCustomUrlSchemes"];
inline int ConfigNativeApp::_internal_app_custom_url_schemes_size() const {
  return _internal_app_custom_url_schemes().size();
}
inline int ConfigNativeApp::app_custom_url_schemes_size() const {
  return _internal_app_custom_url_schemes_size();
}
inline void ConfigNativeApp::clear_app_custom_url_schemes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_custom_url_schemes_.Clear();
}
inline ::std::string* PROTOBUF_NONNULL ConfigNativeApp::add_app_custom_url_schemes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::std::string* _s = _internal_mutable_app_custom_url_schemes()->Add();
  // @@protoc_insertion_point(field_add_mutable:common.v1.ConfigNativeApp.app_custom_url_schemes)
  return _s;
}
inline const ::std::string& ConfigNativeApp::app_custom_url_schemes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigNativeApp.app_custom_url_schemes)
  return _internal_app_custom_url_schemes().Get(index);
}
inline ::std::string* PROTOBUF_NONNULL ConfigNativeApp::mutable_app_custom_url_schemes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigNativeApp.app_custom_url_schemes)
  return _internal_mutable_app_custom_url_schemes()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ConfigNativeApp::set_app_custom_url_schemes(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(*_internal_mutable_app_custom_url_schemes()->Mutable(index), ::std::forward<Arg_>(value),
                        args... );
  // @@protoc_insertion_point(field_set:common.v1.ConfigNativeApp.app_custom_url_schemes)
}
template <typename Arg_, typename... Args_>
inline void ConfigNativeApp::add_app_custom_url_schemes(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_app_custom_url_schemes(),
                               ::std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:common.v1.ConfigNativeApp.app_custom_url_schemes)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>& ConfigNativeApp::app_custom_url_schemes()
    const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:common.v1.ConfigNativeApp.app_custom_url_schemes)
  return _internal_app_custom_url_schemes();
}
inline ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL
ConfigNativeApp::mutable_app_custom_url_schemes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:common.v1.ConfigNativeApp.app_custom_url_schemes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_app_custom_url_schemes();
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ConfigNativeApp::_internal_app_custom_url_schemes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.app_custom_url_schemes_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL
ConfigNativeApp::_internal_mutable_app_custom_url_schemes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.app_custom_url_schemes_;
}

// optional string app_download_link = 2 [json_name = "appDownloadLink"];
inline bool ConfigNativeApp::has_app_download_link() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConfigNativeApp::clear_app_download_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_download_link_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ConfigNativeApp::app_download_link() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigNativeApp.app_download_link)
  return _internal_app_download_link();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigNativeApp::set_app_download_link(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.app_download_link_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigNativeApp.app_download_link)
}
inline ::std::string* PROTOBUF_NONNULL ConfigNativeApp::mutable_app_download_link()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_app_download_link();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigNativeApp.app_download_link)
  return _s;
}
inline const ::std::string& ConfigNativeApp::_internal_app_download_link() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.app_download_link_.Get();
}
inline void ConfigNativeApp::_internal_set_app_download_link(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.app_download_link_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigNativeApp::_internal_mutable_app_download_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.app_download_link_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigNativeApp::release_app_download_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigNativeApp.app_download_link)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.app_download_link_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.app_download_link_.Set("", GetArena());
  }
  return released;
}
inline void ConfigNativeApp::set_allocated_app_download_link(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.app_download_link_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.app_download_link_.IsDefault()) {
    _impl_.app_download_link_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigNativeApp.app_download_link)
}

// optional string android_app_download_link = 3 [json_name = "androidAppDownloadLink"];
inline bool ConfigNativeApp::has_android_app_download_link() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConfigNativeApp::clear_android_app_download_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.android_app_download_link_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& ConfigNativeApp::android_app_download_link() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigNativeApp.android_app_download_link)
  return _internal_android_app_download_link();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigNativeApp::set_android_app_download_link(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.android_app_download_link_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigNativeApp.android_app_download_link)
}
inline ::std::string* PROTOBUF_NONNULL ConfigNativeApp::mutable_android_app_download_link()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_android_app_download_link();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigNativeApp.android_app_download_link)
  return _s;
}
inline const ::std::string& ConfigNativeApp::_internal_android_app_download_link() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.android_app_download_link_.Get();
}
inline void ConfigNativeApp::_internal_set_android_app_download_link(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.android_app_download_link_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigNativeApp::_internal_mutable_android_app_download_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.android_app_download_link_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigNativeApp::release_android_app_download_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigNativeApp.android_app_download_link)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.android_app_download_link_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.android_app_download_link_.Set("", GetArena());
  }
  return released;
}
inline void ConfigNativeApp::set_allocated_android_app_download_link(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.android_app_download_link_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.android_app_download_link_.IsDefault()) {
    _impl_.android_app_download_link_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigNativeApp.android_app_download_link)
}

// optional string ios_app_download_link = 4 [json_name = "iosAppDownloadLink"];
inline bool ConfigNativeApp::has_ios_app_download_link() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ConfigNativeApp::clear_ios_app_download_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ios_app_download_link_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& ConfigNativeApp::ios_app_download_link() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigNativeApp.ios_app_download_link)
  return _internal_ios_app_download_link();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigNativeApp::set_ios_app_download_link(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ios_app_download_link_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigNativeApp.ios_app_download_link)
}
inline ::std::string* PROTOBUF_NONNULL ConfigNativeApp::mutable_ios_app_download_link()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_ios_app_download_link();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigNativeApp.ios_app_download_link)
  return _s;
}
inline const ::std::string& ConfigNativeApp::_internal_ios_app_download_link() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ios_app_download_link_.Get();
}
inline void ConfigNativeApp::_internal_set_ios_app_download_link(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ios_app_download_link_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigNativeApp::_internal_mutable_ios_app_download_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.ios_app_download_link_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigNativeApp::release_ios_app_download_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigNativeApp.ios_app_download_link)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.ios_app_download_link_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.ios_app_download_link_.Set("", GetArena());
  }
  return released;
}
inline void ConfigNativeApp::set_allocated_ios_app_download_link(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.ios_app_download_link_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.ios_app_download_link_.IsDefault()) {
    _impl_.ios_app_download_link_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigNativeApp.ios_app_download_link)
}

// optional bool mobile_external_browser = 5 [json_name = "mobileExternalBrowser"];
inline bool ConfigNativeApp::has_mobile_external_browser() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ConfigNativeApp::clear_mobile_external_browser() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mobile_external_browser_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool ConfigNativeApp::mobile_external_browser() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigNativeApp.mobile_external_browser)
  return _internal_mobile_external_browser();
}
inline void ConfigNativeApp::set_mobile_external_browser(bool value) {
  _internal_set_mobile_external_browser(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigNativeApp.mobile_external_browser)
}
inline bool ConfigNativeApp::_internal_mobile_external_browser() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mobile_external_browser_;
}
inline void ConfigNativeApp::_internal_set_mobile_external_browser(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mobile_external_browser_ = value;
}

// optional bool mobile_enable_biometrics = 6 [json_name = "mobileEnableBiometrics"];
inline bool ConfigNativeApp::has_mobile_enable_biometrics() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ConfigNativeApp::clear_mobile_enable_biometrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mobile_enable_biometrics_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool ConfigNativeApp::mobile_enable_biometrics() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigNativeApp.mobile_enable_biometrics)
  return _internal_mobile_enable_biometrics();
}
inline void ConfigNativeApp::set_mobile_enable_biometrics(bool value) {
  _internal_set_mobile_enable_biometrics(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigNativeApp.mobile_enable_biometrics)
}
inline bool ConfigNativeApp::_internal_mobile_enable_biometrics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mobile_enable_biometrics_;
}
inline void ConfigNativeApp::_internal_set_mobile_enable_biometrics(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mobile_enable_biometrics_ = value;
}

// optional bool mobile_prevent_screen_capture = 7 [json_name = "mobilePreventScreenCapture"];
inline bool ConfigNativeApp::has_mobile_prevent_screen_capture() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ConfigNativeApp::clear_mobile_prevent_screen_capture() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mobile_prevent_screen_capture_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool ConfigNativeApp::mobile_prevent_screen_capture() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigNativeApp.mobile_prevent_screen_capture)
  return _internal_mobile_prevent_screen_capture();
}
inline void ConfigNativeApp::set_mobile_prevent_screen_capture(bool value) {
  _internal_set_mobile_prevent_screen_capture(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigNativeApp.mobile_prevent_screen_capture)
}
inline bool ConfigNativeApp::_internal_mobile_prevent_screen_capture() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mobile_prevent_screen_capture_;
}
inline void ConfigNativeApp::_internal_set_mobile_prevent_screen_capture(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mobile_prevent_screen_capture_ = value;
}

// optional bool mobile_jailbreak_protection = 8 [json_name = "mobileJailbreakProtection"];
inline bool ConfigNativeApp::has_mobile_jailbreak_protection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ConfigNativeApp::clear_mobile_jailbreak_protection() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mobile_jailbreak_protection_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool ConfigNativeApp::mobile_jailbreak_protection() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigNativeApp.mobile_jailbreak_protection)
  return _internal_mobile_jailbreak_protection();
}
inline void ConfigNativeApp::set_mobile_jailbreak_protection(bool value) {
  _internal_set_mobile_jailbreak_protection(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigNativeApp.mobile_jailbreak_protection)
}
inline bool ConfigNativeApp::_internal_mobile_jailbreak_protection() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mobile_jailbreak_protection_;
}
inline void ConfigNativeApp::_internal_set_mobile_jailbreak_protection(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mobile_jailbreak_protection_ = value;
}

// -------------------------------------------------------------------

// ConfigMeilisearch

// optional string server_url = 1 [json_name = "server_url"];
inline bool ConfigMeilisearch::has_server_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConfigMeilisearch::clear_server_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ConfigMeilisearch::server_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMeilisearch.server_url)
  return _internal_server_url();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigMeilisearch::set_server_url(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.server_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigMeilisearch.server_url)
}
inline ::std::string* PROTOBUF_NONNULL ConfigMeilisearch::mutable_server_url()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_server_url();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigMeilisearch.server_url)
  return _s;
}
inline const ::std::string& ConfigMeilisearch::_internal_server_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_url_.Get();
}
inline void ConfigMeilisearch::_internal_set_server_url(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.server_url_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigMeilisearch::_internal_mutable_server_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.server_url_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigMeilisearch::release_server_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigMeilisearch.server_url)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.server_url_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.server_url_.Set("", GetArena());
  }
  return released;
}
inline void ConfigMeilisearch::set_allocated_server_url(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.server_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.server_url_.IsDefault()) {
    _impl_.server_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigMeilisearch.server_url)
}

// optional string master_key = 2 [json_name = "masterKey"];
inline bool ConfigMeilisearch::has_master_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConfigMeilisearch::clear_master_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.master_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& ConfigMeilisearch::master_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMeilisearch.master_key)
  return _internal_master_key();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigMeilisearch::set_master_key(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.master_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigMeilisearch.master_key)
}
inline ::std::string* PROTOBUF_NONNULL ConfigMeilisearch::mutable_master_key()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_master_key();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigMeilisearch.master_key)
  return _s;
}
inline const ::std::string& ConfigMeilisearch::_internal_master_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.master_key_.Get();
}
inline void ConfigMeilisearch::_internal_set_master_key(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.master_key_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigMeilisearch::_internal_mutable_master_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.master_key_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigMeilisearch::release_master_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigMeilisearch.master_key)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.master_key_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.master_key_.Set("", GetArena());
  }
  return released;
}
inline void ConfigMeilisearch::set_allocated_master_key(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.master_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.master_key_.IsDefault()) {
    _impl_.master_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigMeilisearch.master_key)
}

// optional bool enable_indexing = 3 [json_name = "enableIndexing"];
inline bool ConfigMeilisearch::has_enable_indexing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ConfigMeilisearch::clear_enable_indexing() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_indexing_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool ConfigMeilisearch::enable_indexing() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMeilisearch.enable_indexing)
  return _internal_enable_indexing();
}
inline void ConfigMeilisearch::set_enable_indexing(bool value) {
  _internal_set_enable_indexing(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMeilisearch.enable_indexing)
}
inline bool ConfigMeilisearch::_internal_enable_indexing() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_indexing_;
}
inline void ConfigMeilisearch::_internal_set_enable_indexing(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_indexing_ = value;
}

// optional bool enable_searching = 4 [json_name = "enableSearching"];
inline bool ConfigMeilisearch::has_enable_searching() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ConfigMeilisearch::clear_enable_searching() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_searching_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool ConfigMeilisearch::enable_searching() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMeilisearch.enable_searching)
  return _internal_enable_searching();
}
inline void ConfigMeilisearch::set_enable_searching(bool value) {
  _internal_set_enable_searching(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMeilisearch.enable_searching)
}
inline bool ConfigMeilisearch::_internal_enable_searching() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_searching_;
}
inline void ConfigMeilisearch::_internal_set_enable_searching(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_searching_ = value;
}

// optional bool enable_autocomplete = 5 [json_name = "enableAutocomplete"];
inline bool ConfigMeilisearch::has_enable_autocomplete() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ConfigMeilisearch::clear_enable_autocomplete() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_autocomplete_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool ConfigMeilisearch::enable_autocomplete() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMeilisearch.enable_autocomplete)
  return _internal_enable_autocomplete();
}
inline void ConfigMeilisearch::set_enable_autocomplete(bool value) {
  _internal_set_enable_autocomplete(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMeilisearch.enable_autocomplete)
}
inline bool ConfigMeilisearch::_internal_enable_autocomplete() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_autocomplete_;
}
inline void ConfigMeilisearch::_internal_set_enable_autocomplete(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_autocomplete_ = value;
}

// optional int32 batch_size = 6 [json_name = "batchSize"];
inline bool ConfigMeilisearch::has_batch_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ConfigMeilisearch::clear_batch_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.batch_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t ConfigMeilisearch::batch_size() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMeilisearch.batch_size)
  return _internal_batch_size();
}
inline void ConfigMeilisearch::set_batch_size(::int32_t value) {
  _internal_set_batch_size(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMeilisearch.batch_size)
}
inline ::int32_t ConfigMeilisearch::_internal_batch_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.batch_size_;
}
inline void ConfigMeilisearch::_internal_set_batch_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.batch_size_ = value;
}

// optional int32 request_timeout_seconds = 7 [json_name = "requestTimeoutSeconds"];
inline bool ConfigMeilisearch::has_request_timeout_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void ConfigMeilisearch::clear_request_timeout_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_timeout_seconds_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t ConfigMeilisearch::request_timeout_seconds() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMeilisearch.request_timeout_seconds)
  return _internal_request_timeout_seconds();
}
inline void ConfigMeilisearch::set_request_timeout_seconds(::int32_t value) {
  _internal_set_request_timeout_seconds(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMeilisearch.request_timeout_seconds)
}
inline ::int32_t ConfigMeilisearch::_internal_request_timeout_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_timeout_seconds_;
}
inline void ConfigMeilisearch::_internal_set_request_timeout_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_timeout_seconds_ = value;
}

// optional string index_prefix = 8 [json_name = "indexPrefix"];
inline bool ConfigMeilisearch::has_index_prefix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ConfigMeilisearch::clear_index_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_prefix_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& ConfigMeilisearch::index_prefix() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMeilisearch.index_prefix)
  return _internal_index_prefix();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigMeilisearch::set_index_prefix(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.index_prefix_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigMeilisearch.index_prefix)
}
inline ::std::string* PROTOBUF_NONNULL ConfigMeilisearch::mutable_index_prefix()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_index_prefix();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigMeilisearch.index_prefix)
  return _s;
}
inline const ::std::string& ConfigMeilisearch::_internal_index_prefix() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.index_prefix_.Get();
}
inline void ConfigMeilisearch::_internal_set_index_prefix(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.index_prefix_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigMeilisearch::_internal_mutable_index_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.index_prefix_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigMeilisearch::release_index_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigMeilisearch.index_prefix)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.index_prefix_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.index_prefix_.Set("", GetArena());
  }
  return released;
}
inline void ConfigMeilisearch::set_allocated_index_prefix(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.index_prefix_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.index_prefix_.IsDefault()) {
    _impl_.index_prefix_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigMeilisearch.index_prefix)
}

// optional int32 search_cutoff_ms = 9 [json_name = "searchCutoffMs"];
inline bool ConfigMeilisearch::has_search_cutoff_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void ConfigMeilisearch::clear_search_cutoff_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.search_cutoff_ms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t ConfigMeilisearch::search_cutoff_ms() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMeilisearch.search_cutoff_ms)
  return _internal_search_cutoff_ms();
}
inline void ConfigMeilisearch::set_search_cutoff_ms(::int32_t value) {
  _internal_set_search_cutoff_ms(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMeilisearch.search_cutoff_ms)
}
inline ::int32_t ConfigMeilisearch::_internal_search_cutoff_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.search_cutoff_ms_;
}
inline void ConfigMeilisearch::_internal_set_search_cutoff_ms(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.search_cutoff_ms_ = value;
}

// optional bool enable_typo_tolerance = 10 [json_name = "enableTypoTolerance"];
inline bool ConfigMeilisearch::has_enable_typo_tolerance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ConfigMeilisearch::clear_enable_typo_tolerance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_typo_tolerance_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool ConfigMeilisearch::enable_typo_tolerance() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigMeilisearch.enable_typo_tolerance)
  return _internal_enable_typo_tolerance();
}
inline void ConfigMeilisearch::set_enable_typo_tolerance(bool value) {
  _internal_set_enable_typo_tolerance(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigMeilisearch.enable_typo_tolerance)
}
inline bool ConfigMeilisearch::_internal_enable_typo_tolerance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_typo_tolerance_;
}
inline void ConfigMeilisearch::_internal_set_enable_typo_tolerance(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_typo_tolerance_ = value;
}

// -------------------------------------------------------------------

// ConfigBleve

// optional string index_dir = 1 [json_name = "indexDir"];
inline bool ConfigBleve::has_index_dir() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConfigBleve::clear_index_dir() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_dir_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ConfigBleve::index_dir() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigBleve.index_dir)
  return _internal_index_dir();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigBleve::set_index_dir(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.index_dir_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigBleve.index_dir)
}
inline ::std::string* PROTOBUF_NONNULL ConfigBleve::mutable_index_dir()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_index_dir();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigBleve.index_dir)
  return _s;
}
inline const ::std::string& ConfigBleve::_internal_index_dir() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.index_dir_.Get();
}
inline void ConfigBleve::_internal_set_index_dir(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.index_dir_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigBleve::_internal_mutable_index_dir() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.index_dir_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigBleve::release_index_dir() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigBleve.index_dir)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.index_dir_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.index_dir_.Set("", GetArena());
  }
  return released;
}
inline void ConfigBleve::set_allocated_index_dir(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.index_dir_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.index_dir_.IsDefault()) {
    _impl_.index_dir_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigBleve.index_dir)
}

// optional bool enable_indexing = 2 [json_name = "enableIndexing"];
inline bool ConfigBleve::has_enable_indexing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConfigBleve::clear_enable_indexing() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_indexing_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool ConfigBleve::enable_indexing() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigBleve.enable_indexing)
  return _internal_enable_indexing();
}
inline void ConfigBleve::set_enable_indexing(bool value) {
  _internal_set_enable_indexing(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigBleve.enable_indexing)
}
inline bool ConfigBleve::_internal_enable_indexing() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_indexing_;
}
inline void ConfigBleve::_internal_set_enable_indexing(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_indexing_ = value;
}

// optional bool enable_searching = 3 [json_name = "enableSearching"];
inline bool ConfigBleve::has_enable_searching() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ConfigBleve::clear_enable_searching() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_searching_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool ConfigBleve::enable_searching() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigBleve.enable_searching)
  return _internal_enable_searching();
}
inline void ConfigBleve::set_enable_searching(bool value) {
  _internal_set_enable_searching(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigBleve.enable_searching)
}
inline bool ConfigBleve::_internal_enable_searching() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_searching_;
}
inline void ConfigBleve::_internal_set_enable_searching(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_searching_ = value;
}

// optional bool enable_autocomplete = 4 [json_name = "enableAutocomplete"];
inline bool ConfigBleve::has_enable_autocomplete() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ConfigBleve::clear_enable_autocomplete() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_autocomplete_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool ConfigBleve::enable_autocomplete() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigBleve.enable_autocomplete)
  return _internal_enable_autocomplete();
}
inline void ConfigBleve::set_enable_autocomplete(bool value) {
  _internal_set_enable_autocomplete(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigBleve.enable_autocomplete)
}
inline bool ConfigBleve::_internal_enable_autocomplete() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_autocomplete_;
}
inline void ConfigBleve::_internal_set_enable_autocomplete(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_autocomplete_ = value;
}

// optional int32 bulk_indexing_time_window_seconds = 5 [json_name = "bulkIndexingTimeWindowSeconds"];
inline bool ConfigBleve::has_bulk_indexing_time_window_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ConfigBleve::clear_bulk_indexing_time_window_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bulk_indexing_time_window_seconds_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t ConfigBleve::bulk_indexing_time_window_seconds() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigBleve.bulk_indexing_time_window_seconds)
  return _internal_bulk_indexing_time_window_seconds();
}
inline void ConfigBleve::set_bulk_indexing_time_window_seconds(::int32_t value) {
  _internal_set_bulk_indexing_time_window_seconds(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigBleve.bulk_indexing_time_window_seconds)
}
inline ::int32_t ConfigBleve::_internal_bulk_indexing_time_window_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bulk_indexing_time_window_seconds_;
}
inline void ConfigBleve::_internal_set_bulk_indexing_time_window_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bulk_indexing_time_window_seconds_ = value;
}

// optional int32 batch_size = 6 [json_name = "batchSize"];
inline bool ConfigBleve::has_batch_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ConfigBleve::clear_batch_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.batch_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t ConfigBleve::batch_size() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigBleve.batch_size)
  return _internal_batch_size();
}
inline void ConfigBleve::set_batch_size(::int32_t value) {
  _internal_set_batch_size(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigBleve.batch_size)
}
inline ::int32_t ConfigBleve::_internal_batch_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.batch_size_;
}
inline void ConfigBleve::_internal_set_batch_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.batch_size_ = value;
}

// -------------------------------------------------------------------

// ConfigDataRetention

// optional bool enable_message_deletion = 1 [json_name = "enableMessageDeletion"];
inline bool ConfigDataRetention::has_enable_message_deletion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConfigDataRetention::clear_enable_message_deletion() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_message_deletion_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool ConfigDataRetention::enable_message_deletion() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigDataRetention.enable_message_deletion)
  return _internal_enable_message_deletion();
}
inline void ConfigDataRetention::set_enable_message_deletion(bool value) {
  _internal_set_enable_message_deletion(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigDataRetention.enable_message_deletion)
}
inline bool ConfigDataRetention::_internal_enable_message_deletion() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_message_deletion_;
}
inline void ConfigDataRetention::_internal_set_enable_message_deletion(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_message_deletion_ = value;
}

// optional bool enable_file_deletion = 2 [json_name = "enableFileDeletion"];
inline bool ConfigDataRetention::has_enable_file_deletion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ConfigDataRetention::clear_enable_file_deletion() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_file_deletion_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool ConfigDataRetention::enable_file_deletion() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigDataRetention.enable_file_deletion)
  return _internal_enable_file_deletion();
}
inline void ConfigDataRetention::set_enable_file_deletion(bool value) {
  _internal_set_enable_file_deletion(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigDataRetention.enable_file_deletion)
}
inline bool ConfigDataRetention::_internal_enable_file_deletion() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_file_deletion_;
}
inline void ConfigDataRetention::_internal_set_enable_file_deletion(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_file_deletion_ = value;
}

// optional bool enable_boards_deletion = 3 [json_name = "enableBoardsDeletion"];
inline bool ConfigDataRetention::has_enable_boards_deletion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ConfigDataRetention::clear_enable_boards_deletion() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_boards_deletion_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool ConfigDataRetention::enable_boards_deletion() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigDataRetention.enable_boards_deletion)
  return _internal_enable_boards_deletion();
}
inline void ConfigDataRetention::set_enable_boards_deletion(bool value) {
  _internal_set_enable_boards_deletion(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigDataRetention.enable_boards_deletion)
}
inline bool ConfigDataRetention::_internal_enable_boards_deletion() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_boards_deletion_;
}
inline void ConfigDataRetention::_internal_set_enable_boards_deletion(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_boards_deletion_ = value;
}

// optional int32 message_retention_hours = 4 [json_name = "messageRetentionHours"];
inline bool ConfigDataRetention::has_message_retention_hours() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ConfigDataRetention::clear_message_retention_hours() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_retention_hours_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t ConfigDataRetention::message_retention_hours() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigDataRetention.message_retention_hours)
  return _internal_message_retention_hours();
}
inline void ConfigDataRetention::set_message_retention_hours(::int32_t value) {
  _internal_set_message_retention_hours(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigDataRetention.message_retention_hours)
}
inline ::int32_t ConfigDataRetention::_internal_message_retention_hours() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_retention_hours_;
}
inline void ConfigDataRetention::_internal_set_message_retention_hours(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_retention_hours_ = value;
}

// optional int32 file_retention_hours = 5 [json_name = "fileRetentionHours"];
inline bool ConfigDataRetention::has_file_retention_hours() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ConfigDataRetention::clear_file_retention_hours() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_retention_hours_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t ConfigDataRetention::file_retention_hours() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigDataRetention.file_retention_hours)
  return _internal_file_retention_hours();
}
inline void ConfigDataRetention::set_file_retention_hours(::int32_t value) {
  _internal_set_file_retention_hours(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigDataRetention.file_retention_hours)
}
inline ::int32_t ConfigDataRetention::_internal_file_retention_hours() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_retention_hours_;
}
inline void ConfigDataRetention::_internal_set_file_retention_hours(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_retention_hours_ = value;
}

// optional int32 boards_retention_days = 6 [json_name = "boardsRetentionDays"];
inline bool ConfigDataRetention::has_boards_retention_days() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ConfigDataRetention::clear_boards_retention_days() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.boards_retention_days_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t ConfigDataRetention::boards_retention_days() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigDataRetention.boards_retention_days)
  return _internal_boards_retention_days();
}
inline void ConfigDataRetention::set_boards_retention_days(::int32_t value) {
  _internal_set_boards_retention_days(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigDataRetention.boards_retention_days)
}
inline ::int32_t ConfigDataRetention::_internal_boards_retention_days() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.boards_retention_days_;
}
inline void ConfigDataRetention::_internal_set_boards_retention_days(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.boards_retention_days_ = value;
}

// optional string deletion_job_start_time = 7 [json_name = "deletionJobStartTime"];
inline bool ConfigDataRetention::has_deletion_job_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConfigDataRetention::clear_deletion_job_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deletion_job_start_time_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ConfigDataRetention::deletion_job_start_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigDataRetention.deletion_job_start_time)
  return _internal_deletion_job_start_time();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigDataRetention::set_deletion_job_start_time(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.deletion_job_start_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigDataRetention.deletion_job_start_time)
}
inline ::std::string* PROTOBUF_NONNULL ConfigDataRetention::mutable_deletion_job_start_time()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_deletion_job_start_time();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigDataRetention.deletion_job_start_time)
  return _s;
}
inline const ::std::string& ConfigDataRetention::_internal_deletion_job_start_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.deletion_job_start_time_.Get();
}
inline void ConfigDataRetention::_internal_set_deletion_job_start_time(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.deletion_job_start_time_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigDataRetention::_internal_mutable_deletion_job_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.deletion_job_start_time_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigDataRetention::release_deletion_job_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigDataRetention.deletion_job_start_time)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.deletion_job_start_time_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.deletion_job_start_time_.Set("", GetArena());
  }
  return released;
}
inline void ConfigDataRetention::set_allocated_deletion_job_start_time(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.deletion_job_start_time_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.deletion_job_start_time_.IsDefault()) {
    _impl_.deletion_job_start_time_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigDataRetention.deletion_job_start_time)
}

// optional int32 batch_size = 8 [json_name = "batchSize"];
inline bool ConfigDataRetention::has_batch_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ConfigDataRetention::clear_batch_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.batch_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t ConfigDataRetention::batch_size() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigDataRetention.batch_size)
  return _internal_batch_size();
}
inline void ConfigDataRetention::set_batch_size(::int32_t value) {
  _internal_set_batch_size(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigDataRetention.batch_size)
}
inline ::int32_t ConfigDataRetention::_internal_batch_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.batch_size_;
}
inline void ConfigDataRetention::_internal_set_batch_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.batch_size_ = value;
}

// optional int32 time_between_batches_milliseconds = 9 [json_name = "timeBetweenBatchesMilliseconds"];
inline bool ConfigDataRetention::has_time_between_batches_milliseconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void ConfigDataRetention::clear_time_between_batches_milliseconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_between_batches_milliseconds_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t ConfigDataRetention::time_between_batches_milliseconds() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigDataRetention.time_between_batches_milliseconds)
  return _internal_time_between_batches_milliseconds();
}
inline void ConfigDataRetention::set_time_between_batches_milliseconds(::int32_t value) {
  _internal_set_time_between_batches_milliseconds(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigDataRetention.time_between_batches_milliseconds)
}
inline ::int32_t ConfigDataRetention::_internal_time_between_batches_milliseconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_between_batches_milliseconds_;
}
inline void ConfigDataRetention::_internal_set_time_between_batches_milliseconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_between_batches_milliseconds_ = value;
}

// optional int32 retention_ids_batch_size = 10 [json_name = "retentionIdsBatchSize"];
inline bool ConfigDataRetention::has_retention_ids_batch_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void ConfigDataRetention::clear_retention_ids_batch_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retention_ids_batch_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t ConfigDataRetention::retention_ids_batch_size() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigDataRetention.retention_ids_batch_size)
  return _internal_retention_ids_batch_size();
}
inline void ConfigDataRetention::set_retention_ids_batch_size(::int32_t value) {
  _internal_set_retention_ids_batch_size(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigDataRetention.retention_ids_batch_size)
}
inline ::int32_t ConfigDataRetention::_internal_retention_ids_batch_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retention_ids_batch_size_;
}
inline void ConfigDataRetention::_internal_set_retention_ids_batch_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retention_ids_batch_size_ = value;
}

// -------------------------------------------------------------------

// ConfigImageProxy

// optional bool enable = 1 [json_name = "enable"];
inline bool ConfigImageProxy::has_enable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ConfigImageProxy::clear_enable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool ConfigImageProxy::enable() const {
  // @@protoc_insertion_point(field_get:common.v1.ConfigImageProxy.enable)
  return _internal_enable();
}
inline void ConfigImageProxy::set_enable(bool value) {
  _internal_set_enable(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:common.v1.ConfigImageProxy.enable)
}
inline bool ConfigImageProxy::_internal_enable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_;
}
inline void ConfigImageProxy::_internal_set_enable(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_ = value;
}

// optional string image_proxy_type = 2 [json_name = "imageProxyType"];
inline bool ConfigImageProxy::has_image_proxy_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConfigImageProxy::clear_image_proxy_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.image_proxy_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ConfigImageProxy::image_proxy_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigImageProxy.image_proxy_type)
  return _internal_image_proxy_type();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigImageProxy::set_image_proxy_type(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.image_proxy_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigImageProxy.image_proxy_type)
}
inline ::std::string* PROTOBUF_NONNULL ConfigImageProxy::mutable_image_proxy_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_image_proxy_type();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigImageProxy.image_proxy_type)
  return _s;
}
inline const ::std::string& ConfigImageProxy::_internal_image_proxy_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.image_proxy_type_.Get();
}
inline void ConfigImageProxy::_internal_set_image_proxy_type(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.image_proxy_type_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigImageProxy::_internal_mutable_image_proxy_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.image_proxy_type_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigImageProxy::release_image_proxy_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigImageProxy.image_proxy_type)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.image_proxy_type_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.image_proxy_type_.Set("", GetArena());
  }
  return released;
}
inline void ConfigImageProxy::set_allocated_image_proxy_type(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.image_proxy_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.image_proxy_type_.IsDefault()) {
    _impl_.image_proxy_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigImageProxy.image_proxy_type)
}

// optional string remote_image_proxy_url = 3 [json_name = "remoteImageProxyUrl"];
inline bool ConfigImageProxy::has_remote_image_proxy_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConfigImageProxy::clear_remote_image_proxy_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remote_image_proxy_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& ConfigImageProxy::remote_image_proxy_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigImageProxy.remote_image_proxy_url)
  return _internal_remote_image_proxy_url();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigImageProxy::set_remote_image_proxy_url(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.remote_image_proxy_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigImageProxy.remote_image_proxy_url)
}
inline ::std::string* PROTOBUF_NONNULL ConfigImageProxy::mutable_remote_image_proxy_url()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_remote_image_proxy_url();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigImageProxy.remote_image_proxy_url)
  return _s;
}
inline const ::std::string& ConfigImageProxy::_internal_remote_image_proxy_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.remote_image_proxy_url_.Get();
}
inline void ConfigImageProxy::_internal_set_remote_image_proxy_url(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.remote_image_proxy_url_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigImageProxy::_internal_mutable_remote_image_proxy_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.remote_image_proxy_url_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigImageProxy::release_remote_image_proxy_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigImageProxy.remote_image_proxy_url)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.remote_image_proxy_url_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.remote_image_proxy_url_.Set("", GetArena());
  }
  return released;
}
inline void ConfigImageProxy::set_allocated_remote_image_proxy_url(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.remote_image_proxy_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.remote_image_proxy_url_.IsDefault()) {
    _impl_.remote_image_proxy_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigImageProxy.remote_image_proxy_url)
}

// optional string remote_image_proxy_options = 4 [json_name = "remoteImageProxyOptions"];
inline bool ConfigImageProxy::has_remote_image_proxy_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ConfigImageProxy::clear_remote_image_proxy_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remote_image_proxy_options_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& ConfigImageProxy::remote_image_proxy_options() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigImageProxy.remote_image_proxy_options)
  return _internal_remote_image_proxy_options();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigImageProxy::set_remote_image_proxy_options(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.remote_image_proxy_options_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigImageProxy.remote_image_proxy_options)
}
inline ::std::string* PROTOBUF_NONNULL ConfigImageProxy::mutable_remote_image_proxy_options()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_remote_image_proxy_options();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigImageProxy.remote_image_proxy_options)
  return _s;
}
inline const ::std::string& ConfigImageProxy::_internal_remote_image_proxy_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.remote_image_proxy_options_.Get();
}
inline void ConfigImageProxy::_internal_set_remote_image_proxy_options(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.remote_image_proxy_options_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigImageProxy::_internal_mutable_remote_image_proxy_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.remote_image_proxy_options_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigImageProxy::release_remote_image_proxy_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigImageProxy.remote_image_proxy_options)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.remote_image_proxy_options_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.remote_image_proxy_options_.Set("", GetArena());
  }
  return released;
}
inline void ConfigImageProxy::set_allocated_remote_image_proxy_options(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.remote_image_proxy_options_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.remote_image_proxy_options_.IsDefault()) {
    _impl_.remote_image_proxy_options_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigImageProxy.remote_image_proxy_options)
}

// -------------------------------------------------------------------

// Config

// .common.v1.ConfigMain main = 1 [json_name = "main"];
inline bool Config::has_main() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.main_ != nullptr);
  return value;
}
inline void Config::clear_main() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.main_ != nullptr) _impl_.main_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::common::v1::ConfigMain& Config::_internal_main() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::v1::ConfigMain* p = _impl_.main_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::ConfigMain&>(::common::v1::_ConfigMain_default_instance_);
}
inline const ::common::v1::ConfigMain& Config::main() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.Config.main)
  return _internal_main();
}
inline void Config::unsafe_arena_set_allocated_main(
    ::common::v1::ConfigMain* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.main_);
  }
  _impl_.main_ = reinterpret_cast<::common::v1::ConfigMain*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Config.main)
}
inline ::common::v1::ConfigMain* PROTOBUF_NULLABLE Config::release_main() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::common::v1::ConfigMain* released = _impl_.main_;
  _impl_.main_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::common::v1::ConfigMain* PROTOBUF_NULLABLE Config::unsafe_arena_release_main() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.Config.main)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::common::v1::ConfigMain* temp = _impl_.main_;
  _impl_.main_ = nullptr;
  return temp;
}
inline ::common::v1::ConfigMain* PROTOBUF_NONNULL Config::_internal_mutable_main() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.main_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::v1::ConfigMain>(GetArena());
    _impl_.main_ = reinterpret_cast<::common::v1::ConfigMain*>(p);
  }
  return _impl_.main_;
}
inline ::common::v1::ConfigMain* PROTOBUF_NONNULL Config::mutable_main()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::common::v1::ConfigMain* _msg = _internal_mutable_main();
  // @@protoc_insertion_point(field_mutable:common.v1.Config.main)
  return _msg;
}
inline void Config::set_allocated_main(::common::v1::ConfigMain* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.main_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.main_ = reinterpret_cast<::common::v1::ConfigMain*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.v1.Config.main)
}

// .common.v1.ConfigServices services = 2 [json_name = "services"];
inline bool Config::has_services() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.services_ != nullptr);
  return value;
}
inline void Config::clear_services() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.services_ != nullptr) _impl_.services_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::common::v1::ConfigServices& Config::_internal_services() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::v1::ConfigServices* p = _impl_.services_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::ConfigServices&>(::common::v1::_ConfigServices_default_instance_);
}
inline const ::common::v1::ConfigServices& Config::services() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.Config.services)
  return _internal_services();
}
inline void Config::unsafe_arena_set_allocated_services(
    ::common::v1::ConfigServices* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.services_);
  }
  _impl_.services_ = reinterpret_cast<::common::v1::ConfigServices*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Config.services)
}
inline ::common::v1::ConfigServices* PROTOBUF_NULLABLE Config::release_services() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::common::v1::ConfigServices* released = _impl_.services_;
  _impl_.services_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::common::v1::ConfigServices* PROTOBUF_NULLABLE Config::unsafe_arena_release_services() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.Config.services)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::common::v1::ConfigServices* temp = _impl_.services_;
  _impl_.services_ = nullptr;
  return temp;
}
inline ::common::v1::ConfigServices* PROTOBUF_NONNULL Config::_internal_mutable_services() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.services_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::v1::ConfigServices>(GetArena());
    _impl_.services_ = reinterpret_cast<::common::v1::ConfigServices*>(p);
  }
  return _impl_.services_;
}
inline ::common::v1::ConfigServices* PROTOBUF_NONNULL Config::mutable_services()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::common::v1::ConfigServices* _msg = _internal_mutable_services();
  // @@protoc_insertion_point(field_mutable:common.v1.Config.services)
  return _msg;
}
inline void Config::set_allocated_services(::common::v1::ConfigServices* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.services_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.services_ = reinterpret_cast<::common::v1::ConfigServices*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.v1.Config.services)
}

// .common.v1.ConfigSecurity security = 3 [json_name = "security"];
inline bool Config::has_security() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.security_ != nullptr);
  return value;
}
inline void Config::clear_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.security_ != nullptr) _impl_.security_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::common::v1::ConfigSecurity& Config::_internal_security() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::v1::ConfigSecurity* p = _impl_.security_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::ConfigSecurity&>(::common::v1::_ConfigSecurity_default_instance_);
}
inline const ::common::v1::ConfigSecurity& Config::security() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.Config.security)
  return _internal_security();
}
inline void Config::unsafe_arena_set_allocated_security(
    ::common::v1::ConfigSecurity* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.security_);
  }
  _impl_.security_ = reinterpret_cast<::common::v1::ConfigSecurity*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Config.security)
}
inline ::common::v1::ConfigSecurity* PROTOBUF_NULLABLE Config::release_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::common::v1::ConfigSecurity* released = _impl_.security_;
  _impl_.security_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::common::v1::ConfigSecurity* PROTOBUF_NULLABLE Config::unsafe_arena_release_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.Config.security)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::common::v1::ConfigSecurity* temp = _impl_.security_;
  _impl_.security_ = nullptr;
  return temp;
}
inline ::common::v1::ConfigSecurity* PROTOBUF_NONNULL Config::_internal_mutable_security() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.security_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::v1::ConfigSecurity>(GetArena());
    _impl_.security_ = reinterpret_cast<::common::v1::ConfigSecurity*>(p);
  }
  return _impl_.security_;
}
inline ::common::v1::ConfigSecurity* PROTOBUF_NONNULL Config::mutable_security()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::common::v1::ConfigSecurity* _msg = _internal_mutable_security();
  // @@protoc_insertion_point(field_mutable:common.v1.Config.security)
  return _msg;
}
inline void Config::set_allocated_security(::common::v1::ConfigSecurity* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.security_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.security_ = reinterpret_cast<::common::v1::ConfigSecurity*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.v1.Config.security)
}

// .common.v1.CacheConfig cache = 4 [json_name = "cache"];
inline bool Config::has_cache() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cache_ != nullptr);
  return value;
}
inline void Config::clear_cache() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cache_ != nullptr) _impl_.cache_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::common::v1::CacheConfig& Config::_internal_cache() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::v1::CacheConfig* p = _impl_.cache_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::CacheConfig&>(::common::v1::_CacheConfig_default_instance_);
}
inline const ::common::v1::CacheConfig& Config::cache() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.Config.cache)
  return _internal_cache();
}
inline void Config::unsafe_arena_set_allocated_cache(
    ::common::v1::CacheConfig* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cache_);
  }
  _impl_.cache_ = reinterpret_cast<::common::v1::CacheConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Config.cache)
}
inline ::common::v1::CacheConfig* PROTOBUF_NULLABLE Config::release_cache() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::common::v1::CacheConfig* released = _impl_.cache_;
  _impl_.cache_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::common::v1::CacheConfig* PROTOBUF_NULLABLE Config::unsafe_arena_release_cache() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.Config.cache)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::common::v1::CacheConfig* temp = _impl_.cache_;
  _impl_.cache_ = nullptr;
  return temp;
}
inline ::common::v1::CacheConfig* PROTOBUF_NONNULL Config::_internal_mutable_cache() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cache_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::v1::CacheConfig>(GetArena());
    _impl_.cache_ = reinterpret_cast<::common::v1::CacheConfig*>(p);
  }
  return _impl_.cache_;
}
inline ::common::v1::CacheConfig* PROTOBUF_NONNULL Config::mutable_cache()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::common::v1::CacheConfig* _msg = _internal_mutable_cache();
  // @@protoc_insertion_point(field_mutable:common.v1.Config.cache)
  return _msg;
}
inline void Config::set_allocated_cache(::common::v1::CacheConfig* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cache_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.cache_ = reinterpret_cast<::common::v1::CacheConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.v1.Config.cache)
}

// .common.v1.ConfigMetrics metrics = 5 [json_name = "metrics"];
inline bool Config::has_metrics() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metrics_ != nullptr);
  return value;
}
inline void Config::clear_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.metrics_ != nullptr) _impl_.metrics_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::common::v1::ConfigMetrics& Config::_internal_metrics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::v1::ConfigMetrics* p = _impl_.metrics_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::ConfigMetrics&>(::common::v1::_ConfigMetrics_default_instance_);
}
inline const ::common::v1::ConfigMetrics& Config::metrics() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.Config.metrics)
  return _internal_metrics();
}
inline void Config::unsafe_arena_set_allocated_metrics(
    ::common::v1::ConfigMetrics* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metrics_);
  }
  _impl_.metrics_ = reinterpret_cast<::common::v1::ConfigMetrics*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Config.metrics)
}
inline ::common::v1::ConfigMetrics* PROTOBUF_NULLABLE Config::release_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::common::v1::ConfigMetrics* released = _impl_.metrics_;
  _impl_.metrics_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::common::v1::ConfigMetrics* PROTOBUF_NULLABLE Config::unsafe_arena_release_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.Config.metrics)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::common::v1::ConfigMetrics* temp = _impl_.metrics_;
  _impl_.metrics_ = nullptr;
  return temp;
}
inline ::common::v1::ConfigMetrics* PROTOBUF_NONNULL Config::_internal_mutable_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.metrics_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::v1::ConfigMetrics>(GetArena());
    _impl_.metrics_ = reinterpret_cast<::common::v1::ConfigMetrics*>(p);
  }
  return _impl_.metrics_;
}
inline ::common::v1::ConfigMetrics* PROTOBUF_NONNULL Config::mutable_metrics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::common::v1::ConfigMetrics* _msg = _internal_mutable_metrics();
  // @@protoc_insertion_point(field_mutable:common.v1.Config.metrics)
  return _msg;
}
inline void Config::set_allocated_metrics(::common::v1::ConfigMetrics* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metrics_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.metrics_ = reinterpret_cast<::common::v1::ConfigMetrics*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.v1.Config.metrics)
}

// .common.v1.ConfigSSO sso = 6 [json_name = "sso"];
inline bool Config::has_sso() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sso_ != nullptr);
  return value;
}
inline void Config::clear_sso() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sso_ != nullptr) _impl_.sso_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::common::v1::ConfigSSO& Config::_internal_sso() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::v1::ConfigSSO* p = _impl_.sso_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::ConfigSSO&>(::common::v1::_ConfigSSO_default_instance_);
}
inline const ::common::v1::ConfigSSO& Config::sso() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.Config.sso)
  return _internal_sso();
}
inline void Config::unsafe_arena_set_allocated_sso(
    ::common::v1::ConfigSSO* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sso_);
  }
  _impl_.sso_ = reinterpret_cast<::common::v1::ConfigSSO*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Config.sso)
}
inline ::common::v1::ConfigSSO* PROTOBUF_NULLABLE Config::release_sso() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::common::v1::ConfigSSO* released = _impl_.sso_;
  _impl_.sso_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::common::v1::ConfigSSO* PROTOBUF_NULLABLE Config::unsafe_arena_release_sso() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.Config.sso)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::common::v1::ConfigSSO* temp = _impl_.sso_;
  _impl_.sso_ = nullptr;
  return temp;
}
inline ::common::v1::ConfigSSO* PROTOBUF_NONNULL Config::_internal_mutable_sso() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sso_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::v1::ConfigSSO>(GetArena());
    _impl_.sso_ = reinterpret_cast<::common::v1::ConfigSSO*>(p);
  }
  return _impl_.sso_;
}
inline ::common::v1::ConfigSSO* PROTOBUF_NONNULL Config::mutable_sso()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::common::v1::ConfigSSO* _msg = _internal_mutable_sso();
  // @@protoc_insertion_point(field_mutable:common.v1.Config.sso)
  return _msg;
}
inline void Config::set_allocated_sso(::common::v1::ConfigSSO* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sso_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.sso_ = reinterpret_cast<::common::v1::ConfigSSO*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.v1.Config.sso)
}

// .common.v1.ConfigSql sql = 7 [json_name = "sql"];
inline bool Config::has_sql() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sql_ != nullptr);
  return value;
}
inline void Config::clear_sql() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sql_ != nullptr) _impl_.sql_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::common::v1::ConfigSql& Config::_internal_sql() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::v1::ConfigSql* p = _impl_.sql_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::ConfigSql&>(::common::v1::_ConfigSql_default_instance_);
}
inline const ::common::v1::ConfigSql& Config::sql() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.Config.sql)
  return _internal_sql();
}
inline void Config::unsafe_arena_set_allocated_sql(
    ::common::v1::ConfigSql* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sql_);
  }
  _impl_.sql_ = reinterpret_cast<::common::v1::ConfigSql*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Config.sql)
}
inline ::common::v1::ConfigSql* PROTOBUF_NULLABLE Config::release_sql() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::common::v1::ConfigSql* released = _impl_.sql_;
  _impl_.sql_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::common::v1::ConfigSql* PROTOBUF_NULLABLE Config::unsafe_arena_release_sql() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.Config.sql)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::common::v1::ConfigSql* temp = _impl_.sql_;
  _impl_.sql_ = nullptr;
  return temp;
}
inline ::common::v1::ConfigSql* PROTOBUF_NONNULL Config::_internal_mutable_sql() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sql_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::v1::ConfigSql>(GetArena());
    _impl_.sql_ = reinterpret_cast<::common::v1::ConfigSql*>(p);
  }
  return _impl_.sql_;
}
inline ::common::v1::ConfigSql* PROTOBUF_NONNULL Config::mutable_sql()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::common::v1::ConfigSql* _msg = _internal_mutable_sql();
  // @@protoc_insertion_point(field_mutable:common.v1.Config.sql)
  return _msg;
}
inline void Config::set_allocated_sql(::common::v1::ConfigSql* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sql_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.sql_ = reinterpret_cast<::common::v1::ConfigSql*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.v1.Config.sql)
}

// .common.v1.ConfigPassword password = 8 [json_name = "password"];
inline bool Config::has_password() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.password_ != nullptr);
  return value;
}
inline void Config::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.password_ != nullptr) _impl_.password_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::common::v1::ConfigPassword& Config::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::v1::ConfigPassword* p = _impl_.password_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::ConfigPassword&>(::common::v1::_ConfigPassword_default_instance_);
}
inline const ::common::v1::ConfigPassword& Config::password() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.Config.password)
  return _internal_password();
}
inline void Config::unsafe_arena_set_allocated_password(
    ::common::v1::ConfigPassword* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.password_);
  }
  _impl_.password_ = reinterpret_cast<::common::v1::ConfigPassword*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Config.password)
}
inline ::common::v1::ConfigPassword* PROTOBUF_NULLABLE Config::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::common::v1::ConfigPassword* released = _impl_.password_;
  _impl_.password_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::common::v1::ConfigPassword* PROTOBUF_NULLABLE Config::unsafe_arena_release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.Config.password)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::common::v1::ConfigPassword* temp = _impl_.password_;
  _impl_.password_ = nullptr;
  return temp;
}
inline ::common::v1::ConfigPassword* PROTOBUF_NONNULL Config::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.password_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::v1::ConfigPassword>(GetArena());
    _impl_.password_ = reinterpret_cast<::common::v1::ConfigPassword*>(p);
  }
  return _impl_.password_;
}
inline ::common::v1::ConfigPassword* PROTOBUF_NONNULL Config::mutable_password()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::common::v1::ConfigPassword* _msg = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:common.v1.Config.password)
  return _msg;
}
inline void Config::set_allocated_password(::common::v1::ConfigPassword* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.password_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.password_ = reinterpret_cast<::common::v1::ConfigPassword*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.v1.Config.password)
}

// .common.v1.ConfigFile file = 9 [json_name = "file"];
inline bool Config::has_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.file_ != nullptr);
  return value;
}
inline void Config::clear_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.file_ != nullptr) _impl_.file_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::common::v1::ConfigFile& Config::_internal_file() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::v1::ConfigFile* p = _impl_.file_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::ConfigFile&>(::common::v1::_ConfigFile_default_instance_);
}
inline const ::common::v1::ConfigFile& Config::file() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.Config.file)
  return _internal_file();
}
inline void Config::unsafe_arena_set_allocated_file(
    ::common::v1::ConfigFile* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.file_);
  }
  _impl_.file_ = reinterpret_cast<::common::v1::ConfigFile*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Config.file)
}
inline ::common::v1::ConfigFile* PROTOBUF_NULLABLE Config::release_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::common::v1::ConfigFile* released = _impl_.file_;
  _impl_.file_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::common::v1::ConfigFile* PROTOBUF_NULLABLE Config::unsafe_arena_release_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.Config.file)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::common::v1::ConfigFile* temp = _impl_.file_;
  _impl_.file_ = nullptr;
  return temp;
}
inline ::common::v1::ConfigFile* PROTOBUF_NONNULL Config::_internal_mutable_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.file_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::v1::ConfigFile>(GetArena());
    _impl_.file_ = reinterpret_cast<::common::v1::ConfigFile*>(p);
  }
  return _impl_.file_;
}
inline ::common::v1::ConfigFile* PROTOBUF_NONNULL Config::mutable_file()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000100u;
  ::common::v1::ConfigFile* _msg = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:common.v1.Config.file)
  return _msg;
}
inline void Config::set_allocated_file(::common::v1::ConfigFile* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.file_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.file_ = reinterpret_cast<::common::v1::ConfigFile*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.v1.Config.file)
}

// .common.v1.ConfigEmail email = 10 [json_name = "email"];
inline bool Config::has_email() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.email_ != nullptr);
  return value;
}
inline void Config::clear_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.email_ != nullptr) _impl_.email_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::common::v1::ConfigEmail& Config::_internal_email() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::v1::ConfigEmail* p = _impl_.email_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::ConfigEmail&>(::common::v1::_ConfigEmail_default_instance_);
}
inline const ::common::v1::ConfigEmail& Config::email() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.Config.email)
  return _internal_email();
}
inline void Config::unsafe_arena_set_allocated_email(
    ::common::v1::ConfigEmail* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.email_);
  }
  _impl_.email_ = reinterpret_cast<::common::v1::ConfigEmail*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Config.email)
}
inline ::common::v1::ConfigEmail* PROTOBUF_NULLABLE Config::release_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::common::v1::ConfigEmail* released = _impl_.email_;
  _impl_.email_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::common::v1::ConfigEmail* PROTOBUF_NULLABLE Config::unsafe_arena_release_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.Config.email)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::common::v1::ConfigEmail* temp = _impl_.email_;
  _impl_.email_ = nullptr;
  return temp;
}
inline ::common::v1::ConfigEmail* PROTOBUF_NONNULL Config::_internal_mutable_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.email_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::v1::ConfigEmail>(GetArena());
    _impl_.email_ = reinterpret_cast<::common::v1::ConfigEmail*>(p);
  }
  return _impl_.email_;
}
inline ::common::v1::ConfigEmail* PROTOBUF_NONNULL Config::mutable_email()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000200u;
  ::common::v1::ConfigEmail* _msg = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:common.v1.Config.email)
  return _msg;
}
inline void Config::set_allocated_email(::common::v1::ConfigEmail* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.email_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.email_ = reinterpret_cast<::common::v1::ConfigEmail*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.v1.Config.email)
}

// .common.v1.ConfigRateLimit rate_limit = 11 [json_name = "rateLimit"];
inline bool Config::has_rate_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rate_limit_ != nullptr);
  return value;
}
inline void Config::clear_rate_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rate_limit_ != nullptr) _impl_.rate_limit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::common::v1::ConfigRateLimit& Config::_internal_rate_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::v1::ConfigRateLimit* p = _impl_.rate_limit_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::ConfigRateLimit&>(::common::v1::_ConfigRateLimit_default_instance_);
}
inline const ::common::v1::ConfigRateLimit& Config::rate_limit() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.Config.rate_limit)
  return _internal_rate_limit();
}
inline void Config::unsafe_arena_set_allocated_rate_limit(
    ::common::v1::ConfigRateLimit* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rate_limit_);
  }
  _impl_.rate_limit_ = reinterpret_cast<::common::v1::ConfigRateLimit*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Config.rate_limit)
}
inline ::common::v1::ConfigRateLimit* PROTOBUF_NULLABLE Config::release_rate_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::common::v1::ConfigRateLimit* released = _impl_.rate_limit_;
  _impl_.rate_limit_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::common::v1::ConfigRateLimit* PROTOBUF_NULLABLE Config::unsafe_arena_release_rate_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.Config.rate_limit)

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::common::v1::ConfigRateLimit* temp = _impl_.rate_limit_;
  _impl_.rate_limit_ = nullptr;
  return temp;
}
inline ::common::v1::ConfigRateLimit* PROTOBUF_NONNULL Config::_internal_mutable_rate_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rate_limit_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::v1::ConfigRateLimit>(GetArena());
    _impl_.rate_limit_ = reinterpret_cast<::common::v1::ConfigRateLimit*>(p);
  }
  return _impl_.rate_limit_;
}
inline ::common::v1::ConfigRateLimit* PROTOBUF_NONNULL Config::mutable_rate_limit()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000400u;
  ::common::v1::ConfigRateLimit* _msg = _internal_mutable_rate_limit();
  // @@protoc_insertion_point(field_mutable:common.v1.Config.rate_limit)
  return _msg;
}
inline void Config::set_allocated_rate_limit(::common::v1::ConfigRateLimit* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rate_limit_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }

  _impl_.rate_limit_ = reinterpret_cast<::common::v1::ConfigRateLimit*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.v1.Config.rate_limit)
}

// .common.v1.ConfigPrivacy privacy = 12 [json_name = "privacy"];
inline bool Config::has_privacy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.privacy_ != nullptr);
  return value;
}
inline void Config::clear_privacy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.privacy_ != nullptr) _impl_.privacy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::common::v1::ConfigPrivacy& Config::_internal_privacy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::v1::ConfigPrivacy* p = _impl_.privacy_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::ConfigPrivacy&>(::common::v1::_ConfigPrivacy_default_instance_);
}
inline const ::common::v1::ConfigPrivacy& Config::privacy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.Config.privacy)
  return _internal_privacy();
}
inline void Config::unsafe_arena_set_allocated_privacy(
    ::common::v1::ConfigPrivacy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.privacy_);
  }
  _impl_.privacy_ = reinterpret_cast<::common::v1::ConfigPrivacy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Config.privacy)
}
inline ::common::v1::ConfigPrivacy* PROTOBUF_NULLABLE Config::release_privacy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::common::v1::ConfigPrivacy* released = _impl_.privacy_;
  _impl_.privacy_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::common::v1::ConfigPrivacy* PROTOBUF_NULLABLE Config::unsafe_arena_release_privacy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.Config.privacy)

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::common::v1::ConfigPrivacy* temp = _impl_.privacy_;
  _impl_.privacy_ = nullptr;
  return temp;
}
inline ::common::v1::ConfigPrivacy* PROTOBUF_NONNULL Config::_internal_mutable_privacy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.privacy_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::v1::ConfigPrivacy>(GetArena());
    _impl_.privacy_ = reinterpret_cast<::common::v1::ConfigPrivacy*>(p);
  }
  return _impl_.privacy_;
}
inline ::common::v1::ConfigPrivacy* PROTOBUF_NONNULL Config::mutable_privacy()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000800u;
  ::common::v1::ConfigPrivacy* _msg = _internal_mutable_privacy();
  // @@protoc_insertion_point(field_mutable:common.v1.Config.privacy)
  return _msg;
}
inline void Config::set_allocated_privacy(::common::v1::ConfigPrivacy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.privacy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }

  _impl_.privacy_ = reinterpret_cast<::common::v1::ConfigPrivacy*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.v1.Config.privacy)
}

// .common.v1.ConfigSupport support = 13 [json_name = "support"];
inline bool Config::has_support() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.support_ != nullptr);
  return value;
}
inline void Config::clear_support() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.support_ != nullptr) _impl_.support_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::common::v1::ConfigSupport& Config::_internal_support() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::v1::ConfigSupport* p = _impl_.support_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::ConfigSupport&>(::common::v1::_ConfigSupport_default_instance_);
}
inline const ::common::v1::ConfigSupport& Config::support() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.Config.support)
  return _internal_support();
}
inline void Config::unsafe_arena_set_allocated_support(
    ::common::v1::ConfigSupport* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.support_);
  }
  _impl_.support_ = reinterpret_cast<::common::v1::ConfigSupport*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Config.support)
}
inline ::common::v1::ConfigSupport* PROTOBUF_NULLABLE Config::release_support() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::common::v1::ConfigSupport* released = _impl_.support_;
  _impl_.support_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::common::v1::ConfigSupport* PROTOBUF_NULLABLE Config::unsafe_arena_release_support() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.Config.support)

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::common::v1::ConfigSupport* temp = _impl_.support_;
  _impl_.support_ = nullptr;
  return temp;
}
inline ::common::v1::ConfigSupport* PROTOBUF_NONNULL Config::_internal_mutable_support() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.support_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::v1::ConfigSupport>(GetArena());
    _impl_.support_ = reinterpret_cast<::common::v1::ConfigSupport*>(p);
  }
  return _impl_.support_;
}
inline ::common::v1::ConfigSupport* PROTOBUF_NONNULL Config::mutable_support()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00001000u;
  ::common::v1::ConfigSupport* _msg = _internal_mutable_support();
  // @@protoc_insertion_point(field_mutable:common.v1.Config.support)
  return _msg;
}
inline void Config::set_allocated_support(::common::v1::ConfigSupport* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.support_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }

  _impl_.support_ = reinterpret_cast<::common::v1::ConfigSupport*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.v1.Config.support)
}

// .common.v1.ConfigLocalization localization = 14 [json_name = "localization"];
inline bool Config::has_localization() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.localization_ != nullptr);
  return value;
}
inline void Config::clear_localization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.localization_ != nullptr) _impl_.localization_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const ::common::v1::ConfigLocalization& Config::_internal_localization() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::v1::ConfigLocalization* p = _impl_.localization_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::ConfigLocalization&>(::common::v1::_ConfigLocalization_default_instance_);
}
inline const ::common::v1::ConfigLocalization& Config::localization() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.Config.localization)
  return _internal_localization();
}
inline void Config::unsafe_arena_set_allocated_localization(
    ::common::v1::ConfigLocalization* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.localization_);
  }
  _impl_.localization_ = reinterpret_cast<::common::v1::ConfigLocalization*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Config.localization)
}
inline ::common::v1::ConfigLocalization* PROTOBUF_NULLABLE Config::release_localization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00002000u;
  ::common::v1::ConfigLocalization* released = _impl_.localization_;
  _impl_.localization_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::common::v1::ConfigLocalization* PROTOBUF_NULLABLE Config::unsafe_arena_release_localization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.Config.localization)

  _impl_._has_bits_[0] &= ~0x00002000u;
  ::common::v1::ConfigLocalization* temp = _impl_.localization_;
  _impl_.localization_ = nullptr;
  return temp;
}
inline ::common::v1::ConfigLocalization* PROTOBUF_NONNULL Config::_internal_mutable_localization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.localization_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::v1::ConfigLocalization>(GetArena());
    _impl_.localization_ = reinterpret_cast<::common::v1::ConfigLocalization*>(p);
  }
  return _impl_.localization_;
}
inline ::common::v1::ConfigLocalization* PROTOBUF_NONNULL Config::mutable_localization()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00002000u;
  ::common::v1::ConfigLocalization* _msg = _internal_mutable_localization();
  // @@protoc_insertion_point(field_mutable:common.v1.Config.localization)
  return _msg;
}
inline void Config::set_allocated_localization(::common::v1::ConfigLocalization* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.localization_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }

  _impl_.localization_ = reinterpret_cast<::common::v1::ConfigLocalization*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.v1.Config.localization)
}

// .common.v1.ConfigLdap ldap = 15 [json_name = "ldap"];
inline bool Config::has_ldap() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ldap_ != nullptr);
  return value;
}
inline void Config::clear_ldap() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ldap_ != nullptr) _impl_.ldap_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const ::common::v1::ConfigLdap& Config::_internal_ldap() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::v1::ConfigLdap* p = _impl_.ldap_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::ConfigLdap&>(::common::v1::_ConfigLdap_default_instance_);
}
inline const ::common::v1::ConfigLdap& Config::ldap() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.Config.ldap)
  return _internal_ldap();
}
inline void Config::unsafe_arena_set_allocated_ldap(
    ::common::v1::ConfigLdap* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ldap_);
  }
  _impl_.ldap_ = reinterpret_cast<::common::v1::ConfigLdap*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Config.ldap)
}
inline ::common::v1::ConfigLdap* PROTOBUF_NULLABLE Config::release_ldap() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00004000u;
  ::common::v1::ConfigLdap* released = _impl_.ldap_;
  _impl_.ldap_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::common::v1::ConfigLdap* PROTOBUF_NULLABLE Config::unsafe_arena_release_ldap() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.Config.ldap)

  _impl_._has_bits_[0] &= ~0x00004000u;
  ::common::v1::ConfigLdap* temp = _impl_.ldap_;
  _impl_.ldap_ = nullptr;
  return temp;
}
inline ::common::v1::ConfigLdap* PROTOBUF_NONNULL Config::_internal_mutable_ldap() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ldap_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::v1::ConfigLdap>(GetArena());
    _impl_.ldap_ = reinterpret_cast<::common::v1::ConfigLdap*>(p);
  }
  return _impl_.ldap_;
}
inline ::common::v1::ConfigLdap* PROTOBUF_NONNULL Config::mutable_ldap()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00004000u;
  ::common::v1::ConfigLdap* _msg = _internal_mutable_ldap();
  // @@protoc_insertion_point(field_mutable:common.v1.Config.ldap)
  return _msg;
}
inline void Config::set_allocated_ldap(::common::v1::ConfigLdap* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ldap_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }

  _impl_.ldap_ = reinterpret_cast<::common::v1::ConfigLdap*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.v1.Config.ldap)
}

// .common.v1.ConfigSaml saml = 16 [json_name = "saml"];
inline bool Config::has_saml() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.saml_ != nullptr);
  return value;
}
inline void Config::clear_saml() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.saml_ != nullptr) _impl_.saml_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const ::common::v1::ConfigSaml& Config::_internal_saml() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::v1::ConfigSaml* p = _impl_.saml_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::ConfigSaml&>(::common::v1::_ConfigSaml_default_instance_);
}
inline const ::common::v1::ConfigSaml& Config::saml() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.Config.saml)
  return _internal_saml();
}
inline void Config::unsafe_arena_set_allocated_saml(
    ::common::v1::ConfigSaml* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.saml_);
  }
  _impl_.saml_ = reinterpret_cast<::common::v1::ConfigSaml*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Config.saml)
}
inline ::common::v1::ConfigSaml* PROTOBUF_NULLABLE Config::release_saml() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00008000u;
  ::common::v1::ConfigSaml* released = _impl_.saml_;
  _impl_.saml_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::common::v1::ConfigSaml* PROTOBUF_NULLABLE Config::unsafe_arena_release_saml() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.Config.saml)

  _impl_._has_bits_[0] &= ~0x00008000u;
  ::common::v1::ConfigSaml* temp = _impl_.saml_;
  _impl_.saml_ = nullptr;
  return temp;
}
inline ::common::v1::ConfigSaml* PROTOBUF_NONNULL Config::_internal_mutable_saml() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.saml_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::v1::ConfigSaml>(GetArena());
    _impl_.saml_ = reinterpret_cast<::common::v1::ConfigSaml*>(p);
  }
  return _impl_.saml_;
}
inline ::common::v1::ConfigSaml* PROTOBUF_NONNULL Config::mutable_saml()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00008000u;
  ::common::v1::ConfigSaml* _msg = _internal_mutable_saml();
  // @@protoc_insertion_point(field_mutable:common.v1.Config.saml)
  return _msg;
}
inline void Config::set_allocated_saml(::common::v1::ConfigSaml* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.saml_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }

  _impl_.saml_ = reinterpret_cast<::common::v1::ConfigSaml*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.v1.Config.saml)
}

// .common.v1.ConfigNativeApp native_app = 17 [json_name = "nativeApp"];
inline bool Config::has_native_app() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.native_app_ != nullptr);
  return value;
}
inline void Config::clear_native_app() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.native_app_ != nullptr) _impl_.native_app_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline const ::common::v1::ConfigNativeApp& Config::_internal_native_app() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::v1::ConfigNativeApp* p = _impl_.native_app_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::ConfigNativeApp&>(::common::v1::_ConfigNativeApp_default_instance_);
}
inline const ::common::v1::ConfigNativeApp& Config::native_app() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.Config.native_app)
  return _internal_native_app();
}
inline void Config::unsafe_arena_set_allocated_native_app(
    ::common::v1::ConfigNativeApp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.native_app_);
  }
  _impl_.native_app_ = reinterpret_cast<::common::v1::ConfigNativeApp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Config.native_app)
}
inline ::common::v1::ConfigNativeApp* PROTOBUF_NULLABLE Config::release_native_app() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00010000u;
  ::common::v1::ConfigNativeApp* released = _impl_.native_app_;
  _impl_.native_app_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::common::v1::ConfigNativeApp* PROTOBUF_NULLABLE Config::unsafe_arena_release_native_app() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.Config.native_app)

  _impl_._has_bits_[0] &= ~0x00010000u;
  ::common::v1::ConfigNativeApp* temp = _impl_.native_app_;
  _impl_.native_app_ = nullptr;
  return temp;
}
inline ::common::v1::ConfigNativeApp* PROTOBUF_NONNULL Config::_internal_mutable_native_app() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.native_app_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::v1::ConfigNativeApp>(GetArena());
    _impl_.native_app_ = reinterpret_cast<::common::v1::ConfigNativeApp*>(p);
  }
  return _impl_.native_app_;
}
inline ::common::v1::ConfigNativeApp* PROTOBUF_NONNULL Config::mutable_native_app()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00010000u;
  ::common::v1::ConfigNativeApp* _msg = _internal_mutable_native_app();
  // @@protoc_insertion_point(field_mutable:common.v1.Config.native_app)
  return _msg;
}
inline void Config::set_allocated_native_app(::common::v1::ConfigNativeApp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.native_app_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }

  _impl_.native_app_ = reinterpret_cast<::common::v1::ConfigNativeApp*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.v1.Config.native_app)
}

// .common.v1.ConfigMeilisearch meilisearch = 18 [json_name = "meilisearch"];
inline bool Config::has_meilisearch() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meilisearch_ != nullptr);
  return value;
}
inline void Config::clear_meilisearch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meilisearch_ != nullptr) _impl_.meilisearch_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline const ::common::v1::ConfigMeilisearch& Config::_internal_meilisearch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::v1::ConfigMeilisearch* p = _impl_.meilisearch_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::ConfigMeilisearch&>(::common::v1::_ConfigMeilisearch_default_instance_);
}
inline const ::common::v1::ConfigMeilisearch& Config::meilisearch() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.Config.meilisearch)
  return _internal_meilisearch();
}
inline void Config::unsafe_arena_set_allocated_meilisearch(
    ::common::v1::ConfigMeilisearch* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.meilisearch_);
  }
  _impl_.meilisearch_ = reinterpret_cast<::common::v1::ConfigMeilisearch*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Config.meilisearch)
}
inline ::common::v1::ConfigMeilisearch* PROTOBUF_NULLABLE Config::release_meilisearch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00020000u;
  ::common::v1::ConfigMeilisearch* released = _impl_.meilisearch_;
  _impl_.meilisearch_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::common::v1::ConfigMeilisearch* PROTOBUF_NULLABLE Config::unsafe_arena_release_meilisearch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.Config.meilisearch)

  _impl_._has_bits_[0] &= ~0x00020000u;
  ::common::v1::ConfigMeilisearch* temp = _impl_.meilisearch_;
  _impl_.meilisearch_ = nullptr;
  return temp;
}
inline ::common::v1::ConfigMeilisearch* PROTOBUF_NONNULL Config::_internal_mutable_meilisearch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meilisearch_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::v1::ConfigMeilisearch>(GetArena());
    _impl_.meilisearch_ = reinterpret_cast<::common::v1::ConfigMeilisearch*>(p);
  }
  return _impl_.meilisearch_;
}
inline ::common::v1::ConfigMeilisearch* PROTOBUF_NONNULL Config::mutable_meilisearch()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00020000u;
  ::common::v1::ConfigMeilisearch* _msg = _internal_mutable_meilisearch();
  // @@protoc_insertion_point(field_mutable:common.v1.Config.meilisearch)
  return _msg;
}
inline void Config::set_allocated_meilisearch(::common::v1::ConfigMeilisearch* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.meilisearch_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }

  _impl_.meilisearch_ = reinterpret_cast<::common::v1::ConfigMeilisearch*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.v1.Config.meilisearch)
}

// .common.v1.ConfigBleve bleve = 19 [json_name = "bleve"];
inline bool Config::has_bleve() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bleve_ != nullptr);
  return value;
}
inline void Config::clear_bleve() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.bleve_ != nullptr) _impl_.bleve_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline const ::common::v1::ConfigBleve& Config::_internal_bleve() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::v1::ConfigBleve* p = _impl_.bleve_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::ConfigBleve&>(::common::v1::_ConfigBleve_default_instance_);
}
inline const ::common::v1::ConfigBleve& Config::bleve() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.Config.bleve)
  return _internal_bleve();
}
inline void Config::unsafe_arena_set_allocated_bleve(
    ::common::v1::ConfigBleve* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bleve_);
  }
  _impl_.bleve_ = reinterpret_cast<::common::v1::ConfigBleve*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Config.bleve)
}
inline ::common::v1::ConfigBleve* PROTOBUF_NULLABLE Config::release_bleve() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00040000u;
  ::common::v1::ConfigBleve* released = _impl_.bleve_;
  _impl_.bleve_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::common::v1::ConfigBleve* PROTOBUF_NULLABLE Config::unsafe_arena_release_bleve() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.Config.bleve)

  _impl_._has_bits_[0] &= ~0x00040000u;
  ::common::v1::ConfigBleve* temp = _impl_.bleve_;
  _impl_.bleve_ = nullptr;
  return temp;
}
inline ::common::v1::ConfigBleve* PROTOBUF_NONNULL Config::_internal_mutable_bleve() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.bleve_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::v1::ConfigBleve>(GetArena());
    _impl_.bleve_ = reinterpret_cast<::common::v1::ConfigBleve*>(p);
  }
  return _impl_.bleve_;
}
inline ::common::v1::ConfigBleve* PROTOBUF_NONNULL Config::mutable_bleve()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00040000u;
  ::common::v1::ConfigBleve* _msg = _internal_mutable_bleve();
  // @@protoc_insertion_point(field_mutable:common.v1.Config.bleve)
  return _msg;
}
inline void Config::set_allocated_bleve(::common::v1::ConfigBleve* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bleve_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }

  _impl_.bleve_ = reinterpret_cast<::common::v1::ConfigBleve*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.v1.Config.bleve)
}

// .common.v1.ConfigDataRetention data_retention = 20 [json_name = "dataRetention"];
inline bool Config::has_data_retention() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_retention_ != nullptr);
  return value;
}
inline void Config::clear_data_retention() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_retention_ != nullptr) _impl_.data_retention_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline const ::common::v1::ConfigDataRetention& Config::_internal_data_retention() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::v1::ConfigDataRetention* p = _impl_.data_retention_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::ConfigDataRetention&>(::common::v1::_ConfigDataRetention_default_instance_);
}
inline const ::common::v1::ConfigDataRetention& Config::data_retention() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.Config.data_retention)
  return _internal_data_retention();
}
inline void Config::unsafe_arena_set_allocated_data_retention(
    ::common::v1::ConfigDataRetention* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_retention_);
  }
  _impl_.data_retention_ = reinterpret_cast<::common::v1::ConfigDataRetention*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Config.data_retention)
}
inline ::common::v1::ConfigDataRetention* PROTOBUF_NULLABLE Config::release_data_retention() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00080000u;
  ::common::v1::ConfigDataRetention* released = _impl_.data_retention_;
  _impl_.data_retention_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::common::v1::ConfigDataRetention* PROTOBUF_NULLABLE Config::unsafe_arena_release_data_retention() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.Config.data_retention)

  _impl_._has_bits_[0] &= ~0x00080000u;
  ::common::v1::ConfigDataRetention* temp = _impl_.data_retention_;
  _impl_.data_retention_ = nullptr;
  return temp;
}
inline ::common::v1::ConfigDataRetention* PROTOBUF_NONNULL Config::_internal_mutable_data_retention() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_retention_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::v1::ConfigDataRetention>(GetArena());
    _impl_.data_retention_ = reinterpret_cast<::common::v1::ConfigDataRetention*>(p);
  }
  return _impl_.data_retention_;
}
inline ::common::v1::ConfigDataRetention* PROTOBUF_NONNULL Config::mutable_data_retention()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00080000u;
  ::common::v1::ConfigDataRetention* _msg = _internal_mutable_data_retention();
  // @@protoc_insertion_point(field_mutable:common.v1.Config.data_retention)
  return _msg;
}
inline void Config::set_allocated_data_retention(::common::v1::ConfigDataRetention* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_retention_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }

  _impl_.data_retention_ = reinterpret_cast<::common::v1::ConfigDataRetention*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.v1.Config.data_retention)
}

// .common.v1.ConfigImageProxy image_proxy = 21 [json_name = "imageProxy"];
inline bool Config::has_image_proxy() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.image_proxy_ != nullptr);
  return value;
}
inline void Config::clear_image_proxy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.image_proxy_ != nullptr) _impl_.image_proxy_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline const ::common::v1::ConfigImageProxy& Config::_internal_image_proxy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::v1::ConfigImageProxy* p = _impl_.image_proxy_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::ConfigImageProxy&>(::common::v1::_ConfigImageProxy_default_instance_);
}
inline const ::common::v1::ConfigImageProxy& Config::image_proxy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.Config.image_proxy)
  return _internal_image_proxy();
}
inline void Config::unsafe_arena_set_allocated_image_proxy(
    ::common::v1::ConfigImageProxy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.image_proxy_);
  }
  _impl_.image_proxy_ = reinterpret_cast<::common::v1::ConfigImageProxy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Config.image_proxy)
}
inline ::common::v1::ConfigImageProxy* PROTOBUF_NULLABLE Config::release_image_proxy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00100000u;
  ::common::v1::ConfigImageProxy* released = _impl_.image_proxy_;
  _impl_.image_proxy_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::common::v1::ConfigImageProxy* PROTOBUF_NULLABLE Config::unsafe_arena_release_image_proxy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.Config.image_proxy)

  _impl_._has_bits_[0] &= ~0x00100000u;
  ::common::v1::ConfigImageProxy* temp = _impl_.image_proxy_;
  _impl_.image_proxy_ = nullptr;
  return temp;
}
inline ::common::v1::ConfigImageProxy* PROTOBUF_NONNULL Config::_internal_mutable_image_proxy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.image_proxy_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::v1::ConfigImageProxy>(GetArena());
    _impl_.image_proxy_ = reinterpret_cast<::common::v1::ConfigImageProxy*>(p);
  }
  return _impl_.image_proxy_;
}
inline ::common::v1::ConfigImageProxy* PROTOBUF_NONNULL Config::mutable_image_proxy()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00100000u;
  ::common::v1::ConfigImageProxy* _msg = _internal_mutable_image_proxy();
  // @@protoc_insertion_point(field_mutable:common.v1.Config.image_proxy)
  return _msg;
}
inline void Config::set_allocated_image_proxy(::common::v1::ConfigImageProxy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.image_proxy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }

  _impl_.image_proxy_ = reinterpret_cast<::common::v1::ConfigImageProxy*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.v1.Config.image_proxy)
}

// -------------------------------------------------------------------

// ConfigGetRequest

// -------------------------------------------------------------------

// ConfigGetResponse

// .common.v1.Config data = 1 [json_name = "data"];
inline bool ConfigGetResponse::has_data() const {
  return response_case() == kData;
}
inline bool ConfigGetResponse::_internal_has_data() const {
  return response_case() == kData;
}
inline void ConfigGetResponse::set_has_data() {
  _impl_._oneof_case_[0] = kData;
}
inline void ConfigGetResponse::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() == kData) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.data_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.data_);
    }
    clear_has_response();
  }
}
inline ::common::v1::Config* PROTOBUF_NULLABLE ConfigGetResponse::release_data() {
  // @@protoc_insertion_point(field_release:common.v1.ConfigGetResponse.data)
  if (response_case() == kData) {
    clear_has_response();
    auto* temp = _impl_.response_.data_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::v1::Config& ConfigGetResponse::_internal_data() const {
  return response_case() == kData ? *_impl_.response_.data_ : reinterpret_cast<::common::v1::Config&>(::common::v1::_Config_default_instance_);
}
inline const ::common::v1::Config& ConfigGetResponse::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigGetResponse.data)
  return _internal_data();
}
inline ::common::v1::Config* PROTOBUF_NULLABLE ConfigGetResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:common.v1.ConfigGetResponse.data)
  if (response_case() == kData) {
    clear_has_response();
    auto* temp = _impl_.response_.data_;
    _impl_.response_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConfigGetResponse::unsafe_arena_set_allocated_data(
    ::common::v1::Config* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_data();
    _impl_.response_.data_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.ConfigGetResponse.data)
}
inline ::common::v1::Config* PROTOBUF_NONNULL ConfigGetResponse::_internal_mutable_data() {
  if (response_case() != kData) {
    clear_response();
    set_has_data();
    _impl_.response_.data_ = 
        ::google::protobuf::Message::DefaultConstruct<::common::v1::Config>(GetArena());
  }
  return _impl_.response_.data_;
}
inline ::common::v1::Config* PROTOBUF_NONNULL ConfigGetResponse::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::common::v1::Config* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigGetResponse.data)
  return _msg;
}

// .shared.v1.AppError error = 2 [json_name = "error"];
inline bool ConfigGetResponse::has_error() const {
  return response_case() == kError;
}
inline bool ConfigGetResponse::_internal_has_error() const {
  return response_case() == kError;
}
inline void ConfigGetResponse::set_has_error() {
  _impl_._oneof_case_[0] = kError;
}
inline ::shared::v1::AppError* PROTOBUF_NULLABLE ConfigGetResponse::release_error() {
  // @@protoc_insertion_point(field_release:common.v1.ConfigGetResponse.error)
  if (response_case() == kError) {
    clear_has_response();
    auto* temp = _impl_.response_.error_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::shared::v1::AppError& ConfigGetResponse::_internal_error() const {
  return response_case() == kError ? *_impl_.response_.error_ : reinterpret_cast<::shared::v1::AppError&>(::shared::v1::_AppError_default_instance_);
}
inline const ::shared::v1::AppError& ConfigGetResponse::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigGetResponse.error)
  return _internal_error();
}
inline ::shared::v1::AppError* PROTOBUF_NULLABLE ConfigGetResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:common.v1.ConfigGetResponse.error)
  if (response_case() == kError) {
    clear_has_response();
    auto* temp = _impl_.response_.error_;
    _impl_.response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConfigGetResponse::unsafe_arena_set_allocated_error(
    ::shared::v1::AppError* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_error();
    _impl_.response_.error_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.ConfigGetResponse.error)
}
inline ::shared::v1::AppError* PROTOBUF_NONNULL ConfigGetResponse::_internal_mutable_error() {
  if (response_case() != kError) {
    clear_response();
    set_has_error();
    _impl_.response_.error_ = 
        ::google::protobuf::Message::DefaultConstruct<::shared::v1::AppError>(GetArena());
  }
  return _impl_.response_.error_;
}
inline ::shared::v1::AppError* PROTOBUF_NONNULL ConfigGetResponse::mutable_error()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::shared::v1::AppError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigGetResponse.error)
  return _msg;
}

inline bool ConfigGetResponse::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void ConfigGetResponse::clear_has_response() {
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}
inline ConfigGetResponse::ResponseCase ConfigGetResponse::response_case() const {
  return ConfigGetResponse::ResponseCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConfigUpdateRequest

// .common.v1.Config config = 1 [json_name = "config"];
inline bool ConfigUpdateRequest::has_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_ != nullptr);
  return value;
}
inline void ConfigUpdateRequest::clear_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ != nullptr) _impl_.config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::common::v1::Config& ConfigUpdateRequest::_internal_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::common::v1::Config* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Config&>(::common::v1::_Config_default_instance_);
}
inline const ::common::v1::Config& ConfigUpdateRequest::config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigUpdateRequest.config)
  return _internal_config();
}
inline void ConfigUpdateRequest::unsafe_arena_set_allocated_config(
    ::common::v1::Config* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = reinterpret_cast<::common::v1::Config*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.ConfigUpdateRequest.config)
}
inline ::common::v1::Config* PROTOBUF_NULLABLE ConfigUpdateRequest::release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::common::v1::Config* released = _impl_.config_;
  _impl_.config_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::common::v1::Config* PROTOBUF_NULLABLE ConfigUpdateRequest::unsafe_arena_release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigUpdateRequest.config)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::common::v1::Config* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::common::v1::Config* PROTOBUF_NONNULL ConfigUpdateRequest::_internal_mutable_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::common::v1::Config>(GetArena());
    _impl_.config_ = reinterpret_cast<::common::v1::Config*>(p);
  }
  return _impl_.config_;
}
inline ::common::v1::Config* PROTOBUF_NONNULL ConfigUpdateRequest::mutable_config()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::common::v1::Config* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigUpdateRequest.config)
  return _msg;
}
inline void ConfigUpdateRequest::set_allocated_config(::common::v1::Config* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.config_ = reinterpret_cast<::common::v1::Config*>(value);
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigUpdateRequest.config)
}

// -------------------------------------------------------------------

// ConfigUpdateResponse

// .common.v1.Config data = 1 [json_name = "data"];
inline bool ConfigUpdateResponse::has_data() const {
  return response_case() == kData;
}
inline bool ConfigUpdateResponse::_internal_has_data() const {
  return response_case() == kData;
}
inline void ConfigUpdateResponse::set_has_data() {
  _impl_._oneof_case_[0] = kData;
}
inline void ConfigUpdateResponse::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() == kData) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.data_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.data_);
    }
    clear_has_response();
  }
}
inline ::common::v1::Config* PROTOBUF_NULLABLE ConfigUpdateResponse::release_data() {
  // @@protoc_insertion_point(field_release:common.v1.ConfigUpdateResponse.data)
  if (response_case() == kData) {
    clear_has_response();
    auto* temp = _impl_.response_.data_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::v1::Config& ConfigUpdateResponse::_internal_data() const {
  return response_case() == kData ? *_impl_.response_.data_ : reinterpret_cast<::common::v1::Config&>(::common::v1::_Config_default_instance_);
}
inline const ::common::v1::Config& ConfigUpdateResponse::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigUpdateResponse.data)
  return _internal_data();
}
inline ::common::v1::Config* PROTOBUF_NULLABLE ConfigUpdateResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:common.v1.ConfigUpdateResponse.data)
  if (response_case() == kData) {
    clear_has_response();
    auto* temp = _impl_.response_.data_;
    _impl_.response_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConfigUpdateResponse::unsafe_arena_set_allocated_data(
    ::common::v1::Config* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_data();
    _impl_.response_.data_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.ConfigUpdateResponse.data)
}
inline ::common::v1::Config* PROTOBUF_NONNULL ConfigUpdateResponse::_internal_mutable_data() {
  if (response_case() != kData) {
    clear_response();
    set_has_data();
    _impl_.response_.data_ = 
        ::google::protobuf::Message::DefaultConstruct<::common::v1::Config>(GetArena());
  }
  return _impl_.response_.data_;
}
inline ::common::v1::Config* PROTOBUF_NONNULL ConfigUpdateResponse::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::common::v1::Config* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigUpdateResponse.data)
  return _msg;
}

// .shared.v1.AppError error = 2 [json_name = "error"];
inline bool ConfigUpdateResponse::has_error() const {
  return response_case() == kError;
}
inline bool ConfigUpdateResponse::_internal_has_error() const {
  return response_case() == kError;
}
inline void ConfigUpdateResponse::set_has_error() {
  _impl_._oneof_case_[0] = kError;
}
inline ::shared::v1::AppError* PROTOBUF_NULLABLE ConfigUpdateResponse::release_error() {
  // @@protoc_insertion_point(field_release:common.v1.ConfigUpdateResponse.error)
  if (response_case() == kError) {
    clear_has_response();
    auto* temp = _impl_.response_.error_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::shared::v1::AppError& ConfigUpdateResponse::_internal_error() const {
  return response_case() == kError ? *_impl_.response_.error_ : reinterpret_cast<::shared::v1::AppError&>(::shared::v1::_AppError_default_instance_);
}
inline const ::shared::v1::AppError& ConfigUpdateResponse::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigUpdateResponse.error)
  return _internal_error();
}
inline ::shared::v1::AppError* PROTOBUF_NULLABLE ConfigUpdateResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:common.v1.ConfigUpdateResponse.error)
  if (response_case() == kError) {
    clear_has_response();
    auto* temp = _impl_.response_.error_;
    _impl_.response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConfigUpdateResponse::unsafe_arena_set_allocated_error(
    ::shared::v1::AppError* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_error();
    _impl_.response_.error_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.ConfigUpdateResponse.error)
}
inline ::shared::v1::AppError* PROTOBUF_NONNULL ConfigUpdateResponse::_internal_mutable_error() {
  if (response_case() != kError) {
    clear_response();
    set_has_error();
    _impl_.response_.error_ = 
        ::google::protobuf::Message::DefaultConstruct<::shared::v1::AppError>(GetArena());
  }
  return _impl_.response_.error_;
}
inline ::shared::v1::AppError* PROTOBUF_NONNULL ConfigUpdateResponse::mutable_error()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::shared::v1::AppError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigUpdateResponse.error)
  return _msg;
}

inline bool ConfigUpdateResponse::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void ConfigUpdateResponse::clear_has_response() {
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}
inline ConfigUpdateResponse::ResponseCase ConfigUpdateResponse::response_case() const {
  return ConfigUpdateResponse::ResponseCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConfigListenerResponse

// .common.v1.Config data = 1 [json_name = "data"];
inline bool ConfigListenerResponse::has_data() const {
  return response_case() == kData;
}
inline bool ConfigListenerResponse::_internal_has_data() const {
  return response_case() == kData;
}
inline void ConfigListenerResponse::set_has_data() {
  _impl_._oneof_case_[0] = kData;
}
inline void ConfigListenerResponse::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() == kData) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.data_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.data_);
    }
    clear_has_response();
  }
}
inline ::common::v1::Config* PROTOBUF_NULLABLE ConfigListenerResponse::release_data() {
  // @@protoc_insertion_point(field_release:common.v1.ConfigListenerResponse.data)
  if (response_case() == kData) {
    clear_has_response();
    auto* temp = _impl_.response_.data_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::v1::Config& ConfigListenerResponse::_internal_data() const {
  return response_case() == kData ? *_impl_.response_.data_ : reinterpret_cast<::common::v1::Config&>(::common::v1::_Config_default_instance_);
}
inline const ::common::v1::Config& ConfigListenerResponse::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigListenerResponse.data)
  return _internal_data();
}
inline ::common::v1::Config* PROTOBUF_NULLABLE ConfigListenerResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:common.v1.ConfigListenerResponse.data)
  if (response_case() == kData) {
    clear_has_response();
    auto* temp = _impl_.response_.data_;
    _impl_.response_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConfigListenerResponse::unsafe_arena_set_allocated_data(
    ::common::v1::Config* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_data();
    _impl_.response_.data_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.ConfigListenerResponse.data)
}
inline ::common::v1::Config* PROTOBUF_NONNULL ConfigListenerResponse::_internal_mutable_data() {
  if (response_case() != kData) {
    clear_response();
    set_has_data();
    _impl_.response_.data_ = 
        ::google::protobuf::Message::DefaultConstruct<::common::v1::Config>(GetArena());
  }
  return _impl_.response_.data_;
}
inline ::common::v1::Config* PROTOBUF_NONNULL ConfigListenerResponse::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::common::v1::Config* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigListenerResponse.data)
  return _msg;
}

// .shared.v1.AppError error = 2 [json_name = "error"];
inline bool ConfigListenerResponse::has_error() const {
  return response_case() == kError;
}
inline bool ConfigListenerResponse::_internal_has_error() const {
  return response_case() == kError;
}
inline void ConfigListenerResponse::set_has_error() {
  _impl_._oneof_case_[0] = kError;
}
inline ::shared::v1::AppError* PROTOBUF_NULLABLE ConfigListenerResponse::release_error() {
  // @@protoc_insertion_point(field_release:common.v1.ConfigListenerResponse.error)
  if (response_case() == kError) {
    clear_has_response();
    auto* temp = _impl_.response_.error_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::shared::v1::AppError& ConfigListenerResponse::_internal_error() const {
  return response_case() == kError ? *_impl_.response_.error_ : reinterpret_cast<::shared::v1::AppError&>(::shared::v1::_AppError_default_instance_);
}
inline const ::shared::v1::AppError& ConfigListenerResponse::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigListenerResponse.error)
  return _internal_error();
}
inline ::shared::v1::AppError* PROTOBUF_NULLABLE ConfigListenerResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:common.v1.ConfigListenerResponse.error)
  if (response_case() == kError) {
    clear_has_response();
    auto* temp = _impl_.response_.error_;
    _impl_.response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConfigListenerResponse::unsafe_arena_set_allocated_error(
    ::shared::v1::AppError* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_error();
    _impl_.response_.error_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.ConfigListenerResponse.error)
}
inline ::shared::v1::AppError* PROTOBUF_NONNULL ConfigListenerResponse::_internal_mutable_error() {
  if (response_case() != kError) {
    clear_response();
    set_has_error();
    _impl_.response_.error_ = 
        ::google::protobuf::Message::DefaultConstruct<::shared::v1::AppError>(GetArena());
  }
  return _impl_.response_.error_;
}
inline ::shared::v1::AppError* PROTOBUF_NONNULL ConfigListenerResponse::mutable_error()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::shared::v1::AppError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigListenerResponse.error)
  return _msg;
}

inline bool ConfigListenerResponse::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void ConfigListenerResponse::clear_has_response() {
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}
inline ConfigListenerResponse::ResponseCase ConfigListenerResponse::response_case() const {
  return ConfigListenerResponse::ResponseCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConfigListenerRequest

// string client_id = 1 [json_name = "clientId"];
inline void ConfigListenerRequest::clear_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ConfigListenerRequest::client_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:common.v1.ConfigListenerRequest.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfigListenerRequest::set_client_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:common.v1.ConfigListenerRequest.client_id)
}
inline ::std::string* PROTOBUF_NONNULL ConfigListenerRequest::mutable_client_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:common.v1.ConfigListenerRequest.client_id)
  return _s;
}
inline const ::std::string& ConfigListenerRequest::_internal_client_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_id_.Get();
}
inline void ConfigListenerRequest::_internal_set_client_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.client_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfigListenerRequest::_internal_mutable_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.client_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfigListenerRequest::release_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:common.v1.ConfigListenerRequest.client_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.client_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.client_id_.Set("", GetArena());
  }
  return released;
}
inline void ConfigListenerRequest::set_allocated_client_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.client_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigListenerRequest.client_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace common


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // common_2fv1_2fconfig_2eproto_2epb_2eh
