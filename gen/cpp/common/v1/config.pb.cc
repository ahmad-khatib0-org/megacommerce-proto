// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/v1/config.proto

#include "common/v1/config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace common {
namespace v1 {
constexpr ConfigMain::ConfigMain(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : env_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , restrict_link_previews_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , read_timeout_(0)
  , write_timeout_(0)
  , idle_timeout_(0)
  , enable_link_previews_(false)
  , enable_client_performance_debugging_(false)
  , enable_gif_picker_(false)
  , enable_custom_emoji_(false)
  , time_between_user_typing_updates_milliseconds_(int64_t{0})
  , enable_emoji_picker_(false)
  , enable_file_search_(false)
  , enable_user_typing_messages_(false)
  , enable_user_statuses_(false)
  , enable_email_invitations_(false)
  , enable_svgs_(false)
  , allow_persistent_notifications_(false)
  , allow_synced_drafts_(false)
  , persistent_notification_interval_minutes_(0)
  , persistent_notification_max_count_(0)
  , persistent_notification_max_recipients_(0)
  , feature_flag_sync_interval_seconds_(0){}
struct ConfigMainDefaultTypeInternal {
  constexpr ConfigMainDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigMainDefaultTypeInternal() {}
  union {
    ConfigMain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigMainDefaultTypeInternal _ConfigMain_default_instance_;
constexpr ConfigServices::ConfigServices(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : common_service_grpc_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_service_grpc_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , jaeger_collector_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , common_service_prometheus_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_service_prometheus_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ConfigServicesDefaultTypeInternal {
  constexpr ConfigServicesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigServicesDefaultTypeInternal() {}
  union {
    ConfigServices _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigServicesDefaultTypeInternal _ConfigServices_default_instance_;
constexpr ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::ConfigSecurity_RestrictedUsernamesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ConfigSecurity_RestrictedUsernamesEntry_DoNotUseDefaultTypeInternal {
  constexpr ConfigSecurity_RestrictedUsernamesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigSecurity_RestrictedUsernamesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ConfigSecurity_RestrictedUsernamesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigSecurity_RestrictedUsernamesEntry_DoNotUseDefaultTypeInternal _ConfigSecurity_RestrictedUsernamesEntry_DoNotUse_default_instance_;
constexpr ConfigSecurity::ConfigSecurity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : restricted_usernames_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , allow_cors_from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cors_exposed_headers_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , maximum_login_attempts_(0)
  , enable_insecure_outgoing_connections_(false)
  , enable_multifactor_authentication_(false)
  , enforce_multifactor_authentication_(false)
  , enable_oauth_service_provider_(false)
  , session_length_web_in_hours_(0)
  , session_length_mobile_in_hours_(0)
  , session_length_sso_in_hours_(0)
  , enable_outgoing_oauth_connections_(false)
  , terminate_sessions_on_password_change_(false)
  , cors_allow_credentials_(false)
  , cors_debug_(false)
  , allow_cookies_for_subdomains_(false)
  , session_cache_in_minutes_(0)
  , websocket_secure_port_(0)
  , websocket_port_(0){}
struct ConfigSecurityDefaultTypeInternal {
  constexpr ConfigSecurityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigSecurityDefaultTypeInternal() {}
  union {
    ConfigSecurity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigSecurityDefaultTypeInternal _ConfigSecurity_default_instance_;
constexpr CacheConfig::CacheConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cache_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , redis_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , redis_password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , redis_cache_prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , redis_db_(0)
  , disable_client_cache_(false){}
struct CacheConfigDefaultTypeInternal {
  constexpr CacheConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CacheConfigDefaultTypeInternal() {}
  union {
    CacheConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CacheConfigDefaultTypeInternal _CacheConfig_default_instance_;
constexpr ConfigMetrics::ConfigMetrics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_side_user_ids_()
  , listen_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_profile_rate_(0)
  , enable_(false)
  , enable_client_metrics_(false)
  , enable_notification_metrics_(false){}
struct ConfigMetricsDefaultTypeInternal {
  constexpr ConfigMetricsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigMetricsDefaultTypeInternal() {}
  union {
    ConfigMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigMetricsDefaultTypeInternal _ConfigMetrics_default_instance_;
constexpr ConfigSSO::ConfigSSO(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : secret_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scope_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , auth_endpoint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_endpoint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_api_endpoint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , discovery_endpoint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , button_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , button_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enable_(false){}
struct ConfigSSODefaultTypeInternal {
  constexpr ConfigSSODefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigSSODefaultTypeInternal() {}
  union {
    ConfigSSO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigSSODefaultTypeInternal _ConfigSSO_default_instance_;
constexpr ConfigSql::ConfigSql(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : driver_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_source_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , at_rest_encrypt_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_idle_conns_(0)
  , conn_max_lifetime_milliseconds_(0)
  , conn_max_idle_time_milliseconds_(0)
  , max_open_conns_(0)
  , trace_(false)
  , disable_database_search_(false)
  , query_timeout_(0){}
struct ConfigSqlDefaultTypeInternal {
  constexpr ConfigSqlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigSqlDefaultTypeInternal() {}
  union {
    ConfigSql _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigSqlDefaultTypeInternal _ConfigSql_default_instance_;
constexpr ConfigPassword::ConfigPassword(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : minimum_length_(0)
  , maximum_lenght_(0)
  , lowercase_(false)
  , number_(false)
  , uppercase_(false)
  , symbol_(false)
  , enable_forgot_link_(false){}
struct ConfigPasswordDefaultTypeInternal {
  constexpr ConfigPasswordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigPasswordDefaultTypeInternal() {}
  union {
    ConfigPassword _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigPasswordDefaultTypeInternal _ConfigPassword_default_instance_;
constexpr ConfigFile::ConfigFile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : driver_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , directory_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_link_salt_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , initial_font_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amazon_s3_access_key_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amazon_s3_secret_access_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amazon_s3_bucket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amazon_s3_path_prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amazon_s3_region_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amazon_s3_endpoint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amazon_s3_storage_class_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_file_size_(int64_t{0})
  , max_image_resolution_(int64_t{0})
  , max_image_decoder_concurrency_(int64_t{0})
  , enable_file_attachments_(false)
  , enable_mobile_upload_(false)
  , enable_mobile_download_(false)
  , enable_public_link_(false)
  , extract_content_(false)
  , archive_recursion_(false)
  , amazon_s3_ssl_(false)
  , amazon_s3_sign_v2_(false)
  , amazon_s3_request_timeout_milliseconds_(int64_t{0})
  , amazon_s3_upload_part_size_bytes_(int64_t{0})
  , amazon_s3_sse_(false)
  , amazon_s3_trace_(false){}
struct ConfigFileDefaultTypeInternal {
  constexpr ConfigFileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigFileDefaultTypeInternal() {}
  union {
    ConfigFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigFileDefaultTypeInternal _ConfigFile_default_instance_;
constexpr ConfigEmail::ConfigEmail(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : feedback_email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reply_to_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , smtp_username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , smtp_password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , smtp_server_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , smtp_port_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , connection_security_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , push_notification_server_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , push_notification_contents_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , email_notification_contents_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , login_button_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , login_button_border_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , login_button_text_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , send_email_notifications_(false)
  , require_email_verification_(false)
  , enable_smtp_auth_(false)
  , send_push_notifications_(false)
  , smtp_server_timeout_(0)
  , push_notification_buffer_(0)
  , email_batching_buffer_size_(0)
  , enable_email_batching_(false)
  , skip_server_certificate_verification_(false)
  , email_batching_interval_(0){}
struct ConfigEmailDefaultTypeInternal {
  constexpr ConfigEmailDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigEmailDefaultTypeInternal() {}
  union {
    ConfigEmail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigEmailDefaultTypeInternal _ConfigEmail_default_instance_;
constexpr ConfigRateLimit::ConfigRateLimit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vary_by_header_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , per_sec_(0)
  , max_burst_(0)
  , memory_store_size_(0)
  , enable_(false)
  , vary_by_remote_addr_(false)
  , vary_by_user_(false){}
struct ConfigRateLimitDefaultTypeInternal {
  constexpr ConfigRateLimitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigRateLimitDefaultTypeInternal() {}
  union {
    ConfigRateLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigRateLimitDefaultTypeInternal _ConfigRateLimit_default_instance_;
constexpr ConfigPrivacy::ConfigPrivacy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : show_email_address_(false)
  , show_full_name_(false){}
struct ConfigPrivacyDefaultTypeInternal {
  constexpr ConfigPrivacyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigPrivacyDefaultTypeInternal() {}
  union {
    ConfigPrivacy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigPrivacyDefaultTypeInternal _ConfigPrivacy_default_instance_;
constexpr ConfigSupport::ConfigSupport(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : terms_of_service_link_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , privacy_policy_link_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , about_link_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , help_link_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , report_a_problem_link_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , forgot_password_link_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , support_email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ConfigSupportDefaultTypeInternal {
  constexpr ConfigSupportDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigSupportDefaultTypeInternal() {}
  union {
    ConfigSupport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigSupportDefaultTypeInternal _ConfigSupport_default_instance_;
constexpr ConfigLocalization::ConfigLocalization(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : default_server_locale_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , default_client_locale_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , available_locales_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ConfigLocalizationDefaultTypeInternal {
  constexpr ConfigLocalizationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigLocalizationDefaultTypeInternal() {}
  union {
    ConfigLocalization _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigLocalizationDefaultTypeInternal _ConfigLocalization_default_instance_;
constexpr ConfigLdap::ConfigLdap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ldap_server_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , connection_security_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , base_dn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bind_username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bind_password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_filter_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_filter_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , admin_filter_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_display_name_attribute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_id_attribute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , first_name_attribute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_name_attribute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , email_attribute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , username_attribute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nickname_attribute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_attribute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , position_attribute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , login_id_attribute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , picture_attribute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , login_field_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , login_button_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , login_button_border_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , login_button_text_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ldap_port_(0)
  , enable_(false)
  , enable_sync_(false)
  , enable_admin_filter_(false)
  , maximum_login_attempts_(0)
  , sync_interval_minutes_(0)
  , query_timeout_(0)
  , max_page_size_(0){}
struct ConfigLdapDefaultTypeInternal {
  constexpr ConfigLdapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigLdapDefaultTypeInternal() {}
  union {
    ConfigLdap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigLdapDefaultTypeInternal _ConfigLdap_default_instance_;
constexpr ConfigSaml::ConfigSaml(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : idp_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , idp_descriptor_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , idp_metadata_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , service_provider_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , assertion_consumer_service_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_algorithm_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , canonical_algorithm_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scoping_idp_provider_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scoping_idp_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , idp_certificate_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_certificate_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , private_key_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_attribute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , admin_attribute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , first_name_attribute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_name_attribute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , email_attribute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , username_attribute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nickname_attribute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , locale_attribute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , position_attribute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , login_button_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , login_button_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , login_button_border_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , login_button_text_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enable_(false)
  , enable_sync_with_ldap_(false)
  , enable_sync_with_ldap_include_auth_(false)
  , ignore_guests_ldap_sync_(false)
  , verify_(false)
  , encrypt_(false)
  , sign_request_(false)
  , enable_admin_attribute_(false){}
struct ConfigSamlDefaultTypeInternal {
  constexpr ConfigSamlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigSamlDefaultTypeInternal() {}
  union {
    ConfigSaml _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigSamlDefaultTypeInternal _ConfigSaml_default_instance_;
constexpr ConfigNativeApp::ConfigNativeApp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_custom_url_schemes_()
  , app_download_link_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , android_app_download_link_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ios_app_download_link_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mobile_external_browser_(false)
  , mobile_enable_biometrics_(false)
  , mobile_prevent_screen_capture_(false)
  , mobile_jailbreak_protection_(false){}
struct ConfigNativeAppDefaultTypeInternal {
  constexpr ConfigNativeAppDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigNativeAppDefaultTypeInternal() {}
  union {
    ConfigNativeApp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigNativeAppDefaultTypeInternal _ConfigNativeApp_default_instance_;
constexpr ConfigMeilisearch::ConfigMeilisearch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , master_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enable_indexing_(false)
  , enable_searching_(false)
  , enable_autocomplete_(false)
  , enable_typo_tolerance_(false)
  , batch_size_(0)
  , request_timeout_seconds_(0)
  , search_cutoff_ms_(0){}
struct ConfigMeilisearchDefaultTypeInternal {
  constexpr ConfigMeilisearchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigMeilisearchDefaultTypeInternal() {}
  union {
    ConfigMeilisearch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigMeilisearchDefaultTypeInternal _ConfigMeilisearch_default_instance_;
constexpr ConfigBleve::ConfigBleve(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : index_dir_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enable_indexing_(false)
  , enable_searching_(false)
  , enable_autocomplete_(false)
  , bulk_indexing_time_window_seconds_(0)
  , batch_size_(0){}
struct ConfigBleveDefaultTypeInternal {
  constexpr ConfigBleveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigBleveDefaultTypeInternal() {}
  union {
    ConfigBleve _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigBleveDefaultTypeInternal _ConfigBleve_default_instance_;
constexpr ConfigDataRetention::ConfigDataRetention(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deletion_job_start_time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enable_message_deletion_(false)
  , enable_file_deletion_(false)
  , enable_boards_deletion_(false)
  , message_retention_hours_(0)
  , file_retention_hours_(0)
  , boards_retention_days_(0)
  , batch_size_(0)
  , time_between_batches_milliseconds_(0)
  , retention_ids_batch_size_(0){}
struct ConfigDataRetentionDefaultTypeInternal {
  constexpr ConfigDataRetentionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigDataRetentionDefaultTypeInternal() {}
  union {
    ConfigDataRetention _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigDataRetentionDefaultTypeInternal _ConfigDataRetention_default_instance_;
constexpr ConfigImageProxy::ConfigImageProxy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : image_proxy_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remote_image_proxy_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remote_image_proxy_options_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enable_(false){}
struct ConfigImageProxyDefaultTypeInternal {
  constexpr ConfigImageProxyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigImageProxyDefaultTypeInternal() {}
  union {
    ConfigImageProxy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigImageProxyDefaultTypeInternal _ConfigImageProxy_default_instance_;
constexpr Config::Config(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : main_(nullptr)
  , services_(nullptr)
  , security_(nullptr)
  , cache_(nullptr)
  , metrics_(nullptr)
  , sso_(nullptr)
  , sql_(nullptr)
  , password_(nullptr)
  , file_(nullptr)
  , email_(nullptr)
  , rate_limit_(nullptr)
  , privacy_(nullptr)
  , support_(nullptr)
  , localization_(nullptr)
  , ldap_(nullptr)
  , saml_(nullptr)
  , native_app_(nullptr)
  , meilisearch_(nullptr)
  , bleve_(nullptr)
  , data_retention_(nullptr)
  , image_proxy_(nullptr){}
struct ConfigDefaultTypeInternal {
  constexpr ConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigDefaultTypeInternal _Config_default_instance_;
constexpr ConfigGetRequest::ConfigGetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ConfigGetRequestDefaultTypeInternal {
  constexpr ConfigGetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigGetRequestDefaultTypeInternal() {}
  union {
    ConfigGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigGetRequestDefaultTypeInternal _ConfigGetRequest_default_instance_;
constexpr ConfigGetResponse::ConfigGetResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ConfigGetResponseDefaultTypeInternal {
  constexpr ConfigGetResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigGetResponseDefaultTypeInternal() {}
  union {
    ConfigGetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigGetResponseDefaultTypeInternal _ConfigGetResponse_default_instance_;
constexpr ConfigUpdateRequest::ConfigUpdateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_(nullptr){}
struct ConfigUpdateRequestDefaultTypeInternal {
  constexpr ConfigUpdateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigUpdateRequestDefaultTypeInternal() {}
  union {
    ConfigUpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigUpdateRequestDefaultTypeInternal _ConfigUpdateRequest_default_instance_;
constexpr ConfigUpdateResponse::ConfigUpdateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ConfigUpdateResponseDefaultTypeInternal {
  constexpr ConfigUpdateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigUpdateResponseDefaultTypeInternal() {}
  union {
    ConfigUpdateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigUpdateResponseDefaultTypeInternal _ConfigUpdateResponse_default_instance_;
constexpr ConfigListenerResponse::ConfigListenerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ConfigListenerResponseDefaultTypeInternal {
  constexpr ConfigListenerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigListenerResponseDefaultTypeInternal() {}
  union {
    ConfigListenerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigListenerResponseDefaultTypeInternal _ConfigListenerResponse_default_instance_;
constexpr ConfigListenerRequest::ConfigListenerRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ConfigListenerRequestDefaultTypeInternal {
  constexpr ConfigListenerRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigListenerRequestDefaultTypeInternal() {}
  union {
    ConfigListenerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigListenerRequestDefaultTypeInternal _ConfigListenerRequest_default_instance_;
}  // namespace v1
}  // namespace common
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2fv1_2fconfig_2eproto[29];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_common_2fv1_2fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2fv1_2fconfig_2eproto = nullptr;

const uint32_t TableStruct_common_2fv1_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, env_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, read_timeout_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, write_timeout_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, idle_timeout_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, enable_link_previews_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, restrict_link_previews_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, enable_client_performance_debugging_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, enable_gif_picker_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, enable_custom_emoji_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, enable_emoji_picker_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, time_between_user_typing_updates_milliseconds_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, enable_file_search_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, enable_user_typing_messages_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, enable_user_statuses_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, enable_email_invitations_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, enable_svgs_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, allow_persistent_notifications_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, persistent_notification_interval_minutes_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, persistent_notification_max_count_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, persistent_notification_max_recipients_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, feature_flag_sync_interval_seconds_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, allow_synced_drafts_),
  0,
  2,
  3,
  4,
  5,
  1,
  6,
  7,
  8,
  10,
  9,
  11,
  12,
  13,
  14,
  15,
  16,
  18,
  19,
  20,
  21,
  17,
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigServices, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigServices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigServices, common_service_grpc_url_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigServices, user_service_grpc_url_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigServices, jaeger_collector_url_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigServices, common_service_prometheus_url_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigServices, user_service_prometheus_url_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity_RestrictedUsernamesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity_RestrictedUsernamesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity_RestrictedUsernamesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity_RestrictedUsernamesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, restricted_usernames_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, maximum_login_attempts_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, enable_insecure_outgoing_connections_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, enable_multifactor_authentication_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, enforce_multifactor_authentication_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, enable_oauth_service_provider_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, enable_outgoing_oauth_connections_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, terminate_sessions_on_password_change_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, session_length_web_in_hours_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, session_length_mobile_in_hours_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, session_length_sso_in_hours_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, allow_cors_from_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, cors_exposed_headers_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, cors_allow_credentials_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, cors_debug_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, allow_cookies_for_subdomains_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, session_cache_in_minutes_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, websocket_secure_port_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, websocket_port_),
  ~0u,
  2,
  3,
  4,
  5,
  6,
  10,
  11,
  7,
  8,
  9,
  0,
  1,
  12,
  13,
  14,
  15,
  16,
  17,
  PROTOBUF_FIELD_OFFSET(::common::v1::CacheConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::common::v1::CacheConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::CacheConfig, cache_type_),
  PROTOBUF_FIELD_OFFSET(::common::v1::CacheConfig, redis_address_),
  PROTOBUF_FIELD_OFFSET(::common::v1::CacheConfig, redis_password_),
  PROTOBUF_FIELD_OFFSET(::common::v1::CacheConfig, redis_db_),
  PROTOBUF_FIELD_OFFSET(::common::v1::CacheConfig, redis_cache_prefix_),
  PROTOBUF_FIELD_OFFSET(::common::v1::CacheConfig, disable_client_cache_),
  0,
  1,
  2,
  4,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMetrics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMetrics, enable_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMetrics, block_profile_rate_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMetrics, listen_address_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMetrics, enable_client_metrics_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMetrics, enable_notification_metrics_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMetrics, client_side_user_ids_),
  2,
  1,
  0,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSSO, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSSO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSSO, enable_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSSO, secret_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSSO, id_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSSO, scope_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSSO, auth_endpoint_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSSO, token_endpoint_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSSO, user_api_endpoint_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSSO, discovery_endpoint_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSSO, button_text_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSSO, button_color_),
  9,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSql, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSql, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSql, driver_name_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSql, data_source_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSql, max_idle_conns_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSql, conn_max_lifetime_milliseconds_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSql, conn_max_idle_time_milliseconds_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSql, max_open_conns_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSql, trace_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSql, at_rest_encrypt_key_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSql, query_timeout_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSql, disable_database_search_),
  0,
  1,
  3,
  4,
  5,
  6,
  7,
  2,
  9,
  8,
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPassword, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPassword, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPassword, minimum_length_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPassword, maximum_lenght_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPassword, lowercase_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPassword, number_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPassword, uppercase_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPassword, symbol_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPassword, enable_forgot_link_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, enable_file_attachments_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, enable_mobile_upload_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, enable_mobile_download_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, max_file_size_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, max_image_resolution_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, max_image_decoder_concurrency_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, driver_name_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, directory_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, enable_public_link_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, extract_content_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, archive_recursion_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, public_link_salt_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, initial_font_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, amazon_s3_access_key_id_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, amazon_s3_secret_access_key_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, amazon_s3_bucket_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, amazon_s3_path_prefix_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, amazon_s3_region_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, amazon_s3_endpoint_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, amazon_s3_ssl_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, amazon_s3_sign_v2_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, amazon_s3_sse_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, amazon_s3_trace_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, amazon_s3_request_timeout_milliseconds_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, amazon_s3_upload_part_size_bytes_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, amazon_s3_storage_class_),
  14,
  15,
  16,
  11,
  12,
  13,
  0,
  1,
  17,
  18,
  19,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  20,
  21,
  24,
  25,
  22,
  23,
  10,
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, send_email_notifications_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, require_email_verification_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, feedback_email_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, reply_to_address_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, enable_smtp_auth_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, smtp_username_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, smtp_password_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, smtp_server_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, smtp_port_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, smtp_server_timeout_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, connection_security_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, send_push_notifications_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, push_notification_server_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, push_notification_contents_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, push_notification_buffer_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, enable_email_batching_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, email_batching_buffer_size_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, email_batching_interval_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, skip_server_certificate_verification_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, email_notification_contents_type_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, login_button_color_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, login_button_border_color_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, login_button_text_color_),
  13,
  14,
  0,
  1,
  15,
  2,
  3,
  4,
  5,
  17,
  6,
  16,
  7,
  8,
  18,
  20,
  19,
  22,
  21,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigRateLimit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigRateLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigRateLimit, enable_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigRateLimit, per_sec_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigRateLimit, max_burst_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigRateLimit, memory_store_size_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigRateLimit, vary_by_remote_addr_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigRateLimit, vary_by_user_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigRateLimit, vary_by_header_),
  3,
  0,
  1,
  2,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPrivacy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPrivacy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPrivacy, show_email_address_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPrivacy, show_full_name_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSupport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSupport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSupport, terms_of_service_link_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSupport, privacy_policy_link_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSupport, about_link_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSupport, help_link_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSupport, report_a_problem_link_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSupport, forgot_password_link_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSupport, support_email_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLocalization, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLocalization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLocalization, default_server_locale_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLocalization, default_client_locale_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLocalization, available_locales_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, enable_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, enable_sync_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, ldap_server_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, ldap_port_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, connection_security_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, base_dn_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, bind_username_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, bind_password_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, maximum_login_attempts_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, user_filter_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, group_filter_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, enable_admin_filter_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, admin_filter_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, group_display_name_attribute_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, group_id_attribute_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, first_name_attribute_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, last_name_attribute_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, email_attribute_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, username_attribute_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, nickname_attribute_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, id_attribute_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, position_attribute_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, login_id_attribute_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, picture_attribute_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, sync_interval_minutes_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, query_timeout_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, max_page_size_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, login_field_name_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, login_button_color_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, login_button_border_color_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, login_button_text_color_),
  24,
  25,
  0,
  23,
  1,
  2,
  3,
  4,
  27,
  5,
  6,
  26,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  28,
  29,
  30,
  19,
  20,
  21,
  22,
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, enable_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, enable_sync_with_ldap_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, enable_sync_with_ldap_include_auth_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, ignore_guests_ldap_sync_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, verify_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, encrypt_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, sign_request_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, idp_url_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, idp_descriptor_url_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, idp_metadata_url_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, service_provider_identifier_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, assertion_consumer_service_url_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, signature_algorithm_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, canonical_algorithm_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, scoping_idp_provider_id_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, scoping_idp_name_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, idp_certificate_file_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, public_certificate_file_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, private_key_file_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, id_attribute_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, enable_admin_attribute_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, admin_attribute_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, first_name_attribute_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, last_name_attribute_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, email_attribute_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, username_attribute_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, nickname_attribute_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, locale_attribute_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, position_attribute_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, login_button_text_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, login_button_color_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, login_button_border_color_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, login_button_text_color_),
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  32,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigNativeApp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigNativeApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigNativeApp, app_custom_url_schemes_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigNativeApp, app_download_link_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigNativeApp, android_app_download_link_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigNativeApp, ios_app_download_link_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigNativeApp, mobile_external_browser_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigNativeApp, mobile_enable_biometrics_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigNativeApp, mobile_prevent_screen_capture_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigNativeApp, mobile_jailbreak_protection_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMeilisearch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMeilisearch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMeilisearch, server_url_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMeilisearch, master_key_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMeilisearch, enable_indexing_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMeilisearch, enable_searching_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMeilisearch, enable_autocomplete_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMeilisearch, batch_size_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMeilisearch, request_timeout_seconds_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMeilisearch, index_prefix_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMeilisearch, search_cutoff_ms_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMeilisearch, enable_typo_tolerance_),
  0,
  1,
  3,
  4,
  5,
  7,
  8,
  2,
  9,
  6,
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigBleve, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigBleve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigBleve, index_dir_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigBleve, enable_indexing_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigBleve, enable_searching_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigBleve, enable_autocomplete_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigBleve, bulk_indexing_time_window_seconds_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigBleve, batch_size_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigDataRetention, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigDataRetention, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigDataRetention, enable_message_deletion_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigDataRetention, enable_file_deletion_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigDataRetention, enable_boards_deletion_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigDataRetention, message_retention_hours_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigDataRetention, file_retention_hours_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigDataRetention, boards_retention_days_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigDataRetention, deletion_job_start_time_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigDataRetention, batch_size_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigDataRetention, time_between_batches_milliseconds_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigDataRetention, retention_ids_batch_size_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigImageProxy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigImageProxy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigImageProxy, enable_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigImageProxy, image_proxy_type_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigImageProxy, remote_image_proxy_url_),
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigImageProxy, remote_image_proxy_options_),
  3,
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::v1::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::Config, main_),
  PROTOBUF_FIELD_OFFSET(::common::v1::Config, services_),
  PROTOBUF_FIELD_OFFSET(::common::v1::Config, security_),
  PROTOBUF_FIELD_OFFSET(::common::v1::Config, cache_),
  PROTOBUF_FIELD_OFFSET(::common::v1::Config, metrics_),
  PROTOBUF_FIELD_OFFSET(::common::v1::Config, sso_),
  PROTOBUF_FIELD_OFFSET(::common::v1::Config, sql_),
  PROTOBUF_FIELD_OFFSET(::common::v1::Config, password_),
  PROTOBUF_FIELD_OFFSET(::common::v1::Config, file_),
  PROTOBUF_FIELD_OFFSET(::common::v1::Config, email_),
  PROTOBUF_FIELD_OFFSET(::common::v1::Config, rate_limit_),
  PROTOBUF_FIELD_OFFSET(::common::v1::Config, privacy_),
  PROTOBUF_FIELD_OFFSET(::common::v1::Config, support_),
  PROTOBUF_FIELD_OFFSET(::common::v1::Config, localization_),
  PROTOBUF_FIELD_OFFSET(::common::v1::Config, ldap_),
  PROTOBUF_FIELD_OFFSET(::common::v1::Config, saml_),
  PROTOBUF_FIELD_OFFSET(::common::v1::Config, native_app_),
  PROTOBUF_FIELD_OFFSET(::common::v1::Config, meilisearch_),
  PROTOBUF_FIELD_OFFSET(::common::v1::Config, bleve_),
  PROTOBUF_FIELD_OFFSET(::common::v1::Config, data_retention_),
  PROTOBUF_FIELD_OFFSET(::common::v1::Config, image_proxy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigGetResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigGetResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigUpdateRequest, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigUpdateResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigUpdateResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigListenerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigListenerResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigListenerResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigListenerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::v1::ConfigListenerRequest, client_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 28, -1, sizeof(::common::v1::ConfigMain)},
  { 50, 61, -1, sizeof(::common::v1::ConfigServices)},
  { 66, 74, -1, sizeof(::common::v1::ConfigSecurity_RestrictedUsernamesEntry_DoNotUse)},
  { 76, 101, -1, sizeof(::common::v1::ConfigSecurity)},
  { 120, 132, -1, sizeof(::common::v1::CacheConfig)},
  { 138, 150, -1, sizeof(::common::v1::ConfigMetrics)},
  { 156, 172, -1, sizeof(::common::v1::ConfigSSO)},
  { 182, 198, -1, sizeof(::common::v1::ConfigSql)},
  { 208, 221, -1, sizeof(::common::v1::ConfigPassword)},
  { 228, 260, -1, sizeof(::common::v1::ConfigFile)},
  { 286, 315, -1, sizeof(::common::v1::ConfigEmail)},
  { 338, 351, -1, sizeof(::common::v1::ConfigRateLimit)},
  { 358, 366, -1, sizeof(::common::v1::ConfigPrivacy)},
  { 368, 381, -1, sizeof(::common::v1::ConfigSupport)},
  { 388, 397, -1, sizeof(::common::v1::ConfigLocalization)},
  { 400, 437, -1, sizeof(::common::v1::ConfigLdap)},
  { 468, 507, -1, sizeof(::common::v1::ConfigSaml)},
  { 540, 554, -1, sizeof(::common::v1::ConfigNativeApp)},
  { 562, 578, -1, sizeof(::common::v1::ConfigMeilisearch)},
  { 588, 600, -1, sizeof(::common::v1::ConfigBleve)},
  { 606, 622, -1, sizeof(::common::v1::ConfigDataRetention)},
  { 632, 642, -1, sizeof(::common::v1::ConfigImageProxy)},
  { 646, -1, -1, sizeof(::common::v1::Config)},
  { 673, -1, -1, sizeof(::common::v1::ConfigGetRequest)},
  { 679, -1, -1, sizeof(::common::v1::ConfigGetResponse)},
  { 688, -1, -1, sizeof(::common::v1::ConfigUpdateRequest)},
  { 695, -1, -1, sizeof(::common::v1::ConfigUpdateResponse)},
  { 704, -1, -1, sizeof(::common::v1::ConfigListenerResponse)},
  { 713, -1, -1, sizeof(::common::v1::ConfigListenerRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigMain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigServices_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigSecurity_RestrictedUsernamesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigSecurity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_CacheConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigSSO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigSql_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigPassword_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigEmail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigRateLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigPrivacy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigSupport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigLocalization_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigLdap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigSaml_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigNativeApp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigMeilisearch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigBleve_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigDataRetention_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigImageProxy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_Config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigGetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigUpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigUpdateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigListenerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::v1::_ConfigListenerRequest_default_instance_),
};

const char descriptor_table_protodef_common_2fv1_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026common/v1/config.proto\022\tcommon.v1\032\025sha"
  "red/v1/error.proto\"\275\017\n\nConfigMain\022\025\n\003env"
  "\030\001 \001(\tH\000R\003env\210\001\001\022&\n\014read_timeout\030\002 \001(\005H\001"
  "R\013readTimeout\210\001\001\022(\n\rwrite_timeout\030\003 \001(\005H"
  "\002R\014writeTimeout\210\001\001\022&\n\014idle_timeout\030\004 \001(\005"
  "H\003R\013idleTimeout\210\001\001\0225\n\024enable_link_previe"
  "ws\030\005 \001(\010H\004R\022enableLinkPreviews\210\001\001\0229\n\026res"
  "trict_link_previews\030\006 \001(\tH\005R\024restrictLin"
  "kPreviews\210\001\001\022R\n#enable_client_performanc"
  "e_debugging\030\007 \001(\010H\006R enableClientPerform"
  "anceDebugging\210\001\001\022/\n\021enable_gif_picker\030\010 "
  "\001(\010H\007R\017enableGifPicker\210\001\001\0223\n\023enable_cust"
  "om_emoji\030\t \001(\010H\010R\021enableCustomEmoji\210\001\001\0223"
  "\n\023enable_emoji_picker\030\n \001(\010H\tR\021enableEmo"
  "jiPicker\210\001\001\022d\n-time_between_user_typing_"
  "updates_milliseconds\030\013 \001(\003H\nR(timeBetwee"
  "nUserTypingUpdatesMilliseconds\210\001\001\0221\n\022ena"
  "ble_file_search\030\014 \001(\010H\013R\020enableFileSearc"
  "h\210\001\001\022B\n\033enable_user_typing_messages\030\r \001("
  "\010H\014R\030enableUserTypingMessages\210\001\001\0225\n\024enab"
  "le_user_statuses\030\016 \001(\010H\rR\022enableUserStat"
  "uses\210\001\001\022=\n\030enable_email_invitations\030\017 \001("
  "\010H\016R\026enableEmailInvitations\210\001\001\022$\n\013enable"
  "_svgs\030\020 \001(\010H\017R\nenableSvgs\210\001\001\022I\n\036allow_pe"
  "rsistent_notifications\030\021 \001(\010H\020R\034allowPer"
  "sistentNotifications\210\001\001\022\\\n(persistent_no"
  "tification_interval_minutes\030\022 \001(\005H\021R%per"
  "sistentNotificationIntervalMinutes\210\001\001\022N\n"
  "!persistent_notification_max_count\030\023 \001(\005"
  "H\022R\036persistentNotificationMaxCount\210\001\001\022X\n"
  "&persistent_notification_max_recipients\030"
  "\024 \001(\005H\023R#persistentNotificationMaxRecipi"
  "ents\210\001\001\022O\n\"feature_flag_sync_interval_se"
  "conds\030\025 \001(\005H\024R\036featureFlagSyncIntervalSe"
  "conds\210\001\001\0223\n\023allow_synced_drafts\030\026 \001(\010H\025R"
  "\021allowSyncedDrafts\210\001\001B\006\n\004_envB\017\n\r_read_t"
  "imeoutB\020\n\016_write_timeoutB\017\n\r_idle_timeou"
  "tB\027\n\025_enable_link_previewsB\031\n\027_restrict_"
  "link_previewsB&\n$_enable_client_performa"
  "nce_debuggingB\024\n\022_enable_gif_pickerB\026\n\024_"
  "enable_custom_emojiB\026\n\024_enable_emoji_pic"
  "kerB0\n._time_between_user_typing_updates"
  "_millisecondsB\025\n\023_enable_file_searchB\036\n\034"
  "_enable_user_typing_messagesB\027\n\025_enable_"
  "user_statusesB\033\n\031_enable_email_invitatio"
  "nsB\016\n\014_enable_svgsB!\n\037_allow_persistent_"
  "notificationsB+\n)_persistent_notificatio"
  "n_interval_minutesB$\n\"_persistent_notifi"
  "cation_max_countB)\n\'_persistent_notifica"
  "tion_max_recipientsB%\n#_feature_flag_syn"
  "c_interval_secondsB\026\n\024_allow_synced_draf"
  "ts\"\330\003\n\016ConfigServices\022:\n\027common_service_"
  "grpc_url\030\001 \001(\tH\000R\024commonServiceGrpcUrl\210\001"
  "\001\0226\n\025user_service_grpc_url\030\002 \001(\tH\001R\022user"
  "ServiceGrpcUrl\210\001\001\0225\n\024jaeger_collector_ur"
  "l\030\003 \001(\tH\002R\022jaegerCollectorUrl\210\001\001\022F\n\035comm"
  "on_service_prometheus_url\030\004 \001(\tH\003R\032commo"
  "nServicePrometheusUrl\210\001\001\022B\n\033user_service"
  "_prometheus_url\030\005 \001(\tH\004R\030userServiceProm"
  "etheusUrl\210\001\001B\032\n\030_common_service_grpc_url"
  "B\030\n\026_user_service_grpc_urlB\027\n\025_jaeger_co"
  "llector_urlB \n\036_common_service_prometheu"
  "s_urlB\036\n\034_user_service_prometheus_url\"\206\017"
  "\n\016ConfigSecurity\022e\n\024restricted_usernames"
  "\030\001 \003(\01322.common.v1.ConfigSecurity.Restri"
  "ctedUsernamesEntryR\023restrictedUsernames\022"
  "9\n\026maximum_login_attempts\030\002 \001(\005H\000R\024maxim"
  "umLoginAttempts\210\001\001\022T\n$enable_insecure_ou"
  "tgoing_connections\030\003 \001(\010H\001R!enableInsecu"
  "reOutgoingConnections\210\001\001\022O\n!enable_multi"
  "factor_authentication\030\004 \001(\010H\002R\037enableMul"
  "tifactorAuthentication\210\001\001\022Q\n\"enforce_mul"
  "tifactor_authentication\030\005 \001(\010H\003R enforce"
  "MultifactorAuthentication\210\001\001\022F\n\035enable_o"
  "auth_service_provider\030\006 \001(\010H\004R\032enableOau"
  "thServiceProvider\210\001\001\022N\n!enable_outgoing_"
  "oauth_connections\030\007 \001(\010H\005R\036enableOutgoin"
  "gOauthConnections\210\001\001\022U\n%terminate_sessio"
  "ns_on_password_change\030\010 \001(\010H\006R!terminate"
  "SessionsOnPasswordChange\210\001\001\022A\n\033session_l"
  "ength_web_in_hours\030\t \001(\005H\007R\027sessionLengt"
  "hWebInHours\210\001\001\022G\n\036session_length_mobile_"
  "in_hours\030\n \001(\005H\010R\032sessionLengthMobileInH"
  "ours\210\001\001\022A\n\033session_length_sso_in_hours\030\013"
  " \001(\005H\tR\027sessionLengthSsoInHours\210\001\001\022+\n\017al"
  "low_cors_from\030\014 \001(\tH\nR\rallowCorsFrom\210\001\001\022"
  "5\n\024cors_exposed_headers\030\r \001(\tH\013R\022corsExp"
  "osedHeaders\210\001\001\0229\n\026cors_allow_credentials"
  "\030\016 \001(\010H\014R\024corsAllowCredentials\210\001\001\022\"\n\ncor"
  "s_debug\030\017 \001(\010H\rR\tcorsDebug\210\001\001\022D\n\034allow_c"
  "ookies_for_subdomains\030\020 \001(\010H\016R\031allowCook"
  "iesForSubdomains\210\001\001\022<\n\030session_cache_in_"
  "minutes\030\021 \001(\005H\017R\025sessionCacheInMinutes\210\001"
  "\001\0227\n\025websocket_secure_port\030\022 \001(\005H\020R\023webs"
  "ocketSecurePort\210\001\001\022*\n\016websocket_port\030\023 \001"
  "(\005H\021R\rwebsocketPort\210\001\001\032F\n\030RestrictedUser"
  "namesEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 "
  "\001(\tR\005value:\0028\001B\031\n\027_maximum_login_attempt"
  "sB\'\n%_enable_insecure_outgoing_connectio"
  "nsB$\n\"_enable_multifactor_authentication"
  "B%\n#_enforce_multifactor_authenticationB"
  " \n\036_enable_oauth_service_providerB$\n\"_en"
  "able_outgoing_oauth_connectionsB(\n&_term"
  "inate_sessions_on_password_changeB\036\n\034_se"
  "ssion_length_web_in_hoursB!\n\037_session_le"
  "ngth_mobile_in_hoursB\036\n\034_session_length_"
  "sso_in_hoursB\022\n\020_allow_cors_fromB\027\n\025_cor"
  "s_exposed_headersB\031\n\027_cors_allow_credent"
  "ialsB\r\n\013_cors_debugB\037\n\035_allow_cookies_fo"
  "r_subdomainsB\033\n\031_session_cache_in_minute"
  "sB\030\n\026_websocket_secure_portB\021\n\017_websocke"
  "t_port\"\202\003\n\013CacheConfig\022\"\n\ncache_type\030\001 \001"
  "(\tH\000R\tcacheType\210\001\001\022(\n\rredis_address\030\002 \001("
  "\tH\001R\014redisAddress\210\001\001\022*\n\016redis_password\030\003"
  " \001(\tH\002R\rredisPassword\210\001\001\022\036\n\010redis_db\030\004 \001"
  "(\005H\003R\007redisDb\210\001\001\0221\n\022redis_cache_prefix\030\005"
  " \001(\tH\004R\020redisCachePrefix\210\001\001\0225\n\024disable_c"
  "lient_cache\030\006 \001(\010H\005R\022disableClientCache\210"
  "\001\001B\r\n\013_cache_typeB\020\n\016_redis_addressB\021\n\017_"
  "redis_passwordB\013\n\t_redis_dbB\025\n\023_redis_ca"
  "che_prefixB\027\n\025_disable_client_cache\"\251\003\n\r"
  "ConfigMetrics\022\033\n\006enable\030\001 \001(\010H\000R\006enable\210"
  "\001\001\0221\n\022block_profile_rate\030\002 \001(\005H\001R\020blockP"
  "rofileRate\210\001\001\022*\n\016listen_address\030\003 \001(\tH\002R"
  "\rlistenAddress\210\001\001\0227\n\025enable_client_metri"
  "cs\030\004 \001(\010H\003R\023enableClientMetrics\210\001\001\022C\n\033en"
  "able_notification_metrics\030\005 \001(\010H\004R\031enabl"
  "eNotificationMetrics\210\001\001\022/\n\024client_side_u"
  "ser_ids\030\006 \003(\tR\021clientSideUserIdsB\t\n\007_ena"
  "bleB\025\n\023_block_profile_rateB\021\n\017_listen_ad"
  "dressB\030\n\026_enable_client_metricsB\036\n\034_enab"
  "le_notification_metrics\"\230\004\n\tConfigSSO\022\033\n"
  "\006enable\030\001 \001(\010H\000R\006enable\210\001\001\022\033\n\006secret\030\002 \001"
  "(\tH\001R\006secret\210\001\001\022\023\n\002id\030\003 \001(\tH\002R\002id\210\001\001\022\031\n\005"
  "scope\030\004 \001(\tH\003R\005scope\210\001\001\022(\n\rauth_endpoint"
  "\030\005 \001(\tH\004R\014authEndpoint\210\001\001\022*\n\016token_endpo"
  "int\030\006 \001(\tH\005R\rtokenEndpoint\210\001\001\022/\n\021user_ap"
  "i_endpoint\030\007 \001(\tH\006R\017userApiEndpoint\210\001\001\0222"
  "\n\022discovery_endpoint\030\010 \001(\tH\007R\021discoveryE"
  "ndpoint\210\001\001\022$\n\013button_text\030\t \001(\tH\010R\nbutto"
  "nText\210\001\001\022&\n\014button_color\030\n \001(\tH\tR\013button"
  "Color\210\001\001B\t\n\007_enableB\t\n\007_secretB\005\n\003_idB\010\n"
  "\006_scopeB\020\n\016_auth_endpointB\021\n\017_token_endp"
  "ointB\024\n\022_user_api_endpointB\025\n\023_discovery"
  "_endpointB\016\n\014_button_textB\017\n\r_button_col"
  "or\"\325\005\n\tConfigSql\022$\n\013driver_name\030\001 \001(\tH\000R"
  "\ndriverName\210\001\001\022$\n\013data_source\030\002 \001(\tH\001R\nd"
  "ataSource\210\001\001\022)\n\016max_idle_conns\030\003 \001(\005H\002R\014"
  "maxIdleConns\210\001\001\022H\n\036conn_max_lifetime_mil"
  "liseconds\030\004 \001(\005H\003R\033connMaxLifetimeMillis"
  "econds\210\001\001\022I\n\037conn_max_idle_time_millisec"
  "onds\030\005 \001(\005H\004R\033connMaxIdleTimeMillisecond"
  "s\210\001\001\022)\n\016max_open_conns\030\006 \001(\005H\005R\014maxOpenC"
  "onns\210\001\001\022\031\n\005trace\030\007 \001(\010H\006R\005trace\210\001\001\0222\n\023at"
  "_rest_encrypt_key\030\010 \001(\tH\007R\020atRestEncrypt"
  "Key\210\001\001\022(\n\rquery_timeout\030\t \001(\005H\010R\014queryTi"
  "meout\210\001\001\022;\n\027disable_database_search\030\n \001("
  "\010H\tR\025disableDatabaseSearch\210\001\001B\016\n\014_driver"
  "_nameB\016\n\014_data_sourceB\021\n\017_max_idle_conns"
  "B!\n\037_conn_max_lifetime_millisecondsB\"\n _"
  "conn_max_idle_time_millisecondsB\021\n\017_max_"
  "open_connsB\010\n\006_traceB\026\n\024_at_rest_encrypt"
  "_keyB\020\n\016_query_timeoutB\032\n\030_disable_datab"
  "ase_search\"\212\003\n\016ConfigPassword\022*\n\016minimum"
  "_length\030\001 \001(\005H\000R\rminimumLength\210\001\001\022*\n\016max"
  "imum_lenght\030\002 \001(\005H\001R\rmaximumLenght\210\001\001\022!\n"
  "\tlowercase\030\003 \001(\010H\002R\tlowercase\210\001\001\022\033\n\006numb"
  "er\030\004 \001(\010H\003R\006number\210\001\001\022!\n\tuppercase\030\005 \001(\010"
  "H\004R\tuppercase\210\001\001\022\033\n\006symbol\030\006 \001(\010H\005R\006symb"
  "ol\210\001\001\0221\n\022enable_forgot_link\030\007 \001(\010H\006R\020ena"
  "bleForgotLink\210\001\001B\021\n\017_minimum_lengthB\021\n\017_"
  "maximum_lenghtB\014\n\n_lowercaseB\t\n\007_numberB"
  "\014\n\n_uppercaseB\t\n\007_symbolB\025\n\023_enable_forg"
  "ot_link\"\340\017\n\nConfigFile\022;\n\027enable_file_at"
  "tachments\030\001 \001(\010H\000R\025enableFileAttachments"
  "\210\001\001\0225\n\024enable_mobile_upload\030\002 \001(\010H\001R\022ena"
  "bleMobileUpload\210\001\001\0229\n\026enable_mobile_down"
  "load\030\003 \001(\010H\002R\024enableMobileDownload\210\001\001\022\'\n"
  "\rmax_file_size\030\004 \001(\003H\003R\013maxFileSize\210\001\001\0225"
  "\n\024max_image_resolution\030\005 \001(\003H\004R\022maxImage"
  "Resolution\210\001\001\022F\n\035max_image_decoder_concu"
  "rrency\030\006 \001(\003H\005R\032maxImageDecoderConcurren"
  "cy\210\001\001\022$\n\013driver_name\030\007 \001(\tH\006R\ndriverName"
  "\210\001\001\022!\n\tdirectory\030\010 \001(\tH\007R\tdirectory\210\001\001\0221"
  "\n\022enable_public_link\030\t \001(\010H\010R\020enablePubl"
  "icLink\210\001\001\022,\n\017extract_content\030\n \001(\010H\tR\016ex"
  "tractContent\210\001\001\0220\n\021archive_recursion\030\013 \001"
  "(\010H\nR\020archiveRecursion\210\001\001\022-\n\020public_link"
  "_salt\030\014 \001(\tH\013R\016publicLinkSalt\210\001\001\022&\n\014init"
  "ial_font\030\r \001(\tH\014R\013initialFont\210\001\001\0229\n\027amaz"
  "on_s3_access_key_id\030\016 \001(\tH\rR\023amazonS3Acc"
  "essKeyId\210\001\001\022A\n\033amazon_s3_secret_access_k"
  "ey\030\017 \001(\tH\016R\027amazonS3SecretAccessKey\210\001\001\022-"
  "\n\020amazon_s3_bucket\030\020 \001(\tH\017R\016amazonS3Buck"
  "et\210\001\001\0226\n\025amazon_s3_path_prefix\030\021 \001(\tH\020R\022"
  "amazonS3PathPrefix\210\001\001\022-\n\020amazon_s3_regio"
  "n\030\022 \001(\tH\021R\016amazonS3Region\210\001\001\0221\n\022amazon_s"
  "3_endpoint\030\023 \001(\tH\022R\020amazonS3Endpoint\210\001\001\022"
  "\'\n\ramazon_s3_ssl\030\024 \001(\010H\023R\013amazonS3Ssl\210\001\001"
  "\022.\n\021amazon_s3_sign_v2\030\025 \001(\010H\024R\016amazonS3S"
  "ignV2\210\001\001\022\'\n\ramazon_s3_sse\030\026 \001(\010H\025R\013amazo"
  "nS3Sse\210\001\001\022+\n\017amazon_s3_trace\030\027 \001(\010H\026R\ram"
  "azonS3Trace\210\001\001\022W\n&amazon_s3_request_time"
  "out_milliseconds\030\030 \001(\003H\027R\"amazonS3Reques"
  "tTimeoutMilliseconds\210\001\001\022J\n amazon_s3_upl"
  "oad_part_size_bytes\030\031 \001(\003H\030R\033amazonS3Upl"
  "oadPartSizeBytes\210\001\001\022:\n\027amazon_s3_storage"
  "_class\030\032 \001(\tH\031R\024amazonS3StorageClass\210\001\001B"
  "\032\n\030_enable_file_attachmentsB\027\n\025_enable_m"
  "obile_uploadB\031\n\027_enable_mobile_downloadB"
  "\020\n\016_max_file_sizeB\027\n\025_max_image_resoluti"
  "onB \n\036_max_image_decoder_concurrencyB\016\n\014"
  "_driver_nameB\014\n\n_directoryB\025\n\023_enable_pu"
  "blic_linkB\022\n\020_extract_contentB\024\n\022_archiv"
  "e_recursionB\023\n\021_public_link_saltB\017\n\r_ini"
  "tial_fontB\032\n\030_amazon_s3_access_key_idB\036\n"
  "\034_amazon_s3_secret_access_keyB\023\n\021_amazon"
  "_s3_bucketB\030\n\026_amazon_s3_path_prefixB\023\n\021"
  "_amazon_s3_regionB\025\n\023_amazon_s3_endpoint"
  "B\020\n\016_amazon_s3_sslB\024\n\022_amazon_s3_sign_v2"
  "B\020\n\016_amazon_s3_sseB\022\n\020_amazon_s3_traceB)"
  "\n\'_amazon_s3_request_timeout_millisecond"
  "sB#\n!_amazon_s3_upload_part_size_bytesB\032"
  "\n\030_amazon_s3_storage_class\"\375\016\n\013ConfigEma"
  "il\022=\n\030send_email_notifications\030\001 \001(\010H\000R\026"
  "sendEmailNotifications\210\001\001\022A\n\032require_ema"
  "il_verification\030\002 \001(\010H\001R\030requireEmailVer"
  "ification\210\001\001\022*\n\016feedback_email\030\003 \001(\tH\002R\r"
  "feedbackEmail\210\001\001\022-\n\020reply_to_address\030\004 \001"
  "(\tH\003R\016replyToAddress\210\001\001\022-\n\020enable_smtp_a"
  "uth\030\005 \001(\010H\004R\016enableSmtpAuth\210\001\001\022(\n\rsmtp_u"
  "sername\030\006 \001(\tH\005R\014smtpUsername\210\001\001\022(\n\rsmtp"
  "_password\030\007 \001(\tH\006R\014smtpPassword\210\001\001\022$\n\013sm"
  "tp_server\030\010 \001(\tH\007R\nsmtpServer\210\001\001\022 \n\tsmtp"
  "_port\030\t \001(\tH\010R\010smtpPort\210\001\001\0223\n\023smtp_serve"
  "r_timeout\030\n \001(\005H\tR\021smtpServerTimeout\210\001\001\022"
  "4\n\023connection_security\030\013 \001(\tH\nR\022connecti"
  "onSecurity\210\001\001\022;\n\027send_push_notifications"
  "\030\014 \001(\010H\013R\025sendPushNotifications\210\001\001\022=\n\030pu"
  "sh_notification_server\030\r \001(\tH\014R\026pushNoti"
  "ficationServer\210\001\001\022A\n\032push_notification_c"
  "ontents\030\016 \001(\tH\rR\030pushNotificationContent"
  "s\210\001\001\022=\n\030push_notification_buffer\030\017 \001(\005H\016"
  "R\026pushNotificationBuffer\210\001\001\0227\n\025enable_em"
  "ail_batching\030\020 \001(\010H\017R\023enableEmailBatchin"
  "g\210\001\001\022@\n\032email_batching_buffer_size\030\021 \001(\005"
  "H\020R\027emailBatchingBufferSize\210\001\001\022;\n\027email_"
  "batching_interval\030\022 \001(\005H\021R\025emailBatching"
  "Interval\210\001\001\022T\n$skip_server_certificate_v"
  "erification\030\023 \001(\010H\022R!skipServerCertifica"
  "teVerification\210\001\001\022L\n email_notification_"
  "contents_type\030\024 \001(\tH\023R\035emailNotification"
  "ContentsType\210\001\001\0221\n\022login_button_color\030\025 "
  "\001(\tH\024R\020loginButtonColor\210\001\001\022>\n\031login_butt"
  "on_border_color\030\026 \001(\tH\025R\026loginButtonBord"
  "erColor\210\001\001\022:\n\027login_button_text_color\030\027 "
  "\001(\tH\026R\024loginButtonTextColor\210\001\001B\033\n\031_send_"
  "email_notificationsB\035\n\033_require_email_ve"
  "rificationB\021\n\017_feedback_emailB\023\n\021_reply_"
  "to_addressB\023\n\021_enable_smtp_authB\020\n\016_smtp"
  "_usernameB\020\n\016_smtp_passwordB\016\n\014_smtp_ser"
  "verB\014\n\n_smtp_portB\026\n\024_smtp_server_timeou"
  "tB\026\n\024_connection_securityB\032\n\030_send_push_"
  "notificationsB\033\n\031_push_notification_serv"
  "erB\035\n\033_push_notification_contentsB\033\n\031_pu"
  "sh_notification_bufferB\030\n\026_enable_email_"
  "batchingB\035\n\033_email_batching_buffer_sizeB"
  "\032\n\030_email_batching_intervalB\'\n%_skip_ser"
  "ver_certificate_verificationB#\n!_email_n"
  "otification_contents_typeB\025\n\023_login_butt"
  "on_colorB\034\n\032_login_button_border_colorB\032"
  "\n\030_login_button_text_color\"\204\003\n\017ConfigRat"
  "eLimit\022\033\n\006enable\030\001 \001(\010H\000R\006enable\210\001\001\022\034\n\007p"
  "er_sec\030\002 \001(\005H\001R\006perSec\210\001\001\022 \n\tmax_burst\030\003"
  " \001(\005H\002R\010maxBurst\210\001\001\022/\n\021memory_store_size"
  "\030\004 \001(\005H\003R\017memoryStoreSize\210\001\001\0222\n\023vary_by_"
  "remote_addr\030\005 \001(\010H\004R\020varyByRemoteAddr\210\001\001"
  "\022%\n\014vary_by_user\030\006 \001(\010H\005R\nvaryByUser\210\001\001\022"
  "$\n\016vary_by_header\030\007 \001(\tR\014varyByHeaderB\t\n"
  "\007_enableB\n\n\010_per_secB\014\n\n_max_burstB\024\n\022_m"
  "emory_store_sizeB\026\n\024_vary_by_remote_addr"
  "B\017\n\r_vary_by_user\"\227\001\n\rConfigPrivacy\0221\n\022s"
  "how_email_address\030\001 \001(\010H\000R\020showEmailAddr"
  "ess\210\001\001\022)\n\016show_full_name\030\002 \001(\010H\001R\014showFu"
  "llName\210\001\001B\025\n\023_show_email_addressB\021\n\017_sho"
  "w_full_name\"\357\003\n\rConfigSupport\0226\n\025terms_o"
  "f_service_link\030\001 \001(\tH\000R\022termsOfServiceLi"
  "nk\210\001\001\0223\n\023privacy_policy_link\030\002 \001(\tH\001R\021pr"
  "ivacyPolicyLink\210\001\001\022\"\n\nabout_link\030\003 \001(\tH\002"
  "R\taboutLink\210\001\001\022 \n\thelp_link\030\004 \001(\tH\003R\010hel"
  "pLink\210\001\001\0226\n\025report_a_problem_link\030\005 \001(\tH"
  "\004R\022reportAProblemLink\210\001\001\0225\n\024forgot_passw"
  "ord_link\030\006 \001(\tH\005R\022forgotPasswordLink\210\001\001\022"
  "(\n\rsupport_email\030\007 \001(\tH\006R\014supportEmail\210\001"
  "\001B\030\n\026_terms_of_service_linkB\026\n\024_privacy_"
  "policy_linkB\r\n\013_about_linkB\014\n\n_help_link"
  "B\030\n\026_report_a_problem_linkB\027\n\025_forgot_pa"
  "ssword_linkB\020\n\016_support_email\"\202\002\n\022Config"
  "Localization\0227\n\025default_server_locale\030\001 "
  "\001(\tH\000R\023defaultServerLocale\210\001\001\0227\n\025default"
  "_client_locale\030\002 \001(\tH\001R\023defaultClientLoc"
  "ale\210\001\001\0220\n\021available_locales\030\003 \001(\tH\002R\020ava"
  "ilableLocales\210\001\001B\030\n\026_default_server_loca"
  "leB\030\n\026_default_client_localeB\024\n\022_availab"
  "le_locales\"\325\020\n\nConfigLdap\022\033\n\006enable\030\001 \001("
  "\010H\000R\006enable\210\001\001\022$\n\013enable_sync\030\002 \001(\010H\001R\ne"
  "nableSync\210\001\001\022$\n\013ldap_server\030\003 \001(\tH\002R\nlda"
  "pServer\210\001\001\022 \n\tldap_port\030\004 \001(\005H\003R\010ldapPor"
  "t\210\001\001\0224\n\023connection_security\030\005 \001(\tH\004R\022con"
  "nectionSecurity\210\001\001\022\034\n\007base_dn\030\006 \001(\tH\005R\006b"
  "aseDn\210\001\001\022(\n\rbind_username\030\007 \001(\tH\006R\014bindU"
  "sername\210\001\001\022(\n\rbind_password\030\010 \001(\tH\007R\014bin"
  "dPassword\210\001\001\0229\n\026maximum_login_attempts\030\t"
  " \001(\005H\010R\024maximumLoginAttempts\210\001\001\022$\n\013user_"
  "filter\030\n \001(\tH\tR\nuserFilter\210\001\001\022&\n\014group_f"
  "ilter\030\013 \001(\tH\nR\013groupFilter\210\001\001\0223\n\023enable_"
  "admin_filter\030\014 \001(\010H\013R\021enableAdminFilter\210"
  "\001\001\022&\n\014admin_filter\030\r \001(\tH\014R\013adminFilter\210"
  "\001\001\022D\n\034group_display_name_attribute\030\016 \001(\t"
  "H\rR\031groupDisplayNameAttribute\210\001\001\0221\n\022grou"
  "p_id_attribute\030\017 \001(\tH\016R\020groupIdAttribute"
  "\210\001\001\0225\n\024first_name_attribute\030\020 \001(\tH\017R\022fir"
  "stNameAttribute\210\001\001\0223\n\023last_name_attribut"
  "e\030\021 \001(\tH\020R\021lastNameAttribute\210\001\001\022,\n\017email"
  "_attribute\030\022 \001(\tH\021R\016emailAttribute\210\001\001\0222\n"
  "\022username_attribute\030\023 \001(\tH\022R\021usernameAtt"
  "ribute\210\001\001\0222\n\022nickname_attribute\030\024 \001(\tH\023R"
  "\021nicknameAttribute\210\001\001\022&\n\014id_attribute\030\025 "
  "\001(\tH\024R\013idAttribute\210\001\001\0222\n\022position_attrib"
  "ute\030\026 \001(\tH\025R\021positionAttribute\210\001\001\0221\n\022log"
  "in_id_attribute\030\027 \001(\tH\026R\020loginIdAttribut"
  "e\210\001\001\0220\n\021picture_attribute\030\030 \001(\tH\027R\020pictu"
  "reAttribute\210\001\001\0227\n\025sync_interval_minutes\030"
  "\031 \001(\005H\030R\023syncIntervalMinutes\210\001\001\022(\n\rquery"
  "_timeout\030\032 \001(\005H\031R\014queryTimeout\210\001\001\022\'\n\rmax"
  "_page_size\030\033 \001(\005H\032R\013maxPageSize\210\001\001\022-\n\020lo"
  "gin_field_name\030\034 \001(\tH\033R\016loginFieldName\210\001"
  "\001\0221\n\022login_button_color\030\035 \001(\tH\034R\020loginBu"
  "ttonColor\210\001\001\022>\n\031login_button_border_colo"
  "r\030\036 \001(\tH\035R\026loginButtonBorderColor\210\001\001\022:\n\027"
  "login_button_text_color\030\037 \001(\tH\036R\024loginBu"
  "ttonTextColor\210\001\001B\t\n\007_enableB\016\n\014_enable_s"
  "yncB\016\n\014_ldap_serverB\014\n\n_ldap_portB\026\n\024_co"
  "nnection_securityB\n\n\010_base_dnB\020\n\016_bind_u"
  "sernameB\020\n\016_bind_passwordB\031\n\027_maximum_lo"
  "gin_attemptsB\016\n\014_user_filterB\017\n\r_group_f"
  "ilterB\026\n\024_enable_admin_filterB\017\n\r_admin_"
  "filterB\037\n\035_group_display_name_attributeB"
  "\025\n\023_group_id_attributeB\027\n\025_first_name_at"
  "tributeB\026\n\024_last_name_attributeB\022\n\020_emai"
  "l_attributeB\025\n\023_username_attributeB\025\n\023_n"
  "ickname_attributeB\017\n\r_id_attributeB\025\n\023_p"
  "osition_attributeB\025\n\023_login_id_attribute"
  "B\024\n\022_picture_attributeB\030\n\026_sync_interval"
  "_minutesB\020\n\016_query_timeoutB\020\n\016_max_page_"
  "sizeB\023\n\021_login_field_nameB\025\n\023_login_butt"
  "on_colorB\034\n\032_login_button_border_colorB\032"
  "\n\030_login_button_text_color\"\255\023\n\nConfigSam"
  "l\022\033\n\006enable\030\001 \001(\010H\000R\006enable\210\001\001\0226\n\025enable"
  "_sync_with_ldap\030\002 \001(\010H\001R\022enableSyncWithL"
  "dap\210\001\001\022N\n\"enable_sync_with_ldap_include_"
  "auth\030\003 \001(\010H\002R\035enableSyncWithLdapIncludeA"
  "uth\210\001\001\022:\n\027ignore_guests_ldap_sync\030\004 \001(\010H"
  "\003R\024ignoreGuestsLdapSync\210\001\001\022\033\n\006verify\030\005 \001"
  "(\010H\004R\006verify\210\001\001\022\035\n\007encrypt\030\006 \001(\010H\005R\007encr"
  "ypt\210\001\001\022&\n\014sign_request\030\007 \001(\010H\006R\013signRequ"
  "est\210\001\001\022\034\n\007idp_url\030\010 \001(\tH\007R\006idpUrl\210\001\001\0221\n\022"
  "idp_descriptor_url\030\t \001(\tH\010R\020idpDescripto"
  "rUrl\210\001\001\022-\n\020idp_metadata_url\030\n \001(\tH\tR\016idp"
  "MetadataUrl\210\001\001\022C\n\033service_provider_ident"
  "ifier\030\013 \001(\tH\nR\031serviceProviderIdentifier"
  "\210\001\001\022H\n\036assertion_consumer_service_url\030\014 "
  "\001(\tH\013R\033assertionConsumerServiceUrl\210\001\001\0224\n"
  "\023signature_algorithm\030\r \001(\tH\014R\022signatureA"
  "lgorithm\210\001\001\0224\n\023canonical_algorithm\030\016 \001(\t"
  "H\rR\022canonicalAlgorithm\210\001\001\022:\n\027scoping_idp"
  "_provider_id\030\017 \001(\tH\016R\024scopingIdpProvider"
  "Id\210\001\001\022-\n\020scoping_idp_name\030\020 \001(\tH\017R\016scopi"
  "ngIdpName\210\001\001\0225\n\024idp_certificate_file\030\021 \001"
  "(\tH\020R\022idpCertificateFile\210\001\001\022;\n\027public_ce"
  "rtificate_file\030\022 \001(\tH\021R\025publicCertificat"
  "eFile\210\001\001\022-\n\020private_key_file\030\023 \001(\tH\022R\016pr"
  "ivateKeyFile\210\001\001\022&\n\014id_attribute\030\024 \001(\tH\023R"
  "\013idAttribute\210\001\001\0229\n\026enable_admin_attribut"
  "e\030\025 \001(\010H\024R\024enableAdminAttribute\210\001\001\022,\n\017ad"
  "min_attribute\030\026 \001(\tH\025R\016adminAttribute\210\001\001"
  "\0225\n\024first_name_attribute\030\027 \001(\tH\026R\022firstN"
  "ameAttribute\210\001\001\0223\n\023last_name_attribute\030\030"
  " \001(\tH\027R\021lastNameAttribute\210\001\001\022,\n\017email_at"
  "tribute\030\031 \001(\tH\030R\016emailAttribute\210\001\001\0222\n\022us"
  "ername_attribute\030\032 \001(\tH\031R\021usernameAttrib"
  "ute\210\001\001\0222\n\022nickname_attribute\030\033 \001(\tH\032R\021ni"
  "cknameAttribute\210\001\001\022.\n\020locale_attribute\030\034"
  " \001(\tH\033R\017localeAttribute\210\001\001\0222\n\022position_a"
  "ttribute\030\035 \001(\tH\034R\021positionAttribute\210\001\001\022/"
  "\n\021login_button_text\030\036 \001(\tH\035R\017loginButton"
  "Text\210\001\001\0221\n\022login_button_color\030\037 \001(\tH\036R\020l"
  "oginButtonColor\210\001\001\022>\n\031login_button_borde"
  "r_color\030  \001(\tH\037R\026loginButtonBorderColor\210"
  "\001\001\022:\n\027login_button_text_color\030! \001(\tH R\024l"
  "oginButtonTextColor\210\001\001B\t\n\007_enableB\030\n\026_en"
  "able_sync_with_ldapB%\n#_enable_sync_with"
  "_ldap_include_authB\032\n\030_ignore_guests_lda"
  "p_syncB\t\n\007_verifyB\n\n\010_encryptB\017\n\r_sign_r"
  "equestB\n\n\010_idp_urlB\025\n\023_idp_descriptor_ur"
  "lB\023\n\021_idp_metadata_urlB\036\n\034_service_provi"
  "der_identifierB!\n\037_assertion_consumer_se"
  "rvice_urlB\026\n\024_signature_algorithmB\026\n\024_ca"
  "nonical_algorithmB\032\n\030_scoping_idp_provid"
  "er_idB\023\n\021_scoping_idp_nameB\027\n\025_idp_certi"
  "ficate_fileB\032\n\030_public_certificate_fileB"
  "\023\n\021_private_key_fileB\017\n\r_id_attributeB\031\n"
  "\027_enable_admin_attributeB\022\n\020_admin_attri"
  "buteB\027\n\025_first_name_attributeB\026\n\024_last_n"
  "ame_attributeB\022\n\020_email_attributeB\025\n\023_us"
  "ername_attributeB\025\n\023_nickname_attributeB"
  "\023\n\021_locale_attributeB\025\n\023_position_attrib"
  "uteB\024\n\022_login_button_textB\025\n\023_login_butt"
  "on_colorB\034\n\032_login_button_border_colorB\032"
  "\n\030_login_button_text_color\"\301\005\n\017ConfigNat"
  "iveApp\0223\n\026app_custom_url_schemes\030\001 \003(\tR\023"
  "appCustomUrlSchemes\022/\n\021app_download_link"
  "\030\002 \001(\tH\000R\017appDownloadLink\210\001\001\022>\n\031android_"
  "app_download_link\030\003 \001(\tH\001R\026androidAppDow"
  "nloadLink\210\001\001\0226\n\025ios_app_download_link\030\004 "
  "\001(\tH\002R\022iosAppDownloadLink\210\001\001\022;\n\027mobile_e"
  "xternal_browser\030\005 \001(\010H\003R\025mobileExternalB"
  "rowser\210\001\001\022=\n\030mobile_enable_biometrics\030\006 "
  "\001(\010H\004R\026mobileEnableBiometrics\210\001\001\022F\n\035mobi"
  "le_prevent_screen_capture\030\007 \001(\010H\005R\032mobil"
  "ePreventScreenCapture\210\001\001\022C\n\033mobile_jailb"
  "reak_protection\030\010 \001(\010H\006R\031mobileJailbreak"
  "Protection\210\001\001B\024\n\022_app_download_linkB\034\n\032_"
  "android_app_download_linkB\030\n\026_ios_app_do"
  "wnload_linkB\032\n\030_mobile_external_browserB"
  "\033\n\031_mobile_enable_biometricsB \n\036_mobile_"
  "prevent_screen_captureB\036\n\034_mobile_jailbr"
  "eak_protection\"\253\005\n\021ConfigMeilisearch\022#\n\n"
  "server_url\030\001 \001(\tH\000R\nserver_url\210\001\001\022\"\n\nmas"
  "ter_key\030\002 \001(\tH\001R\tmasterKey\210\001\001\022,\n\017enable_"
  "indexing\030\003 \001(\010H\002R\016enableIndexing\210\001\001\022.\n\020e"
  "nable_searching\030\004 \001(\010H\003R\017enableSearching"
  "\210\001\001\0224\n\023enable_autocomplete\030\005 \001(\010H\004R\022enab"
  "leAutocomplete\210\001\001\022\"\n\nbatch_size\030\006 \001(\005H\005R"
  "\tbatchSize\210\001\001\022;\n\027request_timeout_seconds"
  "\030\007 \001(\005H\006R\025requestTimeoutSeconds\210\001\001\022&\n\014in"
  "dex_prefix\030\010 \001(\tH\007R\013indexPrefix\210\001\001\022-\n\020se"
  "arch_cutoff_ms\030\t \001(\005H\010R\016searchCutoffMs\210\001"
  "\001\0227\n\025enable_typo_tolerance\030\n \001(\010H\tR\023enab"
  "leTypoTolerance\210\001\001B\r\n\013_server_urlB\r\n\013_ma"
  "ster_keyB\022\n\020_enable_indexingB\023\n\021_enable_"
  "searchingB\026\n\024_enable_autocompleteB\r\n\013_ba"
  "tch_sizeB\032\n\030_request_timeout_secondsB\017\n\r"
  "_index_prefixB\023\n\021_search_cutoff_msB\030\n\026_e"
  "nable_typo_tolerance\"\272\003\n\013ConfigBleve\022 \n\t"
  "index_dir\030\001 \001(\tH\000R\010indexDir\210\001\001\022,\n\017enable"
  "_indexing\030\002 \001(\010H\001R\016enableIndexing\210\001\001\022.\n\020"
  "enable_searching\030\003 \001(\010H\002R\017enableSearchin"
  "g\210\001\001\0224\n\023enable_autocomplete\030\004 \001(\010H\003R\022ena"
  "bleAutocomplete\210\001\001\022M\n!bulk_indexing_time"
  "_window_seconds\030\005 \001(\005H\004R\035bulkIndexingTim"
  "eWindowSeconds\210\001\001\022\"\n\nbatch_size\030\006 \001(\005H\005R"
  "\tbatchSize\210\001\001B\014\n\n_index_dirB\022\n\020_enable_i"
  "ndexingB\023\n\021_enable_searchingB\026\n\024_enable_"
  "autocompleteB$\n\"_bulk_indexing_time_wind"
  "ow_secondsB\r\n\013_batch_size\"\354\006\n\023ConfigData"
  "Retention\022;\n\027enable_message_deletion\030\001 \001"
  "(\010H\000R\025enableMessageDeletion\210\001\001\0225\n\024enable"
  "_file_deletion\030\002 \001(\010H\001R\022enableFileDeleti"
  "on\210\001\001\0229\n\026enable_boards_deletion\030\003 \001(\010H\002R"
  "\024enableBoardsDeletion\210\001\001\022;\n\027message_rete"
  "ntion_hours\030\004 \001(\005H\003R\025messageRetentionHou"
  "rs\210\001\001\0225\n\024file_retention_hours\030\005 \001(\005H\004R\022f"
  "ileRetentionHours\210\001\001\0227\n\025boards_retention"
  "_days\030\006 \001(\005H\005R\023boardsRetentionDays\210\001\001\022:\n"
  "\027deletion_job_start_time\030\007 \001(\tH\006R\024deleti"
  "onJobStartTime\210\001\001\022\"\n\nbatch_size\030\010 \001(\005H\007R"
  "\tbatchSize\210\001\001\022N\n!time_between_batches_mi"
  "lliseconds\030\t \001(\005H\010R\036timeBetweenBatchesMi"
  "lliseconds\210\001\001\022<\n\030retention_ids_batch_siz"
  "e\030\n \001(\005H\tR\025retentionIdsBatchSize\210\001\001B\032\n\030_"
  "enable_message_deletionB\027\n\025_enable_file_"
  "deletionB\031\n\027_enable_boards_deletionB\032\n\030_"
  "message_retention_hoursB\027\n\025_file_retenti"
  "on_hoursB\030\n\026_boards_retention_daysB\032\n\030_d"
  "eletion_job_start_timeB\r\n\013_batch_sizeB$\n"
  "\"_time_between_batches_millisecondsB\033\n\031_"
  "retention_ids_batch_size\"\264\002\n\020ConfigImage"
  "Proxy\022\033\n\006enable\030\001 \001(\010H\000R\006enable\210\001\001\022-\n\020im"
  "age_proxy_type\030\002 \001(\tH\001R\016imageProxyType\210\001"
  "\001\0228\n\026remote_image_proxy_url\030\003 \001(\tH\002R\023rem"
  "oteImageProxyUrl\210\001\001\022@\n\032remote_image_prox"
  "y_options\030\004 \001(\tH\003R\027remoteImageProxyOptio"
  "ns\210\001\001B\t\n\007_enableB\023\n\021_image_proxy_typeB\031\n"
  "\027_remote_image_proxy_urlB\035\n\033_remote_imag"
  "e_proxy_options\"\315\010\n\006Config\022)\n\004main\030\001 \001(\013"
  "2\025.common.v1.ConfigMainR\004main\0225\n\010service"
  "s\030\002 \001(\0132\031.common.v1.ConfigServicesR\010serv"
  "ices\0225\n\010security\030\003 \001(\0132\031.common.v1.Confi"
  "gSecurityR\010security\022,\n\005cache\030\004 \001(\0132\026.com"
  "mon.v1.CacheConfigR\005cache\0222\n\007metrics\030\005 \001"
  "(\0132\030.common.v1.ConfigMetricsR\007metrics\022&\n"
  "\003sso\030\006 \001(\0132\024.common.v1.ConfigSSOR\003sso\022&\n"
  "\003sql\030\007 \001(\0132\024.common.v1.ConfigSqlR\003sql\0225\n"
  "\010password\030\010 \001(\0132\031.common.v1.ConfigPasswo"
  "rdR\010password\022)\n\004file\030\t \001(\0132\025.common.v1.C"
  "onfigFileR\004file\022,\n\005email\030\n \001(\0132\026.common."
  "v1.ConfigEmailR\005email\0229\n\nrate_limit\030\013 \001("
  "\0132\032.common.v1.ConfigRateLimitR\trateLimit"
  "\0222\n\007privacy\030\014 \001(\0132\030.common.v1.ConfigPriv"
  "acyR\007privacy\0222\n\007support\030\r \001(\0132\030.common.v"
  "1.ConfigSupportR\007support\022A\n\014localization"
  "\030\016 \001(\0132\035.common.v1.ConfigLocalizationR\014l"
  "ocalization\022)\n\004ldap\030\017 \001(\0132\025.common.v1.Co"
  "nfigLdapR\004ldap\022)\n\004saml\030\020 \001(\0132\025.common.v1"
  ".ConfigSamlR\004saml\0229\n\nnative_app\030\021 \001(\0132\032."
  "common.v1.ConfigNativeAppR\tnativeApp\022>\n\013"
  "meilisearch\030\022 \001(\0132\034.common.v1.ConfigMeil"
  "isearchR\013meilisearch\022,\n\005bleve\030\023 \001(\0132\026.co"
  "mmon.v1.ConfigBleveR\005bleve\022E\n\016data_reten"
  "tion\030\024 \001(\0132\036.common.v1.ConfigDataRetenti"
  "onR\rdataRetention\022<\n\013image_proxy\030\025 \001(\0132\033"
  ".common.v1.ConfigImageProxyR\nimageProxy\""
  "\022\n\020ConfigGetRequest\"u\n\021ConfigGetResponse"
  "\022\'\n\004data\030\001 \001(\0132\021.common.v1.ConfigH\000R\004dat"
  "a\022+\n\005error\030\002 \001(\0132\023.shared.v1.AppErrorH\000R"
  "\005errorB\n\n\010response\"@\n\023ConfigUpdateReques"
  "t\022)\n\006config\030\001 \001(\0132\021.common.v1.ConfigR\006co"
  "nfig\"x\n\024ConfigUpdateResponse\022\'\n\004data\030\001 \001"
  "(\0132\021.common.v1.ConfigH\000R\004data\022+\n\005error\030\002"
  " \001(\0132\023.shared.v1.AppErrorH\000R\005errorB\n\n\010re"
  "sponse\"z\n\026ConfigListenerResponse\022\'\n\004data"
  "\030\001 \001(\0132\021.common.v1.ConfigH\000R\004data\022+\n\005err"
  "or\030\002 \001(\0132\023.shared.v1.AppErrorH\000R\005errorB\n"
  "\n\010response\"4\n\025ConfigListenerRequest\022\033\n\tc"
  "lient_id\030\001 \001(\tR\010clientIdBq\n\032org.megacomm"
  "erce.common.v1B\013ConfigProtoZCgithub.com/"
  "ahmad-khatib0-org/megacommerce-proto/gen"
  "/go/common/v1;v1\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2fv1_2fconfig_2eproto_deps[1] = {
  &::descriptor_table_shared_2fv1_2ferror_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2fv1_2fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fv1_2fconfig_2eproto = {
  false, false, 21547, descriptor_table_protodef_common_2fv1_2fconfig_2eproto, "common/v1/config.proto", 
  &descriptor_table_common_2fv1_2fconfig_2eproto_once, descriptor_table_common_2fv1_2fconfig_2eproto_deps, 1, 29,
  schemas, file_default_instances, TableStruct_common_2fv1_2fconfig_2eproto::offsets,
  file_level_metadata_common_2fv1_2fconfig_2eproto, file_level_enum_descriptors_common_2fv1_2fconfig_2eproto, file_level_service_descriptors_common_2fv1_2fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_common_2fv1_2fconfig_2eproto_getter() {
  return &descriptor_table_common_2fv1_2fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_common_2fv1_2fconfig_2eproto(&descriptor_table_common_2fv1_2fconfig_2eproto);
namespace common {
namespace v1 {

// ===================================================================

class ConfigMain::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigMain>()._has_bits_);
  static void set_has_env(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_read_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_write_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_idle_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enable_link_previews(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_restrict_link_previews(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_client_performance_debugging(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_enable_gif_picker(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_enable_custom_emoji(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_enable_emoji_picker(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_time_between_user_typing_updates_milliseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_enable_file_search(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_enable_user_typing_messages(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_enable_user_statuses(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_enable_email_invitations(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_enable_svgs(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_allow_persistent_notifications(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_persistent_notification_interval_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_persistent_notification_max_count(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_persistent_notification_max_recipients(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_feature_flag_sync_interval_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_allow_synced_drafts(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

ConfigMain::ConfigMain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigMain)
}
ConfigMain::ConfigMain(const ConfigMain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  env_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    env_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_env()) {
    env_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_env(), 
      GetArenaForAllocation());
  }
  restrict_link_previews_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    restrict_link_previews_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_restrict_link_previews()) {
    restrict_link_previews_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_restrict_link_previews(), 
      GetArenaForAllocation());
  }
  ::memcpy(&read_timeout_, &from.read_timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&feature_flag_sync_interval_seconds_) -
    reinterpret_cast<char*>(&read_timeout_)) + sizeof(feature_flag_sync_interval_seconds_));
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigMain)
}

inline void ConfigMain::SharedCtor() {
env_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  env_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
restrict_link_previews_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  restrict_link_previews_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&read_timeout_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&feature_flag_sync_interval_seconds_) -
    reinterpret_cast<char*>(&read_timeout_)) + sizeof(feature_flag_sync_interval_seconds_));
}

ConfigMain::~ConfigMain() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigMain)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigMain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  env_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  restrict_link_previews_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigMain::ArenaDtor(void* object) {
  ConfigMain* _this = reinterpret_cast< ConfigMain* >(object);
  (void)_this;
}
void ConfigMain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigMain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigMain::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigMain)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      env_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      restrict_link_previews_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&read_timeout_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_gif_picker_) -
        reinterpret_cast<char*>(&read_timeout_)) + sizeof(enable_gif_picker_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&enable_custom_emoji_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_svgs_) -
        reinterpret_cast<char*>(&enable_custom_emoji_)) + sizeof(enable_svgs_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&allow_persistent_notifications_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&feature_flag_sync_interval_seconds_) -
        reinterpret_cast<char*>(&allow_persistent_notifications_)) + sizeof(feature_flag_sync_interval_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigMain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string env = 1 [json_name = "env"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_env();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigMain.env"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 read_timeout = 2 [json_name = "readTimeout"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_read_timeout(&has_bits);
          read_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 write_timeout = 3 [json_name = "writeTimeout"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_write_timeout(&has_bits);
          write_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 idle_timeout = 4 [json_name = "idleTimeout"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_idle_timeout(&has_bits);
          idle_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_link_previews = 5 [json_name = "enableLinkPreviews"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_enable_link_previews(&has_bits);
          enable_link_previews_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string restrict_link_previews = 6 [json_name = "restrictLinkPreviews"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_restrict_link_previews();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigMain.restrict_link_previews"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_client_performance_debugging = 7 [json_name = "enableClientPerformanceDebugging"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_enable_client_performance_debugging(&has_bits);
          enable_client_performance_debugging_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_gif_picker = 8 [json_name = "enableGifPicker"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_enable_gif_picker(&has_bits);
          enable_gif_picker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_custom_emoji = 9 [json_name = "enableCustomEmoji"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_enable_custom_emoji(&has_bits);
          enable_custom_emoji_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_emoji_picker = 10 [json_name = "enableEmojiPicker"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_enable_emoji_picker(&has_bits);
          enable_emoji_picker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 time_between_user_typing_updates_milliseconds = 11 [json_name = "timeBetweenUserTypingUpdatesMilliseconds"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_time_between_user_typing_updates_milliseconds(&has_bits);
          time_between_user_typing_updates_milliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_file_search = 12 [json_name = "enableFileSearch"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_enable_file_search(&has_bits);
          enable_file_search_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_user_typing_messages = 13 [json_name = "enableUserTypingMessages"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_enable_user_typing_messages(&has_bits);
          enable_user_typing_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_user_statuses = 14 [json_name = "enableUserStatuses"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_enable_user_statuses(&has_bits);
          enable_user_statuses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_email_invitations = 15 [json_name = "enableEmailInvitations"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_enable_email_invitations(&has_bits);
          enable_email_invitations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_svgs = 16 [json_name = "enableSvgs"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_enable_svgs(&has_bits);
          enable_svgs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_persistent_notifications = 17 [json_name = "allowPersistentNotifications"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_allow_persistent_notifications(&has_bits);
          allow_persistent_notifications_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 persistent_notification_interval_minutes = 18 [json_name = "persistentNotificationIntervalMinutes"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_persistent_notification_interval_minutes(&has_bits);
          persistent_notification_interval_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 persistent_notification_max_count = 19 [json_name = "persistentNotificationMaxCount"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_persistent_notification_max_count(&has_bits);
          persistent_notification_max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 persistent_notification_max_recipients = 20 [json_name = "persistentNotificationMaxRecipients"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_persistent_notification_max_recipients(&has_bits);
          persistent_notification_max_recipients_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 feature_flag_sync_interval_seconds = 21 [json_name = "featureFlagSyncIntervalSeconds"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_feature_flag_sync_interval_seconds(&has_bits);
          feature_flag_sync_interval_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_synced_drafts = 22 [json_name = "allowSyncedDrafts"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_allow_synced_drafts(&has_bits);
          allow_synced_drafts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigMain::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigMain)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string env = 1 [json_name = "env"];
  if (_internal_has_env()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_env().data(), static_cast<int>(this->_internal_env().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigMain.env");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_env(), target);
  }

  // optional int32 read_timeout = 2 [json_name = "readTimeout"];
  if (_internal_has_read_timeout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_read_timeout(), target);
  }

  // optional int32 write_timeout = 3 [json_name = "writeTimeout"];
  if (_internal_has_write_timeout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_write_timeout(), target);
  }

  // optional int32 idle_timeout = 4 [json_name = "idleTimeout"];
  if (_internal_has_idle_timeout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_idle_timeout(), target);
  }

  // optional bool enable_link_previews = 5 [json_name = "enableLinkPreviews"];
  if (_internal_has_enable_link_previews()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_link_previews(), target);
  }

  // optional string restrict_link_previews = 6 [json_name = "restrictLinkPreviews"];
  if (_internal_has_restrict_link_previews()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_restrict_link_previews().data(), static_cast<int>(this->_internal_restrict_link_previews().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigMain.restrict_link_previews");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_restrict_link_previews(), target);
  }

  // optional bool enable_client_performance_debugging = 7 [json_name = "enableClientPerformanceDebugging"];
  if (_internal_has_enable_client_performance_debugging()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_enable_client_performance_debugging(), target);
  }

  // optional bool enable_gif_picker = 8 [json_name = "enableGifPicker"];
  if (_internal_has_enable_gif_picker()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_enable_gif_picker(), target);
  }

  // optional bool enable_custom_emoji = 9 [json_name = "enableCustomEmoji"];
  if (_internal_has_enable_custom_emoji()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_enable_custom_emoji(), target);
  }

  // optional bool enable_emoji_picker = 10 [json_name = "enableEmojiPicker"];
  if (_internal_has_enable_emoji_picker()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_enable_emoji_picker(), target);
  }

  // optional int64 time_between_user_typing_updates_milliseconds = 11 [json_name = "timeBetweenUserTypingUpdatesMilliseconds"];
  if (_internal_has_time_between_user_typing_updates_milliseconds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_time_between_user_typing_updates_milliseconds(), target);
  }

  // optional bool enable_file_search = 12 [json_name = "enableFileSearch"];
  if (_internal_has_enable_file_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_enable_file_search(), target);
  }

  // optional bool enable_user_typing_messages = 13 [json_name = "enableUserTypingMessages"];
  if (_internal_has_enable_user_typing_messages()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_enable_user_typing_messages(), target);
  }

  // optional bool enable_user_statuses = 14 [json_name = "enableUserStatuses"];
  if (_internal_has_enable_user_statuses()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_enable_user_statuses(), target);
  }

  // optional bool enable_email_invitations = 15 [json_name = "enableEmailInvitations"];
  if (_internal_has_enable_email_invitations()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_enable_email_invitations(), target);
  }

  // optional bool enable_svgs = 16 [json_name = "enableSvgs"];
  if (_internal_has_enable_svgs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_enable_svgs(), target);
  }

  // optional bool allow_persistent_notifications = 17 [json_name = "allowPersistentNotifications"];
  if (_internal_has_allow_persistent_notifications()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_allow_persistent_notifications(), target);
  }

  // optional int32 persistent_notification_interval_minutes = 18 [json_name = "persistentNotificationIntervalMinutes"];
  if (_internal_has_persistent_notification_interval_minutes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_persistent_notification_interval_minutes(), target);
  }

  // optional int32 persistent_notification_max_count = 19 [json_name = "persistentNotificationMaxCount"];
  if (_internal_has_persistent_notification_max_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_persistent_notification_max_count(), target);
  }

  // optional int32 persistent_notification_max_recipients = 20 [json_name = "persistentNotificationMaxRecipients"];
  if (_internal_has_persistent_notification_max_recipients()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_persistent_notification_max_recipients(), target);
  }

  // optional int32 feature_flag_sync_interval_seconds = 21 [json_name = "featureFlagSyncIntervalSeconds"];
  if (_internal_has_feature_flag_sync_interval_seconds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_feature_flag_sync_interval_seconds(), target);
  }

  // optional bool allow_synced_drafts = 22 [json_name = "allowSyncedDrafts"];
  if (_internal_has_allow_synced_drafts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_allow_synced_drafts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigMain)
  return target;
}

size_t ConfigMain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigMain)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string env = 1 [json_name = "env"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_env());
    }

    // optional string restrict_link_previews = 6 [json_name = "restrictLinkPreviews"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_restrict_link_previews());
    }

    // optional int32 read_timeout = 2 [json_name = "readTimeout"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_read_timeout());
    }

    // optional int32 write_timeout = 3 [json_name = "writeTimeout"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_write_timeout());
    }

    // optional int32 idle_timeout = 4 [json_name = "idleTimeout"];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_idle_timeout());
    }

    // optional bool enable_link_previews = 5 [json_name = "enableLinkPreviews"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool enable_client_performance_debugging = 7 [json_name = "enableClientPerformanceDebugging"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool enable_gif_picker = 8 [json_name = "enableGifPicker"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool enable_custom_emoji = 9 [json_name = "enableCustomEmoji"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional int64 time_between_user_typing_updates_milliseconds = 11 [json_name = "timeBetweenUserTypingUpdatesMilliseconds"];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_time_between_user_typing_updates_milliseconds());
    }

    // optional bool enable_emoji_picker = 10 [json_name = "enableEmojiPicker"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool enable_file_search = 12 [json_name = "enableFileSearch"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool enable_user_typing_messages = 13 [json_name = "enableUserTypingMessages"];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool enable_user_statuses = 14 [json_name = "enableUserStatuses"];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool enable_email_invitations = 15 [json_name = "enableEmailInvitations"];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool enable_svgs = 16 [json_name = "enableSvgs"];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional bool allow_persistent_notifications = 17 [json_name = "allowPersistentNotifications"];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool allow_synced_drafts = 22 [json_name = "allowSyncedDrafts"];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional int32 persistent_notification_interval_minutes = 18 [json_name = "persistentNotificationIntervalMinutes"];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_persistent_notification_interval_minutes());
    }

    // optional int32 persistent_notification_max_count = 19 [json_name = "persistentNotificationMaxCount"];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_persistent_notification_max_count());
    }

    // optional int32 persistent_notification_max_recipients = 20 [json_name = "persistentNotificationMaxRecipients"];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_persistent_notification_max_recipients());
    }

    // optional int32 feature_flag_sync_interval_seconds = 21 [json_name = "featureFlagSyncIntervalSeconds"];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_feature_flag_sync_interval_seconds());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigMain::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigMain::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigMain::GetClassData() const { return &_class_data_; }

void ConfigMain::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigMain *>(to)->MergeFrom(
      static_cast<const ConfigMain &>(from));
}


void ConfigMain::MergeFrom(const ConfigMain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigMain)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_env(from._internal_env());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_restrict_link_previews(from._internal_restrict_link_previews());
    }
    if (cached_has_bits & 0x00000004u) {
      read_timeout_ = from.read_timeout_;
    }
    if (cached_has_bits & 0x00000008u) {
      write_timeout_ = from.write_timeout_;
    }
    if (cached_has_bits & 0x00000010u) {
      idle_timeout_ = from.idle_timeout_;
    }
    if (cached_has_bits & 0x00000020u) {
      enable_link_previews_ = from.enable_link_previews_;
    }
    if (cached_has_bits & 0x00000040u) {
      enable_client_performance_debugging_ = from.enable_client_performance_debugging_;
    }
    if (cached_has_bits & 0x00000080u) {
      enable_gif_picker_ = from.enable_gif_picker_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      enable_custom_emoji_ = from.enable_custom_emoji_;
    }
    if (cached_has_bits & 0x00000200u) {
      time_between_user_typing_updates_milliseconds_ = from.time_between_user_typing_updates_milliseconds_;
    }
    if (cached_has_bits & 0x00000400u) {
      enable_emoji_picker_ = from.enable_emoji_picker_;
    }
    if (cached_has_bits & 0x00000800u) {
      enable_file_search_ = from.enable_file_search_;
    }
    if (cached_has_bits & 0x00001000u) {
      enable_user_typing_messages_ = from.enable_user_typing_messages_;
    }
    if (cached_has_bits & 0x00002000u) {
      enable_user_statuses_ = from.enable_user_statuses_;
    }
    if (cached_has_bits & 0x00004000u) {
      enable_email_invitations_ = from.enable_email_invitations_;
    }
    if (cached_has_bits & 0x00008000u) {
      enable_svgs_ = from.enable_svgs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      allow_persistent_notifications_ = from.allow_persistent_notifications_;
    }
    if (cached_has_bits & 0x00020000u) {
      allow_synced_drafts_ = from.allow_synced_drafts_;
    }
    if (cached_has_bits & 0x00040000u) {
      persistent_notification_interval_minutes_ = from.persistent_notification_interval_minutes_;
    }
    if (cached_has_bits & 0x00080000u) {
      persistent_notification_max_count_ = from.persistent_notification_max_count_;
    }
    if (cached_has_bits & 0x00100000u) {
      persistent_notification_max_recipients_ = from.persistent_notification_max_recipients_;
    }
    if (cached_has_bits & 0x00200000u) {
      feature_flag_sync_interval_seconds_ = from.feature_flag_sync_interval_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigMain::CopyFrom(const ConfigMain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigMain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigMain::IsInitialized() const {
  return true;
}

void ConfigMain::InternalSwap(ConfigMain* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &env_, lhs_arena,
      &other->env_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &restrict_link_previews_, lhs_arena,
      &other->restrict_link_previews_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigMain, feature_flag_sync_interval_seconds_)
      + sizeof(ConfigMain::feature_flag_sync_interval_seconds_)
      - PROTOBUF_FIELD_OFFSET(ConfigMain, read_timeout_)>(
          reinterpret_cast<char*>(&read_timeout_),
          reinterpret_cast<char*>(&other->read_timeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigMain::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[0]);
}

// ===================================================================

class ConfigServices::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigServices>()._has_bits_);
  static void set_has_common_service_grpc_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_service_grpc_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_jaeger_collector_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_common_service_prometheus_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_service_prometheus_url(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ConfigServices::ConfigServices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigServices)
}
ConfigServices::ConfigServices(const ConfigServices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  common_service_grpc_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    common_service_grpc_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_common_service_grpc_url()) {
    common_service_grpc_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_common_service_grpc_url(), 
      GetArenaForAllocation());
  }
  user_service_grpc_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_service_grpc_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_service_grpc_url()) {
    user_service_grpc_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_service_grpc_url(), 
      GetArenaForAllocation());
  }
  jaeger_collector_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    jaeger_collector_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_jaeger_collector_url()) {
    jaeger_collector_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_jaeger_collector_url(), 
      GetArenaForAllocation());
  }
  common_service_prometheus_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    common_service_prometheus_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_common_service_prometheus_url()) {
    common_service_prometheus_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_common_service_prometheus_url(), 
      GetArenaForAllocation());
  }
  user_service_prometheus_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_service_prometheus_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_service_prometheus_url()) {
    user_service_prometheus_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_service_prometheus_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigServices)
}

inline void ConfigServices::SharedCtor() {
common_service_grpc_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  common_service_grpc_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_service_grpc_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_service_grpc_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
jaeger_collector_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  jaeger_collector_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
common_service_prometheus_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  common_service_prometheus_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_service_prometheus_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_service_prometheus_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConfigServices::~ConfigServices() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigServices)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigServices::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  common_service_grpc_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_service_grpc_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jaeger_collector_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  common_service_prometheus_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_service_prometheus_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigServices::ArenaDtor(void* object) {
  ConfigServices* _this = reinterpret_cast< ConfigServices* >(object);
  (void)_this;
}
void ConfigServices::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigServices::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigServices::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigServices)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      common_service_grpc_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_service_grpc_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      jaeger_collector_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      common_service_prometheus_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      user_service_prometheus_url_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigServices::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string common_service_grpc_url = 1 [json_name = "commonServiceGrpcUrl"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_common_service_grpc_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigServices.common_service_grpc_url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string user_service_grpc_url = 2 [json_name = "userServiceGrpcUrl"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_service_grpc_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigServices.user_service_grpc_url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string jaeger_collector_url = 3 [json_name = "jaegerCollectorUrl"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_jaeger_collector_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigServices.jaeger_collector_url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string common_service_prometheus_url = 4 [json_name = "commonServicePrometheusUrl"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_common_service_prometheus_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigServices.common_service_prometheus_url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string user_service_prometheus_url = 5 [json_name = "userServicePrometheusUrl"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_user_service_prometheus_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigServices.user_service_prometheus_url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigServices::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigServices)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string common_service_grpc_url = 1 [json_name = "commonServiceGrpcUrl"];
  if (_internal_has_common_service_grpc_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_common_service_grpc_url().data(), static_cast<int>(this->_internal_common_service_grpc_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigServices.common_service_grpc_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_common_service_grpc_url(), target);
  }

  // optional string user_service_grpc_url = 2 [json_name = "userServiceGrpcUrl"];
  if (_internal_has_user_service_grpc_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_service_grpc_url().data(), static_cast<int>(this->_internal_user_service_grpc_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigServices.user_service_grpc_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_service_grpc_url(), target);
  }

  // optional string jaeger_collector_url = 3 [json_name = "jaegerCollectorUrl"];
  if (_internal_has_jaeger_collector_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jaeger_collector_url().data(), static_cast<int>(this->_internal_jaeger_collector_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigServices.jaeger_collector_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_jaeger_collector_url(), target);
  }

  // optional string common_service_prometheus_url = 4 [json_name = "commonServicePrometheusUrl"];
  if (_internal_has_common_service_prometheus_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_common_service_prometheus_url().data(), static_cast<int>(this->_internal_common_service_prometheus_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigServices.common_service_prometheus_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_common_service_prometheus_url(), target);
  }

  // optional string user_service_prometheus_url = 5 [json_name = "userServicePrometheusUrl"];
  if (_internal_has_user_service_prometheus_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_service_prometheus_url().data(), static_cast<int>(this->_internal_user_service_prometheus_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigServices.user_service_prometheus_url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_service_prometheus_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigServices)
  return target;
}

size_t ConfigServices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigServices)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string common_service_grpc_url = 1 [json_name = "commonServiceGrpcUrl"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_common_service_grpc_url());
    }

    // optional string user_service_grpc_url = 2 [json_name = "userServiceGrpcUrl"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_service_grpc_url());
    }

    // optional string jaeger_collector_url = 3 [json_name = "jaegerCollectorUrl"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_jaeger_collector_url());
    }

    // optional string common_service_prometheus_url = 4 [json_name = "commonServicePrometheusUrl"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_common_service_prometheus_url());
    }

    // optional string user_service_prometheus_url = 5 [json_name = "userServicePrometheusUrl"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_service_prometheus_url());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigServices::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigServices::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigServices::GetClassData() const { return &_class_data_; }

void ConfigServices::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigServices *>(to)->MergeFrom(
      static_cast<const ConfigServices &>(from));
}


void ConfigServices::MergeFrom(const ConfigServices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigServices)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_common_service_grpc_url(from._internal_common_service_grpc_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_service_grpc_url(from._internal_user_service_grpc_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_jaeger_collector_url(from._internal_jaeger_collector_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_common_service_prometheus_url(from._internal_common_service_prometheus_url());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_user_service_prometheus_url(from._internal_user_service_prometheus_url());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigServices::CopyFrom(const ConfigServices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigServices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigServices::IsInitialized() const {
  return true;
}

void ConfigServices::InternalSwap(ConfigServices* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &common_service_grpc_url_, lhs_arena,
      &other->common_service_grpc_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_service_grpc_url_, lhs_arena,
      &other->user_service_grpc_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &jaeger_collector_url_, lhs_arena,
      &other->jaeger_collector_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &common_service_prometheus_url_, lhs_arena,
      &other->common_service_prometheus_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_service_prometheus_url_, lhs_arena,
      &other->user_service_prometheus_url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigServices::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[1]);
}

// ===================================================================

ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::ConfigSecurity_RestrictedUsernamesEntry_DoNotUse() {}
ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::ConfigSecurity_RestrictedUsernamesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::MergeFrom(const ConfigSecurity_RestrictedUsernamesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[2]);
}

// ===================================================================

class ConfigSecurity::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigSecurity>()._has_bits_);
  static void set_has_maximum_login_attempts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_insecure_outgoing_connections(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_multifactor_authentication(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enforce_multifactor_authentication(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_enable_oauth_service_provider(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_enable_outgoing_oauth_connections(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_terminate_sessions_on_password_change(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_session_length_web_in_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_session_length_mobile_in_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_session_length_sso_in_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_allow_cors_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cors_exposed_headers(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cors_allow_credentials(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_cors_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_allow_cookies_for_subdomains(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_session_cache_in_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_websocket_secure_port(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_websocket_port(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

ConfigSecurity::ConfigSecurity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  restricted_usernames_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigSecurity)
}
ConfigSecurity::ConfigSecurity(const ConfigSecurity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  restricted_usernames_.MergeFrom(from.restricted_usernames_);
  allow_cors_from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    allow_cors_from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_allow_cors_from()) {
    allow_cors_from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_allow_cors_from(), 
      GetArenaForAllocation());
  }
  cors_exposed_headers_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cors_exposed_headers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cors_exposed_headers()) {
    cors_exposed_headers_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cors_exposed_headers(), 
      GetArenaForAllocation());
  }
  ::memcpy(&maximum_login_attempts_, &from.maximum_login_attempts_,
    static_cast<size_t>(reinterpret_cast<char*>(&websocket_port_) -
    reinterpret_cast<char*>(&maximum_login_attempts_)) + sizeof(websocket_port_));
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigSecurity)
}

inline void ConfigSecurity::SharedCtor() {
allow_cors_from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  allow_cors_from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cors_exposed_headers_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cors_exposed_headers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&maximum_login_attempts_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&websocket_port_) -
    reinterpret_cast<char*>(&maximum_login_attempts_)) + sizeof(websocket_port_));
}

ConfigSecurity::~ConfigSecurity() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigSecurity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigSecurity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  allow_cors_from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cors_exposed_headers_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigSecurity::ArenaDtor(void* object) {
  ConfigSecurity* _this = reinterpret_cast< ConfigSecurity* >(object);
  (void)_this;
  _this->restricted_usernames_. ~MapField();
}
inline void ConfigSecurity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ConfigSecurity::ArenaDtor);
  }
}
void ConfigSecurity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigSecurity::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigSecurity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  restricted_usernames_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      allow_cors_from_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      cors_exposed_headers_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&maximum_login_attempts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&session_length_web_in_hours_) -
        reinterpret_cast<char*>(&maximum_login_attempts_)) + sizeof(session_length_web_in_hours_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&session_length_mobile_in_hours_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&session_cache_in_minutes_) -
        reinterpret_cast<char*>(&session_length_mobile_in_hours_)) + sizeof(session_cache_in_minutes_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&websocket_secure_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&websocket_port_) -
        reinterpret_cast<char*>(&websocket_secure_port_)) + sizeof(websocket_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigSecurity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> restricted_usernames = 1 [json_name = "restrictedUsernames"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&restricted_usernames_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 maximum_login_attempts = 2 [json_name = "maximumLoginAttempts"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_maximum_login_attempts(&has_bits);
          maximum_login_attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_insecure_outgoing_connections = 3 [json_name = "enableInsecureOutgoingConnections"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_enable_insecure_outgoing_connections(&has_bits);
          enable_insecure_outgoing_connections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_multifactor_authentication = 4 [json_name = "enableMultifactorAuthentication"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_enable_multifactor_authentication(&has_bits);
          enable_multifactor_authentication_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enforce_multifactor_authentication = 5 [json_name = "enforceMultifactorAuthentication"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_enforce_multifactor_authentication(&has_bits);
          enforce_multifactor_authentication_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_oauth_service_provider = 6 [json_name = "enableOauthServiceProvider"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_enable_oauth_service_provider(&has_bits);
          enable_oauth_service_provider_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_outgoing_oauth_connections = 7 [json_name = "enableOutgoingOauthConnections"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_enable_outgoing_oauth_connections(&has_bits);
          enable_outgoing_oauth_connections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool terminate_sessions_on_password_change = 8 [json_name = "terminateSessionsOnPasswordChange"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_terminate_sessions_on_password_change(&has_bits);
          terminate_sessions_on_password_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 session_length_web_in_hours = 9 [json_name = "sessionLengthWebInHours"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_session_length_web_in_hours(&has_bits);
          session_length_web_in_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 session_length_mobile_in_hours = 10 [json_name = "sessionLengthMobileInHours"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_session_length_mobile_in_hours(&has_bits);
          session_length_mobile_in_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 session_length_sso_in_hours = 11 [json_name = "sessionLengthSsoInHours"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_session_length_sso_in_hours(&has_bits);
          session_length_sso_in_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string allow_cors_from = 12 [json_name = "allowCorsFrom"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_allow_cors_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSecurity.allow_cors_from"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string cors_exposed_headers = 13 [json_name = "corsExposedHeaders"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_cors_exposed_headers();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSecurity.cors_exposed_headers"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cors_allow_credentials = 14 [json_name = "corsAllowCredentials"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_cors_allow_credentials(&has_bits);
          cors_allow_credentials_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cors_debug = 15 [json_name = "corsDebug"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_cors_debug(&has_bits);
          cors_debug_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_cookies_for_subdomains = 16 [json_name = "allowCookiesForSubdomains"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_allow_cookies_for_subdomains(&has_bits);
          allow_cookies_for_subdomains_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 session_cache_in_minutes = 17 [json_name = "sessionCacheInMinutes"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_session_cache_in_minutes(&has_bits);
          session_cache_in_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 websocket_secure_port = 18 [json_name = "websocketSecurePort"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_websocket_secure_port(&has_bits);
          websocket_secure_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 websocket_port = 19 [json_name = "websocketPort"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_websocket_port(&has_bits);
          websocket_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigSecurity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigSecurity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> restricted_usernames = 1 [json_name = "restrictedUsernames"];
  if (!this->_internal_restricted_usernames().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "common.v1.ConfigSecurity.RestrictedUsernamesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "common.v1.ConfigSecurity.RestrictedUsernamesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_restricted_usernames().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_restricted_usernames().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_restricted_usernames().begin();
          it != this->_internal_restricted_usernames().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_restricted_usernames().begin();
          it != this->_internal_restricted_usernames().end(); ++it) {
        target = ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // optional int32 maximum_login_attempts = 2 [json_name = "maximumLoginAttempts"];
  if (_internal_has_maximum_login_attempts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_maximum_login_attempts(), target);
  }

  // optional bool enable_insecure_outgoing_connections = 3 [json_name = "enableInsecureOutgoingConnections"];
  if (_internal_has_enable_insecure_outgoing_connections()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_insecure_outgoing_connections(), target);
  }

  // optional bool enable_multifactor_authentication = 4 [json_name = "enableMultifactorAuthentication"];
  if (_internal_has_enable_multifactor_authentication()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_multifactor_authentication(), target);
  }

  // optional bool enforce_multifactor_authentication = 5 [json_name = "enforceMultifactorAuthentication"];
  if (_internal_has_enforce_multifactor_authentication()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enforce_multifactor_authentication(), target);
  }

  // optional bool enable_oauth_service_provider = 6 [json_name = "enableOauthServiceProvider"];
  if (_internal_has_enable_oauth_service_provider()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enable_oauth_service_provider(), target);
  }

  // optional bool enable_outgoing_oauth_connections = 7 [json_name = "enableOutgoingOauthConnections"];
  if (_internal_has_enable_outgoing_oauth_connections()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_enable_outgoing_oauth_connections(), target);
  }

  // optional bool terminate_sessions_on_password_change = 8 [json_name = "terminateSessionsOnPasswordChange"];
  if (_internal_has_terminate_sessions_on_password_change()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_terminate_sessions_on_password_change(), target);
  }

  // optional int32 session_length_web_in_hours = 9 [json_name = "sessionLengthWebInHours"];
  if (_internal_has_session_length_web_in_hours()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_session_length_web_in_hours(), target);
  }

  // optional int32 session_length_mobile_in_hours = 10 [json_name = "sessionLengthMobileInHours"];
  if (_internal_has_session_length_mobile_in_hours()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_session_length_mobile_in_hours(), target);
  }

  // optional int32 session_length_sso_in_hours = 11 [json_name = "sessionLengthSsoInHours"];
  if (_internal_has_session_length_sso_in_hours()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_session_length_sso_in_hours(), target);
  }

  // optional string allow_cors_from = 12 [json_name = "allowCorsFrom"];
  if (_internal_has_allow_cors_from()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_allow_cors_from().data(), static_cast<int>(this->_internal_allow_cors_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSecurity.allow_cors_from");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_allow_cors_from(), target);
  }

  // optional string cors_exposed_headers = 13 [json_name = "corsExposedHeaders"];
  if (_internal_has_cors_exposed_headers()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cors_exposed_headers().data(), static_cast<int>(this->_internal_cors_exposed_headers().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSecurity.cors_exposed_headers");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_cors_exposed_headers(), target);
  }

  // optional bool cors_allow_credentials = 14 [json_name = "corsAllowCredentials"];
  if (_internal_has_cors_allow_credentials()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_cors_allow_credentials(), target);
  }

  // optional bool cors_debug = 15 [json_name = "corsDebug"];
  if (_internal_has_cors_debug()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_cors_debug(), target);
  }

  // optional bool allow_cookies_for_subdomains = 16 [json_name = "allowCookiesForSubdomains"];
  if (_internal_has_allow_cookies_for_subdomains()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_allow_cookies_for_subdomains(), target);
  }

  // optional int32 session_cache_in_minutes = 17 [json_name = "sessionCacheInMinutes"];
  if (_internal_has_session_cache_in_minutes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_session_cache_in_minutes(), target);
  }

  // optional int32 websocket_secure_port = 18 [json_name = "websocketSecurePort"];
  if (_internal_has_websocket_secure_port()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_websocket_secure_port(), target);
  }

  // optional int32 websocket_port = 19 [json_name = "websocketPort"];
  if (_internal_has_websocket_port()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_websocket_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigSecurity)
  return target;
}

size_t ConfigSecurity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigSecurity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> restricted_usernames = 1 [json_name = "restrictedUsernames"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_restricted_usernames_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_restricted_usernames().begin();
      it != this->_internal_restricted_usernames().end(); ++it) {
    total_size += ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string allow_cors_from = 12 [json_name = "allowCorsFrom"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_allow_cors_from());
    }

    // optional string cors_exposed_headers = 13 [json_name = "corsExposedHeaders"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cors_exposed_headers());
    }

    // optional int32 maximum_login_attempts = 2 [json_name = "maximumLoginAttempts"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_maximum_login_attempts());
    }

    // optional bool enable_insecure_outgoing_connections = 3 [json_name = "enableInsecureOutgoingConnections"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool enable_multifactor_authentication = 4 [json_name = "enableMultifactorAuthentication"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enforce_multifactor_authentication = 5 [json_name = "enforceMultifactorAuthentication"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool enable_oauth_service_provider = 6 [json_name = "enableOauthServiceProvider"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 session_length_web_in_hours = 9 [json_name = "sessionLengthWebInHours"];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_session_length_web_in_hours());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 session_length_mobile_in_hours = 10 [json_name = "sessionLengthMobileInHours"];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_session_length_mobile_in_hours());
    }

    // optional int32 session_length_sso_in_hours = 11 [json_name = "sessionLengthSsoInHours"];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_session_length_sso_in_hours());
    }

    // optional bool enable_outgoing_oauth_connections = 7 [json_name = "enableOutgoingOauthConnections"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool terminate_sessions_on_password_change = 8 [json_name = "terminateSessionsOnPasswordChange"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool cors_allow_credentials = 14 [json_name = "corsAllowCredentials"];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool cors_debug = 15 [json_name = "corsDebug"];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool allow_cookies_for_subdomains = 16 [json_name = "allowCookiesForSubdomains"];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional int32 session_cache_in_minutes = 17 [json_name = "sessionCacheInMinutes"];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_session_cache_in_minutes());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional int32 websocket_secure_port = 18 [json_name = "websocketSecurePort"];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_websocket_secure_port());
    }

    // optional int32 websocket_port = 19 [json_name = "websocketPort"];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_websocket_port());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigSecurity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigSecurity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigSecurity::GetClassData() const { return &_class_data_; }

void ConfigSecurity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigSecurity *>(to)->MergeFrom(
      static_cast<const ConfigSecurity &>(from));
}


void ConfigSecurity::MergeFrom(const ConfigSecurity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigSecurity)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  restricted_usernames_.MergeFrom(from.restricted_usernames_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_allow_cors_from(from._internal_allow_cors_from());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_cors_exposed_headers(from._internal_cors_exposed_headers());
    }
    if (cached_has_bits & 0x00000004u) {
      maximum_login_attempts_ = from.maximum_login_attempts_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_insecure_outgoing_connections_ = from.enable_insecure_outgoing_connections_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_multifactor_authentication_ = from.enable_multifactor_authentication_;
    }
    if (cached_has_bits & 0x00000020u) {
      enforce_multifactor_authentication_ = from.enforce_multifactor_authentication_;
    }
    if (cached_has_bits & 0x00000040u) {
      enable_oauth_service_provider_ = from.enable_oauth_service_provider_;
    }
    if (cached_has_bits & 0x00000080u) {
      session_length_web_in_hours_ = from.session_length_web_in_hours_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      session_length_mobile_in_hours_ = from.session_length_mobile_in_hours_;
    }
    if (cached_has_bits & 0x00000200u) {
      session_length_sso_in_hours_ = from.session_length_sso_in_hours_;
    }
    if (cached_has_bits & 0x00000400u) {
      enable_outgoing_oauth_connections_ = from.enable_outgoing_oauth_connections_;
    }
    if (cached_has_bits & 0x00000800u) {
      terminate_sessions_on_password_change_ = from.terminate_sessions_on_password_change_;
    }
    if (cached_has_bits & 0x00001000u) {
      cors_allow_credentials_ = from.cors_allow_credentials_;
    }
    if (cached_has_bits & 0x00002000u) {
      cors_debug_ = from.cors_debug_;
    }
    if (cached_has_bits & 0x00004000u) {
      allow_cookies_for_subdomains_ = from.allow_cookies_for_subdomains_;
    }
    if (cached_has_bits & 0x00008000u) {
      session_cache_in_minutes_ = from.session_cache_in_minutes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      websocket_secure_port_ = from.websocket_secure_port_;
    }
    if (cached_has_bits & 0x00020000u) {
      websocket_port_ = from.websocket_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigSecurity::CopyFrom(const ConfigSecurity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigSecurity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigSecurity::IsInitialized() const {
  return true;
}

void ConfigSecurity::InternalSwap(ConfigSecurity* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  restricted_usernames_.InternalSwap(&other->restricted_usernames_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &allow_cors_from_, lhs_arena,
      &other->allow_cors_from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cors_exposed_headers_, lhs_arena,
      &other->cors_exposed_headers_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigSecurity, websocket_port_)
      + sizeof(ConfigSecurity::websocket_port_)
      - PROTOBUF_FIELD_OFFSET(ConfigSecurity, maximum_login_attempts_)>(
          reinterpret_cast<char*>(&maximum_login_attempts_),
          reinterpret_cast<char*>(&other->maximum_login_attempts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigSecurity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[3]);
}

// ===================================================================

class CacheConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CacheConfig>()._has_bits_);
  static void set_has_cache_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_redis_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_redis_password(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_redis_db(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_redis_cache_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_disable_client_cache(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CacheConfig::CacheConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.CacheConfig)
}
CacheConfig::CacheConfig(const CacheConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cache_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cache_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cache_type()) {
    cache_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cache_type(), 
      GetArenaForAllocation());
  }
  redis_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    redis_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_redis_address()) {
    redis_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_redis_address(), 
      GetArenaForAllocation());
  }
  redis_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    redis_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_redis_password()) {
    redis_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_redis_password(), 
      GetArenaForAllocation());
  }
  redis_cache_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    redis_cache_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_redis_cache_prefix()) {
    redis_cache_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_redis_cache_prefix(), 
      GetArenaForAllocation());
  }
  ::memcpy(&redis_db_, &from.redis_db_,
    static_cast<size_t>(reinterpret_cast<char*>(&disable_client_cache_) -
    reinterpret_cast<char*>(&redis_db_)) + sizeof(disable_client_cache_));
  // @@protoc_insertion_point(copy_constructor:common.v1.CacheConfig)
}

inline void CacheConfig::SharedCtor() {
cache_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cache_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
redis_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  redis_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
redis_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  redis_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
redis_cache_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  redis_cache_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&redis_db_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disable_client_cache_) -
    reinterpret_cast<char*>(&redis_db_)) + sizeof(disable_client_cache_));
}

CacheConfig::~CacheConfig() {
  // @@protoc_insertion_point(destructor:common.v1.CacheConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CacheConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cache_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  redis_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  redis_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  redis_cache_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CacheConfig::ArenaDtor(void* object) {
  CacheConfig* _this = reinterpret_cast< CacheConfig* >(object);
  (void)_this;
}
void CacheConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CacheConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CacheConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.CacheConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      cache_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      redis_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      redis_password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      redis_cache_prefix_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&redis_db_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disable_client_cache_) -
        reinterpret_cast<char*>(&redis_db_)) + sizeof(disable_client_cache_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CacheConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string cache_type = 1 [json_name = "cacheType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cache_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.CacheConfig.cache_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string redis_address = 2 [json_name = "redisAddress"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_redis_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.CacheConfig.redis_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string redis_password = 3 [json_name = "redisPassword"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_redis_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.CacheConfig.redis_password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 redis_db = 4 [json_name = "redisDb"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_redis_db(&has_bits);
          redis_db_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string redis_cache_prefix = 5 [json_name = "redisCachePrefix"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_redis_cache_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.CacheConfig.redis_cache_prefix"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disable_client_cache = 6 [json_name = "disableClientCache"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_disable_client_cache(&has_bits);
          disable_client_cache_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CacheConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.CacheConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string cache_type = 1 [json_name = "cacheType"];
  if (_internal_has_cache_type()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cache_type().data(), static_cast<int>(this->_internal_cache_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.CacheConfig.cache_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cache_type(), target);
  }

  // optional string redis_address = 2 [json_name = "redisAddress"];
  if (_internal_has_redis_address()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redis_address().data(), static_cast<int>(this->_internal_redis_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.CacheConfig.redis_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_redis_address(), target);
  }

  // optional string redis_password = 3 [json_name = "redisPassword"];
  if (_internal_has_redis_password()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redis_password().data(), static_cast<int>(this->_internal_redis_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.CacheConfig.redis_password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_redis_password(), target);
  }

  // optional int32 redis_db = 4 [json_name = "redisDb"];
  if (_internal_has_redis_db()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_redis_db(), target);
  }

  // optional string redis_cache_prefix = 5 [json_name = "redisCachePrefix"];
  if (_internal_has_redis_cache_prefix()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redis_cache_prefix().data(), static_cast<int>(this->_internal_redis_cache_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.CacheConfig.redis_cache_prefix");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_redis_cache_prefix(), target);
  }

  // optional bool disable_client_cache = 6 [json_name = "disableClientCache"];
  if (_internal_has_disable_client_cache()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_disable_client_cache(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.CacheConfig)
  return target;
}

size_t CacheConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.CacheConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string cache_type = 1 [json_name = "cacheType"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cache_type());
    }

    // optional string redis_address = 2 [json_name = "redisAddress"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_redis_address());
    }

    // optional string redis_password = 3 [json_name = "redisPassword"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_redis_password());
    }

    // optional string redis_cache_prefix = 5 [json_name = "redisCachePrefix"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_redis_cache_prefix());
    }

    // optional int32 redis_db = 4 [json_name = "redisDb"];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_redis_db());
    }

    // optional bool disable_client_cache = 6 [json_name = "disableClientCache"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CacheConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CacheConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CacheConfig::GetClassData() const { return &_class_data_; }

void CacheConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CacheConfig *>(to)->MergeFrom(
      static_cast<const CacheConfig &>(from));
}


void CacheConfig::MergeFrom(const CacheConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.CacheConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cache_type(from._internal_cache_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_redis_address(from._internal_redis_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_redis_password(from._internal_redis_password());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_redis_cache_prefix(from._internal_redis_cache_prefix());
    }
    if (cached_has_bits & 0x00000010u) {
      redis_db_ = from.redis_db_;
    }
    if (cached_has_bits & 0x00000020u) {
      disable_client_cache_ = from.disable_client_cache_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CacheConfig::CopyFrom(const CacheConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.CacheConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheConfig::IsInitialized() const {
  return true;
}

void CacheConfig::InternalSwap(CacheConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cache_type_, lhs_arena,
      &other->cache_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &redis_address_, lhs_arena,
      &other->redis_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &redis_password_, lhs_arena,
      &other->redis_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &redis_cache_prefix_, lhs_arena,
      &other->redis_cache_prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CacheConfig, disable_client_cache_)
      + sizeof(CacheConfig::disable_client_cache_)
      - PROTOBUF_FIELD_OFFSET(CacheConfig, redis_db_)>(
          reinterpret_cast<char*>(&redis_db_),
          reinterpret_cast<char*>(&other->redis_db_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[4]);
}

// ===================================================================

class ConfigMetrics::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigMetrics>()._has_bits_);
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_block_profile_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_listen_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_client_metrics(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_notification_metrics(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ConfigMetrics::ConfigMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  client_side_user_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigMetrics)
}
ConfigMetrics::ConfigMetrics(const ConfigMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      client_side_user_ids_(from.client_side_user_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  listen_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    listen_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_listen_address()) {
    listen_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_listen_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&block_profile_rate_, &from.block_profile_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_notification_metrics_) -
    reinterpret_cast<char*>(&block_profile_rate_)) + sizeof(enable_notification_metrics_));
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigMetrics)
}

inline void ConfigMetrics::SharedCtor() {
listen_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  listen_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_profile_rate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enable_notification_metrics_) -
    reinterpret_cast<char*>(&block_profile_rate_)) + sizeof(enable_notification_metrics_));
}

ConfigMetrics::~ConfigMetrics() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigMetrics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  listen_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigMetrics::ArenaDtor(void* object) {
  ConfigMetrics* _this = reinterpret_cast< ConfigMetrics* >(object);
  (void)_this;
}
void ConfigMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_side_user_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    listen_address_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&block_profile_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_notification_metrics_) -
        reinterpret_cast<char*>(&block_profile_rate_)) + sizeof(enable_notification_metrics_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enable = 1 [json_name = "enable"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 block_profile_rate = 2 [json_name = "blockProfileRate"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_block_profile_rate(&has_bits);
          block_profile_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string listen_address = 3 [json_name = "listenAddress"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_listen_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigMetrics.listen_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_client_metrics = 4 [json_name = "enableClientMetrics"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_enable_client_metrics(&has_bits);
          enable_client_metrics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_notification_metrics = 5 [json_name = "enableNotificationMetrics"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_enable_notification_metrics(&has_bits);
          enable_notification_metrics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string client_side_user_ids = 6 [json_name = "clientSideUserIds"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_client_side_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigMetrics.client_side_user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool enable = 1 [json_name = "enable"];
  if (_internal_has_enable()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // optional int32 block_profile_rate = 2 [json_name = "blockProfileRate"];
  if (_internal_has_block_profile_rate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_block_profile_rate(), target);
  }

  // optional string listen_address = 3 [json_name = "listenAddress"];
  if (_internal_has_listen_address()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_listen_address().data(), static_cast<int>(this->_internal_listen_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigMetrics.listen_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_listen_address(), target);
  }

  // optional bool enable_client_metrics = 4 [json_name = "enableClientMetrics"];
  if (_internal_has_enable_client_metrics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_client_metrics(), target);
  }

  // optional bool enable_notification_metrics = 5 [json_name = "enableNotificationMetrics"];
  if (_internal_has_enable_notification_metrics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_notification_metrics(), target);
  }

  // repeated string client_side_user_ids = 6 [json_name = "clientSideUserIds"];
  for (int i = 0, n = this->_internal_client_side_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_client_side_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigMetrics.client_side_user_ids");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigMetrics)
  return target;
}

size_t ConfigMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string client_side_user_ids = 6 [json_name = "clientSideUserIds"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(client_side_user_ids_.size());
  for (int i = 0, n = client_side_user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      client_side_user_ids_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string listen_address = 3 [json_name = "listenAddress"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_listen_address());
    }

    // optional int32 block_profile_rate = 2 [json_name = "blockProfileRate"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_block_profile_rate());
    }

    // optional bool enable = 1 [json_name = "enable"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool enable_client_metrics = 4 [json_name = "enableClientMetrics"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool enable_notification_metrics = 5 [json_name = "enableNotificationMetrics"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigMetrics::GetClassData() const { return &_class_data_; }

void ConfigMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigMetrics *>(to)->MergeFrom(
      static_cast<const ConfigMetrics &>(from));
}


void ConfigMetrics::MergeFrom(const ConfigMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  client_side_user_ids_.MergeFrom(from.client_side_user_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_listen_address(from._internal_listen_address());
    }
    if (cached_has_bits & 0x00000002u) {
      block_profile_rate_ = from.block_profile_rate_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_ = from.enable_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_client_metrics_ = from.enable_client_metrics_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_notification_metrics_ = from.enable_notification_metrics_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigMetrics::CopyFrom(const ConfigMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigMetrics::IsInitialized() const {
  return true;
}

void ConfigMetrics::InternalSwap(ConfigMetrics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  client_side_user_ids_.InternalSwap(&other->client_side_user_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &listen_address_, lhs_arena,
      &other->listen_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigMetrics, enable_notification_metrics_)
      + sizeof(ConfigMetrics::enable_notification_metrics_)
      - PROTOBUF_FIELD_OFFSET(ConfigMetrics, block_profile_rate_)>(
          reinterpret_cast<char*>(&block_profile_rate_),
          reinterpret_cast<char*>(&other->block_profile_rate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigMetrics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[5]);
}

// ===================================================================

class ConfigSSO::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigSSO>()._has_bits_);
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_secret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_auth_endpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_token_endpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_user_api_endpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_discovery_endpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_button_text(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_button_color(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

ConfigSSO::ConfigSSO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigSSO)
}
ConfigSSO::ConfigSSO(const ConfigSSO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_secret()) {
    secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secret(), 
      GetArenaForAllocation());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_scope()) {
    scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scope(), 
      GetArenaForAllocation());
  }
  auth_endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    auth_endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_auth_endpoint()) {
    auth_endpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auth_endpoint(), 
      GetArenaForAllocation());
  }
  token_endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token_endpoint()) {
    token_endpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_endpoint(), 
      GetArenaForAllocation());
  }
  user_api_endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_api_endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_api_endpoint()) {
    user_api_endpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_api_endpoint(), 
      GetArenaForAllocation());
  }
  discovery_endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    discovery_endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_discovery_endpoint()) {
    discovery_endpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_discovery_endpoint(), 
      GetArenaForAllocation());
  }
  button_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    button_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_button_text()) {
    button_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_button_text(), 
      GetArenaForAllocation());
  }
  button_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    button_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_button_color()) {
    button_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_button_color(), 
      GetArenaForAllocation());
  }
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigSSO)
}

inline void ConfigSSO::SharedCtor() {
secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
auth_endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  auth_endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_api_endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_api_endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
discovery_endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  discovery_endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
button_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  button_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
button_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  button_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
enable_ = false;
}

ConfigSSO::~ConfigSSO() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigSSO)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigSSO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scope_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_endpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_endpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_api_endpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  discovery_endpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  button_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  button_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigSSO::ArenaDtor(void* object) {
  ConfigSSO* _this = reinterpret_cast< ConfigSSO* >(object);
  (void)_this;
}
void ConfigSSO::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigSSO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigSSO::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigSSO)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      secret_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      scope_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      auth_endpoint_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      token_endpoint_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      user_api_endpoint_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      discovery_endpoint_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      button_text_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    button_color_.ClearNonDefaultToEmpty();
  }
  enable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigSSO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enable = 1 [json_name = "enable"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string secret = 2 [json_name = "secret"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSSO.secret"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string id = 3 [json_name = "id"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSSO.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string scope = 4 [json_name = "scope"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_scope();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSSO.scope"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string auth_endpoint = 5 [json_name = "authEndpoint"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_auth_endpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSSO.auth_endpoint"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string token_endpoint = 6 [json_name = "tokenEndpoint"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_token_endpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSSO.token_endpoint"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string user_api_endpoint = 7 [json_name = "userApiEndpoint"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_user_api_endpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSSO.user_api_endpoint"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string discovery_endpoint = 8 [json_name = "discoveryEndpoint"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_discovery_endpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSSO.discovery_endpoint"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string button_text = 9 [json_name = "buttonText"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_button_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSSO.button_text"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string button_color = 10 [json_name = "buttonColor"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_button_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSSO.button_color"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigSSO::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigSSO)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool enable = 1 [json_name = "enable"];
  if (_internal_has_enable()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // optional string secret = 2 [json_name = "secret"];
  if (_internal_has_secret()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSSO.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // optional string id = 3 [json_name = "id"];
  if (_internal_has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSSO.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // optional string scope = 4 [json_name = "scope"];
  if (_internal_has_scope()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scope().data(), static_cast<int>(this->_internal_scope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSSO.scope");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_scope(), target);
  }

  // optional string auth_endpoint = 5 [json_name = "authEndpoint"];
  if (_internal_has_auth_endpoint()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_endpoint().data(), static_cast<int>(this->_internal_auth_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSSO.auth_endpoint");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_auth_endpoint(), target);
  }

  // optional string token_endpoint = 6 [json_name = "tokenEndpoint"];
  if (_internal_has_token_endpoint()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_endpoint().data(), static_cast<int>(this->_internal_token_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSSO.token_endpoint");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_token_endpoint(), target);
  }

  // optional string user_api_endpoint = 7 [json_name = "userApiEndpoint"];
  if (_internal_has_user_api_endpoint()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_api_endpoint().data(), static_cast<int>(this->_internal_user_api_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSSO.user_api_endpoint");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_user_api_endpoint(), target);
  }

  // optional string discovery_endpoint = 8 [json_name = "discoveryEndpoint"];
  if (_internal_has_discovery_endpoint()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_discovery_endpoint().data(), static_cast<int>(this->_internal_discovery_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSSO.discovery_endpoint");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_discovery_endpoint(), target);
  }

  // optional string button_text = 9 [json_name = "buttonText"];
  if (_internal_has_button_text()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_button_text().data(), static_cast<int>(this->_internal_button_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSSO.button_text");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_button_text(), target);
  }

  // optional string button_color = 10 [json_name = "buttonColor"];
  if (_internal_has_button_color()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_button_color().data(), static_cast<int>(this->_internal_button_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSSO.button_color");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_button_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigSSO)
  return target;
}

size_t ConfigSSO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigSSO)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string secret = 2 [json_name = "secret"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_secret());
    }

    // optional string id = 3 [json_name = "id"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string scope = 4 [json_name = "scope"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scope());
    }

    // optional string auth_endpoint = 5 [json_name = "authEndpoint"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_auth_endpoint());
    }

    // optional string token_endpoint = 6 [json_name = "tokenEndpoint"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_token_endpoint());
    }

    // optional string user_api_endpoint = 7 [json_name = "userApiEndpoint"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_api_endpoint());
    }

    // optional string discovery_endpoint = 8 [json_name = "discoveryEndpoint"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_discovery_endpoint());
    }

    // optional string button_text = 9 [json_name = "buttonText"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_button_text());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional string button_color = 10 [json_name = "buttonColor"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_button_color());
    }

    // optional bool enable = 1 [json_name = "enable"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigSSO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigSSO::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigSSO::GetClassData() const { return &_class_data_; }

void ConfigSSO::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigSSO *>(to)->MergeFrom(
      static_cast<const ConfigSSO &>(from));
}


void ConfigSSO::MergeFrom(const ConfigSSO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigSSO)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_secret(from._internal_secret());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_scope(from._internal_scope());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_auth_endpoint(from._internal_auth_endpoint());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_token_endpoint(from._internal_token_endpoint());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_user_api_endpoint(from._internal_user_api_endpoint());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_discovery_endpoint(from._internal_discovery_endpoint());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_button_text(from._internal_button_text());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_button_color(from._internal_button_color());
    }
    if (cached_has_bits & 0x00000200u) {
      enable_ = from.enable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigSSO::CopyFrom(const ConfigSSO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigSSO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigSSO::IsInitialized() const {
  return true;
}

void ConfigSSO::InternalSwap(ConfigSSO* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &secret_, lhs_arena,
      &other->secret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &scope_, lhs_arena,
      &other->scope_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &auth_endpoint_, lhs_arena,
      &other->auth_endpoint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_endpoint_, lhs_arena,
      &other->token_endpoint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_api_endpoint_, lhs_arena,
      &other->user_api_endpoint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &discovery_endpoint_, lhs_arena,
      &other->discovery_endpoint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &button_text_, lhs_arena,
      &other->button_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &button_color_, lhs_arena,
      &other->button_color_, rhs_arena
  );
  swap(enable_, other->enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigSSO::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[6]);
}

// ===================================================================

class ConfigSql::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigSql>()._has_bits_);
  static void set_has_driver_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data_source(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_idle_conns(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_conn_max_lifetime_milliseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_conn_max_idle_time_milliseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_open_conns(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_trace(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_at_rest_encrypt_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_query_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_disable_database_search(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

ConfigSql::ConfigSql(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigSql)
}
ConfigSql::ConfigSql(const ConfigSql& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  driver_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    driver_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_driver_name()) {
    driver_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_driver_name(), 
      GetArenaForAllocation());
  }
  data_source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data_source()) {
    data_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data_source(), 
      GetArenaForAllocation());
  }
  at_rest_encrypt_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    at_rest_encrypt_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_at_rest_encrypt_key()) {
    at_rest_encrypt_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_at_rest_encrypt_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&max_idle_conns_, &from.max_idle_conns_,
    static_cast<size_t>(reinterpret_cast<char*>(&query_timeout_) -
    reinterpret_cast<char*>(&max_idle_conns_)) + sizeof(query_timeout_));
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigSql)
}

inline void ConfigSql::SharedCtor() {
driver_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  driver_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
at_rest_encrypt_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  at_rest_encrypt_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_idle_conns_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&query_timeout_) -
    reinterpret_cast<char*>(&max_idle_conns_)) + sizeof(query_timeout_));
}

ConfigSql::~ConfigSql() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigSql)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigSql::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  driver_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  at_rest_encrypt_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigSql::ArenaDtor(void* object) {
  ConfigSql* _this = reinterpret_cast< ConfigSql* >(object);
  (void)_this;
}
void ConfigSql::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigSql::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigSql::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigSql)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      driver_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      data_source_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      at_rest_encrypt_key_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&max_idle_conns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trace_) -
        reinterpret_cast<char*>(&max_idle_conns_)) + sizeof(trace_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&disable_database_search_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&query_timeout_) -
        reinterpret_cast<char*>(&disable_database_search_)) + sizeof(query_timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigSql::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string driver_name = 1 [json_name = "driverName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_driver_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSql.driver_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string data_source = 2 [json_name = "dataSource"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSql.data_source"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_idle_conns = 3 [json_name = "maxIdleConns"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_max_idle_conns(&has_bits);
          max_idle_conns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 conn_max_lifetime_milliseconds = 4 [json_name = "connMaxLifetimeMilliseconds"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_conn_max_lifetime_milliseconds(&has_bits);
          conn_max_lifetime_milliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 conn_max_idle_time_milliseconds = 5 [json_name = "connMaxIdleTimeMilliseconds"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_conn_max_idle_time_milliseconds(&has_bits);
          conn_max_idle_time_milliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_open_conns = 6 [json_name = "maxOpenConns"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_max_open_conns(&has_bits);
          max_open_conns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool trace = 7 [json_name = "trace"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_trace(&has_bits);
          trace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string at_rest_encrypt_key = 8 [json_name = "atRestEncryptKey"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_at_rest_encrypt_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSql.at_rest_encrypt_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 query_timeout = 9 [json_name = "queryTimeout"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_query_timeout(&has_bits);
          query_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disable_database_search = 10 [json_name = "disableDatabaseSearch"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_disable_database_search(&has_bits);
          disable_database_search_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigSql::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigSql)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string driver_name = 1 [json_name = "driverName"];
  if (_internal_has_driver_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_driver_name().data(), static_cast<int>(this->_internal_driver_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSql.driver_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_driver_name(), target);
  }

  // optional string data_source = 2 [json_name = "dataSource"];
  if (_internal_has_data_source()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data_source().data(), static_cast<int>(this->_internal_data_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSql.data_source");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data_source(), target);
  }

  // optional int32 max_idle_conns = 3 [json_name = "maxIdleConns"];
  if (_internal_has_max_idle_conns()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_idle_conns(), target);
  }

  // optional int32 conn_max_lifetime_milliseconds = 4 [json_name = "connMaxLifetimeMilliseconds"];
  if (_internal_has_conn_max_lifetime_milliseconds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_conn_max_lifetime_milliseconds(), target);
  }

  // optional int32 conn_max_idle_time_milliseconds = 5 [json_name = "connMaxIdleTimeMilliseconds"];
  if (_internal_has_conn_max_idle_time_milliseconds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_conn_max_idle_time_milliseconds(), target);
  }

  // optional int32 max_open_conns = 6 [json_name = "maxOpenConns"];
  if (_internal_has_max_open_conns()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_max_open_conns(), target);
  }

  // optional bool trace = 7 [json_name = "trace"];
  if (_internal_has_trace()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_trace(), target);
  }

  // optional string at_rest_encrypt_key = 8 [json_name = "atRestEncryptKey"];
  if (_internal_has_at_rest_encrypt_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_at_rest_encrypt_key().data(), static_cast<int>(this->_internal_at_rest_encrypt_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSql.at_rest_encrypt_key");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_at_rest_encrypt_key(), target);
  }

  // optional int32 query_timeout = 9 [json_name = "queryTimeout"];
  if (_internal_has_query_timeout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_query_timeout(), target);
  }

  // optional bool disable_database_search = 10 [json_name = "disableDatabaseSearch"];
  if (_internal_has_disable_database_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_disable_database_search(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigSql)
  return target;
}

size_t ConfigSql::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigSql)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string driver_name = 1 [json_name = "driverName"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_driver_name());
    }

    // optional string data_source = 2 [json_name = "dataSource"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_data_source());
    }

    // optional string at_rest_encrypt_key = 8 [json_name = "atRestEncryptKey"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_at_rest_encrypt_key());
    }

    // optional int32 max_idle_conns = 3 [json_name = "maxIdleConns"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_idle_conns());
    }

    // optional int32 conn_max_lifetime_milliseconds = 4 [json_name = "connMaxLifetimeMilliseconds"];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_conn_max_lifetime_milliseconds());
    }

    // optional int32 conn_max_idle_time_milliseconds = 5 [json_name = "connMaxIdleTimeMilliseconds"];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_conn_max_idle_time_milliseconds());
    }

    // optional int32 max_open_conns = 6 [json_name = "maxOpenConns"];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_open_conns());
    }

    // optional bool trace = 7 [json_name = "trace"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool disable_database_search = 10 [json_name = "disableDatabaseSearch"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional int32 query_timeout = 9 [json_name = "queryTimeout"];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_query_timeout());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigSql::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigSql::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigSql::GetClassData() const { return &_class_data_; }

void ConfigSql::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigSql *>(to)->MergeFrom(
      static_cast<const ConfigSql &>(from));
}


void ConfigSql::MergeFrom(const ConfigSql& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigSql)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_driver_name(from._internal_driver_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_data_source(from._internal_data_source());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_at_rest_encrypt_key(from._internal_at_rest_encrypt_key());
    }
    if (cached_has_bits & 0x00000008u) {
      max_idle_conns_ = from.max_idle_conns_;
    }
    if (cached_has_bits & 0x00000010u) {
      conn_max_lifetime_milliseconds_ = from.conn_max_lifetime_milliseconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      conn_max_idle_time_milliseconds_ = from.conn_max_idle_time_milliseconds_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_open_conns_ = from.max_open_conns_;
    }
    if (cached_has_bits & 0x00000080u) {
      trace_ = from.trace_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      disable_database_search_ = from.disable_database_search_;
    }
    if (cached_has_bits & 0x00000200u) {
      query_timeout_ = from.query_timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigSql::CopyFrom(const ConfigSql& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigSql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigSql::IsInitialized() const {
  return true;
}

void ConfigSql::InternalSwap(ConfigSql* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &driver_name_, lhs_arena,
      &other->driver_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_source_, lhs_arena,
      &other->data_source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &at_rest_encrypt_key_, lhs_arena,
      &other->at_rest_encrypt_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigSql, query_timeout_)
      + sizeof(ConfigSql::query_timeout_)
      - PROTOBUF_FIELD_OFFSET(ConfigSql, max_idle_conns_)>(
          reinterpret_cast<char*>(&max_idle_conns_),
          reinterpret_cast<char*>(&other->max_idle_conns_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigSql::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[7]);
}

// ===================================================================

class ConfigPassword::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigPassword>()._has_bits_);
  static void set_has_minimum_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_maximum_lenght(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lowercase(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uppercase(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_enable_forgot_link(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

ConfigPassword::ConfigPassword(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigPassword)
}
ConfigPassword::ConfigPassword(const ConfigPassword& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&minimum_length_, &from.minimum_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_forgot_link_) -
    reinterpret_cast<char*>(&minimum_length_)) + sizeof(enable_forgot_link_));
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigPassword)
}

inline void ConfigPassword::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&minimum_length_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enable_forgot_link_) -
    reinterpret_cast<char*>(&minimum_length_)) + sizeof(enable_forgot_link_));
}

ConfigPassword::~ConfigPassword() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigPassword)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigPassword::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConfigPassword::ArenaDtor(void* object) {
  ConfigPassword* _this = reinterpret_cast< ConfigPassword* >(object);
  (void)_this;
}
void ConfigPassword::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigPassword::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigPassword::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigPassword)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&minimum_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_forgot_link_) -
        reinterpret_cast<char*>(&minimum_length_)) + sizeof(enable_forgot_link_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigPassword::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 minimum_length = 1 [json_name = "minimumLength"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_minimum_length(&has_bits);
          minimum_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 maximum_lenght = 2 [json_name = "maximumLenght"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_maximum_lenght(&has_bits);
          maximum_lenght_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool lowercase = 3 [json_name = "lowercase"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_lowercase(&has_bits);
          lowercase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool number = 4 [json_name = "number"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_number(&has_bits);
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool uppercase = 5 [json_name = "uppercase"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_uppercase(&has_bits);
          uppercase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool symbol = 6 [json_name = "symbol"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_symbol(&has_bits);
          symbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_forgot_link = 7 [json_name = "enableForgotLink"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_enable_forgot_link(&has_bits);
          enable_forgot_link_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigPassword::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigPassword)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 minimum_length = 1 [json_name = "minimumLength"];
  if (_internal_has_minimum_length()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_minimum_length(), target);
  }

  // optional int32 maximum_lenght = 2 [json_name = "maximumLenght"];
  if (_internal_has_maximum_lenght()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_maximum_lenght(), target);
  }

  // optional bool lowercase = 3 [json_name = "lowercase"];
  if (_internal_has_lowercase()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_lowercase(), target);
  }

  // optional bool number = 4 [json_name = "number"];
  if (_internal_has_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_number(), target);
  }

  // optional bool uppercase = 5 [json_name = "uppercase"];
  if (_internal_has_uppercase()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_uppercase(), target);
  }

  // optional bool symbol = 6 [json_name = "symbol"];
  if (_internal_has_symbol()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_symbol(), target);
  }

  // optional bool enable_forgot_link = 7 [json_name = "enableForgotLink"];
  if (_internal_has_enable_forgot_link()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_enable_forgot_link(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigPassword)
  return target;
}

size_t ConfigPassword::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigPassword)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 minimum_length = 1 [json_name = "minimumLength"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_minimum_length());
    }

    // optional int32 maximum_lenght = 2 [json_name = "maximumLenght"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_maximum_lenght());
    }

    // optional bool lowercase = 3 [json_name = "lowercase"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool number = 4 [json_name = "number"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool uppercase = 5 [json_name = "uppercase"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool symbol = 6 [json_name = "symbol"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool enable_forgot_link = 7 [json_name = "enableForgotLink"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigPassword::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigPassword::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigPassword::GetClassData() const { return &_class_data_; }

void ConfigPassword::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigPassword *>(to)->MergeFrom(
      static_cast<const ConfigPassword &>(from));
}


void ConfigPassword::MergeFrom(const ConfigPassword& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigPassword)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      minimum_length_ = from.minimum_length_;
    }
    if (cached_has_bits & 0x00000002u) {
      maximum_lenght_ = from.maximum_lenght_;
    }
    if (cached_has_bits & 0x00000004u) {
      lowercase_ = from.lowercase_;
    }
    if (cached_has_bits & 0x00000008u) {
      number_ = from.number_;
    }
    if (cached_has_bits & 0x00000010u) {
      uppercase_ = from.uppercase_;
    }
    if (cached_has_bits & 0x00000020u) {
      symbol_ = from.symbol_;
    }
    if (cached_has_bits & 0x00000040u) {
      enable_forgot_link_ = from.enable_forgot_link_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigPassword::CopyFrom(const ConfigPassword& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigPassword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigPassword::IsInitialized() const {
  return true;
}

void ConfigPassword::InternalSwap(ConfigPassword* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigPassword, enable_forgot_link_)
      + sizeof(ConfigPassword::enable_forgot_link_)
      - PROTOBUF_FIELD_OFFSET(ConfigPassword, minimum_length_)>(
          reinterpret_cast<char*>(&minimum_length_),
          reinterpret_cast<char*>(&other->minimum_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigPassword::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[8]);
}

// ===================================================================

class ConfigFile::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigFile>()._has_bits_);
  static void set_has_enable_file_attachments(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_enable_mobile_upload(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_enable_mobile_download(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_max_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_max_image_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_max_image_decoder_concurrency(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_driver_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_directory(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_public_link(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_extract_content(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_archive_recursion(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_public_link_salt(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_initial_font(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_amazon_s3_access_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_amazon_s3_secret_access_key(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_amazon_s3_bucket(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_amazon_s3_path_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_amazon_s3_region(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_amazon_s3_endpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_amazon_s3_ssl(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_amazon_s3_sign_v2(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_amazon_s3_sse(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_amazon_s3_trace(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_amazon_s3_request_timeout_milliseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_amazon_s3_upload_part_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_amazon_s3_storage_class(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

ConfigFile::ConfigFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigFile)
}
ConfigFile::ConfigFile(const ConfigFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  driver_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    driver_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_driver_name()) {
    driver_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_driver_name(), 
      GetArenaForAllocation());
  }
  directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directory()) {
    directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_directory(), 
      GetArenaForAllocation());
  }
  public_link_salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_link_salt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_public_link_salt()) {
    public_link_salt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_link_salt(), 
      GetArenaForAllocation());
  }
  initial_font_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    initial_font_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_initial_font()) {
    initial_font_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_initial_font(), 
      GetArenaForAllocation());
  }
  amazon_s3_access_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amazon_s3_access_key_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_amazon_s3_access_key_id()) {
    amazon_s3_access_key_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amazon_s3_access_key_id(), 
      GetArenaForAllocation());
  }
  amazon_s3_secret_access_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amazon_s3_secret_access_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_amazon_s3_secret_access_key()) {
    amazon_s3_secret_access_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amazon_s3_secret_access_key(), 
      GetArenaForAllocation());
  }
  amazon_s3_bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amazon_s3_bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_amazon_s3_bucket()) {
    amazon_s3_bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amazon_s3_bucket(), 
      GetArenaForAllocation());
  }
  amazon_s3_path_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amazon_s3_path_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_amazon_s3_path_prefix()) {
    amazon_s3_path_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amazon_s3_path_prefix(), 
      GetArenaForAllocation());
  }
  amazon_s3_region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amazon_s3_region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_amazon_s3_region()) {
    amazon_s3_region_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amazon_s3_region(), 
      GetArenaForAllocation());
  }
  amazon_s3_endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amazon_s3_endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_amazon_s3_endpoint()) {
    amazon_s3_endpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amazon_s3_endpoint(), 
      GetArenaForAllocation());
  }
  amazon_s3_storage_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amazon_s3_storage_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_amazon_s3_storage_class()) {
    amazon_s3_storage_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amazon_s3_storage_class(), 
      GetArenaForAllocation());
  }
  ::memcpy(&max_file_size_, &from.max_file_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&amazon_s3_trace_) -
    reinterpret_cast<char*>(&max_file_size_)) + sizeof(amazon_s3_trace_));
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigFile)
}

inline void ConfigFile::SharedCtor() {
driver_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  driver_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
public_link_salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_link_salt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
initial_font_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  initial_font_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amazon_s3_access_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amazon_s3_access_key_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amazon_s3_secret_access_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amazon_s3_secret_access_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amazon_s3_bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amazon_s3_bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amazon_s3_path_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amazon_s3_path_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amazon_s3_region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amazon_s3_region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amazon_s3_endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amazon_s3_endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amazon_s3_storage_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amazon_s3_storage_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_file_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&amazon_s3_trace_) -
    reinterpret_cast<char*>(&max_file_size_)) + sizeof(amazon_s3_trace_));
}

ConfigFile::~ConfigFile() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigFile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  driver_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_link_salt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initial_font_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amazon_s3_access_key_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amazon_s3_secret_access_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amazon_s3_bucket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amazon_s3_path_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amazon_s3_region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amazon_s3_endpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amazon_s3_storage_class_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigFile::ArenaDtor(void* object) {
  ConfigFile* _this = reinterpret_cast< ConfigFile* >(object);
  (void)_this;
}
void ConfigFile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigFile::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      driver_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      directory_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      public_link_salt_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      initial_font_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      amazon_s3_access_key_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      amazon_s3_secret_access_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      amazon_s3_bucket_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      amazon_s3_path_prefix_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      amazon_s3_region_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      amazon_s3_endpoint_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      amazon_s3_storage_class_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&max_file_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_mobile_upload_) -
        reinterpret_cast<char*>(&max_file_size_)) + sizeof(enable_mobile_upload_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&enable_mobile_download_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&amazon_s3_upload_part_size_bytes_) -
        reinterpret_cast<char*>(&enable_mobile_download_)) + sizeof(amazon_s3_upload_part_size_bytes_));
  }
  if (cached_has_bits & 0x03000000u) {
    ::memset(&amazon_s3_sse_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&amazon_s3_trace_) -
        reinterpret_cast<char*>(&amazon_s3_sse_)) + sizeof(amazon_s3_trace_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enable_file_attachments = 1 [json_name = "enableFileAttachments"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enable_file_attachments(&has_bits);
          enable_file_attachments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_mobile_upload = 2 [json_name = "enableMobileUpload"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enable_mobile_upload(&has_bits);
          enable_mobile_upload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_mobile_download = 3 [json_name = "enableMobileDownload"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_enable_mobile_download(&has_bits);
          enable_mobile_download_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 max_file_size = 4 [json_name = "maxFileSize"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_max_file_size(&has_bits);
          max_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 max_image_resolution = 5 [json_name = "maxImageResolution"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_max_image_resolution(&has_bits);
          max_image_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 max_image_decoder_concurrency = 6 [json_name = "maxImageDecoderConcurrency"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_max_image_decoder_concurrency(&has_bits);
          max_image_decoder_concurrency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string driver_name = 7 [json_name = "driverName"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_driver_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigFile.driver_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string directory = 8 [json_name = "directory"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_directory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigFile.directory"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_public_link = 9 [json_name = "enablePublicLink"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_enable_public_link(&has_bits);
          enable_public_link_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool extract_content = 10 [json_name = "extractContent"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_extract_content(&has_bits);
          extract_content_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool archive_recursion = 11 [json_name = "archiveRecursion"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_archive_recursion(&has_bits);
          archive_recursion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string public_link_salt = 12 [json_name = "publicLinkSalt"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_public_link_salt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigFile.public_link_salt"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string initial_font = 13 [json_name = "initialFont"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_initial_font();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigFile.initial_font"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string amazon_s3_access_key_id = 14 [json_name = "amazonS3AccessKeyId"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_amazon_s3_access_key_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigFile.amazon_s3_access_key_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string amazon_s3_secret_access_key = 15 [json_name = "amazonS3SecretAccessKey"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_amazon_s3_secret_access_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigFile.amazon_s3_secret_access_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string amazon_s3_bucket = 16 [json_name = "amazonS3Bucket"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_amazon_s3_bucket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigFile.amazon_s3_bucket"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string amazon_s3_path_prefix = 17 [json_name = "amazonS3PathPrefix"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_amazon_s3_path_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigFile.amazon_s3_path_prefix"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string amazon_s3_region = 18 [json_name = "amazonS3Region"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_amazon_s3_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigFile.amazon_s3_region"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string amazon_s3_endpoint = 19 [json_name = "amazonS3Endpoint"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_amazon_s3_endpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigFile.amazon_s3_endpoint"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool amazon_s3_ssl = 20 [json_name = "amazonS3Ssl"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_amazon_s3_ssl(&has_bits);
          amazon_s3_ssl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool amazon_s3_sign_v2 = 21 [json_name = "amazonS3SignV2"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_amazon_s3_sign_v2(&has_bits);
          amazon_s3_sign_v2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool amazon_s3_sse = 22 [json_name = "amazonS3Sse"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_amazon_s3_sse(&has_bits);
          amazon_s3_sse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool amazon_s3_trace = 23 [json_name = "amazonS3Trace"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_amazon_s3_trace(&has_bits);
          amazon_s3_trace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 amazon_s3_request_timeout_milliseconds = 24 [json_name = "amazonS3RequestTimeoutMilliseconds"];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_amazon_s3_request_timeout_milliseconds(&has_bits);
          amazon_s3_request_timeout_milliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 amazon_s3_upload_part_size_bytes = 25 [json_name = "amazonS3UploadPartSizeBytes"];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_amazon_s3_upload_part_size_bytes(&has_bits);
          amazon_s3_upload_part_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string amazon_s3_storage_class = 26 [json_name = "amazonS3StorageClass"];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_amazon_s3_storage_class();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigFile.amazon_s3_storage_class"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool enable_file_attachments = 1 [json_name = "enableFileAttachments"];
  if (_internal_has_enable_file_attachments()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_file_attachments(), target);
  }

  // optional bool enable_mobile_upload = 2 [json_name = "enableMobileUpload"];
  if (_internal_has_enable_mobile_upload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_mobile_upload(), target);
  }

  // optional bool enable_mobile_download = 3 [json_name = "enableMobileDownload"];
  if (_internal_has_enable_mobile_download()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_mobile_download(), target);
  }

  // optional int64 max_file_size = 4 [json_name = "maxFileSize"];
  if (_internal_has_max_file_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_max_file_size(), target);
  }

  // optional int64 max_image_resolution = 5 [json_name = "maxImageResolution"];
  if (_internal_has_max_image_resolution()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_max_image_resolution(), target);
  }

  // optional int64 max_image_decoder_concurrency = 6 [json_name = "maxImageDecoderConcurrency"];
  if (_internal_has_max_image_decoder_concurrency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_max_image_decoder_concurrency(), target);
  }

  // optional string driver_name = 7 [json_name = "driverName"];
  if (_internal_has_driver_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_driver_name().data(), static_cast<int>(this->_internal_driver_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigFile.driver_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_driver_name(), target);
  }

  // optional string directory = 8 [json_name = "directory"];
  if (_internal_has_directory()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_directory().data(), static_cast<int>(this->_internal_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigFile.directory");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_directory(), target);
  }

  // optional bool enable_public_link = 9 [json_name = "enablePublicLink"];
  if (_internal_has_enable_public_link()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_enable_public_link(), target);
  }

  // optional bool extract_content = 10 [json_name = "extractContent"];
  if (_internal_has_extract_content()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_extract_content(), target);
  }

  // optional bool archive_recursion = 11 [json_name = "archiveRecursion"];
  if (_internal_has_archive_recursion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_archive_recursion(), target);
  }

  // optional string public_link_salt = 12 [json_name = "publicLinkSalt"];
  if (_internal_has_public_link_salt()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_link_salt().data(), static_cast<int>(this->_internal_public_link_salt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigFile.public_link_salt");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_public_link_salt(), target);
  }

  // optional string initial_font = 13 [json_name = "initialFont"];
  if (_internal_has_initial_font()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_initial_font().data(), static_cast<int>(this->_internal_initial_font().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigFile.initial_font");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_initial_font(), target);
  }

  // optional string amazon_s3_access_key_id = 14 [json_name = "amazonS3AccessKeyId"];
  if (_internal_has_amazon_s3_access_key_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amazon_s3_access_key_id().data(), static_cast<int>(this->_internal_amazon_s3_access_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigFile.amazon_s3_access_key_id");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_amazon_s3_access_key_id(), target);
  }

  // optional string amazon_s3_secret_access_key = 15 [json_name = "amazonS3SecretAccessKey"];
  if (_internal_has_amazon_s3_secret_access_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amazon_s3_secret_access_key().data(), static_cast<int>(this->_internal_amazon_s3_secret_access_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigFile.amazon_s3_secret_access_key");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_amazon_s3_secret_access_key(), target);
  }

  // optional string amazon_s3_bucket = 16 [json_name = "amazonS3Bucket"];
  if (_internal_has_amazon_s3_bucket()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amazon_s3_bucket().data(), static_cast<int>(this->_internal_amazon_s3_bucket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigFile.amazon_s3_bucket");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_amazon_s3_bucket(), target);
  }

  // optional string amazon_s3_path_prefix = 17 [json_name = "amazonS3PathPrefix"];
  if (_internal_has_amazon_s3_path_prefix()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amazon_s3_path_prefix().data(), static_cast<int>(this->_internal_amazon_s3_path_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigFile.amazon_s3_path_prefix");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_amazon_s3_path_prefix(), target);
  }

  // optional string amazon_s3_region = 18 [json_name = "amazonS3Region"];
  if (_internal_has_amazon_s3_region()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amazon_s3_region().data(), static_cast<int>(this->_internal_amazon_s3_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigFile.amazon_s3_region");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_amazon_s3_region(), target);
  }

  // optional string amazon_s3_endpoint = 19 [json_name = "amazonS3Endpoint"];
  if (_internal_has_amazon_s3_endpoint()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amazon_s3_endpoint().data(), static_cast<int>(this->_internal_amazon_s3_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigFile.amazon_s3_endpoint");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_amazon_s3_endpoint(), target);
  }

  // optional bool amazon_s3_ssl = 20 [json_name = "amazonS3Ssl"];
  if (_internal_has_amazon_s3_ssl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_amazon_s3_ssl(), target);
  }

  // optional bool amazon_s3_sign_v2 = 21 [json_name = "amazonS3SignV2"];
  if (_internal_has_amazon_s3_sign_v2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_amazon_s3_sign_v2(), target);
  }

  // optional bool amazon_s3_sse = 22 [json_name = "amazonS3Sse"];
  if (_internal_has_amazon_s3_sse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_amazon_s3_sse(), target);
  }

  // optional bool amazon_s3_trace = 23 [json_name = "amazonS3Trace"];
  if (_internal_has_amazon_s3_trace()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_amazon_s3_trace(), target);
  }

  // optional int64 amazon_s3_request_timeout_milliseconds = 24 [json_name = "amazonS3RequestTimeoutMilliseconds"];
  if (_internal_has_amazon_s3_request_timeout_milliseconds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(24, this->_internal_amazon_s3_request_timeout_milliseconds(), target);
  }

  // optional int64 amazon_s3_upload_part_size_bytes = 25 [json_name = "amazonS3UploadPartSizeBytes"];
  if (_internal_has_amazon_s3_upload_part_size_bytes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(25, this->_internal_amazon_s3_upload_part_size_bytes(), target);
  }

  // optional string amazon_s3_storage_class = 26 [json_name = "amazonS3StorageClass"];
  if (_internal_has_amazon_s3_storage_class()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amazon_s3_storage_class().data(), static_cast<int>(this->_internal_amazon_s3_storage_class().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigFile.amazon_s3_storage_class");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_amazon_s3_storage_class(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigFile)
  return target;
}

size_t ConfigFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string driver_name = 7 [json_name = "driverName"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_driver_name());
    }

    // optional string directory = 8 [json_name = "directory"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directory());
    }

    // optional string public_link_salt = 12 [json_name = "publicLinkSalt"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_public_link_salt());
    }

    // optional string initial_font = 13 [json_name = "initialFont"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_initial_font());
    }

    // optional string amazon_s3_access_key_id = 14 [json_name = "amazonS3AccessKeyId"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_amazon_s3_access_key_id());
    }

    // optional string amazon_s3_secret_access_key = 15 [json_name = "amazonS3SecretAccessKey"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_amazon_s3_secret_access_key());
    }

    // optional string amazon_s3_bucket = 16 [json_name = "amazonS3Bucket"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_amazon_s3_bucket());
    }

    // optional string amazon_s3_path_prefix = 17 [json_name = "amazonS3PathPrefix"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_amazon_s3_path_prefix());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string amazon_s3_region = 18 [json_name = "amazonS3Region"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_amazon_s3_region());
    }

    // optional string amazon_s3_endpoint = 19 [json_name = "amazonS3Endpoint"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_amazon_s3_endpoint());
    }

    // optional string amazon_s3_storage_class = 26 [json_name = "amazonS3StorageClass"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_amazon_s3_storage_class());
    }

    // optional int64 max_file_size = 4 [json_name = "maxFileSize"];
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_max_file_size());
    }

    // optional int64 max_image_resolution = 5 [json_name = "maxImageResolution"];
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_max_image_resolution());
    }

    // optional int64 max_image_decoder_concurrency = 6 [json_name = "maxImageDecoderConcurrency"];
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_max_image_decoder_concurrency());
    }

    // optional bool enable_file_attachments = 1 [json_name = "enableFileAttachments"];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool enable_mobile_upload = 2 [json_name = "enableMobileUpload"];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool enable_mobile_download = 3 [json_name = "enableMobileDownload"];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool enable_public_link = 9 [json_name = "enablePublicLink"];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool extract_content = 10 [json_name = "extractContent"];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool archive_recursion = 11 [json_name = "archiveRecursion"];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool amazon_s3_ssl = 20 [json_name = "amazonS3Ssl"];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool amazon_s3_sign_v2 = 21 [json_name = "amazonS3SignV2"];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional int64 amazon_s3_request_timeout_milliseconds = 24 [json_name = "amazonS3RequestTimeoutMilliseconds"];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_amazon_s3_request_timeout_milliseconds());
    }

    // optional int64 amazon_s3_upload_part_size_bytes = 25 [json_name = "amazonS3UploadPartSizeBytes"];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_amazon_s3_upload_part_size_bytes());
    }

  }
  if (cached_has_bits & 0x03000000u) {
    // optional bool amazon_s3_sse = 22 [json_name = "amazonS3Sse"];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool amazon_s3_trace = 23 [json_name = "amazonS3Trace"];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigFile::GetClassData() const { return &_class_data_; }

void ConfigFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigFile *>(to)->MergeFrom(
      static_cast<const ConfigFile &>(from));
}


void ConfigFile::MergeFrom(const ConfigFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigFile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_driver_name(from._internal_driver_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_directory(from._internal_directory());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_public_link_salt(from._internal_public_link_salt());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_initial_font(from._internal_initial_font());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_amazon_s3_access_key_id(from._internal_amazon_s3_access_key_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_amazon_s3_secret_access_key(from._internal_amazon_s3_secret_access_key());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_amazon_s3_bucket(from._internal_amazon_s3_bucket());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_amazon_s3_path_prefix(from._internal_amazon_s3_path_prefix());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_amazon_s3_region(from._internal_amazon_s3_region());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_amazon_s3_endpoint(from._internal_amazon_s3_endpoint());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_amazon_s3_storage_class(from._internal_amazon_s3_storage_class());
    }
    if (cached_has_bits & 0x00000800u) {
      max_file_size_ = from.max_file_size_;
    }
    if (cached_has_bits & 0x00001000u) {
      max_image_resolution_ = from.max_image_resolution_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_image_decoder_concurrency_ = from.max_image_decoder_concurrency_;
    }
    if (cached_has_bits & 0x00004000u) {
      enable_file_attachments_ = from.enable_file_attachments_;
    }
    if (cached_has_bits & 0x00008000u) {
      enable_mobile_upload_ = from.enable_mobile_upload_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      enable_mobile_download_ = from.enable_mobile_download_;
    }
    if (cached_has_bits & 0x00020000u) {
      enable_public_link_ = from.enable_public_link_;
    }
    if (cached_has_bits & 0x00040000u) {
      extract_content_ = from.extract_content_;
    }
    if (cached_has_bits & 0x00080000u) {
      archive_recursion_ = from.archive_recursion_;
    }
    if (cached_has_bits & 0x00100000u) {
      amazon_s3_ssl_ = from.amazon_s3_ssl_;
    }
    if (cached_has_bits & 0x00200000u) {
      amazon_s3_sign_v2_ = from.amazon_s3_sign_v2_;
    }
    if (cached_has_bits & 0x00400000u) {
      amazon_s3_request_timeout_milliseconds_ = from.amazon_s3_request_timeout_milliseconds_;
    }
    if (cached_has_bits & 0x00800000u) {
      amazon_s3_upload_part_size_bytes_ = from.amazon_s3_upload_part_size_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      amazon_s3_sse_ = from.amazon_s3_sse_;
    }
    if (cached_has_bits & 0x02000000u) {
      amazon_s3_trace_ = from.amazon_s3_trace_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigFile::CopyFrom(const ConfigFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigFile::IsInitialized() const {
  return true;
}

void ConfigFile::InternalSwap(ConfigFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &driver_name_, lhs_arena,
      &other->driver_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &directory_, lhs_arena,
      &other->directory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_link_salt_, lhs_arena,
      &other->public_link_salt_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &initial_font_, lhs_arena,
      &other->initial_font_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amazon_s3_access_key_id_, lhs_arena,
      &other->amazon_s3_access_key_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amazon_s3_secret_access_key_, lhs_arena,
      &other->amazon_s3_secret_access_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amazon_s3_bucket_, lhs_arena,
      &other->amazon_s3_bucket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amazon_s3_path_prefix_, lhs_arena,
      &other->amazon_s3_path_prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amazon_s3_region_, lhs_arena,
      &other->amazon_s3_region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amazon_s3_endpoint_, lhs_arena,
      &other->amazon_s3_endpoint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amazon_s3_storage_class_, lhs_arena,
      &other->amazon_s3_storage_class_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigFile, amazon_s3_trace_)
      + sizeof(ConfigFile::amazon_s3_trace_)
      - PROTOBUF_FIELD_OFFSET(ConfigFile, max_file_size_)>(
          reinterpret_cast<char*>(&max_file_size_),
          reinterpret_cast<char*>(&other->max_file_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigFile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[9]);
}

// ===================================================================

class ConfigEmail::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigEmail>()._has_bits_);
  static void set_has_send_email_notifications(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_require_email_verification(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_feedback_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reply_to_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_smtp_auth(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_smtp_username(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_smtp_password(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_smtp_server(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_smtp_port(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_smtp_server_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_connection_security(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_send_push_notifications(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_push_notification_server(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_push_notification_contents(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_push_notification_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_enable_email_batching(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_email_batching_buffer_size(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_email_batching_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_skip_server_certificate_verification(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_email_notification_contents_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_login_button_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_login_button_border_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_login_button_text_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

ConfigEmail::ConfigEmail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigEmail)
}
ConfigEmail::ConfigEmail(const ConfigEmail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  feedback_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    feedback_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_feedback_email()) {
    feedback_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_feedback_email(), 
      GetArenaForAllocation());
  }
  reply_to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reply_to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reply_to_address()) {
    reply_to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reply_to_address(), 
      GetArenaForAllocation());
  }
  smtp_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    smtp_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_smtp_username()) {
    smtp_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_smtp_username(), 
      GetArenaForAllocation());
  }
  smtp_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    smtp_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_smtp_password()) {
    smtp_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_smtp_password(), 
      GetArenaForAllocation());
  }
  smtp_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    smtp_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_smtp_server()) {
    smtp_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_smtp_server(), 
      GetArenaForAllocation());
  }
  smtp_port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    smtp_port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_smtp_port()) {
    smtp_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_smtp_port(), 
      GetArenaForAllocation());
  }
  connection_security_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    connection_security_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_connection_security()) {
    connection_security_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connection_security(), 
      GetArenaForAllocation());
  }
  push_notification_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    push_notification_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_push_notification_server()) {
    push_notification_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_push_notification_server(), 
      GetArenaForAllocation());
  }
  push_notification_contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    push_notification_contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_push_notification_contents()) {
    push_notification_contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_push_notification_contents(), 
      GetArenaForAllocation());
  }
  email_notification_contents_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    email_notification_contents_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_email_notification_contents_type()) {
    email_notification_contents_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email_notification_contents_type(), 
      GetArenaForAllocation());
  }
  login_button_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    login_button_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_login_button_color()) {
    login_button_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_login_button_color(), 
      GetArenaForAllocation());
  }
  login_button_border_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    login_button_border_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_login_button_border_color()) {
    login_button_border_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_login_button_border_color(), 
      GetArenaForAllocation());
  }
  login_button_text_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    login_button_text_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_login_button_text_color()) {
    login_button_text_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_login_button_text_color(), 
      GetArenaForAllocation());
  }
  ::memcpy(&send_email_notifications_, &from.send_email_notifications_,
    static_cast<size_t>(reinterpret_cast<char*>(&email_batching_interval_) -
    reinterpret_cast<char*>(&send_email_notifications_)) + sizeof(email_batching_interval_));
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigEmail)
}

inline void ConfigEmail::SharedCtor() {
feedback_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  feedback_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reply_to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reply_to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
smtp_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  smtp_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
smtp_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  smtp_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
smtp_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  smtp_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
smtp_port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  smtp_port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
connection_security_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  connection_security_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
push_notification_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  push_notification_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
push_notification_contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  push_notification_contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
email_notification_contents_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  email_notification_contents_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
login_button_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  login_button_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
login_button_border_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  login_button_border_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
login_button_text_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  login_button_text_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&send_email_notifications_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&email_batching_interval_) -
    reinterpret_cast<char*>(&send_email_notifications_)) + sizeof(email_batching_interval_));
}

ConfigEmail::~ConfigEmail() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigEmail)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigEmail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  feedback_email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reply_to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  smtp_username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  smtp_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  smtp_server_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  smtp_port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connection_security_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  push_notification_server_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  push_notification_contents_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_notification_contents_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  login_button_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  login_button_border_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  login_button_text_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigEmail::ArenaDtor(void* object) {
  ConfigEmail* _this = reinterpret_cast< ConfigEmail* >(object);
  (void)_this;
}
void ConfigEmail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigEmail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigEmail::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigEmail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      feedback_email_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      reply_to_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      smtp_username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      smtp_password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      smtp_server_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      smtp_port_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      connection_security_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      push_notification_server_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      push_notification_contents_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      email_notification_contents_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      login_button_color_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      login_button_border_color_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      login_button_text_color_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&send_email_notifications_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_smtp_auth_) -
        reinterpret_cast<char*>(&send_email_notifications_)) + sizeof(enable_smtp_auth_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&send_push_notifications_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&email_batching_interval_) -
        reinterpret_cast<char*>(&send_push_notifications_)) + sizeof(email_batching_interval_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigEmail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool send_email_notifications = 1 [json_name = "sendEmailNotifications"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_send_email_notifications(&has_bits);
          send_email_notifications_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool require_email_verification = 2 [json_name = "requireEmailVerification"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_require_email_verification(&has_bits);
          require_email_verification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string feedback_email = 3 [json_name = "feedbackEmail"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_feedback_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigEmail.feedback_email"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string reply_to_address = 4 [json_name = "replyToAddress"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_reply_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigEmail.reply_to_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_smtp_auth = 5 [json_name = "enableSmtpAuth"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_enable_smtp_auth(&has_bits);
          enable_smtp_auth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string smtp_username = 6 [json_name = "smtpUsername"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_smtp_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigEmail.smtp_username"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string smtp_password = 7 [json_name = "smtpPassword"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_smtp_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigEmail.smtp_password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string smtp_server = 8 [json_name = "smtpServer"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_smtp_server();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigEmail.smtp_server"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string smtp_port = 9 [json_name = "smtpPort"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_smtp_port();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigEmail.smtp_port"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 smtp_server_timeout = 10 [json_name = "smtpServerTimeout"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_smtp_server_timeout(&has_bits);
          smtp_server_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string connection_security = 11 [json_name = "connectionSecurity"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_connection_security();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigEmail.connection_security"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool send_push_notifications = 12 [json_name = "sendPushNotifications"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_send_push_notifications(&has_bits);
          send_push_notifications_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string push_notification_server = 13 [json_name = "pushNotificationServer"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_push_notification_server();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigEmail.push_notification_server"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string push_notification_contents = 14 [json_name = "pushNotificationContents"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_push_notification_contents();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigEmail.push_notification_contents"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 push_notification_buffer = 15 [json_name = "pushNotificationBuffer"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_push_notification_buffer(&has_bits);
          push_notification_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_email_batching = 16 [json_name = "enableEmailBatching"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_enable_email_batching(&has_bits);
          enable_email_batching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 email_batching_buffer_size = 17 [json_name = "emailBatchingBufferSize"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_email_batching_buffer_size(&has_bits);
          email_batching_buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 email_batching_interval = 18 [json_name = "emailBatchingInterval"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_email_batching_interval(&has_bits);
          email_batching_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool skip_server_certificate_verification = 19 [json_name = "skipServerCertificateVerification"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_skip_server_certificate_verification(&has_bits);
          skip_server_certificate_verification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string email_notification_contents_type = 20 [json_name = "emailNotificationContentsType"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_email_notification_contents_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigEmail.email_notification_contents_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string login_button_color = 21 [json_name = "loginButtonColor"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_login_button_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigEmail.login_button_color"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string login_button_border_color = 22 [json_name = "loginButtonBorderColor"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_login_button_border_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigEmail.login_button_border_color"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string login_button_text_color = 23 [json_name = "loginButtonTextColor"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_login_button_text_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigEmail.login_button_text_color"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigEmail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigEmail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool send_email_notifications = 1 [json_name = "sendEmailNotifications"];
  if (_internal_has_send_email_notifications()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_send_email_notifications(), target);
  }

  // optional bool require_email_verification = 2 [json_name = "requireEmailVerification"];
  if (_internal_has_require_email_verification()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_require_email_verification(), target);
  }

  // optional string feedback_email = 3 [json_name = "feedbackEmail"];
  if (_internal_has_feedback_email()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_feedback_email().data(), static_cast<int>(this->_internal_feedback_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigEmail.feedback_email");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_feedback_email(), target);
  }

  // optional string reply_to_address = 4 [json_name = "replyToAddress"];
  if (_internal_has_reply_to_address()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reply_to_address().data(), static_cast<int>(this->_internal_reply_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigEmail.reply_to_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reply_to_address(), target);
  }

  // optional bool enable_smtp_auth = 5 [json_name = "enableSmtpAuth"];
  if (_internal_has_enable_smtp_auth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_smtp_auth(), target);
  }

  // optional string smtp_username = 6 [json_name = "smtpUsername"];
  if (_internal_has_smtp_username()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_smtp_username().data(), static_cast<int>(this->_internal_smtp_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigEmail.smtp_username");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_smtp_username(), target);
  }

  // optional string smtp_password = 7 [json_name = "smtpPassword"];
  if (_internal_has_smtp_password()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_smtp_password().data(), static_cast<int>(this->_internal_smtp_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigEmail.smtp_password");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_smtp_password(), target);
  }

  // optional string smtp_server = 8 [json_name = "smtpServer"];
  if (_internal_has_smtp_server()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_smtp_server().data(), static_cast<int>(this->_internal_smtp_server().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigEmail.smtp_server");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_smtp_server(), target);
  }

  // optional string smtp_port = 9 [json_name = "smtpPort"];
  if (_internal_has_smtp_port()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_smtp_port().data(), static_cast<int>(this->_internal_smtp_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigEmail.smtp_port");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_smtp_port(), target);
  }

  // optional int32 smtp_server_timeout = 10 [json_name = "smtpServerTimeout"];
  if (_internal_has_smtp_server_timeout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_smtp_server_timeout(), target);
  }

  // optional string connection_security = 11 [json_name = "connectionSecurity"];
  if (_internal_has_connection_security()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connection_security().data(), static_cast<int>(this->_internal_connection_security().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigEmail.connection_security");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_connection_security(), target);
  }

  // optional bool send_push_notifications = 12 [json_name = "sendPushNotifications"];
  if (_internal_has_send_push_notifications()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_send_push_notifications(), target);
  }

  // optional string push_notification_server = 13 [json_name = "pushNotificationServer"];
  if (_internal_has_push_notification_server()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_push_notification_server().data(), static_cast<int>(this->_internal_push_notification_server().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigEmail.push_notification_server");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_push_notification_server(), target);
  }

  // optional string push_notification_contents = 14 [json_name = "pushNotificationContents"];
  if (_internal_has_push_notification_contents()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_push_notification_contents().data(), static_cast<int>(this->_internal_push_notification_contents().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigEmail.push_notification_contents");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_push_notification_contents(), target);
  }

  // optional int32 push_notification_buffer = 15 [json_name = "pushNotificationBuffer"];
  if (_internal_has_push_notification_buffer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_push_notification_buffer(), target);
  }

  // optional bool enable_email_batching = 16 [json_name = "enableEmailBatching"];
  if (_internal_has_enable_email_batching()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_enable_email_batching(), target);
  }

  // optional int32 email_batching_buffer_size = 17 [json_name = "emailBatchingBufferSize"];
  if (_internal_has_email_batching_buffer_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_email_batching_buffer_size(), target);
  }

  // optional int32 email_batching_interval = 18 [json_name = "emailBatchingInterval"];
  if (_internal_has_email_batching_interval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_email_batching_interval(), target);
  }

  // optional bool skip_server_certificate_verification = 19 [json_name = "skipServerCertificateVerification"];
  if (_internal_has_skip_server_certificate_verification()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_skip_server_certificate_verification(), target);
  }

  // optional string email_notification_contents_type = 20 [json_name = "emailNotificationContentsType"];
  if (_internal_has_email_notification_contents_type()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email_notification_contents_type().data(), static_cast<int>(this->_internal_email_notification_contents_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigEmail.email_notification_contents_type");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_email_notification_contents_type(), target);
  }

  // optional string login_button_color = 21 [json_name = "loginButtonColor"];
  if (_internal_has_login_button_color()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login_button_color().data(), static_cast<int>(this->_internal_login_button_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigEmail.login_button_color");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_login_button_color(), target);
  }

  // optional string login_button_border_color = 22 [json_name = "loginButtonBorderColor"];
  if (_internal_has_login_button_border_color()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login_button_border_color().data(), static_cast<int>(this->_internal_login_button_border_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigEmail.login_button_border_color");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_login_button_border_color(), target);
  }

  // optional string login_button_text_color = 23 [json_name = "loginButtonTextColor"];
  if (_internal_has_login_button_text_color()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login_button_text_color().data(), static_cast<int>(this->_internal_login_button_text_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigEmail.login_button_text_color");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_login_button_text_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigEmail)
  return target;
}

size_t ConfigEmail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigEmail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string feedback_email = 3 [json_name = "feedbackEmail"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_feedback_email());
    }

    // optional string reply_to_address = 4 [json_name = "replyToAddress"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reply_to_address());
    }

    // optional string smtp_username = 6 [json_name = "smtpUsername"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_smtp_username());
    }

    // optional string smtp_password = 7 [json_name = "smtpPassword"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_smtp_password());
    }

    // optional string smtp_server = 8 [json_name = "smtpServer"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_smtp_server());
    }

    // optional string smtp_port = 9 [json_name = "smtpPort"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_smtp_port());
    }

    // optional string connection_security = 11 [json_name = "connectionSecurity"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_connection_security());
    }

    // optional string push_notification_server = 13 [json_name = "pushNotificationServer"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_push_notification_server());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string push_notification_contents = 14 [json_name = "pushNotificationContents"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_push_notification_contents());
    }

    // optional string email_notification_contents_type = 20 [json_name = "emailNotificationContentsType"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email_notification_contents_type());
    }

    // optional string login_button_color = 21 [json_name = "loginButtonColor"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_login_button_color());
    }

    // optional string login_button_border_color = 22 [json_name = "loginButtonBorderColor"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_login_button_border_color());
    }

    // optional string login_button_text_color = 23 [json_name = "loginButtonTextColor"];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_login_button_text_color());
    }

    // optional bool send_email_notifications = 1 [json_name = "sendEmailNotifications"];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool require_email_verification = 2 [json_name = "requireEmailVerification"];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool enable_smtp_auth = 5 [json_name = "enableSmtpAuth"];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional bool send_push_notifications = 12 [json_name = "sendPushNotifications"];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional int32 smtp_server_timeout = 10 [json_name = "smtpServerTimeout"];
    if (cached_has_bits & 0x00020000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_smtp_server_timeout());
    }

    // optional int32 push_notification_buffer = 15 [json_name = "pushNotificationBuffer"];
    if (cached_has_bits & 0x00040000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_push_notification_buffer());
    }

    // optional int32 email_batching_buffer_size = 17 [json_name = "emailBatchingBufferSize"];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_email_batching_buffer_size());
    }

    // optional bool enable_email_batching = 16 [json_name = "enableEmailBatching"];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool skip_server_certificate_verification = 19 [json_name = "skipServerCertificateVerification"];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional int32 email_batching_interval = 18 [json_name = "emailBatchingInterval"];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_email_batching_interval());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigEmail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigEmail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigEmail::GetClassData() const { return &_class_data_; }

void ConfigEmail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigEmail *>(to)->MergeFrom(
      static_cast<const ConfigEmail &>(from));
}


void ConfigEmail::MergeFrom(const ConfigEmail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigEmail)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_feedback_email(from._internal_feedback_email());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_reply_to_address(from._internal_reply_to_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_smtp_username(from._internal_smtp_username());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_smtp_password(from._internal_smtp_password());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_smtp_server(from._internal_smtp_server());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_smtp_port(from._internal_smtp_port());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_connection_security(from._internal_connection_security());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_push_notification_server(from._internal_push_notification_server());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_push_notification_contents(from._internal_push_notification_contents());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_email_notification_contents_type(from._internal_email_notification_contents_type());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_login_button_color(from._internal_login_button_color());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_login_button_border_color(from._internal_login_button_border_color());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_login_button_text_color(from._internal_login_button_text_color());
    }
    if (cached_has_bits & 0x00002000u) {
      send_email_notifications_ = from.send_email_notifications_;
    }
    if (cached_has_bits & 0x00004000u) {
      require_email_verification_ = from.require_email_verification_;
    }
    if (cached_has_bits & 0x00008000u) {
      enable_smtp_auth_ = from.enable_smtp_auth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      send_push_notifications_ = from.send_push_notifications_;
    }
    if (cached_has_bits & 0x00020000u) {
      smtp_server_timeout_ = from.smtp_server_timeout_;
    }
    if (cached_has_bits & 0x00040000u) {
      push_notification_buffer_ = from.push_notification_buffer_;
    }
    if (cached_has_bits & 0x00080000u) {
      email_batching_buffer_size_ = from.email_batching_buffer_size_;
    }
    if (cached_has_bits & 0x00100000u) {
      enable_email_batching_ = from.enable_email_batching_;
    }
    if (cached_has_bits & 0x00200000u) {
      skip_server_certificate_verification_ = from.skip_server_certificate_verification_;
    }
    if (cached_has_bits & 0x00400000u) {
      email_batching_interval_ = from.email_batching_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigEmail::CopyFrom(const ConfigEmail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigEmail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigEmail::IsInitialized() const {
  return true;
}

void ConfigEmail::InternalSwap(ConfigEmail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &feedback_email_, lhs_arena,
      &other->feedback_email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reply_to_address_, lhs_arena,
      &other->reply_to_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &smtp_username_, lhs_arena,
      &other->smtp_username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &smtp_password_, lhs_arena,
      &other->smtp_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &smtp_server_, lhs_arena,
      &other->smtp_server_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &smtp_port_, lhs_arena,
      &other->smtp_port_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &connection_security_, lhs_arena,
      &other->connection_security_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &push_notification_server_, lhs_arena,
      &other->push_notification_server_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &push_notification_contents_, lhs_arena,
      &other->push_notification_contents_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_notification_contents_type_, lhs_arena,
      &other->email_notification_contents_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &login_button_color_, lhs_arena,
      &other->login_button_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &login_button_border_color_, lhs_arena,
      &other->login_button_border_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &login_button_text_color_, lhs_arena,
      &other->login_button_text_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigEmail, email_batching_interval_)
      + sizeof(ConfigEmail::email_batching_interval_)
      - PROTOBUF_FIELD_OFFSET(ConfigEmail, send_email_notifications_)>(
          reinterpret_cast<char*>(&send_email_notifications_),
          reinterpret_cast<char*>(&other->send_email_notifications_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigEmail::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[10]);
}

// ===================================================================

class ConfigRateLimit::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigRateLimit>()._has_bits_);
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_per_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_burst(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_memory_store_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vary_by_remote_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vary_by_user(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ConfigRateLimit::ConfigRateLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigRateLimit)
}
ConfigRateLimit::ConfigRateLimit(const ConfigRateLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vary_by_header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vary_by_header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vary_by_header().empty()) {
    vary_by_header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vary_by_header(), 
      GetArenaForAllocation());
  }
  ::memcpy(&per_sec_, &from.per_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&vary_by_user_) -
    reinterpret_cast<char*>(&per_sec_)) + sizeof(vary_by_user_));
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigRateLimit)
}

inline void ConfigRateLimit::SharedCtor() {
vary_by_header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vary_by_header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&per_sec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vary_by_user_) -
    reinterpret_cast<char*>(&per_sec_)) + sizeof(vary_by_user_));
}

ConfigRateLimit::~ConfigRateLimit() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigRateLimit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigRateLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vary_by_header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigRateLimit::ArenaDtor(void* object) {
  ConfigRateLimit* _this = reinterpret_cast< ConfigRateLimit* >(object);
  (void)_this;
}
void ConfigRateLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigRateLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigRateLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigRateLimit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vary_by_header_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&per_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vary_by_user_) -
        reinterpret_cast<char*>(&per_sec_)) + sizeof(vary_by_user_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigRateLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enable = 1 [json_name = "enable"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 per_sec = 2 [json_name = "perSec"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_per_sec(&has_bits);
          per_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_burst = 3 [json_name = "maxBurst"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_max_burst(&has_bits);
          max_burst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 memory_store_size = 4 [json_name = "memoryStoreSize"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_memory_store_size(&has_bits);
          memory_store_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool vary_by_remote_addr = 5 [json_name = "varyByRemoteAddr"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_vary_by_remote_addr(&has_bits);
          vary_by_remote_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool vary_by_user = 6 [json_name = "varyByUser"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_vary_by_user(&has_bits);
          vary_by_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string vary_by_header = 7 [json_name = "varyByHeader"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_vary_by_header();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigRateLimit.vary_by_header"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigRateLimit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigRateLimit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool enable = 1 [json_name = "enable"];
  if (_internal_has_enable()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // optional int32 per_sec = 2 [json_name = "perSec"];
  if (_internal_has_per_sec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_per_sec(), target);
  }

  // optional int32 max_burst = 3 [json_name = "maxBurst"];
  if (_internal_has_max_burst()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_burst(), target);
  }

  // optional int32 memory_store_size = 4 [json_name = "memoryStoreSize"];
  if (_internal_has_memory_store_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_memory_store_size(), target);
  }

  // optional bool vary_by_remote_addr = 5 [json_name = "varyByRemoteAddr"];
  if (_internal_has_vary_by_remote_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_vary_by_remote_addr(), target);
  }

  // optional bool vary_by_user = 6 [json_name = "varyByUser"];
  if (_internal_has_vary_by_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_vary_by_user(), target);
  }

  // string vary_by_header = 7 [json_name = "varyByHeader"];
  if (!this->_internal_vary_by_header().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vary_by_header().data(), static_cast<int>(this->_internal_vary_by_header().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigRateLimit.vary_by_header");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_vary_by_header(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigRateLimit)
  return target;
}

size_t ConfigRateLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigRateLimit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vary_by_header = 7 [json_name = "varyByHeader"];
  if (!this->_internal_vary_by_header().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vary_by_header());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 per_sec = 2 [json_name = "perSec"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_per_sec());
    }

    // optional int32 max_burst = 3 [json_name = "maxBurst"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_burst());
    }

    // optional int32 memory_store_size = 4 [json_name = "memoryStoreSize"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_memory_store_size());
    }

    // optional bool enable = 1 [json_name = "enable"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool vary_by_remote_addr = 5 [json_name = "varyByRemoteAddr"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool vary_by_user = 6 [json_name = "varyByUser"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigRateLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigRateLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigRateLimit::GetClassData() const { return &_class_data_; }

void ConfigRateLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigRateLimit *>(to)->MergeFrom(
      static_cast<const ConfigRateLimit &>(from));
}


void ConfigRateLimit::MergeFrom(const ConfigRateLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigRateLimit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vary_by_header().empty()) {
    _internal_set_vary_by_header(from._internal_vary_by_header());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      per_sec_ = from.per_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_burst_ = from.max_burst_;
    }
    if (cached_has_bits & 0x00000004u) {
      memory_store_size_ = from.memory_store_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_ = from.enable_;
    }
    if (cached_has_bits & 0x00000010u) {
      vary_by_remote_addr_ = from.vary_by_remote_addr_;
    }
    if (cached_has_bits & 0x00000020u) {
      vary_by_user_ = from.vary_by_user_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigRateLimit::CopyFrom(const ConfigRateLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigRateLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigRateLimit::IsInitialized() const {
  return true;
}

void ConfigRateLimit::InternalSwap(ConfigRateLimit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vary_by_header_, lhs_arena,
      &other->vary_by_header_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigRateLimit, vary_by_user_)
      + sizeof(ConfigRateLimit::vary_by_user_)
      - PROTOBUF_FIELD_OFFSET(ConfigRateLimit, per_sec_)>(
          reinterpret_cast<char*>(&per_sec_),
          reinterpret_cast<char*>(&other->per_sec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigRateLimit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[11]);
}

// ===================================================================

class ConfigPrivacy::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigPrivacy>()._has_bits_);
  static void set_has_show_email_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_show_full_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ConfigPrivacy::ConfigPrivacy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigPrivacy)
}
ConfigPrivacy::ConfigPrivacy(const ConfigPrivacy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&show_email_address_, &from.show_email_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_full_name_) -
    reinterpret_cast<char*>(&show_email_address_)) + sizeof(show_full_name_));
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigPrivacy)
}

inline void ConfigPrivacy::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&show_email_address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&show_full_name_) -
    reinterpret_cast<char*>(&show_email_address_)) + sizeof(show_full_name_));
}

ConfigPrivacy::~ConfigPrivacy() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigPrivacy)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigPrivacy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConfigPrivacy::ArenaDtor(void* object) {
  ConfigPrivacy* _this = reinterpret_cast< ConfigPrivacy* >(object);
  (void)_this;
}
void ConfigPrivacy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigPrivacy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigPrivacy::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigPrivacy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&show_email_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_full_name_) -
      reinterpret_cast<char*>(&show_email_address_)) + sizeof(show_full_name_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigPrivacy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool show_email_address = 1 [json_name = "showEmailAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_show_email_address(&has_bits);
          show_email_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_full_name = 2 [json_name = "showFullName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_show_full_name(&has_bits);
          show_full_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigPrivacy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigPrivacy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool show_email_address = 1 [json_name = "showEmailAddress"];
  if (_internal_has_show_email_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_show_email_address(), target);
  }

  // optional bool show_full_name = 2 [json_name = "showFullName"];
  if (_internal_has_show_full_name()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_show_full_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigPrivacy)
  return target;
}

size_t ConfigPrivacy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigPrivacy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool show_email_address = 1 [json_name = "showEmailAddress"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool show_full_name = 2 [json_name = "showFullName"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigPrivacy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigPrivacy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigPrivacy::GetClassData() const { return &_class_data_; }

void ConfigPrivacy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigPrivacy *>(to)->MergeFrom(
      static_cast<const ConfigPrivacy &>(from));
}


void ConfigPrivacy::MergeFrom(const ConfigPrivacy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigPrivacy)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      show_email_address_ = from.show_email_address_;
    }
    if (cached_has_bits & 0x00000002u) {
      show_full_name_ = from.show_full_name_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigPrivacy::CopyFrom(const ConfigPrivacy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigPrivacy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigPrivacy::IsInitialized() const {
  return true;
}

void ConfigPrivacy::InternalSwap(ConfigPrivacy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigPrivacy, show_full_name_)
      + sizeof(ConfigPrivacy::show_full_name_)
      - PROTOBUF_FIELD_OFFSET(ConfigPrivacy, show_email_address_)>(
          reinterpret_cast<char*>(&show_email_address_),
          reinterpret_cast<char*>(&other->show_email_address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigPrivacy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[12]);
}

// ===================================================================

class ConfigSupport::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigSupport>()._has_bits_);
  static void set_has_terms_of_service_link(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_privacy_policy_link(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_about_link(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_help_link(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_report_a_problem_link(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_forgot_password_link(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_support_email(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

ConfigSupport::ConfigSupport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigSupport)
}
ConfigSupport::ConfigSupport(const ConfigSupport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  terms_of_service_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    terms_of_service_link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_terms_of_service_link()) {
    terms_of_service_link_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_terms_of_service_link(), 
      GetArenaForAllocation());
  }
  privacy_policy_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    privacy_policy_link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_privacy_policy_link()) {
    privacy_policy_link_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_privacy_policy_link(), 
      GetArenaForAllocation());
  }
  about_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    about_link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_about_link()) {
    about_link_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_about_link(), 
      GetArenaForAllocation());
  }
  help_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    help_link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_help_link()) {
    help_link_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_help_link(), 
      GetArenaForAllocation());
  }
  report_a_problem_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    report_a_problem_link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_report_a_problem_link()) {
    report_a_problem_link_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_report_a_problem_link(), 
      GetArenaForAllocation());
  }
  forgot_password_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    forgot_password_link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_forgot_password_link()) {
    forgot_password_link_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_forgot_password_link(), 
      GetArenaForAllocation());
  }
  support_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    support_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_support_email()) {
    support_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_support_email(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigSupport)
}

inline void ConfigSupport::SharedCtor() {
terms_of_service_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  terms_of_service_link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
privacy_policy_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  privacy_policy_link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
about_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  about_link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
help_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  help_link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
report_a_problem_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  report_a_problem_link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
forgot_password_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  forgot_password_link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
support_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  support_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConfigSupport::~ConfigSupport() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigSupport)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigSupport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  terms_of_service_link_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  privacy_policy_link_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  about_link_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  help_link_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  report_a_problem_link_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  forgot_password_link_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  support_email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigSupport::ArenaDtor(void* object) {
  ConfigSupport* _this = reinterpret_cast< ConfigSupport* >(object);
  (void)_this;
}
void ConfigSupport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigSupport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigSupport::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigSupport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      terms_of_service_link_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      privacy_policy_link_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      about_link_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      help_link_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      report_a_problem_link_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      forgot_password_link_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      support_email_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigSupport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string terms_of_service_link = 1 [json_name = "termsOfServiceLink"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_terms_of_service_link();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSupport.terms_of_service_link"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string privacy_policy_link = 2 [json_name = "privacyPolicyLink"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_privacy_policy_link();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSupport.privacy_policy_link"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string about_link = 3 [json_name = "aboutLink"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_about_link();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSupport.about_link"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string help_link = 4 [json_name = "helpLink"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_help_link();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSupport.help_link"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string report_a_problem_link = 5 [json_name = "reportAProblemLink"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_report_a_problem_link();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSupport.report_a_problem_link"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string forgot_password_link = 6 [json_name = "forgotPasswordLink"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_forgot_password_link();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSupport.forgot_password_link"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string support_email = 7 [json_name = "supportEmail"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_support_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSupport.support_email"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigSupport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigSupport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string terms_of_service_link = 1 [json_name = "termsOfServiceLink"];
  if (_internal_has_terms_of_service_link()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_terms_of_service_link().data(), static_cast<int>(this->_internal_terms_of_service_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSupport.terms_of_service_link");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_terms_of_service_link(), target);
  }

  // optional string privacy_policy_link = 2 [json_name = "privacyPolicyLink"];
  if (_internal_has_privacy_policy_link()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_privacy_policy_link().data(), static_cast<int>(this->_internal_privacy_policy_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSupport.privacy_policy_link");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_privacy_policy_link(), target);
  }

  // optional string about_link = 3 [json_name = "aboutLink"];
  if (_internal_has_about_link()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_about_link().data(), static_cast<int>(this->_internal_about_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSupport.about_link");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_about_link(), target);
  }

  // optional string help_link = 4 [json_name = "helpLink"];
  if (_internal_has_help_link()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_help_link().data(), static_cast<int>(this->_internal_help_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSupport.help_link");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_help_link(), target);
  }

  // optional string report_a_problem_link = 5 [json_name = "reportAProblemLink"];
  if (_internal_has_report_a_problem_link()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_report_a_problem_link().data(), static_cast<int>(this->_internal_report_a_problem_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSupport.report_a_problem_link");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_report_a_problem_link(), target);
  }

  // optional string forgot_password_link = 6 [json_name = "forgotPasswordLink"];
  if (_internal_has_forgot_password_link()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_forgot_password_link().data(), static_cast<int>(this->_internal_forgot_password_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSupport.forgot_password_link");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_forgot_password_link(), target);
  }

  // optional string support_email = 7 [json_name = "supportEmail"];
  if (_internal_has_support_email()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_support_email().data(), static_cast<int>(this->_internal_support_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSupport.support_email");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_support_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigSupport)
  return target;
}

size_t ConfigSupport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigSupport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string terms_of_service_link = 1 [json_name = "termsOfServiceLink"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_terms_of_service_link());
    }

    // optional string privacy_policy_link = 2 [json_name = "privacyPolicyLink"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_privacy_policy_link());
    }

    // optional string about_link = 3 [json_name = "aboutLink"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_about_link());
    }

    // optional string help_link = 4 [json_name = "helpLink"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_help_link());
    }

    // optional string report_a_problem_link = 5 [json_name = "reportAProblemLink"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_report_a_problem_link());
    }

    // optional string forgot_password_link = 6 [json_name = "forgotPasswordLink"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_forgot_password_link());
    }

    // optional string support_email = 7 [json_name = "supportEmail"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_support_email());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigSupport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigSupport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigSupport::GetClassData() const { return &_class_data_; }

void ConfigSupport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigSupport *>(to)->MergeFrom(
      static_cast<const ConfigSupport &>(from));
}


void ConfigSupport::MergeFrom(const ConfigSupport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigSupport)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_terms_of_service_link(from._internal_terms_of_service_link());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_privacy_policy_link(from._internal_privacy_policy_link());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_about_link(from._internal_about_link());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_help_link(from._internal_help_link());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_report_a_problem_link(from._internal_report_a_problem_link());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_forgot_password_link(from._internal_forgot_password_link());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_support_email(from._internal_support_email());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigSupport::CopyFrom(const ConfigSupport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigSupport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigSupport::IsInitialized() const {
  return true;
}

void ConfigSupport::InternalSwap(ConfigSupport* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &terms_of_service_link_, lhs_arena,
      &other->terms_of_service_link_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &privacy_policy_link_, lhs_arena,
      &other->privacy_policy_link_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &about_link_, lhs_arena,
      &other->about_link_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &help_link_, lhs_arena,
      &other->help_link_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &report_a_problem_link_, lhs_arena,
      &other->report_a_problem_link_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &forgot_password_link_, lhs_arena,
      &other->forgot_password_link_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &support_email_, lhs_arena,
      &other->support_email_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigSupport::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[13]);
}

// ===================================================================

class ConfigLocalization::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigLocalization>()._has_bits_);
  static void set_has_default_server_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_default_client_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_available_locales(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ConfigLocalization::ConfigLocalization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigLocalization)
}
ConfigLocalization::ConfigLocalization(const ConfigLocalization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  default_server_locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    default_server_locale_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_default_server_locale()) {
    default_server_locale_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_default_server_locale(), 
      GetArenaForAllocation());
  }
  default_client_locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    default_client_locale_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_default_client_locale()) {
    default_client_locale_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_default_client_locale(), 
      GetArenaForAllocation());
  }
  available_locales_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    available_locales_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_available_locales()) {
    available_locales_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_available_locales(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigLocalization)
}

inline void ConfigLocalization::SharedCtor() {
default_server_locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  default_server_locale_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
default_client_locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  default_client_locale_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
available_locales_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  available_locales_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConfigLocalization::~ConfigLocalization() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigLocalization)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigLocalization::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  default_server_locale_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_client_locale_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  available_locales_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigLocalization::ArenaDtor(void* object) {
  ConfigLocalization* _this = reinterpret_cast< ConfigLocalization* >(object);
  (void)_this;
}
void ConfigLocalization::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigLocalization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigLocalization::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigLocalization)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      default_server_locale_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      default_client_locale_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      available_locales_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigLocalization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string default_server_locale = 1 [json_name = "defaultServerLocale"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_default_server_locale();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLocalization.default_server_locale"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string default_client_locale = 2 [json_name = "defaultClientLocale"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_default_client_locale();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLocalization.default_client_locale"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string available_locales = 3 [json_name = "availableLocales"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_available_locales();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLocalization.available_locales"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigLocalization::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigLocalization)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string default_server_locale = 1 [json_name = "defaultServerLocale"];
  if (_internal_has_default_server_locale()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_default_server_locale().data(), static_cast<int>(this->_internal_default_server_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLocalization.default_server_locale");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_default_server_locale(), target);
  }

  // optional string default_client_locale = 2 [json_name = "defaultClientLocale"];
  if (_internal_has_default_client_locale()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_default_client_locale().data(), static_cast<int>(this->_internal_default_client_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLocalization.default_client_locale");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_default_client_locale(), target);
  }

  // optional string available_locales = 3 [json_name = "availableLocales"];
  if (_internal_has_available_locales()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_available_locales().data(), static_cast<int>(this->_internal_available_locales().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLocalization.available_locales");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_available_locales(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigLocalization)
  return target;
}

size_t ConfigLocalization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigLocalization)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string default_server_locale = 1 [json_name = "defaultServerLocale"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_default_server_locale());
    }

    // optional string default_client_locale = 2 [json_name = "defaultClientLocale"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_default_client_locale());
    }

    // optional string available_locales = 3 [json_name = "availableLocales"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_available_locales());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigLocalization::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigLocalization::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigLocalization::GetClassData() const { return &_class_data_; }

void ConfigLocalization::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigLocalization *>(to)->MergeFrom(
      static_cast<const ConfigLocalization &>(from));
}


void ConfigLocalization::MergeFrom(const ConfigLocalization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigLocalization)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_default_server_locale(from._internal_default_server_locale());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_default_client_locale(from._internal_default_client_locale());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_available_locales(from._internal_available_locales());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigLocalization::CopyFrom(const ConfigLocalization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigLocalization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigLocalization::IsInitialized() const {
  return true;
}

void ConfigLocalization::InternalSwap(ConfigLocalization* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &default_server_locale_, lhs_arena,
      &other->default_server_locale_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &default_client_locale_, lhs_arena,
      &other->default_client_locale_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &available_locales_, lhs_arena,
      &other->available_locales_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigLocalization::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[14]);
}

// ===================================================================

class ConfigLdap::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigLdap>()._has_bits_);
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_enable_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_ldap_server(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ldap_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_connection_security(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_base_dn(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bind_username(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bind_password(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_maximum_login_attempts(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_user_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_group_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_enable_admin_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_admin_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_group_display_name_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_group_id_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_first_name_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_last_name_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_email_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_username_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_nickname_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_id_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_position_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_login_id_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_picture_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_sync_interval_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_query_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_max_page_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_login_field_name(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_login_button_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_login_button_border_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_login_button_text_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
};

ConfigLdap::ConfigLdap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigLdap)
}
ConfigLdap::ConfigLdap(const ConfigLdap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ldap_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ldap_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ldap_server()) {
    ldap_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ldap_server(), 
      GetArenaForAllocation());
  }
  connection_security_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    connection_security_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_connection_security()) {
    connection_security_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connection_security(), 
      GetArenaForAllocation());
  }
  base_dn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    base_dn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_base_dn()) {
    base_dn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_base_dn(), 
      GetArenaForAllocation());
  }
  bind_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bind_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bind_username()) {
    bind_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bind_username(), 
      GetArenaForAllocation());
  }
  bind_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bind_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bind_password()) {
    bind_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bind_password(), 
      GetArenaForAllocation());
  }
  user_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_filter()) {
    user_filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_filter(), 
      GetArenaForAllocation());
  }
  group_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    group_filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_group_filter()) {
    group_filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_filter(), 
      GetArenaForAllocation());
  }
  admin_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    admin_filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_admin_filter()) {
    admin_filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_admin_filter(), 
      GetArenaForAllocation());
  }
  group_display_name_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    group_display_name_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_group_display_name_attribute()) {
    group_display_name_attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_display_name_attribute(), 
      GetArenaForAllocation());
  }
  group_id_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    group_id_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_group_id_attribute()) {
    group_id_attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_id_attribute(), 
      GetArenaForAllocation());
  }
  first_name_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    first_name_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_first_name_attribute()) {
    first_name_attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_first_name_attribute(), 
      GetArenaForAllocation());
  }
  last_name_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_name_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_last_name_attribute()) {
    last_name_attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_name_attribute(), 
      GetArenaForAllocation());
  }
  email_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    email_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_email_attribute()) {
    email_attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email_attribute(), 
      GetArenaForAllocation());
  }
  username_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_username_attribute()) {
    username_attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username_attribute(), 
      GetArenaForAllocation());
  }
  nickname_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nickname_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nickname_attribute()) {
    nickname_attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname_attribute(), 
      GetArenaForAllocation());
  }
  id_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id_attribute()) {
    id_attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id_attribute(), 
      GetArenaForAllocation());
  }
  position_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    position_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_position_attribute()) {
    position_attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_position_attribute(), 
      GetArenaForAllocation());
  }
  login_id_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    login_id_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_login_id_attribute()) {
    login_id_attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_login_id_attribute(), 
      GetArenaForAllocation());
  }
  picture_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    picture_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_picture_attribute()) {
    picture_attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_picture_attribute(), 
      GetArenaForAllocation());
  }
  login_field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    login_field_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_login_field_name()) {
    login_field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_login_field_name(), 
      GetArenaForAllocation());
  }
  login_button_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    login_button_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_login_button_color()) {
    login_button_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_login_button_color(), 
      GetArenaForAllocation());
  }
  login_button_border_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    login_button_border_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_login_button_border_color()) {
    login_button_border_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_login_button_border_color(), 
      GetArenaForAllocation());
  }
  login_button_text_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    login_button_text_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_login_button_text_color()) {
    login_button_text_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_login_button_text_color(), 
      GetArenaForAllocation());
  }
  ::memcpy(&ldap_port_, &from.ldap_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_page_size_) -
    reinterpret_cast<char*>(&ldap_port_)) + sizeof(max_page_size_));
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigLdap)
}

inline void ConfigLdap::SharedCtor() {
ldap_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ldap_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
connection_security_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  connection_security_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
base_dn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  base_dn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bind_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bind_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bind_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bind_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
group_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  group_filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
admin_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  admin_filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
group_display_name_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  group_display_name_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
group_id_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  group_id_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
first_name_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  first_name_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_name_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_name_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
email_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  email_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
username_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
nickname_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nickname_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
position_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  position_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
login_id_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  login_id_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
picture_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  picture_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
login_field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  login_field_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
login_button_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  login_button_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
login_button_border_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  login_button_border_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
login_button_text_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  login_button_text_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ldap_port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_page_size_) -
    reinterpret_cast<char*>(&ldap_port_)) + sizeof(max_page_size_));
}

ConfigLdap::~ConfigLdap() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigLdap)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigLdap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ldap_server_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connection_security_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_dn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bind_username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bind_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_filter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_filter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  admin_filter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_display_name_attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_id_attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  position_attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  login_id_attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  picture_attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  login_field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  login_button_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  login_button_border_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  login_button_text_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigLdap::ArenaDtor(void* object) {
  ConfigLdap* _this = reinterpret_cast< ConfigLdap* >(object);
  (void)_this;
}
void ConfigLdap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigLdap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigLdap::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigLdap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ldap_server_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      connection_security_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      base_dn_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      bind_username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      bind_password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      user_filter_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      group_filter_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      admin_filter_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      group_display_name_attribute_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      group_id_attribute_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      first_name_attribute_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      last_name_attribute_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      email_attribute_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      username_attribute_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      nickname_attribute_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      id_attribute_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      position_attribute_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00020000u) {
      login_id_attribute_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00040000u) {
      picture_attribute_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00080000u) {
      login_field_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00100000u) {
      login_button_color_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00200000u) {
      login_button_border_color_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00400000u) {
      login_button_text_color_.ClearNonDefaultToEmpty();
    }
  }
  ldap_port_ = 0;
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&enable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_page_size_) -
        reinterpret_cast<char*>(&enable_)) + sizeof(max_page_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigLdap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enable = 1 [json_name = "enable"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_sync = 2 [json_name = "enableSync"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enable_sync(&has_bits);
          enable_sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ldap_server = 3 [json_name = "ldapServer"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ldap_server();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLdap.ldap_server"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ldap_port = 4 [json_name = "ldapPort"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ldap_port(&has_bits);
          ldap_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string connection_security = 5 [json_name = "connectionSecurity"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_connection_security();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLdap.connection_security"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string base_dn = 6 [json_name = "baseDn"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_base_dn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLdap.base_dn"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string bind_username = 7 [json_name = "bindUsername"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_bind_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLdap.bind_username"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string bind_password = 8 [json_name = "bindPassword"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_bind_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLdap.bind_password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 maximum_login_attempts = 9 [json_name = "maximumLoginAttempts"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_maximum_login_attempts(&has_bits);
          maximum_login_attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string user_filter = 10 [json_name = "userFilter"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_user_filter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLdap.user_filter"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string group_filter = 11 [json_name = "groupFilter"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_group_filter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLdap.group_filter"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_admin_filter = 12 [json_name = "enableAdminFilter"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_enable_admin_filter(&has_bits);
          enable_admin_filter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string admin_filter = 13 [json_name = "adminFilter"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_admin_filter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLdap.admin_filter"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string group_display_name_attribute = 14 [json_name = "groupDisplayNameAttribute"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_group_display_name_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLdap.group_display_name_attribute"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string group_id_attribute = 15 [json_name = "groupIdAttribute"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_group_id_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLdap.group_id_attribute"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string first_name_attribute = 16 [json_name = "firstNameAttribute"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_first_name_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLdap.first_name_attribute"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string last_name_attribute = 17 [json_name = "lastNameAttribute"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_last_name_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLdap.last_name_attribute"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string email_attribute = 18 [json_name = "emailAttribute"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_email_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLdap.email_attribute"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string username_attribute = 19 [json_name = "usernameAttribute"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_username_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLdap.username_attribute"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string nickname_attribute = 20 [json_name = "nicknameAttribute"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_nickname_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLdap.nickname_attribute"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string id_attribute = 21 [json_name = "idAttribute"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_id_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLdap.id_attribute"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string position_attribute = 22 [json_name = "positionAttribute"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_position_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLdap.position_attribute"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string login_id_attribute = 23 [json_name = "loginIdAttribute"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_login_id_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLdap.login_id_attribute"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string picture_attribute = 24 [json_name = "pictureAttribute"];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_picture_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLdap.picture_attribute"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sync_interval_minutes = 25 [json_name = "syncIntervalMinutes"];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_sync_interval_minutes(&has_bits);
          sync_interval_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 query_timeout = 26 [json_name = "queryTimeout"];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_query_timeout(&has_bits);
          query_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_page_size = 27 [json_name = "maxPageSize"];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_max_page_size(&has_bits);
          max_page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string login_field_name = 28 [json_name = "loginFieldName"];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_login_field_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLdap.login_field_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string login_button_color = 29 [json_name = "loginButtonColor"];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_login_button_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLdap.login_button_color"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string login_button_border_color = 30 [json_name = "loginButtonBorderColor"];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_login_button_border_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLdap.login_button_border_color"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string login_button_text_color = 31 [json_name = "loginButtonTextColor"];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_login_button_text_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigLdap.login_button_text_color"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigLdap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigLdap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool enable = 1 [json_name = "enable"];
  if (_internal_has_enable()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // optional bool enable_sync = 2 [json_name = "enableSync"];
  if (_internal_has_enable_sync()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_sync(), target);
  }

  // optional string ldap_server = 3 [json_name = "ldapServer"];
  if (_internal_has_ldap_server()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ldap_server().data(), static_cast<int>(this->_internal_ldap_server().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLdap.ldap_server");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ldap_server(), target);
  }

  // optional int32 ldap_port = 4 [json_name = "ldapPort"];
  if (_internal_has_ldap_port()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ldap_port(), target);
  }

  // optional string connection_security = 5 [json_name = "connectionSecurity"];
  if (_internal_has_connection_security()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connection_security().data(), static_cast<int>(this->_internal_connection_security().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLdap.connection_security");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_connection_security(), target);
  }

  // optional string base_dn = 6 [json_name = "baseDn"];
  if (_internal_has_base_dn()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base_dn().data(), static_cast<int>(this->_internal_base_dn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLdap.base_dn");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_base_dn(), target);
  }

  // optional string bind_username = 7 [json_name = "bindUsername"];
  if (_internal_has_bind_username()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bind_username().data(), static_cast<int>(this->_internal_bind_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLdap.bind_username");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_bind_username(), target);
  }

  // optional string bind_password = 8 [json_name = "bindPassword"];
  if (_internal_has_bind_password()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bind_password().data(), static_cast<int>(this->_internal_bind_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLdap.bind_password");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_bind_password(), target);
  }

  // optional int32 maximum_login_attempts = 9 [json_name = "maximumLoginAttempts"];
  if (_internal_has_maximum_login_attempts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_maximum_login_attempts(), target);
  }

  // optional string user_filter = 10 [json_name = "userFilter"];
  if (_internal_has_user_filter()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_filter().data(), static_cast<int>(this->_internal_user_filter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLdap.user_filter");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_user_filter(), target);
  }

  // optional string group_filter = 11 [json_name = "groupFilter"];
  if (_internal_has_group_filter()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_filter().data(), static_cast<int>(this->_internal_group_filter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLdap.group_filter");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_group_filter(), target);
  }

  // optional bool enable_admin_filter = 12 [json_name = "enableAdminFilter"];
  if (_internal_has_enable_admin_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_enable_admin_filter(), target);
  }

  // optional string admin_filter = 13 [json_name = "adminFilter"];
  if (_internal_has_admin_filter()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_admin_filter().data(), static_cast<int>(this->_internal_admin_filter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLdap.admin_filter");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_admin_filter(), target);
  }

  // optional string group_display_name_attribute = 14 [json_name = "groupDisplayNameAttribute"];
  if (_internal_has_group_display_name_attribute()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_display_name_attribute().data(), static_cast<int>(this->_internal_group_display_name_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLdap.group_display_name_attribute");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_group_display_name_attribute(), target);
  }

  // optional string group_id_attribute = 15 [json_name = "groupIdAttribute"];
  if (_internal_has_group_id_attribute()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_id_attribute().data(), static_cast<int>(this->_internal_group_id_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLdap.group_id_attribute");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_group_id_attribute(), target);
  }

  // optional string first_name_attribute = 16 [json_name = "firstNameAttribute"];
  if (_internal_has_first_name_attribute()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name_attribute().data(), static_cast<int>(this->_internal_first_name_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLdap.first_name_attribute");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_first_name_attribute(), target);
  }

  // optional string last_name_attribute = 17 [json_name = "lastNameAttribute"];
  if (_internal_has_last_name_attribute()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name_attribute().data(), static_cast<int>(this->_internal_last_name_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLdap.last_name_attribute");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_last_name_attribute(), target);
  }

  // optional string email_attribute = 18 [json_name = "emailAttribute"];
  if (_internal_has_email_attribute()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email_attribute().data(), static_cast<int>(this->_internal_email_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLdap.email_attribute");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_email_attribute(), target);
  }

  // optional string username_attribute = 19 [json_name = "usernameAttribute"];
  if (_internal_has_username_attribute()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username_attribute().data(), static_cast<int>(this->_internal_username_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLdap.username_attribute");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_username_attribute(), target);
  }

  // optional string nickname_attribute = 20 [json_name = "nicknameAttribute"];
  if (_internal_has_nickname_attribute()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname_attribute().data(), static_cast<int>(this->_internal_nickname_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLdap.nickname_attribute");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_nickname_attribute(), target);
  }

  // optional string id_attribute = 21 [json_name = "idAttribute"];
  if (_internal_has_id_attribute()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id_attribute().data(), static_cast<int>(this->_internal_id_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLdap.id_attribute");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_id_attribute(), target);
  }

  // optional string position_attribute = 22 [json_name = "positionAttribute"];
  if (_internal_has_position_attribute()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_attribute().data(), static_cast<int>(this->_internal_position_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLdap.position_attribute");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_position_attribute(), target);
  }

  // optional string login_id_attribute = 23 [json_name = "loginIdAttribute"];
  if (_internal_has_login_id_attribute()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login_id_attribute().data(), static_cast<int>(this->_internal_login_id_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLdap.login_id_attribute");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_login_id_attribute(), target);
  }

  // optional string picture_attribute = 24 [json_name = "pictureAttribute"];
  if (_internal_has_picture_attribute()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_picture_attribute().data(), static_cast<int>(this->_internal_picture_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLdap.picture_attribute");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_picture_attribute(), target);
  }

  // optional int32 sync_interval_minutes = 25 [json_name = "syncIntervalMinutes"];
  if (_internal_has_sync_interval_minutes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_sync_interval_minutes(), target);
  }

  // optional int32 query_timeout = 26 [json_name = "queryTimeout"];
  if (_internal_has_query_timeout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_query_timeout(), target);
  }

  // optional int32 max_page_size = 27 [json_name = "maxPageSize"];
  if (_internal_has_max_page_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_max_page_size(), target);
  }

  // optional string login_field_name = 28 [json_name = "loginFieldName"];
  if (_internal_has_login_field_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login_field_name().data(), static_cast<int>(this->_internal_login_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLdap.login_field_name");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_login_field_name(), target);
  }

  // optional string login_button_color = 29 [json_name = "loginButtonColor"];
  if (_internal_has_login_button_color()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login_button_color().data(), static_cast<int>(this->_internal_login_button_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLdap.login_button_color");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_login_button_color(), target);
  }

  // optional string login_button_border_color = 30 [json_name = "loginButtonBorderColor"];
  if (_internal_has_login_button_border_color()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login_button_border_color().data(), static_cast<int>(this->_internal_login_button_border_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLdap.login_button_border_color");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_login_button_border_color(), target);
  }

  // optional string login_button_text_color = 31 [json_name = "loginButtonTextColor"];
  if (_internal_has_login_button_text_color()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login_button_text_color().data(), static_cast<int>(this->_internal_login_button_text_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigLdap.login_button_text_color");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_login_button_text_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigLdap)
  return target;
}

size_t ConfigLdap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigLdap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string ldap_server = 3 [json_name = "ldapServer"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ldap_server());
    }

    // optional string connection_security = 5 [json_name = "connectionSecurity"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_connection_security());
    }

    // optional string base_dn = 6 [json_name = "baseDn"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_base_dn());
    }

    // optional string bind_username = 7 [json_name = "bindUsername"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bind_username());
    }

    // optional string bind_password = 8 [json_name = "bindPassword"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bind_password());
    }

    // optional string user_filter = 10 [json_name = "userFilter"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_filter());
    }

    // optional string group_filter = 11 [json_name = "groupFilter"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_group_filter());
    }

    // optional string admin_filter = 13 [json_name = "adminFilter"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_admin_filter());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string group_display_name_attribute = 14 [json_name = "groupDisplayNameAttribute"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_group_display_name_attribute());
    }

    // optional string group_id_attribute = 15 [json_name = "groupIdAttribute"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_group_id_attribute());
    }

    // optional string first_name_attribute = 16 [json_name = "firstNameAttribute"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_first_name_attribute());
    }

    // optional string last_name_attribute = 17 [json_name = "lastNameAttribute"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_last_name_attribute());
    }

    // optional string email_attribute = 18 [json_name = "emailAttribute"];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email_attribute());
    }

    // optional string username_attribute = 19 [json_name = "usernameAttribute"];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username_attribute());
    }

    // optional string nickname_attribute = 20 [json_name = "nicknameAttribute"];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname_attribute());
    }

    // optional string id_attribute = 21 [json_name = "idAttribute"];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id_attribute());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional string position_attribute = 22 [json_name = "positionAttribute"];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_position_attribute());
    }

    // optional string login_id_attribute = 23 [json_name = "loginIdAttribute"];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_login_id_attribute());
    }

    // optional string picture_attribute = 24 [json_name = "pictureAttribute"];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_picture_attribute());
    }

    // optional string login_field_name = 28 [json_name = "loginFieldName"];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_login_field_name());
    }

    // optional string login_button_color = 29 [json_name = "loginButtonColor"];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_login_button_color());
    }

    // optional string login_button_border_color = 30 [json_name = "loginButtonBorderColor"];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_login_button_border_color());
    }

    // optional string login_button_text_color = 31 [json_name = "loginButtonTextColor"];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_login_button_text_color());
    }

    // optional int32 ldap_port = 4 [json_name = "ldapPort"];
    if (cached_has_bits & 0x00800000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ldap_port());
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional bool enable = 1 [json_name = "enable"];
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 1;
    }

    // optional bool enable_sync = 2 [json_name = "enableSync"];
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 + 1;
    }

    // optional bool enable_admin_filter = 12 [json_name = "enableAdminFilter"];
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 + 1;
    }

    // optional int32 maximum_login_attempts = 9 [json_name = "maximumLoginAttempts"];
    if (cached_has_bits & 0x08000000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_maximum_login_attempts());
    }

    // optional int32 sync_interval_minutes = 25 [json_name = "syncIntervalMinutes"];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sync_interval_minutes());
    }

    // optional int32 query_timeout = 26 [json_name = "queryTimeout"];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_query_timeout());
    }

    // optional int32 max_page_size = 27 [json_name = "maxPageSize"];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_page_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigLdap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigLdap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigLdap::GetClassData() const { return &_class_data_; }

void ConfigLdap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigLdap *>(to)->MergeFrom(
      static_cast<const ConfigLdap &>(from));
}


void ConfigLdap::MergeFrom(const ConfigLdap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigLdap)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ldap_server(from._internal_ldap_server());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_connection_security(from._internal_connection_security());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_base_dn(from._internal_base_dn());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_bind_username(from._internal_bind_username());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_bind_password(from._internal_bind_password());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_user_filter(from._internal_user_filter());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_group_filter(from._internal_group_filter());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_admin_filter(from._internal_admin_filter());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_group_display_name_attribute(from._internal_group_display_name_attribute());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_group_id_attribute(from._internal_group_id_attribute());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_first_name_attribute(from._internal_first_name_attribute());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_last_name_attribute(from._internal_last_name_attribute());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_email_attribute(from._internal_email_attribute());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_set_username_attribute(from._internal_username_attribute());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_nickname_attribute(from._internal_nickname_attribute());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_set_id_attribute(from._internal_id_attribute());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_set_position_attribute(from._internal_position_attribute());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_set_login_id_attribute(from._internal_login_id_attribute());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_set_picture_attribute(from._internal_picture_attribute());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_set_login_field_name(from._internal_login_field_name());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_set_login_button_color(from._internal_login_button_color());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_set_login_button_border_color(from._internal_login_button_border_color());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_set_login_button_text_color(from._internal_login_button_text_color());
    }
    if (cached_has_bits & 0x00800000u) {
      ldap_port_ = from.ldap_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      enable_ = from.enable_;
    }
    if (cached_has_bits & 0x02000000u) {
      enable_sync_ = from.enable_sync_;
    }
    if (cached_has_bits & 0x04000000u) {
      enable_admin_filter_ = from.enable_admin_filter_;
    }
    if (cached_has_bits & 0x08000000u) {
      maximum_login_attempts_ = from.maximum_login_attempts_;
    }
    if (cached_has_bits & 0x10000000u) {
      sync_interval_minutes_ = from.sync_interval_minutes_;
    }
    if (cached_has_bits & 0x20000000u) {
      query_timeout_ = from.query_timeout_;
    }
    if (cached_has_bits & 0x40000000u) {
      max_page_size_ = from.max_page_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigLdap::CopyFrom(const ConfigLdap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigLdap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigLdap::IsInitialized() const {
  return true;
}

void ConfigLdap::InternalSwap(ConfigLdap* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ldap_server_, lhs_arena,
      &other->ldap_server_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &connection_security_, lhs_arena,
      &other->connection_security_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &base_dn_, lhs_arena,
      &other->base_dn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bind_username_, lhs_arena,
      &other->bind_username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bind_password_, lhs_arena,
      &other->bind_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_filter_, lhs_arena,
      &other->user_filter_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &group_filter_, lhs_arena,
      &other->group_filter_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &admin_filter_, lhs_arena,
      &other->admin_filter_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &group_display_name_attribute_, lhs_arena,
      &other->group_display_name_attribute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &group_id_attribute_, lhs_arena,
      &other->group_id_attribute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &first_name_attribute_, lhs_arena,
      &other->first_name_attribute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_name_attribute_, lhs_arena,
      &other->last_name_attribute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_attribute_, lhs_arena,
      &other->email_attribute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_attribute_, lhs_arena,
      &other->username_attribute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_attribute_, lhs_arena,
      &other->nickname_attribute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_attribute_, lhs_arena,
      &other->id_attribute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &position_attribute_, lhs_arena,
      &other->position_attribute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &login_id_attribute_, lhs_arena,
      &other->login_id_attribute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &picture_attribute_, lhs_arena,
      &other->picture_attribute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &login_field_name_, lhs_arena,
      &other->login_field_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &login_button_color_, lhs_arena,
      &other->login_button_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &login_button_border_color_, lhs_arena,
      &other->login_button_border_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &login_button_text_color_, lhs_arena,
      &other->login_button_text_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigLdap, max_page_size_)
      + sizeof(ConfigLdap::max_page_size_)
      - PROTOBUF_FIELD_OFFSET(ConfigLdap, ldap_port_)>(
          reinterpret_cast<char*>(&ldap_port_),
          reinterpret_cast<char*>(&other->ldap_port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigLdap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[15]);
}

// ===================================================================

class ConfigSaml::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigSaml>()._has_bits_);
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_enable_sync_with_ldap(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_enable_sync_with_ldap_include_auth(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_ignore_guests_ldap_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_verify(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_encrypt(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_sign_request(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_idp_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_idp_descriptor_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_idp_metadata_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_service_provider_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_assertion_consumer_service_url(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_signature_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_canonical_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_scoping_idp_provider_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_scoping_idp_name(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_idp_certificate_file(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_public_certificate_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_private_key_file(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_id_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_enable_admin_attribute(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_admin_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_first_name_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_last_name_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_email_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_username_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_nickname_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_locale_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_position_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_login_button_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_login_button_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_login_button_border_color(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_login_button_text_color(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
};

ConfigSaml::ConfigSaml(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigSaml)
}
ConfigSaml::ConfigSaml(const ConfigSaml& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  idp_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    idp_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_idp_url()) {
    idp_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_idp_url(), 
      GetArenaForAllocation());
  }
  idp_descriptor_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    idp_descriptor_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_idp_descriptor_url()) {
    idp_descriptor_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_idp_descriptor_url(), 
      GetArenaForAllocation());
  }
  idp_metadata_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    idp_metadata_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_idp_metadata_url()) {
    idp_metadata_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_idp_metadata_url(), 
      GetArenaForAllocation());
  }
  service_provider_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    service_provider_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_service_provider_identifier()) {
    service_provider_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service_provider_identifier(), 
      GetArenaForAllocation());
  }
  assertion_consumer_service_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    assertion_consumer_service_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_assertion_consumer_service_url()) {
    assertion_consumer_service_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_assertion_consumer_service_url(), 
      GetArenaForAllocation());
  }
  signature_algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signature_algorithm()) {
    signature_algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature_algorithm(), 
      GetArenaForAllocation());
  }
  canonical_algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    canonical_algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_canonical_algorithm()) {
    canonical_algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_canonical_algorithm(), 
      GetArenaForAllocation());
  }
  scoping_idp_provider_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    scoping_idp_provider_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_scoping_idp_provider_id()) {
    scoping_idp_provider_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scoping_idp_provider_id(), 
      GetArenaForAllocation());
  }
  scoping_idp_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    scoping_idp_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_scoping_idp_name()) {
    scoping_idp_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scoping_idp_name(), 
      GetArenaForAllocation());
  }
  idp_certificate_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    idp_certificate_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_idp_certificate_file()) {
    idp_certificate_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_idp_certificate_file(), 
      GetArenaForAllocation());
  }
  public_certificate_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_certificate_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_public_certificate_file()) {
    public_certificate_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_certificate_file(), 
      GetArenaForAllocation());
  }
  private_key_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    private_key_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_private_key_file()) {
    private_key_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key_file(), 
      GetArenaForAllocation());
  }
  id_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id_attribute()) {
    id_attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id_attribute(), 
      GetArenaForAllocation());
  }
  admin_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    admin_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_admin_attribute()) {
    admin_attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_admin_attribute(), 
      GetArenaForAllocation());
  }
  first_name_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    first_name_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_first_name_attribute()) {
    first_name_attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_first_name_attribute(), 
      GetArenaForAllocation());
  }
  last_name_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_name_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_last_name_attribute()) {
    last_name_attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_name_attribute(), 
      GetArenaForAllocation());
  }
  email_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    email_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_email_attribute()) {
    email_attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email_attribute(), 
      GetArenaForAllocation());
  }
  username_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_username_attribute()) {
    username_attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username_attribute(), 
      GetArenaForAllocation());
  }
  nickname_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nickname_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nickname_attribute()) {
    nickname_attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname_attribute(), 
      GetArenaForAllocation());
  }
  locale_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    locale_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_locale_attribute()) {
    locale_attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_locale_attribute(), 
      GetArenaForAllocation());
  }
  position_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    position_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_position_attribute()) {
    position_attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_position_attribute(), 
      GetArenaForAllocation());
  }
  login_button_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    login_button_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_login_button_text()) {
    login_button_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_login_button_text(), 
      GetArenaForAllocation());
  }
  login_button_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    login_button_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_login_button_color()) {
    login_button_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_login_button_color(), 
      GetArenaForAllocation());
  }
  login_button_border_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    login_button_border_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_login_button_border_color()) {
    login_button_border_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_login_button_border_color(), 
      GetArenaForAllocation());
  }
  login_button_text_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    login_button_text_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_login_button_text_color()) {
    login_button_text_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_login_button_text_color(), 
      GetArenaForAllocation());
  }
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_admin_attribute_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(enable_admin_attribute_));
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigSaml)
}

inline void ConfigSaml::SharedCtor() {
idp_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  idp_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
idp_descriptor_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  idp_descriptor_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
idp_metadata_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  idp_metadata_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
service_provider_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  service_provider_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
assertion_consumer_service_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  assertion_consumer_service_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
signature_algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
canonical_algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  canonical_algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
scoping_idp_provider_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  scoping_idp_provider_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
scoping_idp_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  scoping_idp_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
idp_certificate_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  idp_certificate_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
public_certificate_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_certificate_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
private_key_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  private_key_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
admin_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  admin_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
first_name_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  first_name_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_name_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_name_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
email_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  email_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
username_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
nickname_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nickname_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
locale_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  locale_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
position_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  position_attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
login_button_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  login_button_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
login_button_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  login_button_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
login_button_border_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  login_button_border_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
login_button_text_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  login_button_text_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enable_admin_attribute_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(enable_admin_attribute_));
}

ConfigSaml::~ConfigSaml() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigSaml)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigSaml::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  idp_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idp_descriptor_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idp_metadata_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_provider_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assertion_consumer_service_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_algorithm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  canonical_algorithm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scoping_idp_provider_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scoping_idp_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idp_certificate_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_certificate_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_key_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  admin_attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  position_attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  login_button_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  login_button_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  login_button_border_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  login_button_text_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigSaml::ArenaDtor(void* object) {
  ConfigSaml* _this = reinterpret_cast< ConfigSaml* >(object);
  (void)_this;
}
void ConfigSaml::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigSaml::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigSaml::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigSaml)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      idp_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      idp_descriptor_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      idp_metadata_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      service_provider_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      assertion_consumer_service_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      signature_algorithm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      canonical_algorithm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      scoping_idp_provider_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      scoping_idp_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      idp_certificate_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      public_certificate_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      private_key_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      id_attribute_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      admin_attribute_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      first_name_attribute_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      last_name_attribute_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      email_attribute_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00020000u) {
      username_attribute_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00040000u) {
      nickname_attribute_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00080000u) {
      locale_attribute_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00100000u) {
      position_attribute_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00200000u) {
      login_button_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00400000u) {
      login_button_color_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00800000u) {
      login_button_border_color_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x01000000u) {
    login_button_text_color_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0xfe000000u) {
    ::memset(&enable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sign_request_) -
        reinterpret_cast<char*>(&enable_)) + sizeof(sign_request_));
  }
  enable_admin_attribute_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigSaml::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enable = 1 [json_name = "enable"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enable(&_has_bits_);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_sync_with_ldap = 2 [json_name = "enableSyncWithLdap"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enable_sync_with_ldap(&_has_bits_);
          enable_sync_with_ldap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_sync_with_ldap_include_auth = 3 [json_name = "enableSyncWithLdapIncludeAuth"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_enable_sync_with_ldap_include_auth(&_has_bits_);
          enable_sync_with_ldap_include_auth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ignore_guests_ldap_sync = 4 [json_name = "ignoreGuestsLdapSync"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ignore_guests_ldap_sync(&_has_bits_);
          ignore_guests_ldap_sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool verify = 5 [json_name = "verify"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_verify(&_has_bits_);
          verify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool encrypt = 6 [json_name = "encrypt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_encrypt(&_has_bits_);
          encrypt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool sign_request = 7 [json_name = "signRequest"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_sign_request(&_has_bits_);
          sign_request_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string idp_url = 8 [json_name = "idpUrl"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_idp_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.idp_url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string idp_descriptor_url = 9 [json_name = "idpDescriptorUrl"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_idp_descriptor_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.idp_descriptor_url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string idp_metadata_url = 10 [json_name = "idpMetadataUrl"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_idp_metadata_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.idp_metadata_url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string service_provider_identifier = 11 [json_name = "serviceProviderIdentifier"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_service_provider_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.service_provider_identifier"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string assertion_consumer_service_url = 12 [json_name = "assertionConsumerServiceUrl"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_assertion_consumer_service_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.assertion_consumer_service_url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string signature_algorithm = 13 [json_name = "signatureAlgorithm"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_signature_algorithm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.signature_algorithm"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string canonical_algorithm = 14 [json_name = "canonicalAlgorithm"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_canonical_algorithm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.canonical_algorithm"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string scoping_idp_provider_id = 15 [json_name = "scopingIdpProviderId"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_scoping_idp_provider_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.scoping_idp_provider_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string scoping_idp_name = 16 [json_name = "scopingIdpName"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_scoping_idp_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.scoping_idp_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string idp_certificate_file = 17 [json_name = "idpCertificateFile"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_idp_certificate_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.idp_certificate_file"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string public_certificate_file = 18 [json_name = "publicCertificateFile"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_public_certificate_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.public_certificate_file"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string private_key_file = 19 [json_name = "privateKeyFile"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_private_key_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.private_key_file"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string id_attribute = 20 [json_name = "idAttribute"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_id_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.id_attribute"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_admin_attribute = 21 [json_name = "enableAdminAttribute"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_enable_admin_attribute(&_has_bits_);
          enable_admin_attribute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string admin_attribute = 22 [json_name = "adminAttribute"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_admin_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.admin_attribute"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string first_name_attribute = 23 [json_name = "firstNameAttribute"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_first_name_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.first_name_attribute"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string last_name_attribute = 24 [json_name = "lastNameAttribute"];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_last_name_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.last_name_attribute"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string email_attribute = 25 [json_name = "emailAttribute"];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_email_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.email_attribute"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string username_attribute = 26 [json_name = "usernameAttribute"];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_username_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.username_attribute"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string nickname_attribute = 27 [json_name = "nicknameAttribute"];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_nickname_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.nickname_attribute"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string locale_attribute = 28 [json_name = "localeAttribute"];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_locale_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.locale_attribute"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string position_attribute = 29 [json_name = "positionAttribute"];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_position_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.position_attribute"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string login_button_text = 30 [json_name = "loginButtonText"];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_login_button_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.login_button_text"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string login_button_color = 31 [json_name = "loginButtonColor"];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_login_button_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.login_button_color"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string login_button_border_color = 32 [json_name = "loginButtonBorderColor"];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_login_button_border_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.login_button_border_color"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string login_button_text_color = 33 [json_name = "loginButtonTextColor"];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_login_button_text_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigSaml.login_button_text_color"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigSaml::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigSaml)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool enable = 1 [json_name = "enable"];
  if (_internal_has_enable()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // optional bool enable_sync_with_ldap = 2 [json_name = "enableSyncWithLdap"];
  if (_internal_has_enable_sync_with_ldap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_sync_with_ldap(), target);
  }

  // optional bool enable_sync_with_ldap_include_auth = 3 [json_name = "enableSyncWithLdapIncludeAuth"];
  if (_internal_has_enable_sync_with_ldap_include_auth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_sync_with_ldap_include_auth(), target);
  }

  // optional bool ignore_guests_ldap_sync = 4 [json_name = "ignoreGuestsLdapSync"];
  if (_internal_has_ignore_guests_ldap_sync()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_ignore_guests_ldap_sync(), target);
  }

  // optional bool verify = 5 [json_name = "verify"];
  if (_internal_has_verify()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_verify(), target);
  }

  // optional bool encrypt = 6 [json_name = "encrypt"];
  if (_internal_has_encrypt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_encrypt(), target);
  }

  // optional bool sign_request = 7 [json_name = "signRequest"];
  if (_internal_has_sign_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_sign_request(), target);
  }

  // optional string idp_url = 8 [json_name = "idpUrl"];
  if (_internal_has_idp_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idp_url().data(), static_cast<int>(this->_internal_idp_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.idp_url");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_idp_url(), target);
  }

  // optional string idp_descriptor_url = 9 [json_name = "idpDescriptorUrl"];
  if (_internal_has_idp_descriptor_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idp_descriptor_url().data(), static_cast<int>(this->_internal_idp_descriptor_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.idp_descriptor_url");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_idp_descriptor_url(), target);
  }

  // optional string idp_metadata_url = 10 [json_name = "idpMetadataUrl"];
  if (_internal_has_idp_metadata_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idp_metadata_url().data(), static_cast<int>(this->_internal_idp_metadata_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.idp_metadata_url");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_idp_metadata_url(), target);
  }

  // optional string service_provider_identifier = 11 [json_name = "serviceProviderIdentifier"];
  if (_internal_has_service_provider_identifier()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_provider_identifier().data(), static_cast<int>(this->_internal_service_provider_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.service_provider_identifier");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_service_provider_identifier(), target);
  }

  // optional string assertion_consumer_service_url = 12 [json_name = "assertionConsumerServiceUrl"];
  if (_internal_has_assertion_consumer_service_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_assertion_consumer_service_url().data(), static_cast<int>(this->_internal_assertion_consumer_service_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.assertion_consumer_service_url");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_assertion_consumer_service_url(), target);
  }

  // optional string signature_algorithm = 13 [json_name = "signatureAlgorithm"];
  if (_internal_has_signature_algorithm()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature_algorithm().data(), static_cast<int>(this->_internal_signature_algorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.signature_algorithm");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_signature_algorithm(), target);
  }

  // optional string canonical_algorithm = 14 [json_name = "canonicalAlgorithm"];
  if (_internal_has_canonical_algorithm()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_canonical_algorithm().data(), static_cast<int>(this->_internal_canonical_algorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.canonical_algorithm");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_canonical_algorithm(), target);
  }

  // optional string scoping_idp_provider_id = 15 [json_name = "scopingIdpProviderId"];
  if (_internal_has_scoping_idp_provider_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scoping_idp_provider_id().data(), static_cast<int>(this->_internal_scoping_idp_provider_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.scoping_idp_provider_id");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_scoping_idp_provider_id(), target);
  }

  // optional string scoping_idp_name = 16 [json_name = "scopingIdpName"];
  if (_internal_has_scoping_idp_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scoping_idp_name().data(), static_cast<int>(this->_internal_scoping_idp_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.scoping_idp_name");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_scoping_idp_name(), target);
  }

  // optional string idp_certificate_file = 17 [json_name = "idpCertificateFile"];
  if (_internal_has_idp_certificate_file()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idp_certificate_file().data(), static_cast<int>(this->_internal_idp_certificate_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.idp_certificate_file");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_idp_certificate_file(), target);
  }

  // optional string public_certificate_file = 18 [json_name = "publicCertificateFile"];
  if (_internal_has_public_certificate_file()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_certificate_file().data(), static_cast<int>(this->_internal_public_certificate_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.public_certificate_file");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_public_certificate_file(), target);
  }

  // optional string private_key_file = 19 [json_name = "privateKeyFile"];
  if (_internal_has_private_key_file()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_private_key_file().data(), static_cast<int>(this->_internal_private_key_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.private_key_file");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_private_key_file(), target);
  }

  // optional string id_attribute = 20 [json_name = "idAttribute"];
  if (_internal_has_id_attribute()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id_attribute().data(), static_cast<int>(this->_internal_id_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.id_attribute");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_id_attribute(), target);
  }

  // optional bool enable_admin_attribute = 21 [json_name = "enableAdminAttribute"];
  if (_internal_has_enable_admin_attribute()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_enable_admin_attribute(), target);
  }

  // optional string admin_attribute = 22 [json_name = "adminAttribute"];
  if (_internal_has_admin_attribute()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_admin_attribute().data(), static_cast<int>(this->_internal_admin_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.admin_attribute");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_admin_attribute(), target);
  }

  // optional string first_name_attribute = 23 [json_name = "firstNameAttribute"];
  if (_internal_has_first_name_attribute()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name_attribute().data(), static_cast<int>(this->_internal_first_name_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.first_name_attribute");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_first_name_attribute(), target);
  }

  // optional string last_name_attribute = 24 [json_name = "lastNameAttribute"];
  if (_internal_has_last_name_attribute()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name_attribute().data(), static_cast<int>(this->_internal_last_name_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.last_name_attribute");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_last_name_attribute(), target);
  }

  // optional string email_attribute = 25 [json_name = "emailAttribute"];
  if (_internal_has_email_attribute()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email_attribute().data(), static_cast<int>(this->_internal_email_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.email_attribute");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_email_attribute(), target);
  }

  // optional string username_attribute = 26 [json_name = "usernameAttribute"];
  if (_internal_has_username_attribute()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username_attribute().data(), static_cast<int>(this->_internal_username_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.username_attribute");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_username_attribute(), target);
  }

  // optional string nickname_attribute = 27 [json_name = "nicknameAttribute"];
  if (_internal_has_nickname_attribute()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname_attribute().data(), static_cast<int>(this->_internal_nickname_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.nickname_attribute");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_nickname_attribute(), target);
  }

  // optional string locale_attribute = 28 [json_name = "localeAttribute"];
  if (_internal_has_locale_attribute()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locale_attribute().data(), static_cast<int>(this->_internal_locale_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.locale_attribute");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_locale_attribute(), target);
  }

  // optional string position_attribute = 29 [json_name = "positionAttribute"];
  if (_internal_has_position_attribute()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_attribute().data(), static_cast<int>(this->_internal_position_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.position_attribute");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_position_attribute(), target);
  }

  // optional string login_button_text = 30 [json_name = "loginButtonText"];
  if (_internal_has_login_button_text()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login_button_text().data(), static_cast<int>(this->_internal_login_button_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.login_button_text");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_login_button_text(), target);
  }

  // optional string login_button_color = 31 [json_name = "loginButtonColor"];
  if (_internal_has_login_button_color()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login_button_color().data(), static_cast<int>(this->_internal_login_button_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.login_button_color");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_login_button_color(), target);
  }

  // optional string login_button_border_color = 32 [json_name = "loginButtonBorderColor"];
  if (_internal_has_login_button_border_color()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login_button_border_color().data(), static_cast<int>(this->_internal_login_button_border_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.login_button_border_color");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_login_button_border_color(), target);
  }

  // optional string login_button_text_color = 33 [json_name = "loginButtonTextColor"];
  if (_internal_has_login_button_text_color()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login_button_text_color().data(), static_cast<int>(this->_internal_login_button_text_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigSaml.login_button_text_color");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_login_button_text_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigSaml)
  return target;
}

size_t ConfigSaml::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigSaml)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string idp_url = 8 [json_name = "idpUrl"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_idp_url());
    }

    // optional string idp_descriptor_url = 9 [json_name = "idpDescriptorUrl"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_idp_descriptor_url());
    }

    // optional string idp_metadata_url = 10 [json_name = "idpMetadataUrl"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_idp_metadata_url());
    }

    // optional string service_provider_identifier = 11 [json_name = "serviceProviderIdentifier"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_service_provider_identifier());
    }

    // optional string assertion_consumer_service_url = 12 [json_name = "assertionConsumerServiceUrl"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_assertion_consumer_service_url());
    }

    // optional string signature_algorithm = 13 [json_name = "signatureAlgorithm"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_signature_algorithm());
    }

    // optional string canonical_algorithm = 14 [json_name = "canonicalAlgorithm"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_canonical_algorithm());
    }

    // optional string scoping_idp_provider_id = 15 [json_name = "scopingIdpProviderId"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scoping_idp_provider_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string scoping_idp_name = 16 [json_name = "scopingIdpName"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scoping_idp_name());
    }

    // optional string idp_certificate_file = 17 [json_name = "idpCertificateFile"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_idp_certificate_file());
    }

    // optional string public_certificate_file = 18 [json_name = "publicCertificateFile"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_public_certificate_file());
    }

    // optional string private_key_file = 19 [json_name = "privateKeyFile"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_private_key_file());
    }

    // optional string id_attribute = 20 [json_name = "idAttribute"];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id_attribute());
    }

    // optional string admin_attribute = 22 [json_name = "adminAttribute"];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_admin_attribute());
    }

    // optional string first_name_attribute = 23 [json_name = "firstNameAttribute"];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_first_name_attribute());
    }

    // optional string last_name_attribute = 24 [json_name = "lastNameAttribute"];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_last_name_attribute());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional string email_attribute = 25 [json_name = "emailAttribute"];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email_attribute());
    }

    // optional string username_attribute = 26 [json_name = "usernameAttribute"];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username_attribute());
    }

    // optional string nickname_attribute = 27 [json_name = "nicknameAttribute"];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname_attribute());
    }

    // optional string locale_attribute = 28 [json_name = "localeAttribute"];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_locale_attribute());
    }

    // optional string position_attribute = 29 [json_name = "positionAttribute"];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_position_attribute());
    }

    // optional string login_button_text = 30 [json_name = "loginButtonText"];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_login_button_text());
    }

    // optional string login_button_color = 31 [json_name = "loginButtonColor"];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_login_button_color());
    }

    // optional string login_button_border_color = 32 [json_name = "loginButtonBorderColor"];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_login_button_border_color());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional string login_button_text_color = 33 [json_name = "loginButtonTextColor"];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_login_button_text_color());
    }

    // optional bool enable = 1 [json_name = "enable"];
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 + 1;
    }

    // optional bool enable_sync_with_ldap = 2 [json_name = "enableSyncWithLdap"];
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 + 1;
    }

    // optional bool enable_sync_with_ldap_include_auth = 3 [json_name = "enableSyncWithLdapIncludeAuth"];
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 + 1;
    }

    // optional bool ignore_guests_ldap_sync = 4 [json_name = "ignoreGuestsLdapSync"];
    if (cached_has_bits & 0x10000000u) {
      total_size += 1 + 1;
    }

    // optional bool verify = 5 [json_name = "verify"];
    if (cached_has_bits & 0x20000000u) {
      total_size += 1 + 1;
    }

    // optional bool encrypt = 6 [json_name = "encrypt"];
    if (cached_has_bits & 0x40000000u) {
      total_size += 1 + 1;
    }

    // optional bool sign_request = 7 [json_name = "signRequest"];
    if (cached_has_bits & 0x80000000u) {
      total_size += 1 + 1;
    }

  }
  // optional bool enable_admin_attribute = 21 [json_name = "enableAdminAttribute"];
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigSaml::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigSaml::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigSaml::GetClassData() const { return &_class_data_; }

void ConfigSaml::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigSaml *>(to)->MergeFrom(
      static_cast<const ConfigSaml &>(from));
}


void ConfigSaml::MergeFrom(const ConfigSaml& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigSaml)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_idp_url(from._internal_idp_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_idp_descriptor_url(from._internal_idp_descriptor_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_idp_metadata_url(from._internal_idp_metadata_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_service_provider_identifier(from._internal_service_provider_identifier());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_assertion_consumer_service_url(from._internal_assertion_consumer_service_url());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_signature_algorithm(from._internal_signature_algorithm());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_canonical_algorithm(from._internal_canonical_algorithm());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_scoping_idp_provider_id(from._internal_scoping_idp_provider_id());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_scoping_idp_name(from._internal_scoping_idp_name());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_idp_certificate_file(from._internal_idp_certificate_file());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_public_certificate_file(from._internal_public_certificate_file());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_private_key_file(from._internal_private_key_file());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_id_attribute(from._internal_id_attribute());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_set_admin_attribute(from._internal_admin_attribute());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_first_name_attribute(from._internal_first_name_attribute());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_set_last_name_attribute(from._internal_last_name_attribute());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_set_email_attribute(from._internal_email_attribute());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_set_username_attribute(from._internal_username_attribute());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_set_nickname_attribute(from._internal_nickname_attribute());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_set_locale_attribute(from._internal_locale_attribute());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_set_position_attribute(from._internal_position_attribute());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_set_login_button_text(from._internal_login_button_text());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_set_login_button_color(from._internal_login_button_color());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_set_login_button_border_color(from._internal_login_button_border_color());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_set_login_button_text_color(from._internal_login_button_text_color());
    }
    if (cached_has_bits & 0x02000000u) {
      enable_ = from.enable_;
    }
    if (cached_has_bits & 0x04000000u) {
      enable_sync_with_ldap_ = from.enable_sync_with_ldap_;
    }
    if (cached_has_bits & 0x08000000u) {
      enable_sync_with_ldap_include_auth_ = from.enable_sync_with_ldap_include_auth_;
    }
    if (cached_has_bits & 0x10000000u) {
      ignore_guests_ldap_sync_ = from.ignore_guests_ldap_sync_;
    }
    if (cached_has_bits & 0x20000000u) {
      verify_ = from.verify_;
    }
    if (cached_has_bits & 0x40000000u) {
      encrypt_ = from.encrypt_;
    }
    if (cached_has_bits & 0x80000000u) {
      sign_request_ = from.sign_request_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_has_enable_admin_attribute()) {
    _internal_set_enable_admin_attribute(from._internal_enable_admin_attribute());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigSaml::CopyFrom(const ConfigSaml& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigSaml)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigSaml::IsInitialized() const {
  return true;
}

void ConfigSaml::InternalSwap(ConfigSaml* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &idp_url_, lhs_arena,
      &other->idp_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &idp_descriptor_url_, lhs_arena,
      &other->idp_descriptor_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &idp_metadata_url_, lhs_arena,
      &other->idp_metadata_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &service_provider_identifier_, lhs_arena,
      &other->service_provider_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &assertion_consumer_service_url_, lhs_arena,
      &other->assertion_consumer_service_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_algorithm_, lhs_arena,
      &other->signature_algorithm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &canonical_algorithm_, lhs_arena,
      &other->canonical_algorithm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &scoping_idp_provider_id_, lhs_arena,
      &other->scoping_idp_provider_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &scoping_idp_name_, lhs_arena,
      &other->scoping_idp_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &idp_certificate_file_, lhs_arena,
      &other->idp_certificate_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_certificate_file_, lhs_arena,
      &other->public_certificate_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &private_key_file_, lhs_arena,
      &other->private_key_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_attribute_, lhs_arena,
      &other->id_attribute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &admin_attribute_, lhs_arena,
      &other->admin_attribute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &first_name_attribute_, lhs_arena,
      &other->first_name_attribute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_name_attribute_, lhs_arena,
      &other->last_name_attribute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_attribute_, lhs_arena,
      &other->email_attribute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_attribute_, lhs_arena,
      &other->username_attribute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_attribute_, lhs_arena,
      &other->nickname_attribute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &locale_attribute_, lhs_arena,
      &other->locale_attribute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &position_attribute_, lhs_arena,
      &other->position_attribute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &login_button_text_, lhs_arena,
      &other->login_button_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &login_button_color_, lhs_arena,
      &other->login_button_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &login_button_border_color_, lhs_arena,
      &other->login_button_border_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &login_button_text_color_, lhs_arena,
      &other->login_button_text_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigSaml, enable_admin_attribute_)
      + sizeof(ConfigSaml::enable_admin_attribute_)
      - PROTOBUF_FIELD_OFFSET(ConfigSaml, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigSaml::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[16]);
}

// ===================================================================

class ConfigNativeApp::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigNativeApp>()._has_bits_);
  static void set_has_app_download_link(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_android_app_download_link(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ios_app_download_link(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mobile_external_browser(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mobile_enable_biometrics(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mobile_prevent_screen_capture(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mobile_jailbreak_protection(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

ConfigNativeApp::ConfigNativeApp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  app_custom_url_schemes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigNativeApp)
}
ConfigNativeApp::ConfigNativeApp(const ConfigNativeApp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      app_custom_url_schemes_(from.app_custom_url_schemes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_download_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_download_link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_download_link()) {
    app_download_link_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_download_link(), 
      GetArenaForAllocation());
  }
  android_app_download_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    android_app_download_link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_android_app_download_link()) {
    android_app_download_link_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_android_app_download_link(), 
      GetArenaForAllocation());
  }
  ios_app_download_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ios_app_download_link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ios_app_download_link()) {
    ios_app_download_link_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ios_app_download_link(), 
      GetArenaForAllocation());
  }
  ::memcpy(&mobile_external_browser_, &from.mobile_external_browser_,
    static_cast<size_t>(reinterpret_cast<char*>(&mobile_jailbreak_protection_) -
    reinterpret_cast<char*>(&mobile_external_browser_)) + sizeof(mobile_jailbreak_protection_));
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigNativeApp)
}

inline void ConfigNativeApp::SharedCtor() {
app_download_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_download_link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
android_app_download_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  android_app_download_link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ios_app_download_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ios_app_download_link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mobile_external_browser_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mobile_jailbreak_protection_) -
    reinterpret_cast<char*>(&mobile_external_browser_)) + sizeof(mobile_jailbreak_protection_));
}

ConfigNativeApp::~ConfigNativeApp() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigNativeApp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigNativeApp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_download_link_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  android_app_download_link_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ios_app_download_link_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigNativeApp::ArenaDtor(void* object) {
  ConfigNativeApp* _this = reinterpret_cast< ConfigNativeApp* >(object);
  (void)_this;
}
void ConfigNativeApp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigNativeApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigNativeApp::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigNativeApp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_custom_url_schemes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      app_download_link_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      android_app_download_link_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ios_app_download_link_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&mobile_external_browser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mobile_jailbreak_protection_) -
      reinterpret_cast<char*>(&mobile_external_browser_)) + sizeof(mobile_jailbreak_protection_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigNativeApp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string app_custom_url_schemes = 1 [json_name = "appCustomUrlSchemes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_app_custom_url_schemes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigNativeApp.app_custom_url_schemes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string app_download_link = 2 [json_name = "appDownloadLink"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_download_link();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigNativeApp.app_download_link"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string android_app_download_link = 3 [json_name = "androidAppDownloadLink"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_android_app_download_link();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigNativeApp.android_app_download_link"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ios_app_download_link = 4 [json_name = "iosAppDownloadLink"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ios_app_download_link();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigNativeApp.ios_app_download_link"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mobile_external_browser = 5 [json_name = "mobileExternalBrowser"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_mobile_external_browser(&has_bits);
          mobile_external_browser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mobile_enable_biometrics = 6 [json_name = "mobileEnableBiometrics"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_mobile_enable_biometrics(&has_bits);
          mobile_enable_biometrics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mobile_prevent_screen_capture = 7 [json_name = "mobilePreventScreenCapture"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_mobile_prevent_screen_capture(&has_bits);
          mobile_prevent_screen_capture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mobile_jailbreak_protection = 8 [json_name = "mobileJailbreakProtection"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_mobile_jailbreak_protection(&has_bits);
          mobile_jailbreak_protection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigNativeApp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigNativeApp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string app_custom_url_schemes = 1 [json_name = "appCustomUrlSchemes"];
  for (int i = 0, n = this->_internal_app_custom_url_schemes_size(); i < n; i++) {
    const auto& s = this->_internal_app_custom_url_schemes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigNativeApp.app_custom_url_schemes");
    target = stream->WriteString(1, s, target);
  }

  // optional string app_download_link = 2 [json_name = "appDownloadLink"];
  if (_internal_has_app_download_link()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_download_link().data(), static_cast<int>(this->_internal_app_download_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigNativeApp.app_download_link");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_download_link(), target);
  }

  // optional string android_app_download_link = 3 [json_name = "androidAppDownloadLink"];
  if (_internal_has_android_app_download_link()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_android_app_download_link().data(), static_cast<int>(this->_internal_android_app_download_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigNativeApp.android_app_download_link");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_android_app_download_link(), target);
  }

  // optional string ios_app_download_link = 4 [json_name = "iosAppDownloadLink"];
  if (_internal_has_ios_app_download_link()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ios_app_download_link().data(), static_cast<int>(this->_internal_ios_app_download_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigNativeApp.ios_app_download_link");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ios_app_download_link(), target);
  }

  // optional bool mobile_external_browser = 5 [json_name = "mobileExternalBrowser"];
  if (_internal_has_mobile_external_browser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_mobile_external_browser(), target);
  }

  // optional bool mobile_enable_biometrics = 6 [json_name = "mobileEnableBiometrics"];
  if (_internal_has_mobile_enable_biometrics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_mobile_enable_biometrics(), target);
  }

  // optional bool mobile_prevent_screen_capture = 7 [json_name = "mobilePreventScreenCapture"];
  if (_internal_has_mobile_prevent_screen_capture()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_mobile_prevent_screen_capture(), target);
  }

  // optional bool mobile_jailbreak_protection = 8 [json_name = "mobileJailbreakProtection"];
  if (_internal_has_mobile_jailbreak_protection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_mobile_jailbreak_protection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigNativeApp)
  return target;
}

size_t ConfigNativeApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigNativeApp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string app_custom_url_schemes = 1 [json_name = "appCustomUrlSchemes"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(app_custom_url_schemes_.size());
  for (int i = 0, n = app_custom_url_schemes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      app_custom_url_schemes_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string app_download_link = 2 [json_name = "appDownloadLink"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_download_link());
    }

    // optional string android_app_download_link = 3 [json_name = "androidAppDownloadLink"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_android_app_download_link());
    }

    // optional string ios_app_download_link = 4 [json_name = "iosAppDownloadLink"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ios_app_download_link());
    }

    // optional bool mobile_external_browser = 5 [json_name = "mobileExternalBrowser"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool mobile_enable_biometrics = 6 [json_name = "mobileEnableBiometrics"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool mobile_prevent_screen_capture = 7 [json_name = "mobilePreventScreenCapture"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool mobile_jailbreak_protection = 8 [json_name = "mobileJailbreakProtection"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigNativeApp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigNativeApp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigNativeApp::GetClassData() const { return &_class_data_; }

void ConfigNativeApp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigNativeApp *>(to)->MergeFrom(
      static_cast<const ConfigNativeApp &>(from));
}


void ConfigNativeApp::MergeFrom(const ConfigNativeApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigNativeApp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  app_custom_url_schemes_.MergeFrom(from.app_custom_url_schemes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_app_download_link(from._internal_app_download_link());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_android_app_download_link(from._internal_android_app_download_link());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ios_app_download_link(from._internal_ios_app_download_link());
    }
    if (cached_has_bits & 0x00000008u) {
      mobile_external_browser_ = from.mobile_external_browser_;
    }
    if (cached_has_bits & 0x00000010u) {
      mobile_enable_biometrics_ = from.mobile_enable_biometrics_;
    }
    if (cached_has_bits & 0x00000020u) {
      mobile_prevent_screen_capture_ = from.mobile_prevent_screen_capture_;
    }
    if (cached_has_bits & 0x00000040u) {
      mobile_jailbreak_protection_ = from.mobile_jailbreak_protection_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigNativeApp::CopyFrom(const ConfigNativeApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigNativeApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigNativeApp::IsInitialized() const {
  return true;
}

void ConfigNativeApp::InternalSwap(ConfigNativeApp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  app_custom_url_schemes_.InternalSwap(&other->app_custom_url_schemes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_download_link_, lhs_arena,
      &other->app_download_link_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &android_app_download_link_, lhs_arena,
      &other->android_app_download_link_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ios_app_download_link_, lhs_arena,
      &other->ios_app_download_link_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigNativeApp, mobile_jailbreak_protection_)
      + sizeof(ConfigNativeApp::mobile_jailbreak_protection_)
      - PROTOBUF_FIELD_OFFSET(ConfigNativeApp, mobile_external_browser_)>(
          reinterpret_cast<char*>(&mobile_external_browser_),
          reinterpret_cast<char*>(&other->mobile_external_browser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigNativeApp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[17]);
}

// ===================================================================

class ConfigMeilisearch::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigMeilisearch>()._has_bits_);
  static void set_has_server_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_master_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_indexing(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_searching(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enable_autocomplete(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_request_timeout_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_index_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_search_cutoff_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_enable_typo_tolerance(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

ConfigMeilisearch::ConfigMeilisearch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigMeilisearch)
}
ConfigMeilisearch::ConfigMeilisearch(const ConfigMeilisearch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    server_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_server_url()) {
    server_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_url(), 
      GetArenaForAllocation());
  }
  master_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    master_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_master_key()) {
    master_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_master_key(), 
      GetArenaForAllocation());
  }
  index_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    index_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_index_prefix()) {
    index_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_index_prefix(), 
      GetArenaForAllocation());
  }
  ::memcpy(&enable_indexing_, &from.enable_indexing_,
    static_cast<size_t>(reinterpret_cast<char*>(&search_cutoff_ms_) -
    reinterpret_cast<char*>(&enable_indexing_)) + sizeof(search_cutoff_ms_));
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigMeilisearch)
}

inline void ConfigMeilisearch::SharedCtor() {
server_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  server_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
master_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  master_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
index_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  index_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_indexing_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&search_cutoff_ms_) -
    reinterpret_cast<char*>(&enable_indexing_)) + sizeof(search_cutoff_ms_));
}

ConfigMeilisearch::~ConfigMeilisearch() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigMeilisearch)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigMeilisearch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  server_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  master_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigMeilisearch::ArenaDtor(void* object) {
  ConfigMeilisearch* _this = reinterpret_cast< ConfigMeilisearch* >(object);
  (void)_this;
}
void ConfigMeilisearch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigMeilisearch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigMeilisearch::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigMeilisearch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      server_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      master_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      index_prefix_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&enable_indexing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&batch_size_) -
        reinterpret_cast<char*>(&enable_indexing_)) + sizeof(batch_size_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&request_timeout_seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&search_cutoff_ms_) -
        reinterpret_cast<char*>(&request_timeout_seconds_)) + sizeof(search_cutoff_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigMeilisearch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string server_url = 1 [json_name = "server_url"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_server_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigMeilisearch.server_url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string master_key = 2 [json_name = "masterKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_master_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigMeilisearch.master_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_indexing = 3 [json_name = "enableIndexing"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_enable_indexing(&has_bits);
          enable_indexing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_searching = 4 [json_name = "enableSearching"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_enable_searching(&has_bits);
          enable_searching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_autocomplete = 5 [json_name = "enableAutocomplete"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_enable_autocomplete(&has_bits);
          enable_autocomplete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 batch_size = 6 [json_name = "batchSize"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_batch_size(&has_bits);
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 request_timeout_seconds = 7 [json_name = "requestTimeoutSeconds"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_request_timeout_seconds(&has_bits);
          request_timeout_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string index_prefix = 8 [json_name = "indexPrefix"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_index_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigMeilisearch.index_prefix"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 search_cutoff_ms = 9 [json_name = "searchCutoffMs"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_search_cutoff_ms(&has_bits);
          search_cutoff_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_typo_tolerance = 10 [json_name = "enableTypoTolerance"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_enable_typo_tolerance(&has_bits);
          enable_typo_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigMeilisearch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigMeilisearch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string server_url = 1 [json_name = "server_url"];
  if (_internal_has_server_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_url().data(), static_cast<int>(this->_internal_server_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigMeilisearch.server_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_server_url(), target);
  }

  // optional string master_key = 2 [json_name = "masterKey"];
  if (_internal_has_master_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_master_key().data(), static_cast<int>(this->_internal_master_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigMeilisearch.master_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_master_key(), target);
  }

  // optional bool enable_indexing = 3 [json_name = "enableIndexing"];
  if (_internal_has_enable_indexing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_indexing(), target);
  }

  // optional bool enable_searching = 4 [json_name = "enableSearching"];
  if (_internal_has_enable_searching()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_searching(), target);
  }

  // optional bool enable_autocomplete = 5 [json_name = "enableAutocomplete"];
  if (_internal_has_enable_autocomplete()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_autocomplete(), target);
  }

  // optional int32 batch_size = 6 [json_name = "batchSize"];
  if (_internal_has_batch_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_batch_size(), target);
  }

  // optional int32 request_timeout_seconds = 7 [json_name = "requestTimeoutSeconds"];
  if (_internal_has_request_timeout_seconds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_request_timeout_seconds(), target);
  }

  // optional string index_prefix = 8 [json_name = "indexPrefix"];
  if (_internal_has_index_prefix()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_prefix().data(), static_cast<int>(this->_internal_index_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigMeilisearch.index_prefix");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_index_prefix(), target);
  }

  // optional int32 search_cutoff_ms = 9 [json_name = "searchCutoffMs"];
  if (_internal_has_search_cutoff_ms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_search_cutoff_ms(), target);
  }

  // optional bool enable_typo_tolerance = 10 [json_name = "enableTypoTolerance"];
  if (_internal_has_enable_typo_tolerance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_enable_typo_tolerance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigMeilisearch)
  return target;
}

size_t ConfigMeilisearch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigMeilisearch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string server_url = 1 [json_name = "server_url"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_url());
    }

    // optional string master_key = 2 [json_name = "masterKey"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_master_key());
    }

    // optional string index_prefix = 8 [json_name = "indexPrefix"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_index_prefix());
    }

    // optional bool enable_indexing = 3 [json_name = "enableIndexing"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool enable_searching = 4 [json_name = "enableSearching"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enable_autocomplete = 5 [json_name = "enableAutocomplete"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool enable_typo_tolerance = 10 [json_name = "enableTypoTolerance"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 batch_size = 6 [json_name = "batchSize"];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_batch_size());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 request_timeout_seconds = 7 [json_name = "requestTimeoutSeconds"];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_request_timeout_seconds());
    }

    // optional int32 search_cutoff_ms = 9 [json_name = "searchCutoffMs"];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_search_cutoff_ms());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigMeilisearch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigMeilisearch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigMeilisearch::GetClassData() const { return &_class_data_; }

void ConfigMeilisearch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigMeilisearch *>(to)->MergeFrom(
      static_cast<const ConfigMeilisearch &>(from));
}


void ConfigMeilisearch::MergeFrom(const ConfigMeilisearch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigMeilisearch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_server_url(from._internal_server_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_master_key(from._internal_master_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_index_prefix(from._internal_index_prefix());
    }
    if (cached_has_bits & 0x00000008u) {
      enable_indexing_ = from.enable_indexing_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_searching_ = from.enable_searching_;
    }
    if (cached_has_bits & 0x00000020u) {
      enable_autocomplete_ = from.enable_autocomplete_;
    }
    if (cached_has_bits & 0x00000040u) {
      enable_typo_tolerance_ = from.enable_typo_tolerance_;
    }
    if (cached_has_bits & 0x00000080u) {
      batch_size_ = from.batch_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      request_timeout_seconds_ = from.request_timeout_seconds_;
    }
    if (cached_has_bits & 0x00000200u) {
      search_cutoff_ms_ = from.search_cutoff_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigMeilisearch::CopyFrom(const ConfigMeilisearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigMeilisearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigMeilisearch::IsInitialized() const {
  return true;
}

void ConfigMeilisearch::InternalSwap(ConfigMeilisearch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &server_url_, lhs_arena,
      &other->server_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &master_key_, lhs_arena,
      &other->master_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &index_prefix_, lhs_arena,
      &other->index_prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, search_cutoff_ms_)
      + sizeof(ConfigMeilisearch::search_cutoff_ms_)
      - PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, enable_indexing_)>(
          reinterpret_cast<char*>(&enable_indexing_),
          reinterpret_cast<char*>(&other->enable_indexing_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigMeilisearch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[18]);
}

// ===================================================================

class ConfigBleve::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigBleve>()._has_bits_);
  static void set_has_index_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_indexing(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_searching(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_autocomplete(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bulk_indexing_time_window_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ConfigBleve::ConfigBleve(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigBleve)
}
ConfigBleve::ConfigBleve(const ConfigBleve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    index_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_index_dir()) {
    index_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_index_dir(), 
      GetArenaForAllocation());
  }
  ::memcpy(&enable_indexing_, &from.enable_indexing_,
    static_cast<size_t>(reinterpret_cast<char*>(&batch_size_) -
    reinterpret_cast<char*>(&enable_indexing_)) + sizeof(batch_size_));
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigBleve)
}

inline void ConfigBleve::SharedCtor() {
index_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  index_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_indexing_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&batch_size_) -
    reinterpret_cast<char*>(&enable_indexing_)) + sizeof(batch_size_));
}

ConfigBleve::~ConfigBleve() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigBleve)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigBleve::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  index_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigBleve::ArenaDtor(void* object) {
  ConfigBleve* _this = reinterpret_cast< ConfigBleve* >(object);
  (void)_this;
}
void ConfigBleve::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigBleve::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigBleve::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigBleve)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    index_dir_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&enable_indexing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&batch_size_) -
        reinterpret_cast<char*>(&enable_indexing_)) + sizeof(batch_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigBleve::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string index_dir = 1 [json_name = "indexDir"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_index_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigBleve.index_dir"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_indexing = 2 [json_name = "enableIndexing"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enable_indexing(&has_bits);
          enable_indexing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_searching = 3 [json_name = "enableSearching"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_enable_searching(&has_bits);
          enable_searching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_autocomplete = 4 [json_name = "enableAutocomplete"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_enable_autocomplete(&has_bits);
          enable_autocomplete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bulk_indexing_time_window_seconds = 5 [json_name = "bulkIndexingTimeWindowSeconds"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_bulk_indexing_time_window_seconds(&has_bits);
          bulk_indexing_time_window_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 batch_size = 6 [json_name = "batchSize"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_batch_size(&has_bits);
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigBleve::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigBleve)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string index_dir = 1 [json_name = "indexDir"];
  if (_internal_has_index_dir()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_dir().data(), static_cast<int>(this->_internal_index_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigBleve.index_dir");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_index_dir(), target);
  }

  // optional bool enable_indexing = 2 [json_name = "enableIndexing"];
  if (_internal_has_enable_indexing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_indexing(), target);
  }

  // optional bool enable_searching = 3 [json_name = "enableSearching"];
  if (_internal_has_enable_searching()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_searching(), target);
  }

  // optional bool enable_autocomplete = 4 [json_name = "enableAutocomplete"];
  if (_internal_has_enable_autocomplete()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_autocomplete(), target);
  }

  // optional int32 bulk_indexing_time_window_seconds = 5 [json_name = "bulkIndexingTimeWindowSeconds"];
  if (_internal_has_bulk_indexing_time_window_seconds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_bulk_indexing_time_window_seconds(), target);
  }

  // optional int32 batch_size = 6 [json_name = "batchSize"];
  if (_internal_has_batch_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_batch_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigBleve)
  return target;
}

size_t ConfigBleve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigBleve)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string index_dir = 1 [json_name = "indexDir"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_index_dir());
    }

    // optional bool enable_indexing = 2 [json_name = "enableIndexing"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool enable_searching = 3 [json_name = "enableSearching"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool enable_autocomplete = 4 [json_name = "enableAutocomplete"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 bulk_indexing_time_window_seconds = 5 [json_name = "bulkIndexingTimeWindowSeconds"];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bulk_indexing_time_window_seconds());
    }

    // optional int32 batch_size = 6 [json_name = "batchSize"];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_batch_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigBleve::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigBleve::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigBleve::GetClassData() const { return &_class_data_; }

void ConfigBleve::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigBleve *>(to)->MergeFrom(
      static_cast<const ConfigBleve &>(from));
}


void ConfigBleve::MergeFrom(const ConfigBleve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigBleve)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_index_dir(from._internal_index_dir());
    }
    if (cached_has_bits & 0x00000002u) {
      enable_indexing_ = from.enable_indexing_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_searching_ = from.enable_searching_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_autocomplete_ = from.enable_autocomplete_;
    }
    if (cached_has_bits & 0x00000010u) {
      bulk_indexing_time_window_seconds_ = from.bulk_indexing_time_window_seconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      batch_size_ = from.batch_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigBleve::CopyFrom(const ConfigBleve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigBleve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigBleve::IsInitialized() const {
  return true;
}

void ConfigBleve::InternalSwap(ConfigBleve* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &index_dir_, lhs_arena,
      &other->index_dir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigBleve, batch_size_)
      + sizeof(ConfigBleve::batch_size_)
      - PROTOBUF_FIELD_OFFSET(ConfigBleve, enable_indexing_)>(
          reinterpret_cast<char*>(&enable_indexing_),
          reinterpret_cast<char*>(&other->enable_indexing_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigBleve::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[19]);
}

// ===================================================================

class ConfigDataRetention::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigDataRetention>()._has_bits_);
  static void set_has_enable_message_deletion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_file_deletion(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_boards_deletion(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_message_retention_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_file_retention_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_boards_retention_days(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_deletion_job_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_time_between_batches_milliseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_retention_ids_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

ConfigDataRetention::ConfigDataRetention(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigDataRetention)
}
ConfigDataRetention::ConfigDataRetention(const ConfigDataRetention& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deletion_job_start_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    deletion_job_start_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_deletion_job_start_time()) {
    deletion_job_start_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deletion_job_start_time(), 
      GetArenaForAllocation());
  }
  ::memcpy(&enable_message_deletion_, &from.enable_message_deletion_,
    static_cast<size_t>(reinterpret_cast<char*>(&retention_ids_batch_size_) -
    reinterpret_cast<char*>(&enable_message_deletion_)) + sizeof(retention_ids_batch_size_));
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigDataRetention)
}

inline void ConfigDataRetention::SharedCtor() {
deletion_job_start_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  deletion_job_start_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_message_deletion_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&retention_ids_batch_size_) -
    reinterpret_cast<char*>(&enable_message_deletion_)) + sizeof(retention_ids_batch_size_));
}

ConfigDataRetention::~ConfigDataRetention() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigDataRetention)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigDataRetention::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  deletion_job_start_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigDataRetention::ArenaDtor(void* object) {
  ConfigDataRetention* _this = reinterpret_cast< ConfigDataRetention* >(object);
  (void)_this;
}
void ConfigDataRetention::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigDataRetention::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigDataRetention::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigDataRetention)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    deletion_job_start_time_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&enable_message_deletion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&batch_size_) -
        reinterpret_cast<char*>(&enable_message_deletion_)) + sizeof(batch_size_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&time_between_batches_milliseconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&retention_ids_batch_size_) -
        reinterpret_cast<char*>(&time_between_batches_milliseconds_)) + sizeof(retention_ids_batch_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigDataRetention::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enable_message_deletion = 1 [json_name = "enableMessageDeletion"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enable_message_deletion(&has_bits);
          enable_message_deletion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_file_deletion = 2 [json_name = "enableFileDeletion"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enable_file_deletion(&has_bits);
          enable_file_deletion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_boards_deletion = 3 [json_name = "enableBoardsDeletion"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_enable_boards_deletion(&has_bits);
          enable_boards_deletion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 message_retention_hours = 4 [json_name = "messageRetentionHours"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_message_retention_hours(&has_bits);
          message_retention_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 file_retention_hours = 5 [json_name = "fileRetentionHours"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_file_retention_hours(&has_bits);
          file_retention_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 boards_retention_days = 6 [json_name = "boardsRetentionDays"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_boards_retention_days(&has_bits);
          boards_retention_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string deletion_job_start_time = 7 [json_name = "deletionJobStartTime"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_deletion_job_start_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigDataRetention.deletion_job_start_time"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 batch_size = 8 [json_name = "batchSize"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_batch_size(&has_bits);
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 time_between_batches_milliseconds = 9 [json_name = "timeBetweenBatchesMilliseconds"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_time_between_batches_milliseconds(&has_bits);
          time_between_batches_milliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 retention_ids_batch_size = 10 [json_name = "retentionIdsBatchSize"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_retention_ids_batch_size(&has_bits);
          retention_ids_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigDataRetention::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigDataRetention)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool enable_message_deletion = 1 [json_name = "enableMessageDeletion"];
  if (_internal_has_enable_message_deletion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_message_deletion(), target);
  }

  // optional bool enable_file_deletion = 2 [json_name = "enableFileDeletion"];
  if (_internal_has_enable_file_deletion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_file_deletion(), target);
  }

  // optional bool enable_boards_deletion = 3 [json_name = "enableBoardsDeletion"];
  if (_internal_has_enable_boards_deletion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_boards_deletion(), target);
  }

  // optional int32 message_retention_hours = 4 [json_name = "messageRetentionHours"];
  if (_internal_has_message_retention_hours()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_message_retention_hours(), target);
  }

  // optional int32 file_retention_hours = 5 [json_name = "fileRetentionHours"];
  if (_internal_has_file_retention_hours()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_file_retention_hours(), target);
  }

  // optional int32 boards_retention_days = 6 [json_name = "boardsRetentionDays"];
  if (_internal_has_boards_retention_days()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_boards_retention_days(), target);
  }

  // optional string deletion_job_start_time = 7 [json_name = "deletionJobStartTime"];
  if (_internal_has_deletion_job_start_time()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deletion_job_start_time().data(), static_cast<int>(this->_internal_deletion_job_start_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigDataRetention.deletion_job_start_time");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_deletion_job_start_time(), target);
  }

  // optional int32 batch_size = 8 [json_name = "batchSize"];
  if (_internal_has_batch_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_batch_size(), target);
  }

  // optional int32 time_between_batches_milliseconds = 9 [json_name = "timeBetweenBatchesMilliseconds"];
  if (_internal_has_time_between_batches_milliseconds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_time_between_batches_milliseconds(), target);
  }

  // optional int32 retention_ids_batch_size = 10 [json_name = "retentionIdsBatchSize"];
  if (_internal_has_retention_ids_batch_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_retention_ids_batch_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigDataRetention)
  return target;
}

size_t ConfigDataRetention::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigDataRetention)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string deletion_job_start_time = 7 [json_name = "deletionJobStartTime"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deletion_job_start_time());
    }

    // optional bool enable_message_deletion = 1 [json_name = "enableMessageDeletion"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool enable_file_deletion = 2 [json_name = "enableFileDeletion"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool enable_boards_deletion = 3 [json_name = "enableBoardsDeletion"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 message_retention_hours = 4 [json_name = "messageRetentionHours"];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_message_retention_hours());
    }

    // optional int32 file_retention_hours = 5 [json_name = "fileRetentionHours"];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_file_retention_hours());
    }

    // optional int32 boards_retention_days = 6 [json_name = "boardsRetentionDays"];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_boards_retention_days());
    }

    // optional int32 batch_size = 8 [json_name = "batchSize"];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_batch_size());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 time_between_batches_milliseconds = 9 [json_name = "timeBetweenBatchesMilliseconds"];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_time_between_batches_milliseconds());
    }

    // optional int32 retention_ids_batch_size = 10 [json_name = "retentionIdsBatchSize"];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_retention_ids_batch_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigDataRetention::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigDataRetention::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigDataRetention::GetClassData() const { return &_class_data_; }

void ConfigDataRetention::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigDataRetention *>(to)->MergeFrom(
      static_cast<const ConfigDataRetention &>(from));
}


void ConfigDataRetention::MergeFrom(const ConfigDataRetention& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigDataRetention)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_deletion_job_start_time(from._internal_deletion_job_start_time());
    }
    if (cached_has_bits & 0x00000002u) {
      enable_message_deletion_ = from.enable_message_deletion_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_file_deletion_ = from.enable_file_deletion_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_boards_deletion_ = from.enable_boards_deletion_;
    }
    if (cached_has_bits & 0x00000010u) {
      message_retention_hours_ = from.message_retention_hours_;
    }
    if (cached_has_bits & 0x00000020u) {
      file_retention_hours_ = from.file_retention_hours_;
    }
    if (cached_has_bits & 0x00000040u) {
      boards_retention_days_ = from.boards_retention_days_;
    }
    if (cached_has_bits & 0x00000080u) {
      batch_size_ = from.batch_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      time_between_batches_milliseconds_ = from.time_between_batches_milliseconds_;
    }
    if (cached_has_bits & 0x00000200u) {
      retention_ids_batch_size_ = from.retention_ids_batch_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigDataRetention::CopyFrom(const ConfigDataRetention& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigDataRetention)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigDataRetention::IsInitialized() const {
  return true;
}

void ConfigDataRetention::InternalSwap(ConfigDataRetention* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deletion_job_start_time_, lhs_arena,
      &other->deletion_job_start_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigDataRetention, retention_ids_batch_size_)
      + sizeof(ConfigDataRetention::retention_ids_batch_size_)
      - PROTOBUF_FIELD_OFFSET(ConfigDataRetention, enable_message_deletion_)>(
          reinterpret_cast<char*>(&enable_message_deletion_),
          reinterpret_cast<char*>(&other->enable_message_deletion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigDataRetention::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[20]);
}

// ===================================================================

class ConfigImageProxy::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigImageProxy>()._has_bits_);
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_image_proxy_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_remote_image_proxy_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_remote_image_proxy_options(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ConfigImageProxy::ConfigImageProxy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigImageProxy)
}
ConfigImageProxy::ConfigImageProxy(const ConfigImageProxy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_proxy_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_proxy_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_image_proxy_type()) {
    image_proxy_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image_proxy_type(), 
      GetArenaForAllocation());
  }
  remote_image_proxy_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    remote_image_proxy_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_remote_image_proxy_url()) {
    remote_image_proxy_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_image_proxy_url(), 
      GetArenaForAllocation());
  }
  remote_image_proxy_options_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    remote_image_proxy_options_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_remote_image_proxy_options()) {
    remote_image_proxy_options_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_image_proxy_options(), 
      GetArenaForAllocation());
  }
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigImageProxy)
}

inline void ConfigImageProxy::SharedCtor() {
image_proxy_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_proxy_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
remote_image_proxy_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  remote_image_proxy_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
remote_image_proxy_options_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  remote_image_proxy_options_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
enable_ = false;
}

ConfigImageProxy::~ConfigImageProxy() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigImageProxy)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigImageProxy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  image_proxy_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_image_proxy_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_image_proxy_options_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigImageProxy::ArenaDtor(void* object) {
  ConfigImageProxy* _this = reinterpret_cast< ConfigImageProxy* >(object);
  (void)_this;
}
void ConfigImageProxy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigImageProxy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigImageProxy::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigImageProxy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      image_proxy_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      remote_image_proxy_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      remote_image_proxy_options_.ClearNonDefaultToEmpty();
    }
  }
  enable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigImageProxy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enable = 1 [json_name = "enable"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string image_proxy_type = 2 [json_name = "imageProxyType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_image_proxy_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigImageProxy.image_proxy_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string remote_image_proxy_url = 3 [json_name = "remoteImageProxyUrl"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_remote_image_proxy_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigImageProxy.remote_image_proxy_url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string remote_image_proxy_options = 4 [json_name = "remoteImageProxyOptions"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_remote_image_proxy_options();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigImageProxy.remote_image_proxy_options"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigImageProxy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigImageProxy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool enable = 1 [json_name = "enable"];
  if (_internal_has_enable()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // optional string image_proxy_type = 2 [json_name = "imageProxyType"];
  if (_internal_has_image_proxy_type()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_proxy_type().data(), static_cast<int>(this->_internal_image_proxy_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigImageProxy.image_proxy_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_image_proxy_type(), target);
  }

  // optional string remote_image_proxy_url = 3 [json_name = "remoteImageProxyUrl"];
  if (_internal_has_remote_image_proxy_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_image_proxy_url().data(), static_cast<int>(this->_internal_remote_image_proxy_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigImageProxy.remote_image_proxy_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_remote_image_proxy_url(), target);
  }

  // optional string remote_image_proxy_options = 4 [json_name = "remoteImageProxyOptions"];
  if (_internal_has_remote_image_proxy_options()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_image_proxy_options().data(), static_cast<int>(this->_internal_remote_image_proxy_options().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigImageProxy.remote_image_proxy_options");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_remote_image_proxy_options(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigImageProxy)
  return target;
}

size_t ConfigImageProxy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigImageProxy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string image_proxy_type = 2 [json_name = "imageProxyType"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image_proxy_type());
    }

    // optional string remote_image_proxy_url = 3 [json_name = "remoteImageProxyUrl"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_remote_image_proxy_url());
    }

    // optional string remote_image_proxy_options = 4 [json_name = "remoteImageProxyOptions"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_remote_image_proxy_options());
    }

    // optional bool enable = 1 [json_name = "enable"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigImageProxy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigImageProxy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigImageProxy::GetClassData() const { return &_class_data_; }

void ConfigImageProxy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigImageProxy *>(to)->MergeFrom(
      static_cast<const ConfigImageProxy &>(from));
}


void ConfigImageProxy::MergeFrom(const ConfigImageProxy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigImageProxy)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_image_proxy_type(from._internal_image_proxy_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_remote_image_proxy_url(from._internal_remote_image_proxy_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_remote_image_proxy_options(from._internal_remote_image_proxy_options());
    }
    if (cached_has_bits & 0x00000008u) {
      enable_ = from.enable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigImageProxy::CopyFrom(const ConfigImageProxy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigImageProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigImageProxy::IsInitialized() const {
  return true;
}

void ConfigImageProxy::InternalSwap(ConfigImageProxy* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_proxy_type_, lhs_arena,
      &other->image_proxy_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &remote_image_proxy_url_, lhs_arena,
      &other->remote_image_proxy_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &remote_image_proxy_options_, lhs_arena,
      &other->remote_image_proxy_options_, rhs_arena
  );
  swap(enable_, other->enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigImageProxy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[21]);
}

// ===================================================================

class Config::_Internal {
 public:
  static const ::common::v1::ConfigMain& main(const Config* msg);
  static const ::common::v1::ConfigServices& services(const Config* msg);
  static const ::common::v1::ConfigSecurity& security(const Config* msg);
  static const ::common::v1::CacheConfig& cache(const Config* msg);
  static const ::common::v1::ConfigMetrics& metrics(const Config* msg);
  static const ::common::v1::ConfigSSO& sso(const Config* msg);
  static const ::common::v1::ConfigSql& sql(const Config* msg);
  static const ::common::v1::ConfigPassword& password(const Config* msg);
  static const ::common::v1::ConfigFile& file(const Config* msg);
  static const ::common::v1::ConfigEmail& email(const Config* msg);
  static const ::common::v1::ConfigRateLimit& rate_limit(const Config* msg);
  static const ::common::v1::ConfigPrivacy& privacy(const Config* msg);
  static const ::common::v1::ConfigSupport& support(const Config* msg);
  static const ::common::v1::ConfigLocalization& localization(const Config* msg);
  static const ::common::v1::ConfigLdap& ldap(const Config* msg);
  static const ::common::v1::ConfigSaml& saml(const Config* msg);
  static const ::common::v1::ConfigNativeApp& native_app(const Config* msg);
  static const ::common::v1::ConfigMeilisearch& meilisearch(const Config* msg);
  static const ::common::v1::ConfigBleve& bleve(const Config* msg);
  static const ::common::v1::ConfigDataRetention& data_retention(const Config* msg);
  static const ::common::v1::ConfigImageProxy& image_proxy(const Config* msg);
};

const ::common::v1::ConfigMain&
Config::_Internal::main(const Config* msg) {
  return *msg->main_;
}
const ::common::v1::ConfigServices&
Config::_Internal::services(const Config* msg) {
  return *msg->services_;
}
const ::common::v1::ConfigSecurity&
Config::_Internal::security(const Config* msg) {
  return *msg->security_;
}
const ::common::v1::CacheConfig&
Config::_Internal::cache(const Config* msg) {
  return *msg->cache_;
}
const ::common::v1::ConfigMetrics&
Config::_Internal::metrics(const Config* msg) {
  return *msg->metrics_;
}
const ::common::v1::ConfigSSO&
Config::_Internal::sso(const Config* msg) {
  return *msg->sso_;
}
const ::common::v1::ConfigSql&
Config::_Internal::sql(const Config* msg) {
  return *msg->sql_;
}
const ::common::v1::ConfigPassword&
Config::_Internal::password(const Config* msg) {
  return *msg->password_;
}
const ::common::v1::ConfigFile&
Config::_Internal::file(const Config* msg) {
  return *msg->file_;
}
const ::common::v1::ConfigEmail&
Config::_Internal::email(const Config* msg) {
  return *msg->email_;
}
const ::common::v1::ConfigRateLimit&
Config::_Internal::rate_limit(const Config* msg) {
  return *msg->rate_limit_;
}
const ::common::v1::ConfigPrivacy&
Config::_Internal::privacy(const Config* msg) {
  return *msg->privacy_;
}
const ::common::v1::ConfigSupport&
Config::_Internal::support(const Config* msg) {
  return *msg->support_;
}
const ::common::v1::ConfigLocalization&
Config::_Internal::localization(const Config* msg) {
  return *msg->localization_;
}
const ::common::v1::ConfigLdap&
Config::_Internal::ldap(const Config* msg) {
  return *msg->ldap_;
}
const ::common::v1::ConfigSaml&
Config::_Internal::saml(const Config* msg) {
  return *msg->saml_;
}
const ::common::v1::ConfigNativeApp&
Config::_Internal::native_app(const Config* msg) {
  return *msg->native_app_;
}
const ::common::v1::ConfigMeilisearch&
Config::_Internal::meilisearch(const Config* msg) {
  return *msg->meilisearch_;
}
const ::common::v1::ConfigBleve&
Config::_Internal::bleve(const Config* msg) {
  return *msg->bleve_;
}
const ::common::v1::ConfigDataRetention&
Config::_Internal::data_retention(const Config* msg) {
  return *msg->data_retention_;
}
const ::common::v1::ConfigImageProxy&
Config::_Internal::image_proxy(const Config* msg) {
  return *msg->image_proxy_;
}
Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_main()) {
    main_ = new ::common::v1::ConfigMain(*from.main_);
  } else {
    main_ = nullptr;
  }
  if (from._internal_has_services()) {
    services_ = new ::common::v1::ConfigServices(*from.services_);
  } else {
    services_ = nullptr;
  }
  if (from._internal_has_security()) {
    security_ = new ::common::v1::ConfigSecurity(*from.security_);
  } else {
    security_ = nullptr;
  }
  if (from._internal_has_cache()) {
    cache_ = new ::common::v1::CacheConfig(*from.cache_);
  } else {
    cache_ = nullptr;
  }
  if (from._internal_has_metrics()) {
    metrics_ = new ::common::v1::ConfigMetrics(*from.metrics_);
  } else {
    metrics_ = nullptr;
  }
  if (from._internal_has_sso()) {
    sso_ = new ::common::v1::ConfigSSO(*from.sso_);
  } else {
    sso_ = nullptr;
  }
  if (from._internal_has_sql()) {
    sql_ = new ::common::v1::ConfigSql(*from.sql_);
  } else {
    sql_ = nullptr;
  }
  if (from._internal_has_password()) {
    password_ = new ::common::v1::ConfigPassword(*from.password_);
  } else {
    password_ = nullptr;
  }
  if (from._internal_has_file()) {
    file_ = new ::common::v1::ConfigFile(*from.file_);
  } else {
    file_ = nullptr;
  }
  if (from._internal_has_email()) {
    email_ = new ::common::v1::ConfigEmail(*from.email_);
  } else {
    email_ = nullptr;
  }
  if (from._internal_has_rate_limit()) {
    rate_limit_ = new ::common::v1::ConfigRateLimit(*from.rate_limit_);
  } else {
    rate_limit_ = nullptr;
  }
  if (from._internal_has_privacy()) {
    privacy_ = new ::common::v1::ConfigPrivacy(*from.privacy_);
  } else {
    privacy_ = nullptr;
  }
  if (from._internal_has_support()) {
    support_ = new ::common::v1::ConfigSupport(*from.support_);
  } else {
    support_ = nullptr;
  }
  if (from._internal_has_localization()) {
    localization_ = new ::common::v1::ConfigLocalization(*from.localization_);
  } else {
    localization_ = nullptr;
  }
  if (from._internal_has_ldap()) {
    ldap_ = new ::common::v1::ConfigLdap(*from.ldap_);
  } else {
    ldap_ = nullptr;
  }
  if (from._internal_has_saml()) {
    saml_ = new ::common::v1::ConfigSaml(*from.saml_);
  } else {
    saml_ = nullptr;
  }
  if (from._internal_has_native_app()) {
    native_app_ = new ::common::v1::ConfigNativeApp(*from.native_app_);
  } else {
    native_app_ = nullptr;
  }
  if (from._internal_has_meilisearch()) {
    meilisearch_ = new ::common::v1::ConfigMeilisearch(*from.meilisearch_);
  } else {
    meilisearch_ = nullptr;
  }
  if (from._internal_has_bleve()) {
    bleve_ = new ::common::v1::ConfigBleve(*from.bleve_);
  } else {
    bleve_ = nullptr;
  }
  if (from._internal_has_data_retention()) {
    data_retention_ = new ::common::v1::ConfigDataRetention(*from.data_retention_);
  } else {
    data_retention_ = nullptr;
  }
  if (from._internal_has_image_proxy()) {
    image_proxy_ = new ::common::v1::ConfigImageProxy(*from.image_proxy_);
  } else {
    image_proxy_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:common.v1.Config)
}

inline void Config::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&main_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&image_proxy_) -
    reinterpret_cast<char*>(&main_)) + sizeof(image_proxy_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:common.v1.Config)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete main_;
  if (this != internal_default_instance()) delete services_;
  if (this != internal_default_instance()) delete security_;
  if (this != internal_default_instance()) delete cache_;
  if (this != internal_default_instance()) delete metrics_;
  if (this != internal_default_instance()) delete sso_;
  if (this != internal_default_instance()) delete sql_;
  if (this != internal_default_instance()) delete password_;
  if (this != internal_default_instance()) delete file_;
  if (this != internal_default_instance()) delete email_;
  if (this != internal_default_instance()) delete rate_limit_;
  if (this != internal_default_instance()) delete privacy_;
  if (this != internal_default_instance()) delete support_;
  if (this != internal_default_instance()) delete localization_;
  if (this != internal_default_instance()) delete ldap_;
  if (this != internal_default_instance()) delete saml_;
  if (this != internal_default_instance()) delete native_app_;
  if (this != internal_default_instance()) delete meilisearch_;
  if (this != internal_default_instance()) delete bleve_;
  if (this != internal_default_instance()) delete data_retention_;
  if (this != internal_default_instance()) delete image_proxy_;
}

void Config::ArenaDtor(void* object) {
  Config* _this = reinterpret_cast< Config* >(object);
  (void)_this;
}
void Config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.Config)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && main_ != nullptr) {
    delete main_;
  }
  main_ = nullptr;
  if (GetArenaForAllocation() == nullptr && services_ != nullptr) {
    delete services_;
  }
  services_ = nullptr;
  if (GetArenaForAllocation() == nullptr && security_ != nullptr) {
    delete security_;
  }
  security_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cache_ != nullptr) {
    delete cache_;
  }
  cache_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metrics_ != nullptr) {
    delete metrics_;
  }
  metrics_ = nullptr;
  if (GetArenaForAllocation() == nullptr && sso_ != nullptr) {
    delete sso_;
  }
  sso_ = nullptr;
  if (GetArenaForAllocation() == nullptr && sql_ != nullptr) {
    delete sql_;
  }
  sql_ = nullptr;
  if (GetArenaForAllocation() == nullptr && password_ != nullptr) {
    delete password_;
  }
  password_ = nullptr;
  if (GetArenaForAllocation() == nullptr && file_ != nullptr) {
    delete file_;
  }
  file_ = nullptr;
  if (GetArenaForAllocation() == nullptr && email_ != nullptr) {
    delete email_;
  }
  email_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rate_limit_ != nullptr) {
    delete rate_limit_;
  }
  rate_limit_ = nullptr;
  if (GetArenaForAllocation() == nullptr && privacy_ != nullptr) {
    delete privacy_;
  }
  privacy_ = nullptr;
  if (GetArenaForAllocation() == nullptr && support_ != nullptr) {
    delete support_;
  }
  support_ = nullptr;
  if (GetArenaForAllocation() == nullptr && localization_ != nullptr) {
    delete localization_;
  }
  localization_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ldap_ != nullptr) {
    delete ldap_;
  }
  ldap_ = nullptr;
  if (GetArenaForAllocation() == nullptr && saml_ != nullptr) {
    delete saml_;
  }
  saml_ = nullptr;
  if (GetArenaForAllocation() == nullptr && native_app_ != nullptr) {
    delete native_app_;
  }
  native_app_ = nullptr;
  if (GetArenaForAllocation() == nullptr && meilisearch_ != nullptr) {
    delete meilisearch_;
  }
  meilisearch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bleve_ != nullptr) {
    delete bleve_;
  }
  bleve_ = nullptr;
  if (GetArenaForAllocation() == nullptr && data_retention_ != nullptr) {
    delete data_retention_;
  }
  data_retention_ = nullptr;
  if (GetArenaForAllocation() == nullptr && image_proxy_ != nullptr) {
    delete image_proxy_;
  }
  image_proxy_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.v1.ConfigMain main = 1 [json_name = "main"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_main(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.ConfigServices services = 2 [json_name = "services"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_services(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.ConfigSecurity security = 3 [json_name = "security"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_security(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.CacheConfig cache = 4 [json_name = "cache"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cache(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.ConfigMetrics metrics = 5 [json_name = "metrics"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metrics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.ConfigSSO sso = 6 [json_name = "sso"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sso(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.ConfigSql sql = 7 [json_name = "sql"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sql(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.ConfigPassword password = 8 [json_name = "password"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_password(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.ConfigFile file = 9 [json_name = "file"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.ConfigEmail email = 10 [json_name = "email"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_email(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.ConfigRateLimit rate_limit = 11 [json_name = "rateLimit"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_rate_limit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.ConfigPrivacy privacy = 12 [json_name = "privacy"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_privacy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.ConfigSupport support = 13 [json_name = "support"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_support(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.ConfigLocalization localization = 14 [json_name = "localization"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_localization(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.ConfigLdap ldap = 15 [json_name = "ldap"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_ldap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.ConfigSaml saml = 16 [json_name = "saml"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_saml(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.ConfigNativeApp native_app = 17 [json_name = "nativeApp"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_native_app(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.ConfigMeilisearch meilisearch = 18 [json_name = "meilisearch"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_meilisearch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.ConfigBleve bleve = 19 [json_name = "bleve"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_bleve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.ConfigDataRetention data_retention = 20 [json_name = "dataRetention"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_retention(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.ConfigImageProxy image_proxy = 21 [json_name = "imageProxy"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_proxy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Config::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.Config)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.v1.ConfigMain main = 1 [json_name = "main"];
  if (this->_internal_has_main()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::main(this), target, stream);
  }

  // .common.v1.ConfigServices services = 2 [json_name = "services"];
  if (this->_internal_has_services()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::services(this), target, stream);
  }

  // .common.v1.ConfigSecurity security = 3 [json_name = "security"];
  if (this->_internal_has_security()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::security(this), target, stream);
  }

  // .common.v1.CacheConfig cache = 4 [json_name = "cache"];
  if (this->_internal_has_cache()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cache(this), target, stream);
  }

  // .common.v1.ConfigMetrics metrics = 5 [json_name = "metrics"];
  if (this->_internal_has_metrics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::metrics(this), target, stream);
  }

  // .common.v1.ConfigSSO sso = 6 [json_name = "sso"];
  if (this->_internal_has_sso()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::sso(this), target, stream);
  }

  // .common.v1.ConfigSql sql = 7 [json_name = "sql"];
  if (this->_internal_has_sql()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::sql(this), target, stream);
  }

  // .common.v1.ConfigPassword password = 8 [json_name = "password"];
  if (this->_internal_has_password()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::password(this), target, stream);
  }

  // .common.v1.ConfigFile file = 9 [json_name = "file"];
  if (this->_internal_has_file()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::file(this), target, stream);
  }

  // .common.v1.ConfigEmail email = 10 [json_name = "email"];
  if (this->_internal_has_email()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::email(this), target, stream);
  }

  // .common.v1.ConfigRateLimit rate_limit = 11 [json_name = "rateLimit"];
  if (this->_internal_has_rate_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::rate_limit(this), target, stream);
  }

  // .common.v1.ConfigPrivacy privacy = 12 [json_name = "privacy"];
  if (this->_internal_has_privacy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::privacy(this), target, stream);
  }

  // .common.v1.ConfigSupport support = 13 [json_name = "support"];
  if (this->_internal_has_support()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::support(this), target, stream);
  }

  // .common.v1.ConfigLocalization localization = 14 [json_name = "localization"];
  if (this->_internal_has_localization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::localization(this), target, stream);
  }

  // .common.v1.ConfigLdap ldap = 15 [json_name = "ldap"];
  if (this->_internal_has_ldap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::ldap(this), target, stream);
  }

  // .common.v1.ConfigSaml saml = 16 [json_name = "saml"];
  if (this->_internal_has_saml()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::saml(this), target, stream);
  }

  // .common.v1.ConfigNativeApp native_app = 17 [json_name = "nativeApp"];
  if (this->_internal_has_native_app()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::native_app(this), target, stream);
  }

  // .common.v1.ConfigMeilisearch meilisearch = 18 [json_name = "meilisearch"];
  if (this->_internal_has_meilisearch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::meilisearch(this), target, stream);
  }

  // .common.v1.ConfigBleve bleve = 19 [json_name = "bleve"];
  if (this->_internal_has_bleve()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::bleve(this), target, stream);
  }

  // .common.v1.ConfigDataRetention data_retention = 20 [json_name = "dataRetention"];
  if (this->_internal_has_data_retention()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::data_retention(this), target, stream);
  }

  // .common.v1.ConfigImageProxy image_proxy = 21 [json_name = "imageProxy"];
  if (this->_internal_has_image_proxy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::image_proxy(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.Config)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.v1.ConfigMain main = 1 [json_name = "main"];
  if (this->_internal_has_main()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *main_);
  }

  // .common.v1.ConfigServices services = 2 [json_name = "services"];
  if (this->_internal_has_services()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *services_);
  }

  // .common.v1.ConfigSecurity security = 3 [json_name = "security"];
  if (this->_internal_has_security()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *security_);
  }

  // .common.v1.CacheConfig cache = 4 [json_name = "cache"];
  if (this->_internal_has_cache()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cache_);
  }

  // .common.v1.ConfigMetrics metrics = 5 [json_name = "metrics"];
  if (this->_internal_has_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metrics_);
  }

  // .common.v1.ConfigSSO sso = 6 [json_name = "sso"];
  if (this->_internal_has_sso()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sso_);
  }

  // .common.v1.ConfigSql sql = 7 [json_name = "sql"];
  if (this->_internal_has_sql()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sql_);
  }

  // .common.v1.ConfigPassword password = 8 [json_name = "password"];
  if (this->_internal_has_password()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *password_);
  }

  // .common.v1.ConfigFile file = 9 [json_name = "file"];
  if (this->_internal_has_file()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *file_);
  }

  // .common.v1.ConfigEmail email = 10 [json_name = "email"];
  if (this->_internal_has_email()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *email_);
  }

  // .common.v1.ConfigRateLimit rate_limit = 11 [json_name = "rateLimit"];
  if (this->_internal_has_rate_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rate_limit_);
  }

  // .common.v1.ConfigPrivacy privacy = 12 [json_name = "privacy"];
  if (this->_internal_has_privacy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *privacy_);
  }

  // .common.v1.ConfigSupport support = 13 [json_name = "support"];
  if (this->_internal_has_support()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *support_);
  }

  // .common.v1.ConfigLocalization localization = 14 [json_name = "localization"];
  if (this->_internal_has_localization()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *localization_);
  }

  // .common.v1.ConfigLdap ldap = 15 [json_name = "ldap"];
  if (this->_internal_has_ldap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ldap_);
  }

  // .common.v1.ConfigSaml saml = 16 [json_name = "saml"];
  if (this->_internal_has_saml()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *saml_);
  }

  // .common.v1.ConfigNativeApp native_app = 17 [json_name = "nativeApp"];
  if (this->_internal_has_native_app()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *native_app_);
  }

  // .common.v1.ConfigMeilisearch meilisearch = 18 [json_name = "meilisearch"];
  if (this->_internal_has_meilisearch()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meilisearch_);
  }

  // .common.v1.ConfigBleve bleve = 19 [json_name = "bleve"];
  if (this->_internal_has_bleve()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bleve_);
  }

  // .common.v1.ConfigDataRetention data_retention = 20 [json_name = "dataRetention"];
  if (this->_internal_has_data_retention()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_retention_);
  }

  // .common.v1.ConfigImageProxy image_proxy = 21 [json_name = "imageProxy"];
  if (this->_internal_has_image_proxy()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_proxy_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Config::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Config::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Config::GetClassData() const { return &_class_data_; }

void Config::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Config *>(to)->MergeFrom(
      static_cast<const Config &>(from));
}


void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.Config)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_main()) {
    _internal_mutable_main()->::common::v1::ConfigMain::MergeFrom(from._internal_main());
  }
  if (from._internal_has_services()) {
    _internal_mutable_services()->::common::v1::ConfigServices::MergeFrom(from._internal_services());
  }
  if (from._internal_has_security()) {
    _internal_mutable_security()->::common::v1::ConfigSecurity::MergeFrom(from._internal_security());
  }
  if (from._internal_has_cache()) {
    _internal_mutable_cache()->::common::v1::CacheConfig::MergeFrom(from._internal_cache());
  }
  if (from._internal_has_metrics()) {
    _internal_mutable_metrics()->::common::v1::ConfigMetrics::MergeFrom(from._internal_metrics());
  }
  if (from._internal_has_sso()) {
    _internal_mutable_sso()->::common::v1::ConfigSSO::MergeFrom(from._internal_sso());
  }
  if (from._internal_has_sql()) {
    _internal_mutable_sql()->::common::v1::ConfigSql::MergeFrom(from._internal_sql());
  }
  if (from._internal_has_password()) {
    _internal_mutable_password()->::common::v1::ConfigPassword::MergeFrom(from._internal_password());
  }
  if (from._internal_has_file()) {
    _internal_mutable_file()->::common::v1::ConfigFile::MergeFrom(from._internal_file());
  }
  if (from._internal_has_email()) {
    _internal_mutable_email()->::common::v1::ConfigEmail::MergeFrom(from._internal_email());
  }
  if (from._internal_has_rate_limit()) {
    _internal_mutable_rate_limit()->::common::v1::ConfigRateLimit::MergeFrom(from._internal_rate_limit());
  }
  if (from._internal_has_privacy()) {
    _internal_mutable_privacy()->::common::v1::ConfigPrivacy::MergeFrom(from._internal_privacy());
  }
  if (from._internal_has_support()) {
    _internal_mutable_support()->::common::v1::ConfigSupport::MergeFrom(from._internal_support());
  }
  if (from._internal_has_localization()) {
    _internal_mutable_localization()->::common::v1::ConfigLocalization::MergeFrom(from._internal_localization());
  }
  if (from._internal_has_ldap()) {
    _internal_mutable_ldap()->::common::v1::ConfigLdap::MergeFrom(from._internal_ldap());
  }
  if (from._internal_has_saml()) {
    _internal_mutable_saml()->::common::v1::ConfigSaml::MergeFrom(from._internal_saml());
  }
  if (from._internal_has_native_app()) {
    _internal_mutable_native_app()->::common::v1::ConfigNativeApp::MergeFrom(from._internal_native_app());
  }
  if (from._internal_has_meilisearch()) {
    _internal_mutable_meilisearch()->::common::v1::ConfigMeilisearch::MergeFrom(from._internal_meilisearch());
  }
  if (from._internal_has_bleve()) {
    _internal_mutable_bleve()->::common::v1::ConfigBleve::MergeFrom(from._internal_bleve());
  }
  if (from._internal_has_data_retention()) {
    _internal_mutable_data_retention()->::common::v1::ConfigDataRetention::MergeFrom(from._internal_data_retention());
  }
  if (from._internal_has_image_proxy()) {
    _internal_mutable_image_proxy()->::common::v1::ConfigImageProxy::MergeFrom(from._internal_image_proxy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, image_proxy_)
      + sizeof(Config::image_proxy_)
      - PROTOBUF_FIELD_OFFSET(Config, main_)>(
          reinterpret_cast<char*>(&main_),
          reinterpret_cast<char*>(&other->main_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[22]);
}

// ===================================================================

class ConfigGetRequest::_Internal {
 public:
};

ConfigGetRequest::ConfigGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigGetRequest)
}
ConfigGetRequest::ConfigGetRequest(const ConfigGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigGetRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigGetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigGetRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ConfigGetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[23]);
}

// ===================================================================

class ConfigGetResponse::_Internal {
 public:
  static const ::common::v1::Config& data(const ConfigGetResponse* msg);
  static const ::shared::v1::AppError& error(const ConfigGetResponse* msg);
};

const ::common::v1::Config&
ConfigGetResponse::_Internal::data(const ConfigGetResponse* msg) {
  return *msg->response_.data_;
}
const ::shared::v1::AppError&
ConfigGetResponse::_Internal::error(const ConfigGetResponse* msg) {
  return *msg->response_.error_;
}
void ConfigGetResponse::set_allocated_data(::common::v1::Config* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::common::v1::Config>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    response_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigGetResponse.data)
}
void ConfigGetResponse::set_allocated_error(::shared::v1::AppError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigGetResponse.error)
}
void ConfigGetResponse::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.error_;
    }
    clear_has_response();
  }
}
ConfigGetResponse::ConfigGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigGetResponse)
}
ConfigGetResponse::ConfigGetResponse(const ConfigGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kData: {
      _internal_mutable_data()->::common::v1::Config::MergeFrom(from._internal_data());
      break;
    }
    case kError: {
      _internal_mutable_error()->::shared::v1::AppError::MergeFrom(from._internal_error());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigGetResponse)
}

inline void ConfigGetResponse::SharedCtor() {
clear_has_response();
}

ConfigGetResponse::~ConfigGetResponse() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigGetResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigGetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void ConfigGetResponse::ArenaDtor(void* object) {
  ConfigGetResponse* _this = reinterpret_cast< ConfigGetResponse* >(object);
  (void)_this;
}
void ConfigGetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigGetResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:common.v1.ConfigGetResponse)
  switch (response_case()) {
    case kData: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.data_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.error_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void ConfigGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigGetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.v1.Config data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .shared.v1.AppError error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigGetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigGetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.v1.Config data = 1 [json_name = "data"];
  if (_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // .shared.v1.AppError error = 2 [json_name = "error"];
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigGetResponse)
  return target;
}

size_t ConfigGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigGetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // .common.v1.Config data = 1 [json_name = "data"];
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.data_);
      break;
    }
    // .shared.v1.AppError error = 2 [json_name = "error"];
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.error_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigGetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigGetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigGetResponse::GetClassData() const { return &_class_data_; }

void ConfigGetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigGetResponse *>(to)->MergeFrom(
      static_cast<const ConfigGetResponse &>(from));
}


void ConfigGetResponse::MergeFrom(const ConfigGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kData: {
      _internal_mutable_data()->::common::v1::Config::MergeFrom(from._internal_data());
      break;
    }
    case kError: {
      _internal_mutable_error()->::shared::v1::AppError::MergeFrom(from._internal_error());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigGetResponse::CopyFrom(const ConfigGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigGetResponse::IsInitialized() const {
  return true;
}

void ConfigGetResponse::InternalSwap(ConfigGetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigGetResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[24]);
}

// ===================================================================

class ConfigUpdateRequest::_Internal {
 public:
  static const ::common::v1::Config& config(const ConfigUpdateRequest* msg);
};

const ::common::v1::Config&
ConfigUpdateRequest::_Internal::config(const ConfigUpdateRequest* msg) {
  return *msg->config_;
}
ConfigUpdateRequest::ConfigUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigUpdateRequest)
}
ConfigUpdateRequest::ConfigUpdateRequest(const ConfigUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::common::v1::Config(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigUpdateRequest)
}

inline void ConfigUpdateRequest::SharedCtor() {
config_ = nullptr;
}

ConfigUpdateRequest::~ConfigUpdateRequest() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigUpdateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete config_;
}

void ConfigUpdateRequest::ArenaDtor(void* object) {
  ConfigUpdateRequest* _this = reinterpret_cast< ConfigUpdateRequest* >(object);
  (void)_this;
}
void ConfigUpdateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigUpdateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigUpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.v1.Config config = 1 [json_name = "config"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigUpdateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigUpdateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.v1.Config config = 1 [json_name = "config"];
  if (this->_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigUpdateRequest)
  return target;
}

size_t ConfigUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigUpdateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.v1.Config config = 1 [json_name = "config"];
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigUpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigUpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigUpdateRequest::GetClassData() const { return &_class_data_; }

void ConfigUpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigUpdateRequest *>(to)->MergeFrom(
      static_cast<const ConfigUpdateRequest &>(from));
}


void ConfigUpdateRequest::MergeFrom(const ConfigUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_config()) {
    _internal_mutable_config()->::common::v1::Config::MergeFrom(from._internal_config());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigUpdateRequest::CopyFrom(const ConfigUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigUpdateRequest::IsInitialized() const {
  return true;
}

void ConfigUpdateRequest::InternalSwap(ConfigUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(config_, other->config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigUpdateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[25]);
}

// ===================================================================

class ConfigUpdateResponse::_Internal {
 public:
  static const ::common::v1::Config& data(const ConfigUpdateResponse* msg);
  static const ::shared::v1::AppError& error(const ConfigUpdateResponse* msg);
};

const ::common::v1::Config&
ConfigUpdateResponse::_Internal::data(const ConfigUpdateResponse* msg) {
  return *msg->response_.data_;
}
const ::shared::v1::AppError&
ConfigUpdateResponse::_Internal::error(const ConfigUpdateResponse* msg) {
  return *msg->response_.error_;
}
void ConfigUpdateResponse::set_allocated_data(::common::v1::Config* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::common::v1::Config>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    response_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigUpdateResponse.data)
}
void ConfigUpdateResponse::set_allocated_error(::shared::v1::AppError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigUpdateResponse.error)
}
void ConfigUpdateResponse::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.error_;
    }
    clear_has_response();
  }
}
ConfigUpdateResponse::ConfigUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigUpdateResponse)
}
ConfigUpdateResponse::ConfigUpdateResponse(const ConfigUpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kData: {
      _internal_mutable_data()->::common::v1::Config::MergeFrom(from._internal_data());
      break;
    }
    case kError: {
      _internal_mutable_error()->::shared::v1::AppError::MergeFrom(from._internal_error());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigUpdateResponse)
}

inline void ConfigUpdateResponse::SharedCtor() {
clear_has_response();
}

ConfigUpdateResponse::~ConfigUpdateResponse() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigUpdateResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigUpdateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void ConfigUpdateResponse::ArenaDtor(void* object) {
  ConfigUpdateResponse* _this = reinterpret_cast< ConfigUpdateResponse* >(object);
  (void)_this;
}
void ConfigUpdateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigUpdateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigUpdateResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:common.v1.ConfigUpdateResponse)
  switch (response_case()) {
    case kData: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.data_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.error_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void ConfigUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigUpdateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigUpdateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.v1.Config data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .shared.v1.AppError error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigUpdateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigUpdateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.v1.Config data = 1 [json_name = "data"];
  if (_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // .shared.v1.AppError error = 2 [json_name = "error"];
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigUpdateResponse)
  return target;
}

size_t ConfigUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigUpdateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // .common.v1.Config data = 1 [json_name = "data"];
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.data_);
      break;
    }
    // .shared.v1.AppError error = 2 [json_name = "error"];
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.error_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigUpdateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigUpdateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigUpdateResponse::GetClassData() const { return &_class_data_; }

void ConfigUpdateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigUpdateResponse *>(to)->MergeFrom(
      static_cast<const ConfigUpdateResponse &>(from));
}


void ConfigUpdateResponse::MergeFrom(const ConfigUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kData: {
      _internal_mutable_data()->::common::v1::Config::MergeFrom(from._internal_data());
      break;
    }
    case kError: {
      _internal_mutable_error()->::shared::v1::AppError::MergeFrom(from._internal_error());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigUpdateResponse::CopyFrom(const ConfigUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigUpdateResponse::IsInitialized() const {
  return true;
}

void ConfigUpdateResponse::InternalSwap(ConfigUpdateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigUpdateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[26]);
}

// ===================================================================

class ConfigListenerResponse::_Internal {
 public:
  static const ::common::v1::Config& data(const ConfigListenerResponse* msg);
  static const ::shared::v1::AppError& error(const ConfigListenerResponse* msg);
};

const ::common::v1::Config&
ConfigListenerResponse::_Internal::data(const ConfigListenerResponse* msg) {
  return *msg->response_.data_;
}
const ::shared::v1::AppError&
ConfigListenerResponse::_Internal::error(const ConfigListenerResponse* msg) {
  return *msg->response_.error_;
}
void ConfigListenerResponse::set_allocated_data(::common::v1::Config* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::common::v1::Config>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    response_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigListenerResponse.data)
}
void ConfigListenerResponse::set_allocated_error(::shared::v1::AppError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigListenerResponse.error)
}
void ConfigListenerResponse::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.error_;
    }
    clear_has_response();
  }
}
ConfigListenerResponse::ConfigListenerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigListenerResponse)
}
ConfigListenerResponse::ConfigListenerResponse(const ConfigListenerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kData: {
      _internal_mutable_data()->::common::v1::Config::MergeFrom(from._internal_data());
      break;
    }
    case kError: {
      _internal_mutable_error()->::shared::v1::AppError::MergeFrom(from._internal_error());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigListenerResponse)
}

inline void ConfigListenerResponse::SharedCtor() {
clear_has_response();
}

ConfigListenerResponse::~ConfigListenerResponse() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigListenerResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigListenerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void ConfigListenerResponse::ArenaDtor(void* object) {
  ConfigListenerResponse* _this = reinterpret_cast< ConfigListenerResponse* >(object);
  (void)_this;
}
void ConfigListenerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigListenerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigListenerResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:common.v1.ConfigListenerResponse)
  switch (response_case()) {
    case kData: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.data_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.error_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void ConfigListenerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigListenerResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigListenerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.v1.Config data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .shared.v1.AppError error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigListenerResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigListenerResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.v1.Config data = 1 [json_name = "data"];
  if (_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // .shared.v1.AppError error = 2 [json_name = "error"];
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigListenerResponse)
  return target;
}

size_t ConfigListenerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigListenerResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // .common.v1.Config data = 1 [json_name = "data"];
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.data_);
      break;
    }
    // .shared.v1.AppError error = 2 [json_name = "error"];
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.error_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigListenerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigListenerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigListenerResponse::GetClassData() const { return &_class_data_; }

void ConfigListenerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigListenerResponse *>(to)->MergeFrom(
      static_cast<const ConfigListenerResponse &>(from));
}


void ConfigListenerResponse::MergeFrom(const ConfigListenerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigListenerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kData: {
      _internal_mutable_data()->::common::v1::Config::MergeFrom(from._internal_data());
      break;
    }
    case kError: {
      _internal_mutable_error()->::shared::v1::AppError::MergeFrom(from._internal_error());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigListenerResponse::CopyFrom(const ConfigListenerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigListenerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigListenerResponse::IsInitialized() const {
  return true;
}

void ConfigListenerResponse::InternalSwap(ConfigListenerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigListenerResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[27]);
}

// ===================================================================

class ConfigListenerRequest::_Internal {
 public:
};

ConfigListenerRequest::ConfigListenerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigListenerRequest)
}
ConfigListenerRequest::ConfigListenerRequest(const ConfigListenerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigListenerRequest)
}

inline void ConfigListenerRequest::SharedCtor() {
client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConfigListenerRequest::~ConfigListenerRequest() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigListenerRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigListenerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigListenerRequest::ArenaDtor(void* object) {
  ConfigListenerRequest* _this = reinterpret_cast< ConfigListenerRequest* >(object);
  (void)_this;
}
void ConfigListenerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigListenerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigListenerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigListenerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigListenerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_id = 1 [json_name = "clientId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.v1.ConfigListenerRequest.client_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigListenerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigListenerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.v1.ConfigListenerRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigListenerRequest)
  return target;
}

size_t ConfigListenerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigListenerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigListenerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigListenerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigListenerRequest::GetClassData() const { return &_class_data_; }

void ConfigListenerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigListenerRequest *>(to)->MergeFrom(
      static_cast<const ConfigListenerRequest &>(from));
}


void ConfigListenerRequest::MergeFrom(const ConfigListenerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigListenerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_id().empty()) {
    _internal_set_client_id(from._internal_client_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigListenerRequest::CopyFrom(const ConfigListenerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigListenerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigListenerRequest::IsInitialized() const {
  return true;
}

void ConfigListenerRequest::InternalSwap(ConfigListenerRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &client_id_, lhs_arena,
      &other->client_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigListenerRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fv1_2fconfig_2eproto_getter, &descriptor_table_common_2fv1_2fconfig_2eproto_once,
      file_level_metadata_common_2fv1_2fconfig_2eproto[28]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::common::v1::ConfigMain* Arena::CreateMaybeMessage< ::common::v1::ConfigMain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigMain >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigServices* Arena::CreateMaybeMessage< ::common::v1::ConfigServices >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigServices >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigSecurity_RestrictedUsernamesEntry_DoNotUse* Arena::CreateMaybeMessage< ::common::v1::ConfigSecurity_RestrictedUsernamesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigSecurity_RestrictedUsernamesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigSecurity* Arena::CreateMaybeMessage< ::common::v1::ConfigSecurity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigSecurity >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::CacheConfig* Arena::CreateMaybeMessage< ::common::v1::CacheConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::CacheConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigMetrics* Arena::CreateMaybeMessage< ::common::v1::ConfigMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigSSO* Arena::CreateMaybeMessage< ::common::v1::ConfigSSO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigSSO >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigSql* Arena::CreateMaybeMessage< ::common::v1::ConfigSql >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigSql >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigPassword* Arena::CreateMaybeMessage< ::common::v1::ConfigPassword >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigPassword >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigFile* Arena::CreateMaybeMessage< ::common::v1::ConfigFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigFile >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigEmail* Arena::CreateMaybeMessage< ::common::v1::ConfigEmail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigEmail >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigRateLimit* Arena::CreateMaybeMessage< ::common::v1::ConfigRateLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigRateLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigPrivacy* Arena::CreateMaybeMessage< ::common::v1::ConfigPrivacy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigPrivacy >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigSupport* Arena::CreateMaybeMessage< ::common::v1::ConfigSupport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigSupport >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigLocalization* Arena::CreateMaybeMessage< ::common::v1::ConfigLocalization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigLocalization >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigLdap* Arena::CreateMaybeMessage< ::common::v1::ConfigLdap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigLdap >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigSaml* Arena::CreateMaybeMessage< ::common::v1::ConfigSaml >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigSaml >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigNativeApp* Arena::CreateMaybeMessage< ::common::v1::ConfigNativeApp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigNativeApp >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigMeilisearch* Arena::CreateMaybeMessage< ::common::v1::ConfigMeilisearch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigMeilisearch >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigBleve* Arena::CreateMaybeMessage< ::common::v1::ConfigBleve >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigBleve >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigDataRetention* Arena::CreateMaybeMessage< ::common::v1::ConfigDataRetention >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigDataRetention >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigImageProxy* Arena::CreateMaybeMessage< ::common::v1::ConfigImageProxy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigImageProxy >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::Config* Arena::CreateMaybeMessage< ::common::v1::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::Config >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigGetRequest* Arena::CreateMaybeMessage< ::common::v1::ConfigGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigGetResponse* Arena::CreateMaybeMessage< ::common::v1::ConfigGetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigUpdateRequest* Arena::CreateMaybeMessage< ::common::v1::ConfigUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigUpdateResponse* Arena::CreateMaybeMessage< ::common::v1::ConfigUpdateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigUpdateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigListenerResponse* Arena::CreateMaybeMessage< ::common::v1::ConfigListenerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigListenerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::common::v1::ConfigListenerRequest* Arena::CreateMaybeMessage< ::common::v1::ConfigListenerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::v1::ConfigListenerRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
