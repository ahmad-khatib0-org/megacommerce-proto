// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common/v1/config.proto
// Protobuf C++ Version: 6.31.1

#include "common/v1/config.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace common {
namespace v1 {

inline constexpr ConfigSupport::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        terms_of_service_link_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        privacy_policy_link_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        about_link_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        help_link_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        report_a_problem_link_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        forgot_password_link_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        support_email_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR ConfigSupport::ConfigSupport(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigSupport_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigSupportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigSupportDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigSupportDefaultTypeInternal() {}
  union {
    ConfigSupport _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigSupportDefaultTypeInternal _ConfigSupport_default_instance_;

inline constexpr ConfigSql::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        driver_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_source_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        at_rest_encrypt_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        max_idle_conns_{0},
        conn_max_lifetime_milliseconds_{0},
        conn_max_idle_time_milliseconds_{0},
        max_open_conns_{0},
        trace_{false},
        disable_database_search_{false},
        query_timeout_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ConfigSql::ConfigSql(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigSql_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigSqlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigSqlDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigSqlDefaultTypeInternal() {}
  union {
    ConfigSql _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigSqlDefaultTypeInternal _ConfigSql_default_instance_;

inline constexpr ConfigServices::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        common_service_grpc_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        user_service_grpc_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        products_service_grpc_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        jaeger_collector_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        common_service_prometheus_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        user_service_prometheus_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        products_service_prometheus_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        users_service_max_receive_message_size_bytes_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR ConfigServices::ConfigServices(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigServices_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigServicesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigServicesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigServicesDefaultTypeInternal() {}
  union {
    ConfigServices _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigServicesDefaultTypeInternal _ConfigServices_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::ConfigSecurity_RestrictedUsernamesEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::MapEntry(ConfigSecurity_RestrictedUsernamesEntry_DoNotUse_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct ConfigSecurity_RestrictedUsernamesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigSecurity_RestrictedUsernamesEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigSecurity_RestrictedUsernamesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ConfigSecurity_RestrictedUsernamesEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigSecurity_RestrictedUsernamesEntry_DoNotUseDefaultTypeInternal _ConfigSecurity_RestrictedUsernamesEntry_DoNotUse_default_instance_;

inline constexpr ConfigSaml::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        idp_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        idp_descriptor_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        idp_metadata_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        service_provider_identifier_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        assertion_consumer_service_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        signature_algorithm_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        canonical_algorithm_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        scoping_idp_provider_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        scoping_idp_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        idp_certificate_file_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        public_certificate_file_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        private_key_file_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_attribute_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        admin_attribute_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        first_name_attribute_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        last_name_attribute_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        email_attribute_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        username_attribute_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nickname_attribute_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        locale_attribute_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_attribute_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        login_button_text_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        login_button_color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        login_button_border_color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        login_button_text_color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        enable_{false},
        enable_sync_with_ldap_{false},
        enable_sync_with_ldap_include_auth_{false},
        ignore_guests_ldap_sync_{false},
        verify_{false},
        encrypt_{false},
        sign_request_{false},
        enable_admin_attribute_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ConfigSaml::ConfigSaml(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigSaml_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigSamlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigSamlDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigSamlDefaultTypeInternal() {}
  union {
    ConfigSaml _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigSamlDefaultTypeInternal _ConfigSaml_default_instance_;

inline constexpr ConfigSSO::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        secret_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        scope_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        auth_endpoint_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        token_endpoint_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        user_api_endpoint_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        discovery_endpoint_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        button_text_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        button_color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        enable_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ConfigSSO::ConfigSSO(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigSSO_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigSSODefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigSSODefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigSSODefaultTypeInternal() {}
  union {
    ConfigSSO _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigSSODefaultTypeInternal _ConfigSSO_default_instance_;

inline constexpr ConfigRateLimit::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        vary_by_header_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        per_sec_{0},
        max_burst_{0},
        memory_store_size_{0},
        enable_{false},
        vary_by_remote_addr_{false},
        vary_by_user_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ConfigRateLimit::ConfigRateLimit(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigRateLimit_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigRateLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigRateLimitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigRateLimitDefaultTypeInternal() {}
  union {
    ConfigRateLimit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigRateLimitDefaultTypeInternal _ConfigRateLimit_default_instance_;

inline constexpr ConfigPrivacy::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        show_email_address_{false},
        show_full_name_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ConfigPrivacy::ConfigPrivacy(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigPrivacy_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigPrivacyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigPrivacyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigPrivacyDefaultTypeInternal() {}
  union {
    ConfigPrivacy _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigPrivacyDefaultTypeInternal _ConfigPrivacy_default_instance_;

inline constexpr ConfigPassword::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        minimum_length_{0},
        maximum_length_{0},
        lowercase_{false},
        number_{false},
        uppercase_{false},
        symbol_{false},
        enable_forgot_link_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ConfigPassword::ConfigPassword(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigPassword_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigPasswordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigPasswordDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigPasswordDefaultTypeInternal() {}
  union {
    ConfigPassword _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigPasswordDefaultTypeInternal _ConfigPassword_default_instance_;

inline constexpr ConfigNativeApp::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        app_custom_url_schemes_{},
        app_download_link_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        android_app_download_link_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ios_app_download_link_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mobile_external_browser_{false},
        mobile_enable_biometrics_{false},
        mobile_prevent_screen_capture_{false},
        mobile_jailbreak_protection_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ConfigNativeApp::ConfigNativeApp(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigNativeApp_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigNativeAppDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigNativeAppDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigNativeAppDefaultTypeInternal() {}
  union {
    ConfigNativeApp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigNativeAppDefaultTypeInternal _ConfigNativeApp_default_instance_;

inline constexpr ConfigMetrics::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        client_side_user_ids_{},
        listen_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        block_profile_rate_{0},
        enable_{false},
        enable_client_metrics_{false},
        enable_notification_metrics_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ConfigMetrics::ConfigMetrics(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigMetrics_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigMetricsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigMetricsDefaultTypeInternal() {}
  union {
    ConfigMetrics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigMetricsDefaultTypeInternal _ConfigMetrics_default_instance_;

inline constexpr ConfigMeilisearch::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        server_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        master_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        index_prefix_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        enable_indexing_{false},
        enable_searching_{false},
        enable_autocomplete_{false},
        enable_typo_tolerance_{false},
        batch_size_{0},
        request_timeout_seconds_{0},
        search_cutoff_ms_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ConfigMeilisearch::ConfigMeilisearch(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigMeilisearch_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigMeilisearchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigMeilisearchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigMeilisearchDefaultTypeInternal() {}
  union {
    ConfigMeilisearch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigMeilisearchDefaultTypeInternal _ConfigMeilisearch_default_instance_;

inline constexpr ConfigMain::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        env_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        site_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        site_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        restrict_link_previews_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        enable_link_previews_{false},
        enable_client_performance_debugging_{false},
        enable_gif_picker_{false},
        enable_custom_emoji_{false},
        enable_emoji_picker_{false},
        enable_file_search_{false},
        enable_user_typing_messages_{false},
        enable_user_statuses_{false},
        time_between_user_typing_updates_milliseconds_{::int64_t{0}},
        enable_email_invitations_{false},
        enable_svgs_{false},
        allow_persistent_notifications_{false},
        allow_synced_drafts_{false},
        persistent_notification_interval_minutes_{0},
        persistent_notification_max_count_{0},
        persistent_notification_max_recipients_{0},
        feature_flag_sync_interval_seconds_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ConfigMain::ConfigMain(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigMain_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigMainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigMainDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigMainDefaultTypeInternal() {}
  union {
    ConfigMain _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigMainDefaultTypeInternal _ConfigMain_default_instance_;

inline constexpr ConfigLocalization::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        available_locales_{},
        default_server_locale_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        default_client_locale_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR ConfigLocalization::ConfigLocalization(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigLocalization_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigLocalizationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigLocalizationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigLocalizationDefaultTypeInternal() {}
  union {
    ConfigLocalization _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigLocalizationDefaultTypeInternal _ConfigLocalization_default_instance_;

inline constexpr ConfigListenerRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        client_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR ConfigListenerRequest::ConfigListenerRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigListenerRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigListenerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigListenerRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigListenerRequestDefaultTypeInternal() {}
  union {
    ConfigListenerRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigListenerRequestDefaultTypeInternal _ConfigListenerRequest_default_instance_;

inline constexpr ConfigLdap::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ldap_server_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        connection_security_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        base_dn_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        bind_username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        bind_password_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        user_filter_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        group_filter_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        admin_filter_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        group_display_name_attribute_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        group_id_attribute_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        first_name_attribute_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        last_name_attribute_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        email_attribute_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        username_attribute_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nickname_attribute_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_attribute_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_attribute_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        login_id_attribute_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        picture_attribute_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        login_field_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        login_button_color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        login_button_border_color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        login_button_text_color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ldap_port_{0},
        enable_{false},
        enable_sync_{false},
        enable_admin_filter_{false},
        maximum_login_attempts_{0},
        sync_interval_minutes_{0},
        query_timeout_{0},
        max_page_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ConfigLdap::ConfigLdap(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigLdap_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigLdapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigLdapDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigLdapDefaultTypeInternal() {}
  union {
    ConfigLdap _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigLdapDefaultTypeInternal _ConfigLdap_default_instance_;

inline constexpr ConfigImageProxy::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        image_proxy_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        remote_image_proxy_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        remote_image_proxy_options_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        enable_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ConfigImageProxy::ConfigImageProxy(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigImageProxy_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigImageProxyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigImageProxyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigImageProxyDefaultTypeInternal() {}
  union {
    ConfigImageProxy _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigImageProxyDefaultTypeInternal _ConfigImageProxy_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ConfigGetRequest::ConfigGetRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(ConfigGetRequest_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct ConfigGetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigGetRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigGetRequestDefaultTypeInternal() {}
  union {
    ConfigGetRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigGetRequestDefaultTypeInternal _ConfigGetRequest_default_instance_;

inline constexpr ConfigFile::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        driver_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        amazon_s3_access_key_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        amazon_s3_secret_access_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        amazon_s3_bucket_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        amazon_s3_path_prefix_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        amazon_s3_region_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        amazon_s3_endpoint_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        amazon_s3_storage_class_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        max_image_resolution_{::int64_t{0}},
        max_image_decoder_concurrency_{::int64_t{0}},
        enable_file_attachments_{false},
        enable_mobile_upload_{false},
        enable_mobile_download_{false},
        amazon_s3_ssl_{false},
        amazon_s3_sign_v2_{false},
        amazon_s3_sse_{false},
        amazon_s3_trace_{false},
        amazon_s3_request_timeout_milliseconds_{::int64_t{0}},
        amazon_s3_upload_part_size_bytes_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR ConfigFile::ConfigFile(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigFile_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigFileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigFileDefaultTypeInternal() {}
  union {
    ConfigFile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigFileDefaultTypeInternal _ConfigFile_default_instance_;

inline constexpr ConfigEmail::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        feedback_email_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reply_to_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        smtp_username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        smtp_password_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        smtp_server_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        smtp_port_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        connection_security_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        push_notification_server_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        push_notification_contents_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        email_notification_contents_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        login_button_color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        login_button_border_color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        login_button_text_color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        send_email_notifications_{false},
        require_email_verification_{false},
        enable_smtp_auth_{false},
        send_push_notifications_{false},
        smtp_server_timeout_{0},
        push_notification_buffer_{0},
        email_batching_buffer_size_{0},
        enable_email_batching_{false},
        skip_server_certificate_verification_{false},
        email_batching_interval_{0},
        rate_limiting_memory_size_{0},
        rate_limiting_per_hour_{0},
        rate_limiting_max_burst_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ConfigEmail::ConfigEmail(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigEmail_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigEmailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigEmailDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigEmailDefaultTypeInternal() {}
  union {
    ConfigEmail _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigEmailDefaultTypeInternal _ConfigEmail_default_instance_;

inline constexpr ConfigDataRetention::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        deletion_job_start_time_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        enable_message_deletion_{false},
        enable_file_deletion_{false},
        enable_boards_deletion_{false},
        message_retention_hours_{0},
        file_retention_hours_{0},
        boards_retention_days_{0},
        batch_size_{0},
        time_between_batches_milliseconds_{0},
        retention_ids_batch_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ConfigDataRetention::ConfigDataRetention(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigDataRetention_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigDataRetentionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDataRetentionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDataRetentionDefaultTypeInternal() {}
  union {
    ConfigDataRetention _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDataRetentionDefaultTypeInternal _ConfigDataRetention_default_instance_;

inline constexpr ConfigBleve::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        index_dir_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        enable_indexing_{false},
        enable_searching_{false},
        enable_autocomplete_{false},
        bulk_indexing_time_window_seconds_{0},
        batch_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ConfigBleve::ConfigBleve(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigBleve_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigBleveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigBleveDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigBleveDefaultTypeInternal() {}
  union {
    ConfigBleve _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigBleveDefaultTypeInternal _ConfigBleve_default_instance_;

inline constexpr CacheConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        cache_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        redis_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        redis_password_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        redis_cache_prefix_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        redis_db_{0},
        disable_client_cache_{false} {}

template <typename>
PROTOBUF_CONSTEXPR CacheConfig::CacheConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CacheConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CacheConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CacheConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CacheConfigDefaultTypeInternal() {}
  union {
    CacheConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CacheConfigDefaultTypeInternal _CacheConfig_default_instance_;

inline constexpr ConfigSecurity::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        restricted_usernames_{},
        allow_cors_from_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cors_exposed_headers_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        email_confirmation_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        maximum_login_attempts_{0},
        enable_insecure_outgoing_connections_{false},
        enable_multifactor_authentication_{false},
        enforce_multifactor_authentication_{false},
        enable_oauth_service_provider_{false},
        session_length_web_in_hours_{0},
        session_length_mobile_in_hours_{0},
        session_length_sso_in_hours_{0},
        enable_outgoing_oauth_connections_{false},
        terminate_sessions_on_password_change_{false},
        cors_allow_credentials_{false},
        cors_debug_{false},
        allow_cookies_for_subdomains_{false},
        session_cache_in_minutes_{0},
        token_confirmation_expiry_in_hours_{0u},
        token_password_reset_expiry_in_hours_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR ConfigSecurity::ConfigSecurity(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigSecurity_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigSecurityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigSecurityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigSecurityDefaultTypeInternal() {}
  union {
    ConfigSecurity _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigSecurityDefaultTypeInternal _ConfigSecurity_default_instance_;

inline constexpr Config::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        main_{nullptr},
        services_{nullptr},
        security_{nullptr},
        cache_{nullptr},
        metrics_{nullptr},
        sso_{nullptr},
        sql_{nullptr},
        password_{nullptr},
        file_{nullptr},
        email_{nullptr},
        rate_limit_{nullptr},
        privacy_{nullptr},
        support_{nullptr},
        localization_{nullptr},
        ldap_{nullptr},
        saml_{nullptr},
        native_app_{nullptr},
        meilisearch_{nullptr},
        bleve_{nullptr},
        data_retention_{nullptr},
        image_proxy_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Config::Config(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Config_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;

inline constexpr ConfigUpdateRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        config_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ConfigUpdateRequest::ConfigUpdateRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigUpdateRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigUpdateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigUpdateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigUpdateRequestDefaultTypeInternal() {}
  union {
    ConfigUpdateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigUpdateRequestDefaultTypeInternal _ConfigUpdateRequest_default_instance_;

inline constexpr ConfigUpdateResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : response_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR ConfigUpdateResponse::ConfigUpdateResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigUpdateResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigUpdateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigUpdateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigUpdateResponseDefaultTypeInternal() {}
  union {
    ConfigUpdateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigUpdateResponseDefaultTypeInternal _ConfigUpdateResponse_default_instance_;

inline constexpr ConfigListenerResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : response_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR ConfigListenerResponse::ConfigListenerResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigListenerResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigListenerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigListenerResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigListenerResponseDefaultTypeInternal() {}
  union {
    ConfigListenerResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigListenerResponseDefaultTypeInternal _ConfigListenerResponse_default_instance_;

inline constexpr ConfigGetResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : response_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR ConfigGetResponse::ConfigGetResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConfigGetResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigGetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigGetResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigGetResponseDefaultTypeInternal() {}
  union {
    ConfigGetResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigGetResponseDefaultTypeInternal _ConfigGetResponse_default_instance_;
}  // namespace v1
}  // namespace common
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_common_2fv1_2fconfig_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_common_2fv1_2fconfig_2eproto = nullptr;
const ::uint32_t
    TableStruct_common_2fv1_2fconfig_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _impl_._has_bits_),
        24, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _impl_.env_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _impl_.site_name_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _impl_.site_url_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _impl_.enable_link_previews_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _impl_.restrict_link_previews_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _impl_.enable_client_performance_debugging_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _impl_.enable_gif_picker_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _impl_.enable_custom_emoji_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _impl_.enable_emoji_picker_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _impl_.time_between_user_typing_updates_milliseconds_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _impl_.enable_file_search_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _impl_.enable_user_typing_messages_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _impl_.enable_user_statuses_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _impl_.enable_email_invitations_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _impl_.enable_svgs_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _impl_.allow_persistent_notifications_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _impl_.persistent_notification_interval_minutes_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _impl_.persistent_notification_max_count_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _impl_.persistent_notification_max_recipients_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _impl_.feature_flag_sync_interval_seconds_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMain, _impl_.allow_synced_drafts_),
        0,
        1,
        2,
        4,
        3,
        5,
        6,
        7,
        8,
        12,
        9,
        10,
        11,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        16,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigServices, _impl_._has_bits_),
        11, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigServices, _impl_.common_service_grpc_url_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigServices, _impl_.user_service_grpc_url_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigServices, _impl_.products_service_grpc_url_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigServices, _impl_.jaeger_collector_url_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigServices, _impl_.common_service_prometheus_url_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigServices, _impl_.user_service_prometheus_url_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigServices, _impl_.products_service_prometheus_url_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigServices, _impl_.users_service_max_receive_message_size_bytes_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity_RestrictedUsernamesEntry_DoNotUse, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity_RestrictedUsernamesEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity_RestrictedUsernamesEntry_DoNotUse, _impl_.value_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, _impl_._has_bits_),
        23, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, _impl_.restricted_usernames_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, _impl_.maximum_login_attempts_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, _impl_.enable_insecure_outgoing_connections_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, _impl_.enable_multifactor_authentication_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, _impl_.enforce_multifactor_authentication_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, _impl_.enable_oauth_service_provider_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, _impl_.enable_outgoing_oauth_connections_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, _impl_.terminate_sessions_on_password_change_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, _impl_.session_length_web_in_hours_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, _impl_.session_length_mobile_in_hours_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, _impl_.session_length_sso_in_hours_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, _impl_.allow_cors_from_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, _impl_.cors_exposed_headers_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, _impl_.cors_allow_credentials_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, _impl_.cors_debug_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, _impl_.allow_cookies_for_subdomains_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, _impl_.session_cache_in_minutes_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, _impl_.email_confirmation_url_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, _impl_.token_confirmation_expiry_in_hours_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSecurity, _impl_.token_password_reset_expiry_in_hours_),
        ~0u,
        3,
        4,
        5,
        6,
        7,
        11,
        12,
        8,
        9,
        10,
        0,
        1,
        13,
        14,
        15,
        16,
        2,
        17,
        18,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::CacheConfig, _impl_._has_bits_),
        9, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::CacheConfig, _impl_.cache_type_),
        PROTOBUF_FIELD_OFFSET(::common::v1::CacheConfig, _impl_.redis_address_),
        PROTOBUF_FIELD_OFFSET(::common::v1::CacheConfig, _impl_.redis_password_),
        PROTOBUF_FIELD_OFFSET(::common::v1::CacheConfig, _impl_.redis_db_),
        PROTOBUF_FIELD_OFFSET(::common::v1::CacheConfig, _impl_.redis_cache_prefix_),
        PROTOBUF_FIELD_OFFSET(::common::v1::CacheConfig, _impl_.disable_client_cache_),
        0,
        1,
        2,
        4,
        3,
        5,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMetrics, _impl_._has_bits_),
        9, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMetrics, _impl_.enable_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMetrics, _impl_.block_profile_rate_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMetrics, _impl_.listen_address_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMetrics, _impl_.enable_client_metrics_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMetrics, _impl_.enable_notification_metrics_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMetrics, _impl_.client_side_user_ids_),
        2,
        1,
        0,
        3,
        4,
        ~0u,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSSO, _impl_._has_bits_),
        13, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSSO, _impl_.enable_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSSO, _impl_.secret_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSSO, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSSO, _impl_.scope_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSSO, _impl_.auth_endpoint_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSSO, _impl_.token_endpoint_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSSO, _impl_.user_api_endpoint_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSSO, _impl_.discovery_endpoint_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSSO, _impl_.button_text_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSSO, _impl_.button_color_),
        9,
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSql, _impl_._has_bits_),
        13, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSql, _impl_.driver_name_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSql, _impl_.data_source_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSql, _impl_.max_idle_conns_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSql, _impl_.conn_max_lifetime_milliseconds_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSql, _impl_.conn_max_idle_time_milliseconds_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSql, _impl_.max_open_conns_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSql, _impl_.trace_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSql, _impl_.at_rest_encrypt_key_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSql, _impl_.query_timeout_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSql, _impl_.disable_database_search_),
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        2,
        9,
        8,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPassword, _impl_._has_bits_),
        10, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPassword, _impl_.minimum_length_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPassword, _impl_.maximum_length_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPassword, _impl_.lowercase_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPassword, _impl_.number_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPassword, _impl_.uppercase_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPassword, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPassword, _impl_.enable_forgot_link_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, _impl_._has_bits_),
        22, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, _impl_.enable_file_attachments_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, _impl_.enable_mobile_upload_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, _impl_.enable_mobile_download_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, _impl_.max_image_resolution_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, _impl_.max_image_decoder_concurrency_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, _impl_.driver_name_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, _impl_.amazon_s3_access_key_id_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, _impl_.amazon_s3_secret_access_key_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, _impl_.amazon_s3_bucket_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, _impl_.amazon_s3_path_prefix_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, _impl_.amazon_s3_region_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, _impl_.amazon_s3_endpoint_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, _impl_.amazon_s3_ssl_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, _impl_.amazon_s3_sign_v2_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, _impl_.amazon_s3_sse_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, _impl_.amazon_s3_trace_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, _impl_.amazon_s3_request_timeout_milliseconds_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, _impl_.amazon_s3_upload_part_size_bytes_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigFile, _impl_.amazon_s3_storage_class_),
        10,
        11,
        12,
        8,
        9,
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        16,
        17,
        18,
        7,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_._has_bits_),
        29, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.send_email_notifications_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.require_email_verification_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.feedback_email_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.reply_to_address_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.enable_smtp_auth_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.smtp_username_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.smtp_password_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.smtp_server_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.smtp_port_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.smtp_server_timeout_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.connection_security_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.send_push_notifications_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.push_notification_server_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.push_notification_contents_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.push_notification_buffer_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.enable_email_batching_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.email_batching_buffer_size_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.email_batching_interval_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.skip_server_certificate_verification_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.email_notification_contents_type_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.login_button_color_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.login_button_border_color_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.login_button_text_color_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.rate_limiting_memory_size_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.rate_limiting_per_hour_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigEmail, _impl_.rate_limiting_max_burst_),
        13,
        14,
        0,
        1,
        15,
        2,
        3,
        4,
        5,
        17,
        6,
        16,
        7,
        8,
        18,
        20,
        19,
        22,
        21,
        9,
        10,
        11,
        12,
        23,
        24,
        25,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigRateLimit, _impl_._has_bits_),
        10, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigRateLimit, _impl_.enable_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigRateLimit, _impl_.per_sec_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigRateLimit, _impl_.max_burst_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigRateLimit, _impl_.memory_store_size_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigRateLimit, _impl_.vary_by_remote_addr_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigRateLimit, _impl_.vary_by_user_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigRateLimit, _impl_.vary_by_header_),
        4,
        1,
        2,
        3,
        5,
        6,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPrivacy, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPrivacy, _impl_.show_email_address_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigPrivacy, _impl_.show_full_name_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSupport, _impl_._has_bits_),
        10, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSupport, _impl_.terms_of_service_link_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSupport, _impl_.privacy_policy_link_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSupport, _impl_.about_link_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSupport, _impl_.help_link_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSupport, _impl_.report_a_problem_link_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSupport, _impl_.forgot_password_link_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSupport, _impl_.support_email_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLocalization, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLocalization, _impl_.default_server_locale_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLocalization, _impl_.default_client_locale_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLocalization, _impl_.available_locales_),
        0,
        1,
        ~0u,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_._has_bits_),
        34, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.enable_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.enable_sync_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.ldap_server_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.ldap_port_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.connection_security_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.base_dn_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.bind_username_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.bind_password_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.maximum_login_attempts_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.user_filter_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.group_filter_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.enable_admin_filter_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.admin_filter_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.group_display_name_attribute_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.group_id_attribute_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.first_name_attribute_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.last_name_attribute_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.email_attribute_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.username_attribute_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.nickname_attribute_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.id_attribute_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.position_attribute_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.login_id_attribute_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.picture_attribute_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.sync_interval_minutes_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.query_timeout_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.max_page_size_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.login_field_name_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.login_button_color_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.login_button_border_color_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigLdap, _impl_.login_button_text_color_),
        24,
        25,
        0,
        23,
        1,
        2,
        3,
        4,
        27,
        5,
        6,
        26,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        28,
        29,
        30,
        19,
        20,
        21,
        22,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_._has_bits_),
        36, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.enable_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.enable_sync_with_ldap_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.enable_sync_with_ldap_include_auth_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.ignore_guests_ldap_sync_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.verify_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.encrypt_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.sign_request_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.idp_url_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.idp_descriptor_url_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.idp_metadata_url_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.service_provider_identifier_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.assertion_consumer_service_url_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.signature_algorithm_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.canonical_algorithm_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.scoping_idp_provider_id_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.scoping_idp_name_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.idp_certificate_file_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.public_certificate_file_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.private_key_file_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.id_attribute_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.enable_admin_attribute_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.admin_attribute_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.first_name_attribute_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.last_name_attribute_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.email_attribute_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.username_attribute_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.nickname_attribute_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.locale_attribute_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.position_attribute_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.login_button_text_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.login_button_color_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.login_button_border_color_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigSaml, _impl_.login_button_text_color_),
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        32,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigNativeApp, _impl_._has_bits_),
        11, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigNativeApp, _impl_.app_custom_url_schemes_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigNativeApp, _impl_.app_download_link_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigNativeApp, _impl_.android_app_download_link_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigNativeApp, _impl_.ios_app_download_link_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigNativeApp, _impl_.mobile_external_browser_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigNativeApp, _impl_.mobile_enable_biometrics_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigNativeApp, _impl_.mobile_prevent_screen_capture_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigNativeApp, _impl_.mobile_jailbreak_protection_),
        ~0u,
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMeilisearch, _impl_._has_bits_),
        13, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMeilisearch, _impl_.server_url_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMeilisearch, _impl_.master_key_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMeilisearch, _impl_.enable_indexing_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMeilisearch, _impl_.enable_searching_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMeilisearch, _impl_.enable_autocomplete_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMeilisearch, _impl_.batch_size_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMeilisearch, _impl_.request_timeout_seconds_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMeilisearch, _impl_.index_prefix_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMeilisearch, _impl_.search_cutoff_ms_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigMeilisearch, _impl_.enable_typo_tolerance_),
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        2,
        9,
        6,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigBleve, _impl_._has_bits_),
        9, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigBleve, _impl_.index_dir_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigBleve, _impl_.enable_indexing_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigBleve, _impl_.enable_searching_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigBleve, _impl_.enable_autocomplete_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigBleve, _impl_.bulk_indexing_time_window_seconds_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigBleve, _impl_.batch_size_),
        0,
        1,
        2,
        3,
        4,
        5,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigDataRetention, _impl_._has_bits_),
        13, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigDataRetention, _impl_.enable_message_deletion_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigDataRetention, _impl_.enable_file_deletion_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigDataRetention, _impl_.enable_boards_deletion_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigDataRetention, _impl_.message_retention_hours_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigDataRetention, _impl_.file_retention_hours_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigDataRetention, _impl_.boards_retention_days_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigDataRetention, _impl_.deletion_job_start_time_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigDataRetention, _impl_.batch_size_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigDataRetention, _impl_.time_between_batches_milliseconds_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigDataRetention, _impl_.retention_ids_batch_size_),
        1,
        2,
        3,
        4,
        5,
        6,
        0,
        7,
        8,
        9,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigImageProxy, _impl_._has_bits_),
        7, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigImageProxy, _impl_.enable_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigImageProxy, _impl_.image_proxy_type_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigImageProxy, _impl_.remote_image_proxy_url_),
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigImageProxy, _impl_.remote_image_proxy_options_),
        3,
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::Config, _impl_._has_bits_),
        24, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::Config, _impl_.main_),
        PROTOBUF_FIELD_OFFSET(::common::v1::Config, _impl_.services_),
        PROTOBUF_FIELD_OFFSET(::common::v1::Config, _impl_.security_),
        PROTOBUF_FIELD_OFFSET(::common::v1::Config, _impl_.cache_),
        PROTOBUF_FIELD_OFFSET(::common::v1::Config, _impl_.metrics_),
        PROTOBUF_FIELD_OFFSET(::common::v1::Config, _impl_.sso_),
        PROTOBUF_FIELD_OFFSET(::common::v1::Config, _impl_.sql_),
        PROTOBUF_FIELD_OFFSET(::common::v1::Config, _impl_.password_),
        PROTOBUF_FIELD_OFFSET(::common::v1::Config, _impl_.file_),
        PROTOBUF_FIELD_OFFSET(::common::v1::Config, _impl_.email_),
        PROTOBUF_FIELD_OFFSET(::common::v1::Config, _impl_.rate_limit_),
        PROTOBUF_FIELD_OFFSET(::common::v1::Config, _impl_.privacy_),
        PROTOBUF_FIELD_OFFSET(::common::v1::Config, _impl_.support_),
        PROTOBUF_FIELD_OFFSET(::common::v1::Config, _impl_.localization_),
        PROTOBUF_FIELD_OFFSET(::common::v1::Config, _impl_.ldap_),
        PROTOBUF_FIELD_OFFSET(::common::v1::Config, _impl_.saml_),
        PROTOBUF_FIELD_OFFSET(::common::v1::Config, _impl_.native_app_),
        PROTOBUF_FIELD_OFFSET(::common::v1::Config, _impl_.meilisearch_),
        PROTOBUF_FIELD_OFFSET(::common::v1::Config, _impl_.bleve_),
        PROTOBUF_FIELD_OFFSET(::common::v1::Config, _impl_.data_retention_),
        PROTOBUF_FIELD_OFFSET(::common::v1::Config, _impl_.image_proxy_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        0x000, // bitmap
        0x004, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigGetResponse, _impl_._oneof_case_[0]),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigGetResponse, _impl_.response_),
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigUpdateRequest, _impl_._has_bits_),
        4, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigUpdateRequest, _impl_.config_),
        0,
        0x004, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigUpdateResponse, _impl_._oneof_case_[0]),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigUpdateResponse, _impl_.response_),
        0x004, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigListenerResponse, _impl_._oneof_case_[0]),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigListenerResponse, _impl_.response_),
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigListenerRequest, _impl_._has_bits_),
        4, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::common::v1::ConfigListenerRequest, _impl_.client_id_),
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::common::v1::ConfigMain)},
        {45, sizeof(::common::v1::ConfigServices)},
        {64, sizeof(::common::v1::ConfigSecurity_RestrictedUsernamesEntry_DoNotUse)},
        {71, sizeof(::common::v1::ConfigSecurity)},
        {114, sizeof(::common::v1::CacheConfig)},
        {129, sizeof(::common::v1::ConfigMetrics)},
        {144, sizeof(::common::v1::ConfigSSO)},
        {167, sizeof(::common::v1::ConfigSql)},
        {190, sizeof(::common::v1::ConfigPassword)},
        {207, sizeof(::common::v1::ConfigFile)},
        {248, sizeof(::common::v1::ConfigEmail)},
        {303, sizeof(::common::v1::ConfigRateLimit)},
        {320, sizeof(::common::v1::ConfigPrivacy)},
        {327, sizeof(::common::v1::ConfigSupport)},
        {344, sizeof(::common::v1::ConfigLocalization)},
        {353, sizeof(::common::v1::ConfigLdap)},
        {418, sizeof(::common::v1::ConfigSaml)},
        {487, sizeof(::common::v1::ConfigNativeApp)},
        {506, sizeof(::common::v1::ConfigMeilisearch)},
        {529, sizeof(::common::v1::ConfigBleve)},
        {544, sizeof(::common::v1::ConfigDataRetention)},
        {567, sizeof(::common::v1::ConfigImageProxy)},
        {578, sizeof(::common::v1::Config)},
        {623, sizeof(::common::v1::ConfigGetRequest)},
        {624, sizeof(::common::v1::ConfigGetResponse)},
        {629, sizeof(::common::v1::ConfigUpdateRequest)},
        {634, sizeof(::common::v1::ConfigUpdateResponse)},
        {639, sizeof(::common::v1::ConfigListenerResponse)},
        {644, sizeof(::common::v1::ConfigListenerRequest)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::common::v1::_ConfigMain_default_instance_._instance,
    &::common::v1::_ConfigServices_default_instance_._instance,
    &::common::v1::_ConfigSecurity_RestrictedUsernamesEntry_DoNotUse_default_instance_._instance,
    &::common::v1::_ConfigSecurity_default_instance_._instance,
    &::common::v1::_CacheConfig_default_instance_._instance,
    &::common::v1::_ConfigMetrics_default_instance_._instance,
    &::common::v1::_ConfigSSO_default_instance_._instance,
    &::common::v1::_ConfigSql_default_instance_._instance,
    &::common::v1::_ConfigPassword_default_instance_._instance,
    &::common::v1::_ConfigFile_default_instance_._instance,
    &::common::v1::_ConfigEmail_default_instance_._instance,
    &::common::v1::_ConfigRateLimit_default_instance_._instance,
    &::common::v1::_ConfigPrivacy_default_instance_._instance,
    &::common::v1::_ConfigSupport_default_instance_._instance,
    &::common::v1::_ConfigLocalization_default_instance_._instance,
    &::common::v1::_ConfigLdap_default_instance_._instance,
    &::common::v1::_ConfigSaml_default_instance_._instance,
    &::common::v1::_ConfigNativeApp_default_instance_._instance,
    &::common::v1::_ConfigMeilisearch_default_instance_._instance,
    &::common::v1::_ConfigBleve_default_instance_._instance,
    &::common::v1::_ConfigDataRetention_default_instance_._instance,
    &::common::v1::_ConfigImageProxy_default_instance_._instance,
    &::common::v1::_Config_default_instance_._instance,
    &::common::v1::_ConfigGetRequest_default_instance_._instance,
    &::common::v1::_ConfigGetResponse_default_instance_._instance,
    &::common::v1::_ConfigUpdateRequest_default_instance_._instance,
    &::common::v1::_ConfigUpdateResponse_default_instance_._instance,
    &::common::v1::_ConfigListenerResponse_default_instance_._instance,
    &::common::v1::_ConfigListenerRequest_default_instance_._instance,
};
const char descriptor_table_protodef_common_2fv1_2fconfig_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\026common/v1/config.proto\022\tcommon.v1\032\025sha"
    "red/v1/error.proto\"\354\016\n\nConfigMain\022\025\n\003env"
    "\030\001 \001(\tH\000R\003env\210\001\001\022 \n\tsite_name\030\002 \001(\tH\001R\010s"
    "iteName\210\001\001\022\036\n\010site_url\030\003 \001(\tH\002R\007siteUrl\210"
    "\001\001\0225\n\024enable_link_previews\030\005 \001(\010H\003R\022enab"
    "leLinkPreviews\210\001\001\0229\n\026restrict_link_previ"
    "ews\030\006 \001(\tH\004R\024restrictLinkPreviews\210\001\001\022R\n#"
    "enable_client_performance_debugging\030\007 \001("
    "\010H\005R enableClientPerformanceDebugging\210\001\001"
    "\022/\n\021enable_gif_picker\030\010 \001(\010H\006R\017enableGif"
    "Picker\210\001\001\0223\n\023enable_custom_emoji\030\t \001(\010H\007"
    "R\021enableCustomEmoji\210\001\001\0223\n\023enable_emoji_p"
    "icker\030\n \001(\010H\010R\021enableEmojiPicker\210\001\001\022d\n-t"
    "ime_between_user_typing_updates_millisec"
    "onds\030\013 \001(\003H\tR(timeBetweenUserTypingUpdat"
    "esMilliseconds\210\001\001\0221\n\022enable_file_search\030"
    "\014 \001(\010H\nR\020enableFileSearch\210\001\001\022B\n\033enable_u"
    "ser_typing_messages\030\r \001(\010H\013R\030enableUserT"
    "ypingMessages\210\001\001\0225\n\024enable_user_statuses"
    "\030\016 \001(\010H\014R\022enableUserStatuses\210\001\001\022=\n\030enabl"
    "e_email_invitations\030\017 \001(\010H\rR\026enableEmail"
    "Invitations\210\001\001\022$\n\013enable_svgs\030\020 \001(\010H\016R\ne"
    "nableSvgs\210\001\001\022I\n\036allow_persistent_notific"
    "ations\030\021 \001(\010H\017R\034allowPersistentNotificat"
    "ions\210\001\001\022\\\n(persistent_notification_inter"
    "val_minutes\030\022 \001(\005H\020R%persistentNotificat"
    "ionIntervalMinutes\210\001\001\022N\n!persistent_noti"
    "fication_max_count\030\023 \001(\005H\021R\036persistentNo"
    "tificationMaxCount\210\001\001\022X\n&persistent_noti"
    "fication_max_recipients\030\024 \001(\005H\022R#persist"
    "entNotificationMaxRecipients\210\001\001\022O\n\"featu"
    "re_flag_sync_interval_seconds\030\025 \001(\005H\023R\036f"
    "eatureFlagSyncIntervalSeconds\210\001\001\0223\n\023allo"
    "w_synced_drafts\030\026 \001(\010H\024R\021allowSyncedDraf"
    "ts\210\001\001B\006\n\004_envB\014\n\n_site_nameB\013\n\t_site_url"
    "B\027\n\025_enable_link_previewsB\031\n\027_restrict_l"
    "ink_previewsB&\n$_enable_client_performan"
    "ce_debuggingB\024\n\022_enable_gif_pickerB\026\n\024_e"
    "nable_custom_emojiB\026\n\024_enable_emoji_pick"
    "erB0\n._time_between_user_typing_updates_"
    "millisecondsB\025\n\023_enable_file_searchB\036\n\034_"
    "enable_user_typing_messagesB\027\n\025_enable_u"
    "ser_statusesB\033\n\031_enable_email_invitation"
    "sB\016\n\014_enable_svgsB!\n\037_allow_persistent_n"
    "otificationsB+\n)_persistent_notification"
    "_interval_minutesB$\n\"_persistent_notific"
    "ation_max_countB)\n\'_persistent_notificat"
    "ion_max_recipientsB%\n#_feature_flag_sync"
    "_interval_secondsB\026\n\024_allow_synced_draft"
    "s\"\272\006\n\016ConfigServices\022:\n\027common_service_g"
    "rpc_url\030\001 \001(\tH\000R\024commonServiceGrpcUrl\210\001\001"
    "\0226\n\025user_service_grpc_url\030\002 \001(\tH\001R\022userS"
    "erviceGrpcUrl\210\001\001\022>\n\031products_service_grp"
    "c_url\030\003 \001(\tH\002R\026productsServiceGrpcUrl\210\001\001"
    "\0225\n\024jaeger_collector_url\030\004 \001(\tH\003R\022jaeger"
    "CollectorUrl\210\001\001\022F\n\035common_service_promet"
    "heus_url\030\005 \001(\tH\004R\032commonServicePrometheu"
    "sUrl\210\001\001\022B\n\033user_service_prometheus_url\030\006"
    " \001(\tH\005R\030userServicePrometheusUrl\210\001\001\022J\n\037p"
    "roducts_service_prometheus_url\030\007 \001(\tH\006R\034"
    "productsServicePrometheusUrl\210\001\001\022a\n,users"
    "_service_max_receive_message_size_bytes\030"
    "\010 \001(\003H\007R&usersServiceMaxReceiveMessageSi"
    "zeBytes\210\001\001B\032\n\030_common_service_grpc_urlB\030"
    "\n\026_user_service_grpc_urlB\034\n\032_products_se"
    "rvice_grpc_urlB\027\n\025_jaeger_collector_urlB"
    " \n\036_common_service_prometheus_urlB\036\n\034_us"
    "er_service_prometheus_urlB\"\n _products_s"
    "ervice_prometheus_urlB/\n-_users_service_"
    "max_receive_message_size_bytes\"\277\020\n\016Confi"
    "gSecurity\022e\n\024restricted_usernames\030\001 \003(\0132"
    "2.common.v1.ConfigSecurity.RestrictedUse"
    "rnamesEntryR\023restrictedUsernames\0229\n\026maxi"
    "mum_login_attempts\030\002 \001(\005H\000R\024maximumLogin"
    "Attempts\210\001\001\022T\n$enable_insecure_outgoing_"
    "connections\030\003 \001(\010H\001R!enableInsecureOutgo"
    "ingConnections\210\001\001\022O\n!enable_multifactor_"
    "authentication\030\004 \001(\010H\002R\037enableMultifacto"
    "rAuthentication\210\001\001\022Q\n\"enforce_multifacto"
    "r_authentication\030\005 \001(\010H\003R enforceMultifa"
    "ctorAuthentication\210\001\001\022F\n\035enable_oauth_se"
    "rvice_provider\030\006 \001(\010H\004R\032enableOauthServi"
    "ceProvider\210\001\001\022N\n!enable_outgoing_oauth_c"
    "onnections\030\007 \001(\010H\005R\036enableOutgoingOauthC"
    "onnections\210\001\001\022U\n%terminate_sessions_on_p"
    "assword_change\030\010 \001(\010H\006R!terminateSession"
    "sOnPasswordChange\210\001\001\022A\n\033session_length_w"
    "eb_in_hours\030\t \001(\005H\007R\027sessionLengthWebInH"
    "ours\210\001\001\022G\n\036session_length_mobile_in_hour"
    "s\030\n \001(\005H\010R\032sessionLengthMobileInHours\210\001\001"
    "\022A\n\033session_length_sso_in_hours\030\013 \001(\005H\tR"
    "\027sessionLengthSsoInHours\210\001\001\022+\n\017allow_cor"
    "s_from\030\014 \001(\tH\nR\rallowCorsFrom\210\001\001\0225\n\024cors"
    "_exposed_headers\030\r \001(\tH\013R\022corsExposedHea"
    "ders\210\001\001\0229\n\026cors_allow_credentials\030\016 \001(\010H"
    "\014R\024corsAllowCredentials\210\001\001\022\"\n\ncors_debug"
    "\030\017 \001(\010H\rR\tcorsDebug\210\001\001\022D\n\034allow_cookies_"
    "for_subdomains\030\020 \001(\010H\016R\031allowCookiesForS"
    "ubdomains\210\001\001\022<\n\030session_cache_in_minutes"
    "\030\021 \001(\005H\017R\025sessionCacheInMinutes\210\001\001\0229\n\026em"
    "ail_confirmation_url\030\022 \001(\tH\020R\024emailConfi"
    "rmationUrl\210\001\001\022O\n\"token_confirmation_expi"
    "ry_in_hours\030\023 \001(\rH\021R\036tokenConfirmationEx"
    "piryInHours\210\001\001\022R\n$token_password_reset_e"
    "xpiry_in_hours\030\024 \001(\rH\022R\037tokenPasswordRes"
    "etExpiryInHours\210\001\001\032F\n\030RestrictedUsername"
    "sEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR"
    "\005value:\0028\001B\031\n\027_maximum_login_attemptsB\'\n"
    "%_enable_insecure_outgoing_connectionsB$"
    "\n\"_enable_multifactor_authenticationB%\n#"
    "_enforce_multifactor_authenticationB \n\036_"
    "enable_oauth_service_providerB$\n\"_enable"
    "_outgoing_oauth_connectionsB(\n&_terminat"
    "e_sessions_on_password_changeB\036\n\034_sessio"
    "n_length_web_in_hoursB!\n\037_session_length"
    "_mobile_in_hoursB\036\n\034_session_length_sso_"
    "in_hoursB\022\n\020_allow_cors_fromB\027\n\025_cors_ex"
    "posed_headersB\031\n\027_cors_allow_credentials"
    "B\r\n\013_cors_debugB\037\n\035_allow_cookies_for_su"
    "bdomainsB\033\n\031_session_cache_in_minutesB\031\n"
    "\027_email_confirmation_urlB%\n#_token_confi"
    "rmation_expiry_in_hoursB\'\n%_token_passwo"
    "rd_reset_expiry_in_hours\"\202\003\n\013CacheConfig"
    "\022\"\n\ncache_type\030\001 \001(\tH\000R\tcacheType\210\001\001\022(\n\r"
    "redis_address\030\002 \001(\tH\001R\014redisAddress\210\001\001\022*"
    "\n\016redis_password\030\003 \001(\tH\002R\rredisPassword\210"
    "\001\001\022\036\n\010redis_db\030\004 \001(\005H\003R\007redisDb\210\001\001\0221\n\022re"
    "dis_cache_prefix\030\005 \001(\tH\004R\020redisCachePref"
    "ix\210\001\001\0225\n\024disable_client_cache\030\006 \001(\010H\005R\022d"
    "isableClientCache\210\001\001B\r\n\013_cache_typeB\020\n\016_"
    "redis_addressB\021\n\017_redis_passwordB\013\n\t_red"
    "is_dbB\025\n\023_redis_cache_prefixB\027\n\025_disable"
    "_client_cache\"\251\003\n\rConfigMetrics\022\033\n\006enabl"
    "e\030\001 \001(\010H\000R\006enable\210\001\001\0221\n\022block_profile_ra"
    "te\030\002 \001(\005H\001R\020blockProfileRate\210\001\001\022*\n\016liste"
    "n_address\030\003 \001(\tH\002R\rlistenAddress\210\001\001\0227\n\025e"
    "nable_client_metrics\030\004 \001(\010H\003R\023enableClie"
    "ntMetrics\210\001\001\022C\n\033enable_notification_metr"
    "ics\030\005 \001(\010H\004R\031enableNotificationMetrics\210\001"
    "\001\022/\n\024client_side_user_ids\030\006 \003(\tR\021clientS"
    "ideUserIdsB\t\n\007_enableB\025\n\023_block_profile_"
    "rateB\021\n\017_listen_addressB\030\n\026_enable_clien"
    "t_metricsB\036\n\034_enable_notification_metric"
    "s\"\230\004\n\tConfigSSO\022\033\n\006enable\030\001 \001(\010H\000R\006enabl"
    "e\210\001\001\022\033\n\006secret\030\002 \001(\tH\001R\006secret\210\001\001\022\023\n\002id\030"
    "\003 \001(\tH\002R\002id\210\001\001\022\031\n\005scope\030\004 \001(\tH\003R\005scope\210\001"
    "\001\022(\n\rauth_endpoint\030\005 \001(\tH\004R\014authEndpoint"
    "\210\001\001\022*\n\016token_endpoint\030\006 \001(\tH\005R\rtokenEndp"
    "oint\210\001\001\022/\n\021user_api_endpoint\030\007 \001(\tH\006R\017us"
    "erApiEndpoint\210\001\001\0222\n\022discovery_endpoint\030\010"
    " \001(\tH\007R\021discoveryEndpoint\210\001\001\022$\n\013button_t"
    "ext\030\t \001(\tH\010R\nbuttonText\210\001\001\022&\n\014button_col"
    "or\030\n \001(\tH\tR\013buttonColor\210\001\001B\t\n\007_enableB\t\n"
    "\007_secretB\005\n\003_idB\010\n\006_scopeB\020\n\016_auth_endpo"
    "intB\021\n\017_token_endpointB\024\n\022_user_api_endp"
    "ointB\025\n\023_discovery_endpointB\016\n\014_button_t"
    "extB\017\n\r_button_color\"\325\005\n\tConfigSql\022$\n\013dr"
    "iver_name\030\001 \001(\tH\000R\ndriverName\210\001\001\022$\n\013data"
    "_source\030\002 \001(\tH\001R\ndataSource\210\001\001\022)\n\016max_id"
    "le_conns\030\003 \001(\005H\002R\014maxIdleConns\210\001\001\022H\n\036con"
    "n_max_lifetime_milliseconds\030\004 \001(\005H\003R\033con"
    "nMaxLifetimeMilliseconds\210\001\001\022I\n\037conn_max_"
    "idle_time_milliseconds\030\005 \001(\005H\004R\033connMaxI"
    "dleTimeMilliseconds\210\001\001\022)\n\016max_open_conns"
    "\030\006 \001(\005H\005R\014maxOpenConns\210\001\001\022\031\n\005trace\030\007 \001(\010"
    "H\006R\005trace\210\001\001\0222\n\023at_rest_encrypt_key\030\010 \001("
    "\tH\007R\020atRestEncryptKey\210\001\001\022(\n\rquery_timeou"
    "t\030\t \001(\005H\010R\014queryTimeout\210\001\001\022;\n\027disable_da"
    "tabase_search\030\n \001(\010H\tR\025disableDatabaseSe"
    "arch\210\001\001B\016\n\014_driver_nameB\016\n\014_data_sourceB"
    "\021\n\017_max_idle_connsB!\n\037_conn_max_lifetime"
    "_millisecondsB\"\n _conn_max_idle_time_mil"
    "lisecondsB\021\n\017_max_open_connsB\010\n\006_traceB\026"
    "\n\024_at_rest_encrypt_keyB\020\n\016_query_timeout"
    "B\032\n\030_disable_database_search\"\212\003\n\016ConfigP"
    "assword\022*\n\016minimum_length\030\001 \001(\005H\000R\rminim"
    "umLength\210\001\001\022*\n\016maximum_length\030\002 \001(\005H\001R\rm"
    "aximumLength\210\001\001\022!\n\tlowercase\030\003 \001(\010H\002R\tlo"
    "wercase\210\001\001\022\033\n\006number\030\004 \001(\010H\003R\006number\210\001\001\022"
    "!\n\tuppercase\030\005 \001(\010H\004R\tuppercase\210\001\001\022\033\n\006sy"
    "mbol\030\006 \001(\010H\005R\006symbol\210\001\001\0221\n\022enable_forgot"
    "_link\030\007 \001(\010H\006R\020enableForgotLink\210\001\001B\021\n\017_m"
    "inimum_lengthB\021\n\017_maximum_lengthB\014\n\n_low"
    "ercaseB\t\n\007_numberB\014\n\n_uppercaseB\t\n\007_symb"
    "olB\025\n\023_enable_forgot_link\"\243\014\n\nConfigFile"
    "\022;\n\027enable_file_attachments\030\001 \001(\010H\000R\025ena"
    "bleFileAttachments\210\001\001\0225\n\024enable_mobile_u"
    "pload\030\002 \001(\010H\001R\022enableMobileUpload\210\001\001\0229\n\026"
    "enable_mobile_download\030\003 \001(\010H\002R\024enableMo"
    "bileDownload\210\001\001\0225\n\024max_image_resolution\030"
    "\004 \001(\003H\003R\022maxImageResolution\210\001\001\022F\n\035max_im"
    "age_decoder_concurrency\030\005 \001(\003H\004R\032maxImag"
    "eDecoderConcurrency\210\001\001\022$\n\013driver_name\030\006 "
    "\001(\tH\005R\ndriverName\210\001\001\0229\n\027amazon_s3_access"
    "_key_id\030\007 \001(\tH\006R\023amazonS3AccessKeyId\210\001\001\022"
    "A\n\033amazon_s3_secret_access_key\030\010 \001(\tH\007R\027"
    "amazonS3SecretAccessKey\210\001\001\022-\n\020amazon_s3_"
    "bucket\030\t \001(\tH\010R\016amazonS3Bucket\210\001\001\0226\n\025ama"
    "zon_s3_path_prefix\030\n \001(\tH\tR\022amazonS3Path"
    "Prefix\210\001\001\022-\n\020amazon_s3_region\030\013 \001(\tH\nR\016a"
    "mazonS3Region\210\001\001\0221\n\022amazon_s3_endpoint\030\014"
    " \001(\tH\013R\020amazonS3Endpoint\210\001\001\022\'\n\ramazon_s3"
    "_ssl\030\r \001(\010H\014R\013amazonS3Ssl\210\001\001\022.\n\021amazon_s"
    "3_sign_v2\030\016 \001(\010H\rR\016amazonS3SignV2\210\001\001\022\'\n\r"
    "amazon_s3_sse\030\017 \001(\010H\016R\013amazonS3Sse\210\001\001\022+\n"
    "\017amazon_s3_trace\030\020 \001(\010H\017R\ramazonS3Trace\210"
    "\001\001\022W\n&amazon_s3_request_timeout_millisec"
    "onds\030\021 \001(\003H\020R\"amazonS3RequestTimeoutMill"
    "iseconds\210\001\001\022J\n amazon_s3_upload_part_siz"
    "e_bytes\030\022 \001(\003H\021R\033amazonS3UploadPartSizeB"
    "ytes\210\001\001\022:\n\027amazon_s3_storage_class\030\023 \001(\t"
    "H\022R\024amazonS3StorageClass\210\001\001B\032\n\030_enable_f"
    "ile_attachmentsB\027\n\025_enable_mobile_upload"
    "B\031\n\027_enable_mobile_downloadB\027\n\025_max_imag"
    "e_resolutionB \n\036_max_image_decoder_concu"
    "rrencyB\016\n\014_driver_nameB\032\n\030_amazon_s3_acc"
    "ess_key_idB\036\n\034_amazon_s3_secret_access_k"
    "eyB\023\n\021_amazon_s3_bucketB\030\n\026_amazon_s3_pa"
    "th_prefixB\023\n\021_amazon_s3_regionB\025\n\023_amazo"
    "n_s3_endpointB\020\n\016_amazon_s3_sslB\024\n\022_amaz"
    "on_s3_sign_v2B\020\n\016_amazon_s3_sseB\022\n\020_amaz"
    "on_s3_traceB)\n\'_amazon_s3_request_timeou"
    "t_millisecondsB#\n!_amazon_s3_upload_part"
    "_size_bytesB\032\n\030_amazon_s3_storage_class\""
    "\210\021\n\013ConfigEmail\022=\n\030send_email_notificati"
    "ons\030\001 \001(\010H\000R\026sendEmailNotifications\210\001\001\022A"
    "\n\032require_email_verification\030\002 \001(\010H\001R\030re"
    "quireEmailVerification\210\001\001\022*\n\016feedback_em"
    "ail\030\003 \001(\tH\002R\rfeedbackEmail\210\001\001\022-\n\020reply_t"
    "o_address\030\004 \001(\tH\003R\016replyToAddress\210\001\001\022-\n\020"
    "enable_smtp_auth\030\005 \001(\010H\004R\016enableSmtpAuth"
    "\210\001\001\022(\n\rsmtp_username\030\006 \001(\tH\005R\014smtpUserna"
    "me\210\001\001\022(\n\rsmtp_password\030\007 \001(\tH\006R\014smtpPass"
    "word\210\001\001\022$\n\013smtp_server\030\010 \001(\tH\007R\nsmtpServ"
    "er\210\001\001\022 \n\tsmtp_port\030\t \001(\tH\010R\010smtpPort\210\001\001\022"
    "3\n\023smtp_server_timeout\030\n \001(\005H\tR\021smtpServ"
    "erTimeout\210\001\001\0224\n\023connection_security\030\013 \001("
    "\tH\nR\022connectionSecurity\210\001\001\022;\n\027send_push_"
    "notifications\030\014 \001(\010H\013R\025sendPushNotificat"
    "ions\210\001\001\022=\n\030push_notification_server\030\r \001("
    "\tH\014R\026pushNotificationServer\210\001\001\022A\n\032push_n"
    "otification_contents\030\016 \001(\tH\rR\030pushNotifi"
    "cationContents\210\001\001\022=\n\030push_notification_b"
    "uffer\030\017 \001(\005H\016R\026pushNotificationBuffer\210\001\001"
    "\0227\n\025enable_email_batching\030\020 \001(\010H\017R\023enabl"
    "eEmailBatching\210\001\001\022@\n\032email_batching_buff"
    "er_size\030\021 \001(\005H\020R\027emailBatchingBufferSize"
    "\210\001\001\022;\n\027email_batching_interval\030\022 \001(\005H\021R\025"
    "emailBatchingInterval\210\001\001\022T\n$skip_server_"
    "certificate_verification\030\023 \001(\010H\022R!skipSe"
    "rverCertificateVerification\210\001\001\022L\n email_"
    "notification_contents_type\030\024 \001(\tH\023R\035emai"
    "lNotificationContentsType\210\001\001\0221\n\022login_bu"
    "tton_color\030\025 \001(\tH\024R\020loginButtonColor\210\001\001\022"
    ">\n\031login_button_border_color\030\026 \001(\tH\025R\026lo"
    "ginButtonBorderColor\210\001\001\022:\n\027login_button_"
    "text_color\030\027 \001(\tH\026R\024loginButtonTextColor"
    "\210\001\001\022>\n\031rate_limiting_memory_size\030\030 \001(\005H\027"
    "R\026rateLimitingMemorySize\210\001\001\0228\n\026rate_limi"
    "ting_per_hour\030\031 \001(\005H\030R\023rateLimitingPerHo"
    "ur\210\001\001\022:\n\027rate_limiting_max_burst\030\032 \001(\005H\031"
    "R\024rateLimitingMaxBurst\210\001\001B\033\n\031_send_email"
    "_notificationsB\035\n\033_require_email_verific"
    "ationB\021\n\017_feedback_emailB\023\n\021_reply_to_ad"
    "dressB\023\n\021_enable_smtp_authB\020\n\016_smtp_user"
    "nameB\020\n\016_smtp_passwordB\016\n\014_smtp_serverB\014"
    "\n\n_smtp_portB\026\n\024_smtp_server_timeoutB\026\n\024"
    "_connection_securityB\032\n\030_send_push_notif"
    "icationsB\033\n\031_push_notification_serverB\035\n"
    "\033_push_notification_contentsB\033\n\031_push_no"
    "tification_bufferB\030\n\026_enable_email_batch"
    "ingB\035\n\033_email_batching_buffer_sizeB\032\n\030_e"
    "mail_batching_intervalB\'\n%_skip_server_c"
    "ertificate_verificationB#\n!_email_notifi"
    "cation_contents_typeB\025\n\023_login_button_co"
    "lorB\034\n\032_login_button_border_colorB\032\n\030_lo"
    "gin_button_text_colorB\034\n\032_rate_limiting_"
    "memory_sizeB\031\n\027_rate_limiting_per_hourB\032"
    "\n\030_rate_limiting_max_burst\"\204\003\n\017ConfigRat"
    "eLimit\022\033\n\006enable\030\001 \001(\010H\000R\006enable\210\001\001\022\034\n\007p"
    "er_sec\030\002 \001(\005H\001R\006perSec\210\001\001\022 \n\tmax_burst\030\003"
    " \001(\005H\002R\010maxBurst\210\001\001\022/\n\021memory_store_size"
    "\030\004 \001(\005H\003R\017memoryStoreSize\210\001\001\0222\n\023vary_by_"
    "remote_addr\030\005 \001(\010H\004R\020varyByRemoteAddr\210\001\001"
    "\022%\n\014vary_by_user\030\006 \001(\010H\005R\nvaryByUser\210\001\001\022"
    "$\n\016vary_by_header\030\007 \001(\tR\014varyByHeaderB\t\n"
    "\007_enableB\n\n\010_per_secB\014\n\n_max_burstB\024\n\022_m"
    "emory_store_sizeB\026\n\024_vary_by_remote_addr"
    "B\017\n\r_vary_by_user\"\227\001\n\rConfigPrivacy\0221\n\022s"
    "how_email_address\030\001 \001(\010H\000R\020showEmailAddr"
    "ess\210\001\001\022)\n\016show_full_name\030\002 \001(\010H\001R\014showFu"
    "llName\210\001\001B\025\n\023_show_email_addressB\021\n\017_sho"
    "w_full_name\"\357\003\n\rConfigSupport\0226\n\025terms_o"
    "f_service_link\030\001 \001(\tH\000R\022termsOfServiceLi"
    "nk\210\001\001\0223\n\023privacy_policy_link\030\002 \001(\tH\001R\021pr"
    "ivacyPolicyLink\210\001\001\022\"\n\nabout_link\030\003 \001(\tH\002"
    "R\taboutLink\210\001\001\022 \n\thelp_link\030\004 \001(\tH\003R\010hel"
    "pLink\210\001\001\0226\n\025report_a_problem_link\030\005 \001(\tH"
    "\004R\022reportAProblemLink\210\001\001\0225\n\024forgot_passw"
    "ord_link\030\006 \001(\tH\005R\022forgotPasswordLink\210\001\001\022"
    "(\n\rsupport_email\030\007 \001(\tH\006R\014supportEmail\210\001"
    "\001B\030\n\026_terms_of_service_linkB\026\n\024_privacy_"
    "policy_linkB\r\n\013_about_linkB\014\n\n_help_link"
    "B\030\n\026_report_a_problem_linkB\027\n\025_forgot_pa"
    "ssword_linkB\020\n\016_support_email\"\347\001\n\022Config"
    "Localization\0227\n\025default_server_locale\030\001 "
    "\001(\tH\000R\023defaultServerLocale\210\001\001\0227\n\025default"
    "_client_locale\030\002 \001(\tH\001R\023defaultClientLoc"
    "ale\210\001\001\022+\n\021available_locales\030\003 \003(\tR\020avail"
    "ableLocalesB\030\n\026_default_server_localeB\030\n"
    "\026_default_client_locale\"\325\020\n\nConfigLdap\022\033"
    "\n\006enable\030\001 \001(\010H\000R\006enable\210\001\001\022$\n\013enable_sy"
    "nc\030\002 \001(\010H\001R\nenableSync\210\001\001\022$\n\013ldap_server"
    "\030\003 \001(\tH\002R\nldapServer\210\001\001\022 \n\tldap_port\030\004 \001"
    "(\005H\003R\010ldapPort\210\001\001\0224\n\023connection_security"
    "\030\005 \001(\tH\004R\022connectionSecurity\210\001\001\022\034\n\007base_"
    "dn\030\006 \001(\tH\005R\006baseDn\210\001\001\022(\n\rbind_username\030\007"
    " \001(\tH\006R\014bindUsername\210\001\001\022(\n\rbind_password"
    "\030\010 \001(\tH\007R\014bindPassword\210\001\001\0229\n\026maximum_log"
    "in_attempts\030\t \001(\005H\010R\024maximumLoginAttempt"
    "s\210\001\001\022$\n\013user_filter\030\n \001(\tH\tR\nuserFilter\210"
    "\001\001\022&\n\014group_filter\030\013 \001(\tH\nR\013groupFilter\210"
    "\001\001\0223\n\023enable_admin_filter\030\014 \001(\010H\013R\021enabl"
    "eAdminFilter\210\001\001\022&\n\014admin_filter\030\r \001(\tH\014R"
    "\013adminFilter\210\001\001\022D\n\034group_display_name_at"
    "tribute\030\016 \001(\tH\rR\031groupDisplayNameAttribu"
    "te\210\001\001\0221\n\022group_id_attribute\030\017 \001(\tH\016R\020gro"
    "upIdAttribute\210\001\001\0225\n\024first_name_attribute"
    "\030\020 \001(\tH\017R\022firstNameAttribute\210\001\001\0223\n\023last_"
    "name_attribute\030\021 \001(\tH\020R\021lastNameAttribut"
    "e\210\001\001\022,\n\017email_attribute\030\022 \001(\tH\021R\016emailAt"
    "tribute\210\001\001\0222\n\022username_attribute\030\023 \001(\tH\022"
    "R\021usernameAttribute\210\001\001\0222\n\022nickname_attri"
    "bute\030\024 \001(\tH\023R\021nicknameAttribute\210\001\001\022&\n\014id"
    "_attribute\030\025 \001(\tH\024R\013idAttribute\210\001\001\0222\n\022po"
    "sition_attribute\030\026 \001(\tH\025R\021positionAttrib"
    "ute\210\001\001\0221\n\022login_id_attribute\030\027 \001(\tH\026R\020lo"
    "ginIdAttribute\210\001\001\0220\n\021picture_attribute\030\030"
    " \001(\tH\027R\020pictureAttribute\210\001\001\0227\n\025sync_inte"
    "rval_minutes\030\031 \001(\005H\030R\023syncIntervalMinute"
    "s\210\001\001\022(\n\rquery_timeout\030\032 \001(\005H\031R\014queryTime"
    "out\210\001\001\022\'\n\rmax_page_size\030\033 \001(\005H\032R\013maxPage"
    "Size\210\001\001\022-\n\020login_field_name\030\034 \001(\tH\033R\016log"
    "inFieldName\210\001\001\0221\n\022login_button_color\030\035 \001"
    "(\tH\034R\020loginButtonColor\210\001\001\022>\n\031login_butto"
    "n_border_color\030\036 \001(\tH\035R\026loginButtonBorde"
    "rColor\210\001\001\022:\n\027login_button_text_color\030\037 \001"
    "(\tH\036R\024loginButtonTextColor\210\001\001B\t\n\007_enable"
    "B\016\n\014_enable_syncB\016\n\014_ldap_serverB\014\n\n_lda"
    "p_portB\026\n\024_connection_securityB\n\n\010_base_"
    "dnB\020\n\016_bind_usernameB\020\n\016_bind_passwordB\031"
    "\n\027_maximum_login_attemptsB\016\n\014_user_filte"
    "rB\017\n\r_group_filterB\026\n\024_enable_admin_filt"
    "erB\017\n\r_admin_filterB\037\n\035_group_display_na"
    "me_attributeB\025\n\023_group_id_attributeB\027\n\025_"
    "first_name_attributeB\026\n\024_last_name_attri"
    "buteB\022\n\020_email_attributeB\025\n\023_username_at"
    "tributeB\025\n\023_nickname_attributeB\017\n\r_id_at"
    "tributeB\025\n\023_position_attributeB\025\n\023_login"
    "_id_attributeB\024\n\022_picture_attributeB\030\n\026_"
    "sync_interval_minutesB\020\n\016_query_timeoutB"
    "\020\n\016_max_page_sizeB\023\n\021_login_field_nameB\025"
    "\n\023_login_button_colorB\034\n\032_login_button_b"
    "order_colorB\032\n\030_login_button_text_color\""
    "\255\023\n\nConfigSaml\022\033\n\006enable\030\001 \001(\010H\000R\006enable"
    "\210\001\001\0226\n\025enable_sync_with_ldap\030\002 \001(\010H\001R\022en"
    "ableSyncWithLdap\210\001\001\022N\n\"enable_sync_with_"
    "ldap_include_auth\030\003 \001(\010H\002R\035enableSyncWit"
    "hLdapIncludeAuth\210\001\001\022:\n\027ignore_guests_lda"
    "p_sync\030\004 \001(\010H\003R\024ignoreGuestsLdapSync\210\001\001\022"
    "\033\n\006verify\030\005 \001(\010H\004R\006verify\210\001\001\022\035\n\007encrypt\030"
    "\006 \001(\010H\005R\007encrypt\210\001\001\022&\n\014sign_request\030\007 \001("
    "\010H\006R\013signRequest\210\001\001\022\034\n\007idp_url\030\010 \001(\tH\007R\006"
    "idpUrl\210\001\001\0221\n\022idp_descriptor_url\030\t \001(\tH\010R"
    "\020idpDescriptorUrl\210\001\001\022-\n\020idp_metadata_url"
    "\030\n \001(\tH\tR\016idpMetadataUrl\210\001\001\022C\n\033service_p"
    "rovider_identifier\030\013 \001(\tH\nR\031serviceProvi"
    "derIdentifier\210\001\001\022H\n\036assertion_consumer_s"
    "ervice_url\030\014 \001(\tH\013R\033assertionConsumerSer"
    "viceUrl\210\001\001\0224\n\023signature_algorithm\030\r \001(\tH"
    "\014R\022signatureAlgorithm\210\001\001\0224\n\023canonical_al"
    "gorithm\030\016 \001(\tH\rR\022canonicalAlgorithm\210\001\001\022:"
    "\n\027scoping_idp_provider_id\030\017 \001(\tH\016R\024scopi"
    "ngIdpProviderId\210\001\001\022-\n\020scoping_idp_name\030\020"
    " \001(\tH\017R\016scopingIdpName\210\001\001\0225\n\024idp_certifi"
    "cate_file\030\021 \001(\tH\020R\022idpCertificateFile\210\001\001"
    "\022;\n\027public_certificate_file\030\022 \001(\tH\021R\025pub"
    "licCertificateFile\210\001\001\022-\n\020private_key_fil"
    "e\030\023 \001(\tH\022R\016privateKeyFile\210\001\001\022&\n\014id_attri"
    "bute\030\024 \001(\tH\023R\013idAttribute\210\001\001\0229\n\026enable_a"
    "dmin_attribute\030\025 \001(\010H\024R\024enableAdminAttri"
    "bute\210\001\001\022,\n\017admin_attribute\030\026 \001(\tH\025R\016admi"
    "nAttribute\210\001\001\0225\n\024first_name_attribute\030\027 "
    "\001(\tH\026R\022firstNameAttribute\210\001\001\0223\n\023last_nam"
    "e_attribute\030\030 \001(\tH\027R\021lastNameAttribute\210\001"
    "\001\022,\n\017email_attribute\030\031 \001(\tH\030R\016emailAttri"
    "bute\210\001\001\0222\n\022username_attribute\030\032 \001(\tH\031R\021u"
    "sernameAttribute\210\001\001\0222\n\022nickname_attribut"
    "e\030\033 \001(\tH\032R\021nicknameAttribute\210\001\001\022.\n\020local"
    "e_attribute\030\034 \001(\tH\033R\017localeAttribute\210\001\001\022"
    "2\n\022position_attribute\030\035 \001(\tH\034R\021positionA"
    "ttribute\210\001\001\022/\n\021login_button_text\030\036 \001(\tH\035"
    "R\017loginButtonText\210\001\001\0221\n\022login_button_col"
    "or\030\037 \001(\tH\036R\020loginButtonColor\210\001\001\022>\n\031login"
    "_button_border_color\030  \001(\tH\037R\026loginButto"
    "nBorderColor\210\001\001\022:\n\027login_button_text_col"
    "or\030! \001(\tH R\024loginButtonTextColor\210\001\001B\t\n\007_"
    "enableB\030\n\026_enable_sync_with_ldapB%\n#_ena"
    "ble_sync_with_ldap_include_authB\032\n\030_igno"
    "re_guests_ldap_syncB\t\n\007_verifyB\n\n\010_encry"
    "ptB\017\n\r_sign_requestB\n\n\010_idp_urlB\025\n\023_idp_"
    "descriptor_urlB\023\n\021_idp_metadata_urlB\036\n\034_"
    "service_provider_identifierB!\n\037_assertio"
    "n_consumer_service_urlB\026\n\024_signature_alg"
    "orithmB\026\n\024_canonical_algorithmB\032\n\030_scopi"
    "ng_idp_provider_idB\023\n\021_scoping_idp_nameB"
    "\027\n\025_idp_certificate_fileB\032\n\030_public_cert"
    "ificate_fileB\023\n\021_private_key_fileB\017\n\r_id"
    "_attributeB\031\n\027_enable_admin_attributeB\022\n"
    "\020_admin_attributeB\027\n\025_first_name_attribu"
    "teB\026\n\024_last_name_attributeB\022\n\020_email_att"
    "ributeB\025\n\023_username_attributeB\025\n\023_nickna"
    "me_attributeB\023\n\021_locale_attributeB\025\n\023_po"
    "sition_attributeB\024\n\022_login_button_textB\025"
    "\n\023_login_button_colorB\034\n\032_login_button_b"
    "order_colorB\032\n\030_login_button_text_color\""
    "\301\005\n\017ConfigNativeApp\0223\n\026app_custom_url_sc"
    "hemes\030\001 \003(\tR\023appCustomUrlSchemes\022/\n\021app_"
    "download_link\030\002 \001(\tH\000R\017appDownloadLink\210\001"
    "\001\022>\n\031android_app_download_link\030\003 \001(\tH\001R\026"
    "androidAppDownloadLink\210\001\001\0226\n\025ios_app_dow"
    "nload_link\030\004 \001(\tH\002R\022iosAppDownloadLink\210\001"
    "\001\022;\n\027mobile_external_browser\030\005 \001(\010H\003R\025mo"
    "bileExternalBrowser\210\001\001\022=\n\030mobile_enable_"
    "biometrics\030\006 \001(\010H\004R\026mobileEnableBiometri"
    "cs\210\001\001\022F\n\035mobile_prevent_screen_capture\030\007"
    " \001(\010H\005R\032mobilePreventScreenCapture\210\001\001\022C\n"
    "\033mobile_jailbreak_protection\030\010 \001(\010H\006R\031mo"
    "bileJailbreakProtection\210\001\001B\024\n\022_app_downl"
    "oad_linkB\034\n\032_android_app_download_linkB\030"
    "\n\026_ios_app_download_linkB\032\n\030_mobile_exte"
    "rnal_browserB\033\n\031_mobile_enable_biometric"
    "sB \n\036_mobile_prevent_screen_captureB\036\n\034_"
    "mobile_jailbreak_protection\"\253\005\n\021ConfigMe"
    "ilisearch\022#\n\nserver_url\030\001 \001(\tH\000R\nserver_"
    "url\210\001\001\022\"\n\nmaster_key\030\002 \001(\tH\001R\tmasterKey\210"
    "\001\001\022,\n\017enable_indexing\030\003 \001(\010H\002R\016enableInd"
    "exing\210\001\001\022.\n\020enable_searching\030\004 \001(\010H\003R\017en"
    "ableSearching\210\001\001\0224\n\023enable_autocomplete\030"
    "\005 \001(\010H\004R\022enableAutocomplete\210\001\001\022\"\n\nbatch_"
    "size\030\006 \001(\005H\005R\tbatchSize\210\001\001\022;\n\027request_ti"
    "meout_seconds\030\007 \001(\005H\006R\025requestTimeoutSec"
    "onds\210\001\001\022&\n\014index_prefix\030\010 \001(\tH\007R\013indexPr"
    "efix\210\001\001\022-\n\020search_cutoff_ms\030\t \001(\005H\010R\016sea"
    "rchCutoffMs\210\001\001\0227\n\025enable_typo_tolerance\030"
    "\n \001(\010H\tR\023enableTypoTolerance\210\001\001B\r\n\013_serv"
    "er_urlB\r\n\013_master_keyB\022\n\020_enable_indexin"
    "gB\023\n\021_enable_searchingB\026\n\024_enable_autoco"
    "mpleteB\r\n\013_batch_sizeB\032\n\030_request_timeou"
    "t_secondsB\017\n\r_index_prefixB\023\n\021_search_cu"
    "toff_msB\030\n\026_enable_typo_tolerance\"\272\003\n\013Co"
    "nfigBleve\022 \n\tindex_dir\030\001 \001(\tH\000R\010indexDir"
    "\210\001\001\022,\n\017enable_indexing\030\002 \001(\010H\001R\016enableIn"
    "dexing\210\001\001\022.\n\020enable_searching\030\003 \001(\010H\002R\017e"
    "nableSearching\210\001\001\0224\n\023enable_autocomplete"
    "\030\004 \001(\010H\003R\022enableAutocomplete\210\001\001\022M\n!bulk_"
    "indexing_time_window_seconds\030\005 \001(\005H\004R\035bu"
    "lkIndexingTimeWindowSeconds\210\001\001\022\"\n\nbatch_"
    "size\030\006 \001(\005H\005R\tbatchSize\210\001\001B\014\n\n_index_dir"
    "B\022\n\020_enable_indexingB\023\n\021_enable_searchin"
    "gB\026\n\024_enable_autocompleteB$\n\"_bulk_index"
    "ing_time_window_secondsB\r\n\013_batch_size\"\354"
    "\006\n\023ConfigDataRetention\022;\n\027enable_message"
    "_deletion\030\001 \001(\010H\000R\025enableMessageDeletion"
    "\210\001\001\0225\n\024enable_file_deletion\030\002 \001(\010H\001R\022ena"
    "bleFileDeletion\210\001\001\0229\n\026enable_boards_dele"
    "tion\030\003 \001(\010H\002R\024enableBoardsDeletion\210\001\001\022;\n"
    "\027message_retention_hours\030\004 \001(\005H\003R\025messag"
    "eRetentionHours\210\001\001\0225\n\024file_retention_hou"
    "rs\030\005 \001(\005H\004R\022fileRetentionHours\210\001\001\0227\n\025boa"
    "rds_retention_days\030\006 \001(\005H\005R\023boardsRetent"
    "ionDays\210\001\001\022:\n\027deletion_job_start_time\030\007 "
    "\001(\tH\006R\024deletionJobStartTime\210\001\001\022\"\n\nbatch_"
    "size\030\010 \001(\005H\007R\tbatchSize\210\001\001\022N\n!time_betwe"
    "en_batches_milliseconds\030\t \001(\005H\010R\036timeBet"
    "weenBatchesMilliseconds\210\001\001\022<\n\030retention_"
    "ids_batch_size\030\n \001(\005H\tR\025retentionIdsBatc"
    "hSize\210\001\001B\032\n\030_enable_message_deletionB\027\n\025"
    "_enable_file_deletionB\031\n\027_enable_boards_"
    "deletionB\032\n\030_message_retention_hoursB\027\n\025"
    "_file_retention_hoursB\030\n\026_boards_retenti"
    "on_daysB\032\n\030_deletion_job_start_timeB\r\n\013_"
    "batch_sizeB$\n\"_time_between_batches_mill"
    "isecondsB\033\n\031_retention_ids_batch_size\"\264\002"
    "\n\020ConfigImageProxy\022\033\n\006enable\030\001 \001(\010H\000R\006en"
    "able\210\001\001\022-\n\020image_proxy_type\030\002 \001(\tH\001R\016ima"
    "geProxyType\210\001\001\0228\n\026remote_image_proxy_url"
    "\030\003 \001(\tH\002R\023remoteImageProxyUrl\210\001\001\022@\n\032remo"
    "te_image_proxy_options\030\004 \001(\tH\003R\027remoteIm"
    "ageProxyOptions\210\001\001B\t\n\007_enableB\023\n\021_image_"
    "proxy_typeB\031\n\027_remote_image_proxy_urlB\035\n"
    "\033_remote_image_proxy_options\"\315\010\n\006Config\022"
    ")\n\004main\030\001 \001(\0132\025.common.v1.ConfigMainR\004ma"
    "in\0225\n\010services\030\002 \001(\0132\031.common.v1.ConfigS"
    "ervicesR\010services\0225\n\010security\030\003 \001(\0132\031.co"
    "mmon.v1.ConfigSecurityR\010security\022,\n\005cach"
    "e\030\004 \001(\0132\026.common.v1.CacheConfigR\005cache\0222"
    "\n\007metrics\030\005 \001(\0132\030.common.v1.ConfigMetric"
    "sR\007metrics\022&\n\003sso\030\006 \001(\0132\024.common.v1.Conf"
    "igSSOR\003sso\022&\n\003sql\030\007 \001(\0132\024.common.v1.Conf"
    "igSqlR\003sql\0225\n\010password\030\010 \001(\0132\031.common.v1"
    ".ConfigPasswordR\010password\022)\n\004file\030\t \001(\0132"
    "\025.common.v1.ConfigFileR\004file\022,\n\005email\030\n "
    "\001(\0132\026.common.v1.ConfigEmailR\005email\0229\n\nra"
    "te_limit\030\013 \001(\0132\032.common.v1.ConfigRateLim"
    "itR\trateLimit\0222\n\007privacy\030\014 \001(\0132\030.common."
    "v1.ConfigPrivacyR\007privacy\0222\n\007support\030\r \001"
    "(\0132\030.common.v1.ConfigSupportR\007support\022A\n"
    "\014localization\030\016 \001(\0132\035.common.v1.ConfigLo"
    "calizationR\014localization\022)\n\004ldap\030\017 \001(\0132\025"
    ".common.v1.ConfigLdapR\004ldap\022)\n\004saml\030\020 \001("
    "\0132\025.common.v1.ConfigSamlR\004saml\0229\n\nnative"
    "_app\030\021 \001(\0132\032.common.v1.ConfigNativeAppR\t"
    "nativeApp\022>\n\013meilisearch\030\022 \001(\0132\034.common."
    "v1.ConfigMeilisearchR\013meilisearch\022,\n\005ble"
    "ve\030\023 \001(\0132\026.common.v1.ConfigBleveR\005bleve\022"
    "E\n\016data_retention\030\024 \001(\0132\036.common.v1.Conf"
    "igDataRetentionR\rdataRetention\022<\n\013image_"
    "proxy\030\025 \001(\0132\033.common.v1.ConfigImageProxy"
    "R\nimageProxy\"\022\n\020ConfigGetRequest\"u\n\021Conf"
    "igGetResponse\022\'\n\004data\030\001 \001(\0132\021.common.v1."
    "ConfigH\000R\004data\022+\n\005error\030\002 \001(\0132\023.shared.v"
    "1.AppErrorH\000R\005errorB\n\n\010response\"@\n\023Confi"
    "gUpdateRequest\022)\n\006config\030\001 \001(\0132\021.common."
    "v1.ConfigR\006config\"x\n\024ConfigUpdateRespons"
    "e\022\'\n\004data\030\001 \001(\0132\021.common.v1.ConfigH\000R\004da"
    "ta\022+\n\005error\030\002 \001(\0132\023.shared.v1.AppErrorH\000"
    "R\005errorB\n\n\010response\"z\n\026ConfigListenerRes"
    "ponse\022\'\n\004data\030\001 \001(\0132\021.common.v1.ConfigH\000"
    "R\004data\022+\n\005error\030\002 \001(\0132\023.shared.v1.AppErr"
    "orH\000R\005errorB\n\n\010response\"4\n\025ConfigListene"
    "rRequest\022\033\n\tclient_id\030\001 \001(\tR\010clientIdBq\n"
    "\032org.megacommerce.common.v1B\013ConfigProto"
    "ZCgithub.com/ahmad-khatib0-org/megacomme"
    "rce-proto/gen/go/common/v1;v1\370\001\001b\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_common_2fv1_2fconfig_2eproto_deps[1] = {
        &::descriptor_table_shared_2fv1_2ferror_2eproto,
};
static ::absl::once_flag descriptor_table_common_2fv1_2fconfig_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_common_2fv1_2fconfig_2eproto = {
    false,
    false,
    21800,
    descriptor_table_protodef_common_2fv1_2fconfig_2eproto,
    "common/v1/config.proto",
    &descriptor_table_common_2fv1_2fconfig_2eproto_once,
    descriptor_table_common_2fv1_2fconfig_2eproto_deps,
    1,
    29,
    schemas,
    file_default_instances,
    TableStruct_common_2fv1_2fconfig_2eproto::offsets,
    file_level_enum_descriptors_common_2fv1_2fconfig_2eproto,
    file_level_service_descriptors_common_2fv1_2fconfig_2eproto,
};
namespace common {
namespace v1 {
// ===================================================================

class ConfigMain::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConfigMain>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_._has_bits_);
};

ConfigMain::ConfigMain(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigMain_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigMain)
}
PROTOBUF_NDEBUG_INLINE ConfigMain::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::ConfigMain& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        env_(arena, from.env_),
        site_name_(arena, from.site_name_),
        site_url_(arena, from.site_url_),
        restrict_link_previews_(arena, from.restrict_link_previews_) {}

ConfigMain::ConfigMain(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigMain& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigMain_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigMain* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, enable_link_previews_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, enable_link_previews_),
           offsetof(Impl_, feature_flag_sync_interval_seconds_) -
               offsetof(Impl_, enable_link_previews_) +
               sizeof(Impl_::feature_flag_sync_interval_seconds_));

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigMain)
}
PROTOBUF_NDEBUG_INLINE ConfigMain::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        env_(arena),
        site_name_(arena),
        site_url_(arena),
        restrict_link_previews_(arena) {}

inline void ConfigMain::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, enable_link_previews_),
           0,
           offsetof(Impl_, feature_flag_sync_interval_seconds_) -
               offsetof(Impl_, enable_link_previews_) +
               sizeof(Impl_::feature_flag_sync_interval_seconds_));
}
ConfigMain::~ConfigMain() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigMain)
  SharedDtor(*this);
}
inline void ConfigMain::SharedDtor(MessageLite& self) {
  ConfigMain& this_ = static_cast<ConfigMain&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.env_.Destroy();
  this_._impl_.site_name_.Destroy();
  this_._impl_.site_url_.Destroy();
  this_._impl_.restrict_link_previews_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConfigMain::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigMain(arena);
}
constexpr auto ConfigMain::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ConfigMain),
                                            alignof(ConfigMain));
}
constexpr auto ConfigMain::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigMain_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigMain::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigMain>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigMain::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigMain>(), &ConfigMain::ByteSizeLong,
              &ConfigMain::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_._cached_size_),
          false,
      },
      &ConfigMain::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigMain_class_data_ =
        ConfigMain::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigMain::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigMain_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigMain_class_data_.tc_table);
  return ConfigMain_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 21, 0, 87, 2>
ConfigMain::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_._has_bits_),
    0, // no _extensions_
    22, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4290773000,  // skipmap
    offsetof(decltype(_table_), field_entries),
    21,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ConfigMain_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigMain>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string env = 1 [json_name = "env"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.env_)}},
    // optional string site_name = 2 [json_name = "siteName"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.site_name_)}},
    // optional string site_url = 3 [json_name = "siteUrl"];
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.site_url_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool enable_link_previews = 5 [json_name = "enableLinkPreviews"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigMain, _impl_.enable_link_previews_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.enable_link_previews_)}},
    // optional string restrict_link_previews = 6 [json_name = "restrictLinkPreviews"];
    {::_pbi::TcParser::FastUS1,
     {50, 3, 0, PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.restrict_link_previews_)}},
    // optional bool enable_client_performance_debugging = 7 [json_name = "enableClientPerformanceDebugging"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigMain, _impl_.enable_client_performance_debugging_), 5>(),
     {56, 5, 0, PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.enable_client_performance_debugging_)}},
    // optional bool enable_gif_picker = 8 [json_name = "enableGifPicker"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigMain, _impl_.enable_gif_picker_), 6>(),
     {64, 6, 0, PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.enable_gif_picker_)}},
    // optional bool enable_custom_emoji = 9 [json_name = "enableCustomEmoji"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigMain, _impl_.enable_custom_emoji_), 7>(),
     {72, 7, 0, PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.enable_custom_emoji_)}},
    // optional bool enable_emoji_picker = 10 [json_name = "enableEmojiPicker"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigMain, _impl_.enable_emoji_picker_), 8>(),
     {80, 8, 0, PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.enable_emoji_picker_)}},
    // optional int64 time_between_user_typing_updates_milliseconds = 11 [json_name = "timeBetweenUserTypingUpdatesMilliseconds"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ConfigMain, _impl_.time_between_user_typing_updates_milliseconds_), 12>(),
     {88, 12, 0, PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.time_between_user_typing_updates_milliseconds_)}},
    // optional bool enable_file_search = 12 [json_name = "enableFileSearch"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigMain, _impl_.enable_file_search_), 9>(),
     {96, 9, 0, PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.enable_file_search_)}},
    // optional bool enable_user_typing_messages = 13 [json_name = "enableUserTypingMessages"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigMain, _impl_.enable_user_typing_messages_), 10>(),
     {104, 10, 0, PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.enable_user_typing_messages_)}},
    // optional bool enable_user_statuses = 14 [json_name = "enableUserStatuses"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigMain, _impl_.enable_user_statuses_), 11>(),
     {112, 11, 0, PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.enable_user_statuses_)}},
    // optional bool enable_email_invitations = 15 [json_name = "enableEmailInvitations"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigMain, _impl_.enable_email_invitations_), 13>(),
     {120, 13, 0, PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.enable_email_invitations_)}},
    // optional bool enable_svgs = 16 [json_name = "enableSvgs"];
    {::_pbi::TcParser::FastV8S2,
     {384, 14, 0, PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.enable_svgs_)}},
    // optional bool allow_persistent_notifications = 17 [json_name = "allowPersistentNotifications"];
    {::_pbi::TcParser::FastV8S2,
     {392, 15, 0, PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.allow_persistent_notifications_)}},
    // optional int32 persistent_notification_interval_minutes = 18 [json_name = "persistentNotificationIntervalMinutes"];
    {::_pbi::TcParser::FastV32S2,
     {400, 17, 0, PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.persistent_notification_interval_minutes_)}},
    // optional int32 persistent_notification_max_count = 19 [json_name = "persistentNotificationMaxCount"];
    {::_pbi::TcParser::FastV32S2,
     {408, 18, 0, PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.persistent_notification_max_count_)}},
    // optional int32 persistent_notification_max_recipients = 20 [json_name = "persistentNotificationMaxRecipients"];
    {::_pbi::TcParser::FastV32S2,
     {416, 19, 0, PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.persistent_notification_max_recipients_)}},
    // optional int32 feature_flag_sync_interval_seconds = 21 [json_name = "featureFlagSyncIntervalSeconds"];
    {::_pbi::TcParser::FastV32S2,
     {424, 20, 0, PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.feature_flag_sync_interval_seconds_)}},
    // optional bool allow_synced_drafts = 22 [json_name = "allowSyncedDrafts"];
    {::_pbi::TcParser::FastV8S2,
     {432, 16, 0, PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.allow_synced_drafts_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string env = 1 [json_name = "env"];
    {PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.env_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string site_name = 2 [json_name = "siteName"];
    {PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.site_name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string site_url = 3 [json_name = "siteUrl"];
    {PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.site_url_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool enable_link_previews = 5 [json_name = "enableLinkPreviews"];
    {PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.enable_link_previews_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string restrict_link_previews = 6 [json_name = "restrictLinkPreviews"];
    {PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.restrict_link_previews_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool enable_client_performance_debugging = 7 [json_name = "enableClientPerformanceDebugging"];
    {PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.enable_client_performance_debugging_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_gif_picker = 8 [json_name = "enableGifPicker"];
    {PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.enable_gif_picker_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_custom_emoji = 9 [json_name = "enableCustomEmoji"];
    {PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.enable_custom_emoji_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_emoji_picker = 10 [json_name = "enableEmojiPicker"];
    {PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.enable_emoji_picker_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int64 time_between_user_typing_updates_milliseconds = 11 [json_name = "timeBetweenUserTypingUpdatesMilliseconds"];
    {PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.time_between_user_typing_updates_milliseconds_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional bool enable_file_search = 12 [json_name = "enableFileSearch"];
    {PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.enable_file_search_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_user_typing_messages = 13 [json_name = "enableUserTypingMessages"];
    {PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.enable_user_typing_messages_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_user_statuses = 14 [json_name = "enableUserStatuses"];
    {PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.enable_user_statuses_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_email_invitations = 15 [json_name = "enableEmailInvitations"];
    {PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.enable_email_invitations_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_svgs = 16 [json_name = "enableSvgs"];
    {PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.enable_svgs_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool allow_persistent_notifications = 17 [json_name = "allowPersistentNotifications"];
    {PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.allow_persistent_notifications_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 persistent_notification_interval_minutes = 18 [json_name = "persistentNotificationIntervalMinutes"];
    {PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.persistent_notification_interval_minutes_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 persistent_notification_max_count = 19 [json_name = "persistentNotificationMaxCount"];
    {PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.persistent_notification_max_count_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 persistent_notification_max_recipients = 20 [json_name = "persistentNotificationMaxRecipients"];
    {PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.persistent_notification_max_recipients_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 feature_flag_sync_interval_seconds = 21 [json_name = "featureFlagSyncIntervalSeconds"];
    {PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.feature_flag_sync_interval_seconds_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool allow_synced_drafts = 22 [json_name = "allowSyncedDrafts"];
    {PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.allow_synced_drafts_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\24\3\11\10\0\26\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "common.v1.ConfigMain"
    "env"
    "site_name"
    "site_url"
    "restrict_link_previews"
  }},
};
PROTOBUF_NOINLINE void ConfigMain::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigMain)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.env_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.site_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.site_url_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.restrict_link_previews_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x000000f0u) != 0) {
    ::memset(&_impl_.enable_link_previews_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.enable_custom_emoji_) -
        reinterpret_cast<char*>(&_impl_.enable_link_previews_)) + sizeof(_impl_.enable_custom_emoji_));
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    ::memset(&_impl_.enable_emoji_picker_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.allow_persistent_notifications_) -
        reinterpret_cast<char*>(&_impl_.enable_emoji_picker_)) + sizeof(_impl_.allow_persistent_notifications_));
  }
  if ((cached_has_bits & 0x001f0000u) != 0) {
    ::memset(&_impl_.allow_synced_drafts_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.feature_flag_sync_interval_seconds_) -
        reinterpret_cast<char*>(&_impl_.allow_synced_drafts_)) + sizeof(_impl_.feature_flag_sync_interval_seconds_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigMain::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigMain& this_ = static_cast<const ConfigMain&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigMain::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigMain& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigMain)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional string env = 1 [json_name = "env"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    const ::std::string& _s = this_._internal_env();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigMain.env");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string site_name = 2 [json_name = "siteName"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    const ::std::string& _s = this_._internal_site_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigMain.site_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string site_url = 3 [json_name = "siteUrl"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    const ::std::string& _s = this_._internal_site_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigMain.site_url");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional bool enable_link_previews = 5 [json_name = "enableLinkPreviews"];
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this_._internal_enable_link_previews(), target);
  }

  // optional string restrict_link_previews = 6 [json_name = "restrictLinkPreviews"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    const ::std::string& _s = this_._internal_restrict_link_previews();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigMain.restrict_link_previews");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional bool enable_client_performance_debugging = 7 [json_name = "enableClientPerformanceDebugging"];
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this_._internal_enable_client_performance_debugging(), target);
  }

  // optional bool enable_gif_picker = 8 [json_name = "enableGifPicker"];
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this_._internal_enable_gif_picker(), target);
  }

  // optional bool enable_custom_emoji = 9 [json_name = "enableCustomEmoji"];
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this_._internal_enable_custom_emoji(), target);
  }

  // optional bool enable_emoji_picker = 10 [json_name = "enableEmojiPicker"];
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this_._internal_enable_emoji_picker(), target);
  }

  // optional int64 time_between_user_typing_updates_milliseconds = 11 [json_name = "timeBetweenUserTypingUpdatesMilliseconds"];
  if ((cached_has_bits & 0x00001000u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<11>(
            stream, this_._internal_time_between_user_typing_updates_milliseconds(), target);
  }

  // optional bool enable_file_search = 12 [json_name = "enableFileSearch"];
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this_._internal_enable_file_search(), target);
  }

  // optional bool enable_user_typing_messages = 13 [json_name = "enableUserTypingMessages"];
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this_._internal_enable_user_typing_messages(), target);
  }

  // optional bool enable_user_statuses = 14 [json_name = "enableUserStatuses"];
  if ((cached_has_bits & 0x00000800u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this_._internal_enable_user_statuses(), target);
  }

  // optional bool enable_email_invitations = 15 [json_name = "enableEmailInvitations"];
  if ((cached_has_bits & 0x00002000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        15, this_._internal_enable_email_invitations(), target);
  }

  // optional bool enable_svgs = 16 [json_name = "enableSvgs"];
  if ((cached_has_bits & 0x00004000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        16, this_._internal_enable_svgs(), target);
  }

  // optional bool allow_persistent_notifications = 17 [json_name = "allowPersistentNotifications"];
  if ((cached_has_bits & 0x00008000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        17, this_._internal_allow_persistent_notifications(), target);
  }

  // optional int32 persistent_notification_interval_minutes = 18 [json_name = "persistentNotificationIntervalMinutes"];
  if ((cached_has_bits & 0x00020000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        18, this_._internal_persistent_notification_interval_minutes(), target);
  }

  // optional int32 persistent_notification_max_count = 19 [json_name = "persistentNotificationMaxCount"];
  if ((cached_has_bits & 0x00040000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        19, this_._internal_persistent_notification_max_count(), target);
  }

  // optional int32 persistent_notification_max_recipients = 20 [json_name = "persistentNotificationMaxRecipients"];
  if ((cached_has_bits & 0x00080000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        20, this_._internal_persistent_notification_max_recipients(), target);
  }

  // optional int32 feature_flag_sync_interval_seconds = 21 [json_name = "featureFlagSyncIntervalSeconds"];
  if ((cached_has_bits & 0x00100000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        21, this_._internal_feature_flag_sync_interval_seconds(), target);
  }

  // optional bool allow_synced_drafts = 22 [json_name = "allowSyncedDrafts"];
  if ((cached_has_bits & 0x00010000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        22, this_._internal_allow_synced_drafts(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigMain)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigMain::ByteSizeLong(const MessageLite& base) {
  const ConfigMain& this_ = static_cast<const ConfigMain&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigMain::ByteSizeLong() const {
  const ConfigMain& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigMain)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x0001c000u & cached_has_bits) * 3;
  total_size += ::absl::popcount(0x00002ff0u & cached_has_bits) * 2;
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // optional string env = 1 [json_name = "env"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_env());
    }
    // optional string site_name = 2 [json_name = "siteName"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_site_name());
    }
    // optional string site_url = 3 [json_name = "siteUrl"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_site_url());
    }
    // optional string restrict_link_previews = 6 [json_name = "restrictLinkPreviews"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_restrict_link_previews());
    }
  }
   {
    // optional int64 time_between_user_typing_updates_milliseconds = 11 [json_name = "timeBetweenUserTypingUpdatesMilliseconds"];
    if ((cached_has_bits & 0x00001000u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this_._internal_time_between_user_typing_updates_milliseconds());
    }
  }
  if ((cached_has_bits & 0x001e0000u) != 0) {
    // optional int32 persistent_notification_interval_minutes = 18 [json_name = "persistentNotificationIntervalMinutes"];
    if ((cached_has_bits & 0x00020000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this_._internal_persistent_notification_interval_minutes());
    }
    // optional int32 persistent_notification_max_count = 19 [json_name = "persistentNotificationMaxCount"];
    if ((cached_has_bits & 0x00040000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this_._internal_persistent_notification_max_count());
    }
    // optional int32 persistent_notification_max_recipients = 20 [json_name = "persistentNotificationMaxRecipients"];
    if ((cached_has_bits & 0x00080000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this_._internal_persistent_notification_max_recipients());
    }
    // optional int32 feature_flag_sync_interval_seconds = 21 [json_name = "featureFlagSyncIntervalSeconds"];
    if ((cached_has_bits & 0x00100000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this_._internal_feature_flag_sync_interval_seconds());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigMain::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigMain*>(&to_msg);
  auto& from = static_cast<const ConfigMain&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigMain)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_env(from._internal_env());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_site_name(from._internal_site_name());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_site_url(from._internal_site_url());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_internal_set_restrict_link_previews(from._internal_restrict_link_previews());
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.enable_link_previews_ = from._impl_.enable_link_previews_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.enable_client_performance_debugging_ = from._impl_.enable_client_performance_debugging_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.enable_gif_picker_ = from._impl_.enable_gif_picker_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.enable_custom_emoji_ = from._impl_.enable_custom_emoji_;
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.enable_emoji_picker_ = from._impl_.enable_emoji_picker_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.enable_file_search_ = from._impl_.enable_file_search_;
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.enable_user_typing_messages_ = from._impl_.enable_user_typing_messages_;
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _this->_impl_.enable_user_statuses_ = from._impl_.enable_user_statuses_;
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      _this->_impl_.time_between_user_typing_updates_milliseconds_ = from._impl_.time_between_user_typing_updates_milliseconds_;
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      _this->_impl_.enable_email_invitations_ = from._impl_.enable_email_invitations_;
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      _this->_impl_.enable_svgs_ = from._impl_.enable_svgs_;
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      _this->_impl_.allow_persistent_notifications_ = from._impl_.allow_persistent_notifications_;
    }
  }
  if ((cached_has_bits & 0x001f0000u) != 0) {
    if ((cached_has_bits & 0x00010000u) != 0) {
      _this->_impl_.allow_synced_drafts_ = from._impl_.allow_synced_drafts_;
    }
    if ((cached_has_bits & 0x00020000u) != 0) {
      _this->_impl_.persistent_notification_interval_minutes_ = from._impl_.persistent_notification_interval_minutes_;
    }
    if ((cached_has_bits & 0x00040000u) != 0) {
      _this->_impl_.persistent_notification_max_count_ = from._impl_.persistent_notification_max_count_;
    }
    if ((cached_has_bits & 0x00080000u) != 0) {
      _this->_impl_.persistent_notification_max_recipients_ = from._impl_.persistent_notification_max_recipients_;
    }
    if ((cached_has_bits & 0x00100000u) != 0) {
      _this->_impl_.feature_flag_sync_interval_seconds_ = from._impl_.feature_flag_sync_interval_seconds_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigMain::CopyFrom(const ConfigMain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigMain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigMain::InternalSwap(ConfigMain* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.env_, &other->_impl_.env_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.site_name_, &other->_impl_.site_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.site_url_, &other->_impl_.site_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.restrict_link_previews_, &other->_impl_.restrict_link_previews_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.feature_flag_sync_interval_seconds_)
      + sizeof(ConfigMain::_impl_.feature_flag_sync_interval_seconds_)
      - PROTOBUF_FIELD_OFFSET(ConfigMain, _impl_.enable_link_previews_)>(
          reinterpret_cast<char*>(&_impl_.enable_link_previews_),
          reinterpret_cast<char*>(&other->_impl_.enable_link_previews_));
}

::google::protobuf::Metadata ConfigMain::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigServices::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConfigServices>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConfigServices, _impl_._has_bits_);
};

ConfigServices::ConfigServices(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigServices_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigServices)
}
PROTOBUF_NDEBUG_INLINE ConfigServices::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::ConfigServices& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        common_service_grpc_url_(arena, from.common_service_grpc_url_),
        user_service_grpc_url_(arena, from.user_service_grpc_url_),
        products_service_grpc_url_(arena, from.products_service_grpc_url_),
        jaeger_collector_url_(arena, from.jaeger_collector_url_),
        common_service_prometheus_url_(arena, from.common_service_prometheus_url_),
        user_service_prometheus_url_(arena, from.user_service_prometheus_url_),
        products_service_prometheus_url_(arena, from.products_service_prometheus_url_) {}

ConfigServices::ConfigServices(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigServices& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigServices_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigServices* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.users_service_max_receive_message_size_bytes_ = from._impl_.users_service_max_receive_message_size_bytes_;

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigServices)
}
PROTOBUF_NDEBUG_INLINE ConfigServices::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        common_service_grpc_url_(arena),
        user_service_grpc_url_(arena),
        products_service_grpc_url_(arena),
        jaeger_collector_url_(arena),
        common_service_prometheus_url_(arena),
        user_service_prometheus_url_(arena),
        products_service_prometheus_url_(arena) {}

inline void ConfigServices::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.users_service_max_receive_message_size_bytes_ = {};
}
ConfigServices::~ConfigServices() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigServices)
  SharedDtor(*this);
}
inline void ConfigServices::SharedDtor(MessageLite& self) {
  ConfigServices& this_ = static_cast<ConfigServices&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.common_service_grpc_url_.Destroy();
  this_._impl_.user_service_grpc_url_.Destroy();
  this_._impl_.products_service_grpc_url_.Destroy();
  this_._impl_.jaeger_collector_url_.Destroy();
  this_._impl_.common_service_prometheus_url_.Destroy();
  this_._impl_.user_service_prometheus_url_.Destroy();
  this_._impl_.products_service_prometheus_url_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConfigServices::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigServices(arena);
}
constexpr auto ConfigServices::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ConfigServices),
                                            alignof(ConfigServices));
}
constexpr auto ConfigServices::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigServices_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigServices::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigServices>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigServices::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigServices>(), &ConfigServices::ByteSizeLong,
              &ConfigServices::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigServices, _impl_._cached_size_),
          false,
      },
      &ConfigServices::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigServices_class_data_ =
        ConfigServices::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigServices::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigServices_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigServices_class_data_.tc_table);
  return ConfigServices_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 217, 2>
ConfigServices::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigServices, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ConfigServices_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigServices>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional int64 users_service_max_receive_message_size_bytes = 8 [json_name = "usersServiceMaxReceiveMessageSizeBytes"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ConfigServices, _impl_.users_service_max_receive_message_size_bytes_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(ConfigServices, _impl_.users_service_max_receive_message_size_bytes_)}},
    // optional string common_service_grpc_url = 1 [json_name = "commonServiceGrpcUrl"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigServices, _impl_.common_service_grpc_url_)}},
    // optional string user_service_grpc_url = 2 [json_name = "userServiceGrpcUrl"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ConfigServices, _impl_.user_service_grpc_url_)}},
    // optional string products_service_grpc_url = 3 [json_name = "productsServiceGrpcUrl"];
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(ConfigServices, _impl_.products_service_grpc_url_)}},
    // optional string jaeger_collector_url = 4 [json_name = "jaegerCollectorUrl"];
    {::_pbi::TcParser::FastUS1,
     {34, 3, 0, PROTOBUF_FIELD_OFFSET(ConfigServices, _impl_.jaeger_collector_url_)}},
    // optional string common_service_prometheus_url = 5 [json_name = "commonServicePrometheusUrl"];
    {::_pbi::TcParser::FastUS1,
     {42, 4, 0, PROTOBUF_FIELD_OFFSET(ConfigServices, _impl_.common_service_prometheus_url_)}},
    // optional string user_service_prometheus_url = 6 [json_name = "userServicePrometheusUrl"];
    {::_pbi::TcParser::FastUS1,
     {50, 5, 0, PROTOBUF_FIELD_OFFSET(ConfigServices, _impl_.user_service_prometheus_url_)}},
    // optional string products_service_prometheus_url = 7 [json_name = "productsServicePrometheusUrl"];
    {::_pbi::TcParser::FastUS1,
     {58, 6, 0, PROTOBUF_FIELD_OFFSET(ConfigServices, _impl_.products_service_prometheus_url_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string common_service_grpc_url = 1 [json_name = "commonServiceGrpcUrl"];
    {PROTOBUF_FIELD_OFFSET(ConfigServices, _impl_.common_service_grpc_url_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string user_service_grpc_url = 2 [json_name = "userServiceGrpcUrl"];
    {PROTOBUF_FIELD_OFFSET(ConfigServices, _impl_.user_service_grpc_url_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string products_service_grpc_url = 3 [json_name = "productsServiceGrpcUrl"];
    {PROTOBUF_FIELD_OFFSET(ConfigServices, _impl_.products_service_grpc_url_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string jaeger_collector_url = 4 [json_name = "jaegerCollectorUrl"];
    {PROTOBUF_FIELD_OFFSET(ConfigServices, _impl_.jaeger_collector_url_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string common_service_prometheus_url = 5 [json_name = "commonServicePrometheusUrl"];
    {PROTOBUF_FIELD_OFFSET(ConfigServices, _impl_.common_service_prometheus_url_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string user_service_prometheus_url = 6 [json_name = "userServicePrometheusUrl"];
    {PROTOBUF_FIELD_OFFSET(ConfigServices, _impl_.user_service_prometheus_url_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string products_service_prometheus_url = 7 [json_name = "productsServicePrometheusUrl"];
    {PROTOBUF_FIELD_OFFSET(ConfigServices, _impl_.products_service_prometheus_url_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int64 users_service_max_receive_message_size_bytes = 8 [json_name = "usersServiceMaxReceiveMessageSizeBytes"];
    {PROTOBUF_FIELD_OFFSET(ConfigServices, _impl_.users_service_max_receive_message_size_bytes_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\30\27\25\31\24\35\33\37\0\0\0\0\0\0\0\0"
    "common.v1.ConfigServices"
    "common_service_grpc_url"
    "user_service_grpc_url"
    "products_service_grpc_url"
    "jaeger_collector_url"
    "common_service_prometheus_url"
    "user_service_prometheus_url"
    "products_service_prometheus_url"
  }},
};
PROTOBUF_NOINLINE void ConfigServices::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigServices)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.common_service_grpc_url_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.user_service_grpc_url_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.products_service_grpc_url_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.jaeger_collector_url_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.common_service_prometheus_url_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _impl_.user_service_prometheus_url_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _impl_.products_service_prometheus_url_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.users_service_max_receive_message_size_bytes_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigServices::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigServices& this_ = static_cast<const ConfigServices&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigServices::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigServices& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigServices)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional string common_service_grpc_url = 1 [json_name = "commonServiceGrpcUrl"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    const ::std::string& _s = this_._internal_common_service_grpc_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigServices.common_service_grpc_url");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string user_service_grpc_url = 2 [json_name = "userServiceGrpcUrl"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    const ::std::string& _s = this_._internal_user_service_grpc_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigServices.user_service_grpc_url");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string products_service_grpc_url = 3 [json_name = "productsServiceGrpcUrl"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    const ::std::string& _s = this_._internal_products_service_grpc_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigServices.products_service_grpc_url");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string jaeger_collector_url = 4 [json_name = "jaegerCollectorUrl"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    const ::std::string& _s = this_._internal_jaeger_collector_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigServices.jaeger_collector_url");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string common_service_prometheus_url = 5 [json_name = "commonServicePrometheusUrl"];
  if ((cached_has_bits & 0x00000010u) != 0) {
    const ::std::string& _s = this_._internal_common_service_prometheus_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigServices.common_service_prometheus_url");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional string user_service_prometheus_url = 6 [json_name = "userServicePrometheusUrl"];
  if ((cached_has_bits & 0x00000020u) != 0) {
    const ::std::string& _s = this_._internal_user_service_prometheus_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigServices.user_service_prometheus_url");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional string products_service_prometheus_url = 7 [json_name = "productsServicePrometheusUrl"];
  if ((cached_has_bits & 0x00000040u) != 0) {
    const ::std::string& _s = this_._internal_products_service_prometheus_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigServices.products_service_prometheus_url");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional int64 users_service_max_receive_message_size_bytes = 8 [json_name = "usersServiceMaxReceiveMessageSizeBytes"];
  if ((cached_has_bits & 0x00000080u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<8>(
            stream, this_._internal_users_service_max_receive_message_size_bytes(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigServices)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigServices::ByteSizeLong(const MessageLite& base) {
  const ConfigServices& this_ = static_cast<const ConfigServices&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigServices::ByteSizeLong() const {
  const ConfigServices& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigServices)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // optional string common_service_grpc_url = 1 [json_name = "commonServiceGrpcUrl"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_common_service_grpc_url());
    }
    // optional string user_service_grpc_url = 2 [json_name = "userServiceGrpcUrl"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_user_service_grpc_url());
    }
    // optional string products_service_grpc_url = 3 [json_name = "productsServiceGrpcUrl"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_products_service_grpc_url());
    }
    // optional string jaeger_collector_url = 4 [json_name = "jaegerCollectorUrl"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_jaeger_collector_url());
    }
    // optional string common_service_prometheus_url = 5 [json_name = "commonServicePrometheusUrl"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_common_service_prometheus_url());
    }
    // optional string user_service_prometheus_url = 6 [json_name = "userServicePrometheusUrl"];
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_user_service_prometheus_url());
    }
    // optional string products_service_prometheus_url = 7 [json_name = "productsServicePrometheusUrl"];
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_products_service_prometheus_url());
    }
    // optional int64 users_service_max_receive_message_size_bytes = 8 [json_name = "usersServiceMaxReceiveMessageSizeBytes"];
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this_._internal_users_service_max_receive_message_size_bytes());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigServices::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigServices*>(&to_msg);
  auto& from = static_cast<const ConfigServices&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigServices)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_common_service_grpc_url(from._internal_common_service_grpc_url());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_user_service_grpc_url(from._internal_user_service_grpc_url());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_products_service_grpc_url(from._internal_products_service_grpc_url());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_internal_set_jaeger_collector_url(from._internal_jaeger_collector_url());
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_internal_set_common_service_prometheus_url(from._internal_common_service_prometheus_url());
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_internal_set_user_service_prometheus_url(from._internal_user_service_prometheus_url());
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_internal_set_products_service_prometheus_url(from._internal_products_service_prometheus_url());
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.users_service_max_receive_message_size_bytes_ = from._impl_.users_service_max_receive_message_size_bytes_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigServices::CopyFrom(const ConfigServices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigServices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigServices::InternalSwap(ConfigServices* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.common_service_grpc_url_, &other->_impl_.common_service_grpc_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_service_grpc_url_, &other->_impl_.user_service_grpc_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.products_service_grpc_url_, &other->_impl_.products_service_grpc_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.jaeger_collector_url_, &other->_impl_.jaeger_collector_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.common_service_prometheus_url_, &other->_impl_.common_service_prometheus_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_service_prometheus_url_, &other->_impl_.user_service_prometheus_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.products_service_prometheus_url_, &other->_impl_.products_service_prometheus_url_, arena);
  swap(_impl_.users_service_max_receive_message_size_bytes_, other->_impl_.users_service_max_receive_message_size_bytes_);
}

::google::protobuf::Metadata ConfigServices::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::ConfigSecurity_RestrictedUsernamesEntry_DoNotUse()
    : SuperType(ConfigSecurity_RestrictedUsernamesEntry_DoNotUse_class_data_.base()) {}
ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::ConfigSecurity_RestrictedUsernamesEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : SuperType(arena, ConfigSecurity_RestrictedUsernamesEntry_DoNotUse_class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::ConfigSecurity_RestrictedUsernamesEntry_DoNotUse() : SuperType() {}
ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::ConfigSecurity_RestrictedUsernamesEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
inline void* PROTOBUF_NONNULL ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigSecurity_RestrictedUsernamesEntry_DoNotUse(arena);
}
constexpr auto ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ConfigSecurity_RestrictedUsernamesEntry_DoNotUse),
                                            alignof(ConfigSecurity_RestrictedUsernamesEntry_DoNotUse));
}
constexpr auto ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigSecurity_RestrictedUsernamesEntry_DoNotUse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigSecurity_RestrictedUsernamesEntry_DoNotUse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::SharedDtor,
          static_cast<void (::google::protobuf::MessageLite::*)()>(&ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::ClearImpl),
              ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
              ,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigSecurity_RestrictedUsernamesEntry_DoNotUse, _impl_._cached_size_),
          false,
      },
      &ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigSecurity_RestrictedUsernamesEntry_DoNotUse_class_data_ =
        ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigSecurity_RestrictedUsernamesEntry_DoNotUse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigSecurity_RestrictedUsernamesEntry_DoNotUse_class_data_.tc_table);
  return ConfigSecurity_RestrictedUsernamesEntry_DoNotUse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 66, 2>
ConfigSecurity_RestrictedUsernamesEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigSecurity_RestrictedUsernamesEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ConfigSecurity_RestrictedUsernamesEntry_DoNotUse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigSecurity_RestrictedUsernamesEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2 [json_name = "value"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ConfigSecurity_RestrictedUsernamesEntry_DoNotUse, _impl_.value_)}},
    // string key = 1 [json_name = "key"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigSecurity_RestrictedUsernamesEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1 [json_name = "key"];
    {PROTOBUF_FIELD_OFFSET(ConfigSecurity_RestrictedUsernamesEntry_DoNotUse, _impl_.key_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2 [json_name = "value"];
    {PROTOBUF_FIELD_OFFSET(ConfigSecurity_RestrictedUsernamesEntry_DoNotUse, _impl_.value_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\61\3\5\0\0\0\0\0"
    "common.v1.ConfigSecurity.RestrictedUsernamesEntry"
    "key"
    "value"
  }},
};
// ===================================================================

class ConfigSecurity::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConfigSecurity>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_._has_bits_);
};

ConfigSecurity::ConfigSecurity(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigSecurity_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigSecurity)
}
PROTOBUF_NDEBUG_INLINE ConfigSecurity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::ConfigSecurity& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        restricted_usernames_{visibility, arena, from.restricted_usernames_},
        allow_cors_from_(arena, from.allow_cors_from_),
        cors_exposed_headers_(arena, from.cors_exposed_headers_),
        email_confirmation_url_(arena, from.email_confirmation_url_) {}

ConfigSecurity::ConfigSecurity(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigSecurity& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigSecurity_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigSecurity* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, maximum_login_attempts_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, maximum_login_attempts_),
           offsetof(Impl_, token_password_reset_expiry_in_hours_) -
               offsetof(Impl_, maximum_login_attempts_) +
               sizeof(Impl_::token_password_reset_expiry_in_hours_));

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigSecurity)
}
PROTOBUF_NDEBUG_INLINE ConfigSecurity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        restricted_usernames_{visibility, arena},
        allow_cors_from_(arena),
        cors_exposed_headers_(arena),
        email_confirmation_url_(arena) {}

inline void ConfigSecurity::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, maximum_login_attempts_),
           0,
           offsetof(Impl_, token_password_reset_expiry_in_hours_) -
               offsetof(Impl_, maximum_login_attempts_) +
               sizeof(Impl_::token_password_reset_expiry_in_hours_));
}
ConfigSecurity::~ConfigSecurity() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigSecurity)
  SharedDtor(*this);
}
inline void ConfigSecurity::SharedDtor(MessageLite& self) {
  ConfigSecurity& this_ = static_cast<ConfigSecurity&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.allow_cors_from_.Destroy();
  this_._impl_.cors_exposed_headers_.Destroy();
  this_._impl_.email_confirmation_url_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConfigSecurity::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigSecurity(arena);
}
constexpr auto ConfigSecurity::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.restricted_usernames_) +
          decltype(ConfigSecurity::_impl_.restricted_usernames_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.restricted_usernames_) +
          decltype(ConfigSecurity::_impl_.restricted_usernames_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ConfigSecurity), alignof(ConfigSecurity), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ConfigSecurity::PlacementNew_,
                                 sizeof(ConfigSecurity),
                                 alignof(ConfigSecurity));
  }
}
constexpr auto ConfigSecurity::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigSecurity_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigSecurity::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigSecurity>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigSecurity::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigSecurity>(), &ConfigSecurity::ByteSizeLong,
              &ConfigSecurity::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_._cached_size_),
          false,
      },
      &ConfigSecurity::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigSecurity_class_data_ =
        ConfigSecurity::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigSecurity::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigSecurity_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigSecurity_class_data_.tc_table);
  return ConfigSecurity_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 20, 1, 126, 2>
ConfigSecurity::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_._has_bits_),
    0, // no _extensions_
    20, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4293918720,  // skipmap
    offsetof(decltype(_table_), field_entries),
    20,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ConfigSecurity_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigSecurity>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 maximum_login_attempts = 2 [json_name = "maximumLoginAttempts"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigSecurity, _impl_.maximum_login_attempts_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.maximum_login_attempts_)}},
    // optional bool enable_insecure_outgoing_connections = 3 [json_name = "enableInsecureOutgoingConnections"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigSecurity, _impl_.enable_insecure_outgoing_connections_), 4>(),
     {24, 4, 0, PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.enable_insecure_outgoing_connections_)}},
    // optional bool enable_multifactor_authentication = 4 [json_name = "enableMultifactorAuthentication"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigSecurity, _impl_.enable_multifactor_authentication_), 5>(),
     {32, 5, 0, PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.enable_multifactor_authentication_)}},
    // optional bool enforce_multifactor_authentication = 5 [json_name = "enforceMultifactorAuthentication"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigSecurity, _impl_.enforce_multifactor_authentication_), 6>(),
     {40, 6, 0, PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.enforce_multifactor_authentication_)}},
    // optional bool enable_oauth_service_provider = 6 [json_name = "enableOauthServiceProvider"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigSecurity, _impl_.enable_oauth_service_provider_), 7>(),
     {48, 7, 0, PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.enable_oauth_service_provider_)}},
    // optional bool enable_outgoing_oauth_connections = 7 [json_name = "enableOutgoingOauthConnections"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigSecurity, _impl_.enable_outgoing_oauth_connections_), 11>(),
     {56, 11, 0, PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.enable_outgoing_oauth_connections_)}},
    // optional bool terminate_sessions_on_password_change = 8 [json_name = "terminateSessionsOnPasswordChange"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigSecurity, _impl_.terminate_sessions_on_password_change_), 12>(),
     {64, 12, 0, PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.terminate_sessions_on_password_change_)}},
    // optional int32 session_length_web_in_hours = 9 [json_name = "sessionLengthWebInHours"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigSecurity, _impl_.session_length_web_in_hours_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.session_length_web_in_hours_)}},
    // optional int32 session_length_mobile_in_hours = 10 [json_name = "sessionLengthMobileInHours"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigSecurity, _impl_.session_length_mobile_in_hours_), 9>(),
     {80, 9, 0, PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.session_length_mobile_in_hours_)}},
    // optional int32 session_length_sso_in_hours = 11 [json_name = "sessionLengthSsoInHours"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigSecurity, _impl_.session_length_sso_in_hours_), 10>(),
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.session_length_sso_in_hours_)}},
    // optional string allow_cors_from = 12 [json_name = "allowCorsFrom"];
    {::_pbi::TcParser::FastUS1,
     {98, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.allow_cors_from_)}},
    // optional string cors_exposed_headers = 13 [json_name = "corsExposedHeaders"];
    {::_pbi::TcParser::FastUS1,
     {106, 1, 0, PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.cors_exposed_headers_)}},
    // optional bool cors_allow_credentials = 14 [json_name = "corsAllowCredentials"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigSecurity, _impl_.cors_allow_credentials_), 13>(),
     {112, 13, 0, PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.cors_allow_credentials_)}},
    // optional bool cors_debug = 15 [json_name = "corsDebug"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigSecurity, _impl_.cors_debug_), 14>(),
     {120, 14, 0, PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.cors_debug_)}},
    // optional bool allow_cookies_for_subdomains = 16 [json_name = "allowCookiesForSubdomains"];
    {::_pbi::TcParser::FastV8S2,
     {384, 15, 0, PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.allow_cookies_for_subdomains_)}},
    // optional int32 session_cache_in_minutes = 17 [json_name = "sessionCacheInMinutes"];
    {::_pbi::TcParser::FastV32S2,
     {392, 16, 0, PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.session_cache_in_minutes_)}},
    // optional string email_confirmation_url = 18 [json_name = "emailConfirmationUrl"];
    {::_pbi::TcParser::FastUS2,
     {402, 2, 0, PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.email_confirmation_url_)}},
    // optional uint32 token_confirmation_expiry_in_hours = 19 [json_name = "tokenConfirmationExpiryInHours"];
    {::_pbi::TcParser::FastV32S2,
     {408, 17, 0, PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.token_confirmation_expiry_in_hours_)}},
    // optional uint32 token_password_reset_expiry_in_hours = 20 [json_name = "tokenPasswordResetExpiryInHours"];
    {::_pbi::TcParser::FastV32S2,
     {416, 18, 0, PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.token_password_reset_expiry_in_hours_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // map<string, string> restricted_usernames = 1 [json_name = "restrictedUsernames"];
    {PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.restricted_usernames_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // optional int32 maximum_login_attempts = 2 [json_name = "maximumLoginAttempts"];
    {PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.maximum_login_attempts_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool enable_insecure_outgoing_connections = 3 [json_name = "enableInsecureOutgoingConnections"];
    {PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.enable_insecure_outgoing_connections_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_multifactor_authentication = 4 [json_name = "enableMultifactorAuthentication"];
    {PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.enable_multifactor_authentication_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enforce_multifactor_authentication = 5 [json_name = "enforceMultifactorAuthentication"];
    {PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.enforce_multifactor_authentication_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_oauth_service_provider = 6 [json_name = "enableOauthServiceProvider"];
    {PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.enable_oauth_service_provider_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_outgoing_oauth_connections = 7 [json_name = "enableOutgoingOauthConnections"];
    {PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.enable_outgoing_oauth_connections_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool terminate_sessions_on_password_change = 8 [json_name = "terminateSessionsOnPasswordChange"];
    {PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.terminate_sessions_on_password_change_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 session_length_web_in_hours = 9 [json_name = "sessionLengthWebInHours"];
    {PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.session_length_web_in_hours_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 session_length_mobile_in_hours = 10 [json_name = "sessionLengthMobileInHours"];
    {PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.session_length_mobile_in_hours_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 session_length_sso_in_hours = 11 [json_name = "sessionLengthSsoInHours"];
    {PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.session_length_sso_in_hours_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string allow_cors_from = 12 [json_name = "allowCorsFrom"];
    {PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.allow_cors_from_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string cors_exposed_headers = 13 [json_name = "corsExposedHeaders"];
    {PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.cors_exposed_headers_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool cors_allow_credentials = 14 [json_name = "corsAllowCredentials"];
    {PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.cors_allow_credentials_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool cors_debug = 15 [json_name = "corsDebug"];
    {PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.cors_debug_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool allow_cookies_for_subdomains = 16 [json_name = "allowCookiesForSubdomains"];
    {PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.allow_cookies_for_subdomains_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 session_cache_in_minutes = 17 [json_name = "sessionCacheInMinutes"];
    {PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.session_cache_in_minutes_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string email_confirmation_url = 18 [json_name = "emailConfirmationUrl"];
    {PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.email_confirmation_url_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional uint32 token_confirmation_expiry_in_hours = 19 [json_name = "tokenConfirmationExpiryInHours"];
    {PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.token_confirmation_expiry_in_hours_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 token_password_reset_expiry_in_hours = 20 [json_name = "tokenPasswordResetExpiryInHours"];
    {PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.token_password_reset_expiry_in_hours_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  {{
      {::_pbi::TcParser::GetMapAuxInfo(1, 0, 0,
                                       9, 9,
                                       0)},
  }},
  {{
    "\30\24\0\0\0\0\0\0\0\0\0\0\17\24\0\0\0\0\26\0\0\0\0\0"
    "common.v1.ConfigSecurity"
    "restricted_usernames"
    "allow_cors_from"
    "cors_exposed_headers"
    "email_confirmation_url"
  }},
};
PROTOBUF_NOINLINE void ConfigSecurity::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigSecurity)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.restricted_usernames_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.allow_cors_from_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.cors_exposed_headers_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.email_confirmation_url_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x000000f8u) != 0) {
    ::memset(&_impl_.maximum_login_attempts_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.enable_oauth_service_provider_) -
        reinterpret_cast<char*>(&_impl_.maximum_login_attempts_)) + sizeof(_impl_.enable_oauth_service_provider_));
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    ::memset(&_impl_.session_length_web_in_hours_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.allow_cookies_for_subdomains_) -
        reinterpret_cast<char*>(&_impl_.session_length_web_in_hours_)) + sizeof(_impl_.allow_cookies_for_subdomains_));
  }
  if ((cached_has_bits & 0x00070000u) != 0) {
    ::memset(&_impl_.session_cache_in_minutes_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.token_password_reset_expiry_in_hours_) -
        reinterpret_cast<char*>(&_impl_.session_cache_in_minutes_)) + sizeof(_impl_.token_password_reset_expiry_in_hours_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigSecurity::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigSecurity& this_ = static_cast<const ConfigSecurity&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigSecurity::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigSecurity& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigSecurity)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // map<string, string> restricted_usernames = 1 [json_name = "restrictedUsernames"];
  if (!this_._internal_restricted_usernames().empty()) {
    using MapType = ::google::protobuf::Map<std::string, std::string>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>;
    const auto& field = this_._internal_restricted_usernames();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            1, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSecurity.restricted_usernames");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSecurity.restricted_usernames");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            1, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSecurity.restricted_usernames");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSecurity.restricted_usernames");
      }
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional int32 maximum_login_attempts = 2 [json_name = "maximumLoginAttempts"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
            stream, this_._internal_maximum_login_attempts(), target);
  }

  // optional bool enable_insecure_outgoing_connections = 3 [json_name = "enableInsecureOutgoingConnections"];
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this_._internal_enable_insecure_outgoing_connections(), target);
  }

  // optional bool enable_multifactor_authentication = 4 [json_name = "enableMultifactorAuthentication"];
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this_._internal_enable_multifactor_authentication(), target);
  }

  // optional bool enforce_multifactor_authentication = 5 [json_name = "enforceMultifactorAuthentication"];
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this_._internal_enforce_multifactor_authentication(), target);
  }

  // optional bool enable_oauth_service_provider = 6 [json_name = "enableOauthServiceProvider"];
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this_._internal_enable_oauth_service_provider(), target);
  }

  // optional bool enable_outgoing_oauth_connections = 7 [json_name = "enableOutgoingOauthConnections"];
  if ((cached_has_bits & 0x00000800u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this_._internal_enable_outgoing_oauth_connections(), target);
  }

  // optional bool terminate_sessions_on_password_change = 8 [json_name = "terminateSessionsOnPasswordChange"];
  if ((cached_has_bits & 0x00001000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this_._internal_terminate_sessions_on_password_change(), target);
  }

  // optional int32 session_length_web_in_hours = 9 [json_name = "sessionLengthWebInHours"];
  if ((cached_has_bits & 0x00000100u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<9>(
            stream, this_._internal_session_length_web_in_hours(), target);
  }

  // optional int32 session_length_mobile_in_hours = 10 [json_name = "sessionLengthMobileInHours"];
  if ((cached_has_bits & 0x00000200u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<10>(
            stream, this_._internal_session_length_mobile_in_hours(), target);
  }

  // optional int32 session_length_sso_in_hours = 11 [json_name = "sessionLengthSsoInHours"];
  if ((cached_has_bits & 0x00000400u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<11>(
            stream, this_._internal_session_length_sso_in_hours(), target);
  }

  // optional string allow_cors_from = 12 [json_name = "allowCorsFrom"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    const ::std::string& _s = this_._internal_allow_cors_from();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSecurity.allow_cors_from");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // optional string cors_exposed_headers = 13 [json_name = "corsExposedHeaders"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    const ::std::string& _s = this_._internal_cors_exposed_headers();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSecurity.cors_exposed_headers");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // optional bool cors_allow_credentials = 14 [json_name = "corsAllowCredentials"];
  if ((cached_has_bits & 0x00002000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this_._internal_cors_allow_credentials(), target);
  }

  // optional bool cors_debug = 15 [json_name = "corsDebug"];
  if ((cached_has_bits & 0x00004000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        15, this_._internal_cors_debug(), target);
  }

  // optional bool allow_cookies_for_subdomains = 16 [json_name = "allowCookiesForSubdomains"];
  if ((cached_has_bits & 0x00008000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        16, this_._internal_allow_cookies_for_subdomains(), target);
  }

  // optional int32 session_cache_in_minutes = 17 [json_name = "sessionCacheInMinutes"];
  if ((cached_has_bits & 0x00010000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        17, this_._internal_session_cache_in_minutes(), target);
  }

  // optional string email_confirmation_url = 18 [json_name = "emailConfirmationUrl"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    const ::std::string& _s = this_._internal_email_confirmation_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSecurity.email_confirmation_url");
    target = stream->WriteStringMaybeAliased(18, _s, target);
  }

  // optional uint32 token_confirmation_expiry_in_hours = 19 [json_name = "tokenConfirmationExpiryInHours"];
  if ((cached_has_bits & 0x00020000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        19, this_._internal_token_confirmation_expiry_in_hours(), target);
  }

  // optional uint32 token_password_reset_expiry_in_hours = 20 [json_name = "tokenPasswordResetExpiryInHours"];
  if ((cached_has_bits & 0x00040000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        20, this_._internal_token_password_reset_expiry_in_hours(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigSecurity)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigSecurity::ByteSizeLong(const MessageLite& base) {
  const ConfigSecurity& this_ = static_cast<const ConfigSecurity&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigSecurity::ByteSizeLong() const {
  const ConfigSecurity& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigSecurity)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // map<string, string> restricted_usernames = 1 [json_name = "restrictedUsernames"];
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_restricted_usernames_size());
      for (const auto& entry : this_._internal_restricted_usernames()) {
        total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                       _pbi::WireFormatLite::TYPE_STRING,
                                       _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00008000u & cached_has_bits) * 3;
  total_size += ::absl::popcount(0x000078f0u & cached_has_bits) * 2;
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // optional string allow_cors_from = 12 [json_name = "allowCorsFrom"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_allow_cors_from());
    }
    // optional string cors_exposed_headers = 13 [json_name = "corsExposedHeaders"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_cors_exposed_headers());
    }
    // optional string email_confirmation_url = 18 [json_name = "emailConfirmationUrl"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_email_confirmation_url());
    }
    // optional int32 maximum_login_attempts = 2 [json_name = "maximumLoginAttempts"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_maximum_login_attempts());
    }
  }
  if ((cached_has_bits & 0x00000700u) != 0) {
    // optional int32 session_length_web_in_hours = 9 [json_name = "sessionLengthWebInHours"];
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_session_length_web_in_hours());
    }
    // optional int32 session_length_mobile_in_hours = 10 [json_name = "sessionLengthMobileInHours"];
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_session_length_mobile_in_hours());
    }
    // optional int32 session_length_sso_in_hours = 11 [json_name = "sessionLengthSsoInHours"];
    if ((cached_has_bits & 0x00000400u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_session_length_sso_in_hours());
    }
  }
  if ((cached_has_bits & 0x00070000u) != 0) {
    // optional int32 session_cache_in_minutes = 17 [json_name = "sessionCacheInMinutes"];
    if ((cached_has_bits & 0x00010000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this_._internal_session_cache_in_minutes());
    }
    // optional uint32 token_confirmation_expiry_in_hours = 19 [json_name = "tokenConfirmationExpiryInHours"];
    if ((cached_has_bits & 0x00020000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this_._internal_token_confirmation_expiry_in_hours());
    }
    // optional uint32 token_password_reset_expiry_in_hours = 20 [json_name = "tokenPasswordResetExpiryInHours"];
    if ((cached_has_bits & 0x00040000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this_._internal_token_password_reset_expiry_in_hours());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigSecurity::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigSecurity*>(&to_msg);
  auto& from = static_cast<const ConfigSecurity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigSecurity)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.restricted_usernames_.MergeFrom(from._impl_.restricted_usernames_);
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_allow_cors_from(from._internal_allow_cors_from());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_cors_exposed_headers(from._internal_cors_exposed_headers());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_email_confirmation_url(from._internal_email_confirmation_url());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.maximum_login_attempts_ = from._impl_.maximum_login_attempts_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.enable_insecure_outgoing_connections_ = from._impl_.enable_insecure_outgoing_connections_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.enable_multifactor_authentication_ = from._impl_.enable_multifactor_authentication_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.enforce_multifactor_authentication_ = from._impl_.enforce_multifactor_authentication_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.enable_oauth_service_provider_ = from._impl_.enable_oauth_service_provider_;
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.session_length_web_in_hours_ = from._impl_.session_length_web_in_hours_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.session_length_mobile_in_hours_ = from._impl_.session_length_mobile_in_hours_;
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.session_length_sso_in_hours_ = from._impl_.session_length_sso_in_hours_;
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _this->_impl_.enable_outgoing_oauth_connections_ = from._impl_.enable_outgoing_oauth_connections_;
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      _this->_impl_.terminate_sessions_on_password_change_ = from._impl_.terminate_sessions_on_password_change_;
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      _this->_impl_.cors_allow_credentials_ = from._impl_.cors_allow_credentials_;
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      _this->_impl_.cors_debug_ = from._impl_.cors_debug_;
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      _this->_impl_.allow_cookies_for_subdomains_ = from._impl_.allow_cookies_for_subdomains_;
    }
  }
  if ((cached_has_bits & 0x00070000u) != 0) {
    if ((cached_has_bits & 0x00010000u) != 0) {
      _this->_impl_.session_cache_in_minutes_ = from._impl_.session_cache_in_minutes_;
    }
    if ((cached_has_bits & 0x00020000u) != 0) {
      _this->_impl_.token_confirmation_expiry_in_hours_ = from._impl_.token_confirmation_expiry_in_hours_;
    }
    if ((cached_has_bits & 0x00040000u) != 0) {
      _this->_impl_.token_password_reset_expiry_in_hours_ = from._impl_.token_password_reset_expiry_in_hours_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigSecurity::CopyFrom(const ConfigSecurity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigSecurity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigSecurity::InternalSwap(ConfigSecurity* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.restricted_usernames_.InternalSwap(&other->_impl_.restricted_usernames_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.allow_cors_from_, &other->_impl_.allow_cors_from_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cors_exposed_headers_, &other->_impl_.cors_exposed_headers_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.email_confirmation_url_, &other->_impl_.email_confirmation_url_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.token_password_reset_expiry_in_hours_)
      + sizeof(ConfigSecurity::_impl_.token_password_reset_expiry_in_hours_)
      - PROTOBUF_FIELD_OFFSET(ConfigSecurity, _impl_.maximum_login_attempts_)>(
          reinterpret_cast<char*>(&_impl_.maximum_login_attempts_),
          reinterpret_cast<char*>(&other->_impl_.maximum_login_attempts_));
}

::google::protobuf::Metadata ConfigSecurity::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CacheConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<CacheConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CacheConfig, _impl_._has_bits_);
};

CacheConfig::CacheConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CacheConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.CacheConfig)
}
PROTOBUF_NDEBUG_INLINE CacheConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::CacheConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        cache_type_(arena, from.cache_type_),
        redis_address_(arena, from.redis_address_),
        redis_password_(arena, from.redis_password_),
        redis_cache_prefix_(arena, from.redis_cache_prefix_) {}

CacheConfig::CacheConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CacheConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CacheConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CacheConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, redis_db_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, redis_db_),
           offsetof(Impl_, disable_client_cache_) -
               offsetof(Impl_, redis_db_) +
               sizeof(Impl_::disable_client_cache_));

  // @@protoc_insertion_point(copy_constructor:common.v1.CacheConfig)
}
PROTOBUF_NDEBUG_INLINE CacheConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        cache_type_(arena),
        redis_address_(arena),
        redis_password_(arena),
        redis_cache_prefix_(arena) {}

inline void CacheConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, redis_db_),
           0,
           offsetof(Impl_, disable_client_cache_) -
               offsetof(Impl_, redis_db_) +
               sizeof(Impl_::disable_client_cache_));
}
CacheConfig::~CacheConfig() {
  // @@protoc_insertion_point(destructor:common.v1.CacheConfig)
  SharedDtor(*this);
}
inline void CacheConfig::SharedDtor(MessageLite& self) {
  CacheConfig& this_ = static_cast<CacheConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.cache_type_.Destroy();
  this_._impl_.redis_address_.Destroy();
  this_._impl_.redis_password_.Destroy();
  this_._impl_.redis_cache_prefix_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CacheConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CacheConfig(arena);
}
constexpr auto CacheConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CacheConfig),
                                            alignof(CacheConfig));
}
constexpr auto CacheConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CacheConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CacheConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CacheConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CacheConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CacheConfig>(), &CacheConfig::ByteSizeLong,
              &CacheConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CacheConfig, _impl_._cached_size_),
          false,
      },
      &CacheConfig::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull CacheConfig_class_data_ =
        CacheConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
CacheConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CacheConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CacheConfig_class_data_.tc_table);
  return CacheConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 85, 2>
CacheConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CacheConfig, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CacheConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::CacheConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string cache_type = 1 [json_name = "cacheType"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CacheConfig, _impl_.cache_type_)}},
    // optional string redis_address = 2 [json_name = "redisAddress"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(CacheConfig, _impl_.redis_address_)}},
    // optional string redis_password = 3 [json_name = "redisPassword"];
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(CacheConfig, _impl_.redis_password_)}},
    // optional int32 redis_db = 4 [json_name = "redisDb"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CacheConfig, _impl_.redis_db_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(CacheConfig, _impl_.redis_db_)}},
    // optional string redis_cache_prefix = 5 [json_name = "redisCachePrefix"];
    {::_pbi::TcParser::FastUS1,
     {42, 3, 0, PROTOBUF_FIELD_OFFSET(CacheConfig, _impl_.redis_cache_prefix_)}},
    // optional bool disable_client_cache = 6 [json_name = "disableClientCache"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CacheConfig, _impl_.disable_client_cache_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(CacheConfig, _impl_.disable_client_cache_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string cache_type = 1 [json_name = "cacheType"];
    {PROTOBUF_FIELD_OFFSET(CacheConfig, _impl_.cache_type_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string redis_address = 2 [json_name = "redisAddress"];
    {PROTOBUF_FIELD_OFFSET(CacheConfig, _impl_.redis_address_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string redis_password = 3 [json_name = "redisPassword"];
    {PROTOBUF_FIELD_OFFSET(CacheConfig, _impl_.redis_password_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 redis_db = 4 [json_name = "redisDb"];
    {PROTOBUF_FIELD_OFFSET(CacheConfig, _impl_.redis_db_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string redis_cache_prefix = 5 [json_name = "redisCachePrefix"];
    {PROTOBUF_FIELD_OFFSET(CacheConfig, _impl_.redis_cache_prefix_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool disable_client_cache = 6 [json_name = "disableClientCache"];
    {PROTOBUF_FIELD_OFFSET(CacheConfig, _impl_.disable_client_cache_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\25\12\15\16\0\22\0\0"
    "common.v1.CacheConfig"
    "cache_type"
    "redis_address"
    "redis_password"
    "redis_cache_prefix"
  }},
};
PROTOBUF_NOINLINE void CacheConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.CacheConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.cache_type_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.redis_address_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.redis_password_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.redis_cache_prefix_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x00000030u) != 0) {
    ::memset(&_impl_.redis_db_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.disable_client_cache_) -
        reinterpret_cast<char*>(&_impl_.redis_db_)) + sizeof(_impl_.disable_client_cache_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CacheConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CacheConfig& this_ = static_cast<const CacheConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CacheConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CacheConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.CacheConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional string cache_type = 1 [json_name = "cacheType"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    const ::std::string& _s = this_._internal_cache_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.CacheConfig.cache_type");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string redis_address = 2 [json_name = "redisAddress"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    const ::std::string& _s = this_._internal_redis_address();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.CacheConfig.redis_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string redis_password = 3 [json_name = "redisPassword"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    const ::std::string& _s = this_._internal_redis_password();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.CacheConfig.redis_password");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional int32 redis_db = 4 [json_name = "redisDb"];
  if ((cached_has_bits & 0x00000010u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
            stream, this_._internal_redis_db(), target);
  }

  // optional string redis_cache_prefix = 5 [json_name = "redisCachePrefix"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    const ::std::string& _s = this_._internal_redis_cache_prefix();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.CacheConfig.redis_cache_prefix");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional bool disable_client_cache = 6 [json_name = "disableClientCache"];
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this_._internal_disable_client_cache(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.CacheConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CacheConfig::ByteSizeLong(const MessageLite& base) {
  const CacheConfig& this_ = static_cast<const CacheConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CacheConfig::ByteSizeLong() const {
  const CacheConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.CacheConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000020u & cached_has_bits) * 2;
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // optional string cache_type = 1 [json_name = "cacheType"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_cache_type());
    }
    // optional string redis_address = 2 [json_name = "redisAddress"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_redis_address());
    }
    // optional string redis_password = 3 [json_name = "redisPassword"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_redis_password());
    }
    // optional string redis_cache_prefix = 5 [json_name = "redisCachePrefix"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_redis_cache_prefix());
    }
    // optional int32 redis_db = 4 [json_name = "redisDb"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_redis_db());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CacheConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CacheConfig*>(&to_msg);
  auto& from = static_cast<const CacheConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.CacheConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_cache_type(from._internal_cache_type());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_redis_address(from._internal_redis_address());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_redis_password(from._internal_redis_password());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_internal_set_redis_cache_prefix(from._internal_redis_cache_prefix());
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.redis_db_ = from._impl_.redis_db_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.disable_client_cache_ = from._impl_.disable_client_cache_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CacheConfig::CopyFrom(const CacheConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.CacheConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CacheConfig::InternalSwap(CacheConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cache_type_, &other->_impl_.cache_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.redis_address_, &other->_impl_.redis_address_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.redis_password_, &other->_impl_.redis_password_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.redis_cache_prefix_, &other->_impl_.redis_cache_prefix_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CacheConfig, _impl_.disable_client_cache_)
      + sizeof(CacheConfig::_impl_.disable_client_cache_)
      - PROTOBUF_FIELD_OFFSET(CacheConfig, _impl_.redis_db_)>(
          reinterpret_cast<char*>(&_impl_.redis_db_),
          reinterpret_cast<char*>(&other->_impl_.redis_db_));
}

::google::protobuf::Metadata CacheConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigMetrics::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConfigMetrics>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConfigMetrics, _impl_._has_bits_);
};

ConfigMetrics::ConfigMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigMetrics_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigMetrics)
}
PROTOBUF_NDEBUG_INLINE ConfigMetrics::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::ConfigMetrics& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        client_side_user_ids_{visibility, arena, from.client_side_user_ids_},
        listen_address_(arena, from.listen_address_) {}

ConfigMetrics::ConfigMetrics(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigMetrics& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigMetrics_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigMetrics* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, block_profile_rate_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, block_profile_rate_),
           offsetof(Impl_, enable_notification_metrics_) -
               offsetof(Impl_, block_profile_rate_) +
               sizeof(Impl_::enable_notification_metrics_));

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigMetrics)
}
PROTOBUF_NDEBUG_INLINE ConfigMetrics::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        client_side_user_ids_{visibility, arena},
        listen_address_(arena) {}

inline void ConfigMetrics::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, block_profile_rate_),
           0,
           offsetof(Impl_, enable_notification_metrics_) -
               offsetof(Impl_, block_profile_rate_) +
               sizeof(Impl_::enable_notification_metrics_));
}
ConfigMetrics::~ConfigMetrics() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigMetrics)
  SharedDtor(*this);
}
inline void ConfigMetrics::SharedDtor(MessageLite& self) {
  ConfigMetrics& this_ = static_cast<ConfigMetrics&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.listen_address_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConfigMetrics::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigMetrics(arena);
}
constexpr auto ConfigMetrics::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ConfigMetrics, _impl_.client_side_user_ids_) +
          decltype(ConfigMetrics::_impl_.client_side_user_ids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ConfigMetrics), alignof(ConfigMetrics), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ConfigMetrics::PlacementNew_,
                                 sizeof(ConfigMetrics),
                                 alignof(ConfigMetrics));
  }
}
constexpr auto ConfigMetrics::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigMetrics_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigMetrics::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigMetrics>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigMetrics::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigMetrics>(), &ConfigMetrics::ByteSizeLong,
              &ConfigMetrics::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigMetrics, _impl_._cached_size_),
          false,
      },
      &ConfigMetrics::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigMetrics_class_data_ =
        ConfigMetrics::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigMetrics::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigMetrics_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigMetrics_class_data_.tc_table);
  return ConfigMetrics_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 66, 2>
ConfigMetrics::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigMetrics, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ConfigMetrics_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigMetrics>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool enable = 1 [json_name = "enable"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigMetrics, _impl_.enable_), 2>(),
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(ConfigMetrics, _impl_.enable_)}},
    // optional int32 block_profile_rate = 2 [json_name = "blockProfileRate"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigMetrics, _impl_.block_profile_rate_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(ConfigMetrics, _impl_.block_profile_rate_)}},
    // optional string listen_address = 3 [json_name = "listenAddress"];
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigMetrics, _impl_.listen_address_)}},
    // optional bool enable_client_metrics = 4 [json_name = "enableClientMetrics"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigMetrics, _impl_.enable_client_metrics_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(ConfigMetrics, _impl_.enable_client_metrics_)}},
    // optional bool enable_notification_metrics = 5 [json_name = "enableNotificationMetrics"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigMetrics, _impl_.enable_notification_metrics_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(ConfigMetrics, _impl_.enable_notification_metrics_)}},
    // repeated string client_side_user_ids = 6 [json_name = "clientSideUserIds"];
    {::_pbi::TcParser::FastUR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(ConfigMetrics, _impl_.client_side_user_ids_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool enable = 1 [json_name = "enable"];
    {PROTOBUF_FIELD_OFFSET(ConfigMetrics, _impl_.enable_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 block_profile_rate = 2 [json_name = "blockProfileRate"];
    {PROTOBUF_FIELD_OFFSET(ConfigMetrics, _impl_.block_profile_rate_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string listen_address = 3 [json_name = "listenAddress"];
    {PROTOBUF_FIELD_OFFSET(ConfigMetrics, _impl_.listen_address_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool enable_client_metrics = 4 [json_name = "enableClientMetrics"];
    {PROTOBUF_FIELD_OFFSET(ConfigMetrics, _impl_.enable_client_metrics_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_notification_metrics = 5 [json_name = "enableNotificationMetrics"];
    {PROTOBUF_FIELD_OFFSET(ConfigMetrics, _impl_.enable_notification_metrics_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // repeated string client_side_user_ids = 6 [json_name = "clientSideUserIds"];
    {PROTOBUF_FIELD_OFFSET(ConfigMetrics, _impl_.client_side_user_ids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\27\0\0\16\0\0\24\0"
    "common.v1.ConfigMetrics"
    "listen_address"
    "client_side_user_ids"
  }},
};
PROTOBUF_NOINLINE void ConfigMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigMetrics)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_side_user_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.listen_address_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000001eu) != 0) {
    ::memset(&_impl_.block_profile_rate_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.enable_notification_metrics_) -
        reinterpret_cast<char*>(&_impl_.block_profile_rate_)) + sizeof(_impl_.enable_notification_metrics_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigMetrics::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigMetrics& this_ = static_cast<const ConfigMetrics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigMetrics::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigMetrics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigMetrics)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional bool enable = 1 [json_name = "enable"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this_._internal_enable(), target);
  }

  // optional int32 block_profile_rate = 2 [json_name = "blockProfileRate"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
            stream, this_._internal_block_profile_rate(), target);
  }

  // optional string listen_address = 3 [json_name = "listenAddress"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    const ::std::string& _s = this_._internal_listen_address();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigMetrics.listen_address");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional bool enable_client_metrics = 4 [json_name = "enableClientMetrics"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this_._internal_enable_client_metrics(), target);
  }

  // optional bool enable_notification_metrics = 5 [json_name = "enableNotificationMetrics"];
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this_._internal_enable_notification_metrics(), target);
  }

  // repeated string client_side_user_ids = 6 [json_name = "clientSideUserIds"];
  for (int i = 0, n = this_._internal_client_side_user_ids_size(); i < n; ++i) {
    const auto& s = this_._internal_client_side_user_ids().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigMetrics.client_side_user_ids");
    target = stream->WriteString(6, s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigMetrics)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigMetrics::ByteSizeLong(const MessageLite& base) {
  const ConfigMetrics& this_ = static_cast<const ConfigMetrics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigMetrics::ByteSizeLong() const {
  const ConfigMetrics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigMetrics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string client_side_user_ids = 6 [json_name = "clientSideUserIds"];
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_client_side_user_ids().size());
      for (int i = 0, n = this_._internal_client_side_user_ids().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_client_side_user_ids().Get(i));
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x0000001cu & cached_has_bits) * 2;
  if ((cached_has_bits & 0x00000003u) != 0) {
    // optional string listen_address = 3 [json_name = "listenAddress"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_listen_address());
    }
    // optional int32 block_profile_rate = 2 [json_name = "blockProfileRate"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_block_profile_rate());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigMetrics::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigMetrics*>(&to_msg);
  auto& from = static_cast<const ConfigMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigMetrics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_client_side_user_ids()->MergeFrom(from._internal_client_side_user_ids());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_listen_address(from._internal_listen_address());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.block_profile_rate_ = from._impl_.block_profile_rate_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.enable_ = from._impl_.enable_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.enable_client_metrics_ = from._impl_.enable_client_metrics_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.enable_notification_metrics_ = from._impl_.enable_notification_metrics_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigMetrics::CopyFrom(const ConfigMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigMetrics::InternalSwap(ConfigMetrics* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.client_side_user_ids_.InternalSwap(&other->_impl_.client_side_user_ids_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.listen_address_, &other->_impl_.listen_address_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigMetrics, _impl_.enable_notification_metrics_)
      + sizeof(ConfigMetrics::_impl_.enable_notification_metrics_)
      - PROTOBUF_FIELD_OFFSET(ConfigMetrics, _impl_.block_profile_rate_)>(
          reinterpret_cast<char*>(&_impl_.block_profile_rate_),
          reinterpret_cast<char*>(&other->_impl_.block_profile_rate_));
}

::google::protobuf::Metadata ConfigMetrics::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigSSO::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConfigSSO>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConfigSSO, _impl_._has_bits_);
};

ConfigSSO::ConfigSSO(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigSSO_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigSSO)
}
PROTOBUF_NDEBUG_INLINE ConfigSSO::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::ConfigSSO& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        secret_(arena, from.secret_),
        id_(arena, from.id_),
        scope_(arena, from.scope_),
        auth_endpoint_(arena, from.auth_endpoint_),
        token_endpoint_(arena, from.token_endpoint_),
        user_api_endpoint_(arena, from.user_api_endpoint_),
        discovery_endpoint_(arena, from.discovery_endpoint_),
        button_text_(arena, from.button_text_),
        button_color_(arena, from.button_color_) {}

ConfigSSO::ConfigSSO(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigSSO& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigSSO_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigSSO* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.enable_ = from._impl_.enable_;

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigSSO)
}
PROTOBUF_NDEBUG_INLINE ConfigSSO::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        secret_(arena),
        id_(arena),
        scope_(arena),
        auth_endpoint_(arena),
        token_endpoint_(arena),
        user_api_endpoint_(arena),
        discovery_endpoint_(arena),
        button_text_(arena),
        button_color_(arena) {}

inline void ConfigSSO::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.enable_ = {};
}
ConfigSSO::~ConfigSSO() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigSSO)
  SharedDtor(*this);
}
inline void ConfigSSO::SharedDtor(MessageLite& self) {
  ConfigSSO& this_ = static_cast<ConfigSSO&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.secret_.Destroy();
  this_._impl_.id_.Destroy();
  this_._impl_.scope_.Destroy();
  this_._impl_.auth_endpoint_.Destroy();
  this_._impl_.token_endpoint_.Destroy();
  this_._impl_.user_api_endpoint_.Destroy();
  this_._impl_.discovery_endpoint_.Destroy();
  this_._impl_.button_text_.Destroy();
  this_._impl_.button_color_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConfigSSO::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigSSO(arena);
}
constexpr auto ConfigSSO::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ConfigSSO),
                                            alignof(ConfigSSO));
}
constexpr auto ConfigSSO::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigSSO_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigSSO::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigSSO>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigSSO::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigSSO>(), &ConfigSSO::ByteSizeLong,
              &ConfigSSO::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigSSO, _impl_._cached_size_),
          false,
      },
      &ConfigSSO::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigSSO_class_data_ =
        ConfigSSO::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigSSO::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigSSO_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigSSO_class_data_.tc_table);
  return ConfigSSO_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 134, 2>
ConfigSSO::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigSSO, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ConfigSSO_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigSSO>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool enable = 1 [json_name = "enable"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigSSO, _impl_.enable_), 9>(),
     {8, 9, 0, PROTOBUF_FIELD_OFFSET(ConfigSSO, _impl_.enable_)}},
    // optional string secret = 2 [json_name = "secret"];
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigSSO, _impl_.secret_)}},
    // optional string id = 3 [json_name = "id"];
    {::_pbi::TcParser::FastUS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(ConfigSSO, _impl_.id_)}},
    // optional string scope = 4 [json_name = "scope"];
    {::_pbi::TcParser::FastUS1,
     {34, 2, 0, PROTOBUF_FIELD_OFFSET(ConfigSSO, _impl_.scope_)}},
    // optional string auth_endpoint = 5 [json_name = "authEndpoint"];
    {::_pbi::TcParser::FastUS1,
     {42, 3, 0, PROTOBUF_FIELD_OFFSET(ConfigSSO, _impl_.auth_endpoint_)}},
    // optional string token_endpoint = 6 [json_name = "tokenEndpoint"];
    {::_pbi::TcParser::FastUS1,
     {50, 4, 0, PROTOBUF_FIELD_OFFSET(ConfigSSO, _impl_.token_endpoint_)}},
    // optional string user_api_endpoint = 7 [json_name = "userApiEndpoint"];
    {::_pbi::TcParser::FastUS1,
     {58, 5, 0, PROTOBUF_FIELD_OFFSET(ConfigSSO, _impl_.user_api_endpoint_)}},
    // optional string discovery_endpoint = 8 [json_name = "discoveryEndpoint"];
    {::_pbi::TcParser::FastUS1,
     {66, 6, 0, PROTOBUF_FIELD_OFFSET(ConfigSSO, _impl_.discovery_endpoint_)}},
    // optional string button_text = 9 [json_name = "buttonText"];
    {::_pbi::TcParser::FastUS1,
     {74, 7, 0, PROTOBUF_FIELD_OFFSET(ConfigSSO, _impl_.button_text_)}},
    // optional string button_color = 10 [json_name = "buttonColor"];
    {::_pbi::TcParser::FastUS1,
     {82, 8, 0, PROTOBUF_FIELD_OFFSET(ConfigSSO, _impl_.button_color_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool enable = 1 [json_name = "enable"];
    {PROTOBUF_FIELD_OFFSET(ConfigSSO, _impl_.enable_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string secret = 2 [json_name = "secret"];
    {PROTOBUF_FIELD_OFFSET(ConfigSSO, _impl_.secret_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string id = 3 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(ConfigSSO, _impl_.id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string scope = 4 [json_name = "scope"];
    {PROTOBUF_FIELD_OFFSET(ConfigSSO, _impl_.scope_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string auth_endpoint = 5 [json_name = "authEndpoint"];
    {PROTOBUF_FIELD_OFFSET(ConfigSSO, _impl_.auth_endpoint_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string token_endpoint = 6 [json_name = "tokenEndpoint"];
    {PROTOBUF_FIELD_OFFSET(ConfigSSO, _impl_.token_endpoint_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string user_api_endpoint = 7 [json_name = "userApiEndpoint"];
    {PROTOBUF_FIELD_OFFSET(ConfigSSO, _impl_.user_api_endpoint_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string discovery_endpoint = 8 [json_name = "discoveryEndpoint"];
    {PROTOBUF_FIELD_OFFSET(ConfigSSO, _impl_.discovery_endpoint_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string button_text = 9 [json_name = "buttonText"];
    {PROTOBUF_FIELD_OFFSET(ConfigSSO, _impl_.button_text_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string button_color = 10 [json_name = "buttonColor"];
    {PROTOBUF_FIELD_OFFSET(ConfigSSO, _impl_.button_color_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\23\0\6\2\5\15\16\21\22\13\14\0\0\0\0\0"
    "common.v1.ConfigSSO"
    "secret"
    "id"
    "scope"
    "auth_endpoint"
    "token_endpoint"
    "user_api_endpoint"
    "discovery_endpoint"
    "button_text"
    "button_color"
  }},
};
PROTOBUF_NOINLINE void ConfigSSO::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigSSO)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.secret_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.scope_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.auth_endpoint_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.token_endpoint_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _impl_.user_api_endpoint_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _impl_.discovery_endpoint_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _impl_.button_text_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x00000100u) != 0) {
    _impl_.button_color_.ClearNonDefaultToEmpty();
  }
  _impl_.enable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigSSO::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigSSO& this_ = static_cast<const ConfigSSO&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigSSO::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigSSO& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigSSO)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional bool enable = 1 [json_name = "enable"];
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this_._internal_enable(), target);
  }

  // optional string secret = 2 [json_name = "secret"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    const ::std::string& _s = this_._internal_secret();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSSO.secret");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string id = 3 [json_name = "id"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    const ::std::string& _s = this_._internal_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSSO.id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string scope = 4 [json_name = "scope"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    const ::std::string& _s = this_._internal_scope();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSSO.scope");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string auth_endpoint = 5 [json_name = "authEndpoint"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    const ::std::string& _s = this_._internal_auth_endpoint();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSSO.auth_endpoint");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional string token_endpoint = 6 [json_name = "tokenEndpoint"];
  if ((cached_has_bits & 0x00000010u) != 0) {
    const ::std::string& _s = this_._internal_token_endpoint();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSSO.token_endpoint");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional string user_api_endpoint = 7 [json_name = "userApiEndpoint"];
  if ((cached_has_bits & 0x00000020u) != 0) {
    const ::std::string& _s = this_._internal_user_api_endpoint();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSSO.user_api_endpoint");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional string discovery_endpoint = 8 [json_name = "discoveryEndpoint"];
  if ((cached_has_bits & 0x00000040u) != 0) {
    const ::std::string& _s = this_._internal_discovery_endpoint();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSSO.discovery_endpoint");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // optional string button_text = 9 [json_name = "buttonText"];
  if ((cached_has_bits & 0x00000080u) != 0) {
    const ::std::string& _s = this_._internal_button_text();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSSO.button_text");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // optional string button_color = 10 [json_name = "buttonColor"];
  if ((cached_has_bits & 0x00000100u) != 0) {
    const ::std::string& _s = this_._internal_button_color();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSSO.button_color");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigSSO)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigSSO::ByteSizeLong(const MessageLite& base) {
  const ConfigSSO& this_ = static_cast<const ConfigSSO&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigSSO::ByteSizeLong() const {
  const ConfigSSO& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigSSO)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000200u & cached_has_bits) * 2;
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // optional string secret = 2 [json_name = "secret"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_secret());
    }
    // optional string id = 3 [json_name = "id"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_id());
    }
    // optional string scope = 4 [json_name = "scope"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_scope());
    }
    // optional string auth_endpoint = 5 [json_name = "authEndpoint"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_auth_endpoint());
    }
    // optional string token_endpoint = 6 [json_name = "tokenEndpoint"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_token_endpoint());
    }
    // optional string user_api_endpoint = 7 [json_name = "userApiEndpoint"];
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_user_api_endpoint());
    }
    // optional string discovery_endpoint = 8 [json_name = "discoveryEndpoint"];
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_discovery_endpoint());
    }
    // optional string button_text = 9 [json_name = "buttonText"];
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_button_text());
    }
  }
   {
    // optional string button_color = 10 [json_name = "buttonColor"];
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_button_color());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigSSO::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigSSO*>(&to_msg);
  auto& from = static_cast<const ConfigSSO&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigSSO)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_secret(from._internal_secret());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_id(from._internal_id());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_scope(from._internal_scope());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_internal_set_auth_endpoint(from._internal_auth_endpoint());
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_internal_set_token_endpoint(from._internal_token_endpoint());
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_internal_set_user_api_endpoint(from._internal_user_api_endpoint());
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_internal_set_discovery_endpoint(from._internal_discovery_endpoint());
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_internal_set_button_text(from._internal_button_text());
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_internal_set_button_color(from._internal_button_color());
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.enable_ = from._impl_.enable_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigSSO::CopyFrom(const ConfigSSO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigSSO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigSSO::InternalSwap(ConfigSSO* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.secret_, &other->_impl_.secret_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.scope_, &other->_impl_.scope_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.auth_endpoint_, &other->_impl_.auth_endpoint_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.token_endpoint_, &other->_impl_.token_endpoint_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_api_endpoint_, &other->_impl_.user_api_endpoint_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.discovery_endpoint_, &other->_impl_.discovery_endpoint_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.button_text_, &other->_impl_.button_text_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.button_color_, &other->_impl_.button_color_, arena);
  swap(_impl_.enable_, other->_impl_.enable_);
}

::google::protobuf::Metadata ConfigSSO::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigSql::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConfigSql>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_._has_bits_);
};

ConfigSql::ConfigSql(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigSql_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigSql)
}
PROTOBUF_NDEBUG_INLINE ConfigSql::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::ConfigSql& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        driver_name_(arena, from.driver_name_),
        data_source_(arena, from.data_source_),
        at_rest_encrypt_key_(arena, from.at_rest_encrypt_key_) {}

ConfigSql::ConfigSql(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigSql& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigSql_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigSql* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, max_idle_conns_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, max_idle_conns_),
           offsetof(Impl_, query_timeout_) -
               offsetof(Impl_, max_idle_conns_) +
               sizeof(Impl_::query_timeout_));

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigSql)
}
PROTOBUF_NDEBUG_INLINE ConfigSql::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        driver_name_(arena),
        data_source_(arena),
        at_rest_encrypt_key_(arena) {}

inline void ConfigSql::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, max_idle_conns_),
           0,
           offsetof(Impl_, query_timeout_) -
               offsetof(Impl_, max_idle_conns_) +
               sizeof(Impl_::query_timeout_));
}
ConfigSql::~ConfigSql() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigSql)
  SharedDtor(*this);
}
inline void ConfigSql::SharedDtor(MessageLite& self) {
  ConfigSql& this_ = static_cast<ConfigSql&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.driver_name_.Destroy();
  this_._impl_.data_source_.Destroy();
  this_._impl_.at_rest_encrypt_key_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConfigSql::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigSql(arena);
}
constexpr auto ConfigSql::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ConfigSql),
                                            alignof(ConfigSql));
}
constexpr auto ConfigSql::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigSql_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigSql::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigSql>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigSql::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigSql>(), &ConfigSql::ByteSizeLong,
              &ConfigSql::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_._cached_size_),
          false,
      },
      &ConfigSql::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigSql_class_data_ =
        ConfigSql::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigSql::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigSql_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigSql_class_data_.tc_table);
  return ConfigSql_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 77, 2>
ConfigSql::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ConfigSql_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigSql>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string driver_name = 1 [json_name = "driverName"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_.driver_name_)}},
    // optional string data_source = 2 [json_name = "dataSource"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_.data_source_)}},
    // optional int32 max_idle_conns = 3 [json_name = "maxIdleConns"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigSql, _impl_.max_idle_conns_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_.max_idle_conns_)}},
    // optional int32 conn_max_lifetime_milliseconds = 4 [json_name = "connMaxLifetimeMilliseconds"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigSql, _impl_.conn_max_lifetime_milliseconds_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_.conn_max_lifetime_milliseconds_)}},
    // optional int32 conn_max_idle_time_milliseconds = 5 [json_name = "connMaxIdleTimeMilliseconds"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigSql, _impl_.conn_max_idle_time_milliseconds_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_.conn_max_idle_time_milliseconds_)}},
    // optional int32 max_open_conns = 6 [json_name = "maxOpenConns"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigSql, _impl_.max_open_conns_), 6>(),
     {48, 6, 0, PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_.max_open_conns_)}},
    // optional bool trace = 7 [json_name = "trace"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigSql, _impl_.trace_), 7>(),
     {56, 7, 0, PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_.trace_)}},
    // optional string at_rest_encrypt_key = 8 [json_name = "atRestEncryptKey"];
    {::_pbi::TcParser::FastUS1,
     {66, 2, 0, PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_.at_rest_encrypt_key_)}},
    // optional int32 query_timeout = 9 [json_name = "queryTimeout"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigSql, _impl_.query_timeout_), 9>(),
     {72, 9, 0, PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_.query_timeout_)}},
    // optional bool disable_database_search = 10 [json_name = "disableDatabaseSearch"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigSql, _impl_.disable_database_search_), 8>(),
     {80, 8, 0, PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_.disable_database_search_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string driver_name = 1 [json_name = "driverName"];
    {PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_.driver_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string data_source = 2 [json_name = "dataSource"];
    {PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_.data_source_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 max_idle_conns = 3 [json_name = "maxIdleConns"];
    {PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_.max_idle_conns_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 conn_max_lifetime_milliseconds = 4 [json_name = "connMaxLifetimeMilliseconds"];
    {PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_.conn_max_lifetime_milliseconds_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 conn_max_idle_time_milliseconds = 5 [json_name = "connMaxIdleTimeMilliseconds"];
    {PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_.conn_max_idle_time_milliseconds_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 max_open_conns = 6 [json_name = "maxOpenConns"];
    {PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_.max_open_conns_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool trace = 7 [json_name = "trace"];
    {PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_.trace_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string at_rest_encrypt_key = 8 [json_name = "atRestEncryptKey"];
    {PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_.at_rest_encrypt_key_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 query_timeout = 9 [json_name = "queryTimeout"];
    {PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_.query_timeout_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool disable_database_search = 10 [json_name = "disableDatabaseSearch"];
    {PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_.disable_database_search_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\23\13\13\0\0\0\0\0\23\0\0\0\0\0\0\0"
    "common.v1.ConfigSql"
    "driver_name"
    "data_source"
    "at_rest_encrypt_key"
  }},
};
PROTOBUF_NOINLINE void ConfigSql::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigSql)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.driver_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.data_source_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.at_rest_encrypt_key_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x000000f8u) != 0) {
    ::memset(&_impl_.max_idle_conns_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.trace_) -
        reinterpret_cast<char*>(&_impl_.max_idle_conns_)) + sizeof(_impl_.trace_));
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    ::memset(&_impl_.disable_database_search_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.query_timeout_) -
        reinterpret_cast<char*>(&_impl_.disable_database_search_)) + sizeof(_impl_.query_timeout_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigSql::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigSql& this_ = static_cast<const ConfigSql&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigSql::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigSql& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigSql)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional string driver_name = 1 [json_name = "driverName"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    const ::std::string& _s = this_._internal_driver_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSql.driver_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string data_source = 2 [json_name = "dataSource"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    const ::std::string& _s = this_._internal_data_source();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSql.data_source");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int32 max_idle_conns = 3 [json_name = "maxIdleConns"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
            stream, this_._internal_max_idle_conns(), target);
  }

  // optional int32 conn_max_lifetime_milliseconds = 4 [json_name = "connMaxLifetimeMilliseconds"];
  if ((cached_has_bits & 0x00000010u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
            stream, this_._internal_conn_max_lifetime_milliseconds(), target);
  }

  // optional int32 conn_max_idle_time_milliseconds = 5 [json_name = "connMaxIdleTimeMilliseconds"];
  if ((cached_has_bits & 0x00000020u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<5>(
            stream, this_._internal_conn_max_idle_time_milliseconds(), target);
  }

  // optional int32 max_open_conns = 6 [json_name = "maxOpenConns"];
  if ((cached_has_bits & 0x00000040u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<6>(
            stream, this_._internal_max_open_conns(), target);
  }

  // optional bool trace = 7 [json_name = "trace"];
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this_._internal_trace(), target);
  }

  // optional string at_rest_encrypt_key = 8 [json_name = "atRestEncryptKey"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    const ::std::string& _s = this_._internal_at_rest_encrypt_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSql.at_rest_encrypt_key");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // optional int32 query_timeout = 9 [json_name = "queryTimeout"];
  if ((cached_has_bits & 0x00000200u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<9>(
            stream, this_._internal_query_timeout(), target);
  }

  // optional bool disable_database_search = 10 [json_name = "disableDatabaseSearch"];
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this_._internal_disable_database_search(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigSql)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigSql::ByteSizeLong(const MessageLite& base) {
  const ConfigSql& this_ = static_cast<const ConfigSql&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigSql::ByteSizeLong() const {
  const ConfigSql& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigSql)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00000180u & cached_has_bits) * 2;
  if ((cached_has_bits & 0x0000007fu) != 0) {
    // optional string driver_name = 1 [json_name = "driverName"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_driver_name());
    }
    // optional string data_source = 2 [json_name = "dataSource"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_data_source());
    }
    // optional string at_rest_encrypt_key = 8 [json_name = "atRestEncryptKey"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_at_rest_encrypt_key());
    }
    // optional int32 max_idle_conns = 3 [json_name = "maxIdleConns"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_max_idle_conns());
    }
    // optional int32 conn_max_lifetime_milliseconds = 4 [json_name = "connMaxLifetimeMilliseconds"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_conn_max_lifetime_milliseconds());
    }
    // optional int32 conn_max_idle_time_milliseconds = 5 [json_name = "connMaxIdleTimeMilliseconds"];
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_conn_max_idle_time_milliseconds());
    }
    // optional int32 max_open_conns = 6 [json_name = "maxOpenConns"];
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_max_open_conns());
    }
  }
   {
    // optional int32 query_timeout = 9 [json_name = "queryTimeout"];
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_query_timeout());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigSql::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigSql*>(&to_msg);
  auto& from = static_cast<const ConfigSql&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigSql)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_driver_name(from._internal_driver_name());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_data_source(from._internal_data_source());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_at_rest_encrypt_key(from._internal_at_rest_encrypt_key());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.max_idle_conns_ = from._impl_.max_idle_conns_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.conn_max_lifetime_milliseconds_ = from._impl_.conn_max_lifetime_milliseconds_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.conn_max_idle_time_milliseconds_ = from._impl_.conn_max_idle_time_milliseconds_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.max_open_conns_ = from._impl_.max_open_conns_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.trace_ = from._impl_.trace_;
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.disable_database_search_ = from._impl_.disable_database_search_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.query_timeout_ = from._impl_.query_timeout_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigSql::CopyFrom(const ConfigSql& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigSql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigSql::InternalSwap(ConfigSql* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.driver_name_, &other->_impl_.driver_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_source_, &other->_impl_.data_source_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.at_rest_encrypt_key_, &other->_impl_.at_rest_encrypt_key_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_.query_timeout_)
      + sizeof(ConfigSql::_impl_.query_timeout_)
      - PROTOBUF_FIELD_OFFSET(ConfigSql, _impl_.max_idle_conns_)>(
          reinterpret_cast<char*>(&_impl_.max_idle_conns_),
          reinterpret_cast<char*>(&other->_impl_.max_idle_conns_));
}

::google::protobuf::Metadata ConfigSql::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigPassword::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConfigPassword>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConfigPassword, _impl_._has_bits_);
};

ConfigPassword::ConfigPassword(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigPassword_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigPassword)
}
ConfigPassword::ConfigPassword(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigPassword& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigPassword_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE ConfigPassword::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void ConfigPassword::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, minimum_length_),
           0,
           offsetof(Impl_, enable_forgot_link_) -
               offsetof(Impl_, minimum_length_) +
               sizeof(Impl_::enable_forgot_link_));
}
ConfigPassword::~ConfigPassword() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigPassword)
  SharedDtor(*this);
}
inline void ConfigPassword::SharedDtor(MessageLite& self) {
  ConfigPassword& this_ = static_cast<ConfigPassword&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConfigPassword::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigPassword(arena);
}
constexpr auto ConfigPassword::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ConfigPassword),
                                            alignof(ConfigPassword));
}
constexpr auto ConfigPassword::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigPassword_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigPassword::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigPassword>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigPassword::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigPassword>(), &ConfigPassword::ByteSizeLong,
              &ConfigPassword::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigPassword, _impl_._cached_size_),
          false,
      },
      &ConfigPassword::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigPassword_class_data_ =
        ConfigPassword::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigPassword::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigPassword_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigPassword_class_data_.tc_table);
  return ConfigPassword_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2>
ConfigPassword::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigPassword, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ConfigPassword_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigPassword>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 minimum_length = 1 [json_name = "minimumLength"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigPassword, _impl_.minimum_length_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigPassword, _impl_.minimum_length_)}},
    // optional int32 maximum_length = 2 [json_name = "maximumLength"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigPassword, _impl_.maximum_length_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(ConfigPassword, _impl_.maximum_length_)}},
    // optional bool lowercase = 3 [json_name = "lowercase"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigPassword, _impl_.lowercase_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(ConfigPassword, _impl_.lowercase_)}},
    // optional bool number = 4 [json_name = "number"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigPassword, _impl_.number_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(ConfigPassword, _impl_.number_)}},
    // optional bool uppercase = 5 [json_name = "uppercase"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigPassword, _impl_.uppercase_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(ConfigPassword, _impl_.uppercase_)}},
    // optional bool symbol = 6 [json_name = "symbol"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigPassword, _impl_.symbol_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(ConfigPassword, _impl_.symbol_)}},
    // optional bool enable_forgot_link = 7 [json_name = "enableForgotLink"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigPassword, _impl_.enable_forgot_link_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(ConfigPassword, _impl_.enable_forgot_link_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 minimum_length = 1 [json_name = "minimumLength"];
    {PROTOBUF_FIELD_OFFSET(ConfigPassword, _impl_.minimum_length_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 maximum_length = 2 [json_name = "maximumLength"];
    {PROTOBUF_FIELD_OFFSET(ConfigPassword, _impl_.maximum_length_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool lowercase = 3 [json_name = "lowercase"];
    {PROTOBUF_FIELD_OFFSET(ConfigPassword, _impl_.lowercase_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool number = 4 [json_name = "number"];
    {PROTOBUF_FIELD_OFFSET(ConfigPassword, _impl_.number_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool uppercase = 5 [json_name = "uppercase"];
    {PROTOBUF_FIELD_OFFSET(ConfigPassword, _impl_.uppercase_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool symbol = 6 [json_name = "symbol"];
    {PROTOBUF_FIELD_OFFSET(ConfigPassword, _impl_.symbol_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_forgot_link = 7 [json_name = "enableForgotLink"];
    {PROTOBUF_FIELD_OFFSET(ConfigPassword, _impl_.enable_forgot_link_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void ConfigPassword::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigPassword)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    ::memset(&_impl_.minimum_length_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.enable_forgot_link_) -
        reinterpret_cast<char*>(&_impl_.minimum_length_)) + sizeof(_impl_.enable_forgot_link_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigPassword::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigPassword& this_ = static_cast<const ConfigPassword&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigPassword::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigPassword& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigPassword)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional int32 minimum_length = 1 [json_name = "minimumLength"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
            stream, this_._internal_minimum_length(), target);
  }

  // optional int32 maximum_length = 2 [json_name = "maximumLength"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
            stream, this_._internal_maximum_length(), target);
  }

  // optional bool lowercase = 3 [json_name = "lowercase"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this_._internal_lowercase(), target);
  }

  // optional bool number = 4 [json_name = "number"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this_._internal_number(), target);
  }

  // optional bool uppercase = 5 [json_name = "uppercase"];
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this_._internal_uppercase(), target);
  }

  // optional bool symbol = 6 [json_name = "symbol"];
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this_._internal_symbol(), target);
  }

  // optional bool enable_forgot_link = 7 [json_name = "enableForgotLink"];
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this_._internal_enable_forgot_link(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigPassword)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigPassword::ByteSizeLong(const MessageLite& base) {
  const ConfigPassword& this_ = static_cast<const ConfigPassword&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigPassword::ByteSizeLong() const {
  const ConfigPassword& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigPassword)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x0000007cu & cached_has_bits) * 2;
  if ((cached_has_bits & 0x00000003u) != 0) {
    // optional int32 minimum_length = 1 [json_name = "minimumLength"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_minimum_length());
    }
    // optional int32 maximum_length = 2 [json_name = "maximumLength"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_maximum_length());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigPassword::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigPassword*>(&to_msg);
  auto& from = static_cast<const ConfigPassword&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigPassword)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_impl_.minimum_length_ = from._impl_.minimum_length_;
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.maximum_length_ = from._impl_.maximum_length_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.lowercase_ = from._impl_.lowercase_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.number_ = from._impl_.number_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.uppercase_ = from._impl_.uppercase_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.symbol_ = from._impl_.symbol_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.enable_forgot_link_ = from._impl_.enable_forgot_link_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigPassword::CopyFrom(const ConfigPassword& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigPassword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigPassword::InternalSwap(ConfigPassword* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigPassword, _impl_.enable_forgot_link_)
      + sizeof(ConfigPassword::_impl_.enable_forgot_link_)
      - PROTOBUF_FIELD_OFFSET(ConfigPassword, _impl_.minimum_length_)>(
          reinterpret_cast<char*>(&_impl_.minimum_length_),
          reinterpret_cast<char*>(&other->_impl_.minimum_length_));
}

::google::protobuf::Metadata ConfigPassword::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigFile::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConfigFile>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_._has_bits_);
};

ConfigFile::ConfigFile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigFile_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigFile)
}
PROTOBUF_NDEBUG_INLINE ConfigFile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::ConfigFile& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        driver_name_(arena, from.driver_name_),
        amazon_s3_access_key_id_(arena, from.amazon_s3_access_key_id_),
        amazon_s3_secret_access_key_(arena, from.amazon_s3_secret_access_key_),
        amazon_s3_bucket_(arena, from.amazon_s3_bucket_),
        amazon_s3_path_prefix_(arena, from.amazon_s3_path_prefix_),
        amazon_s3_region_(arena, from.amazon_s3_region_),
        amazon_s3_endpoint_(arena, from.amazon_s3_endpoint_),
        amazon_s3_storage_class_(arena, from.amazon_s3_storage_class_) {}

ConfigFile::ConfigFile(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigFile& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigFile_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigFile* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, max_image_resolution_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, max_image_resolution_),
           offsetof(Impl_, amazon_s3_upload_part_size_bytes_) -
               offsetof(Impl_, max_image_resolution_) +
               sizeof(Impl_::amazon_s3_upload_part_size_bytes_));

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigFile)
}
PROTOBUF_NDEBUG_INLINE ConfigFile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        driver_name_(arena),
        amazon_s3_access_key_id_(arena),
        amazon_s3_secret_access_key_(arena),
        amazon_s3_bucket_(arena),
        amazon_s3_path_prefix_(arena),
        amazon_s3_region_(arena),
        amazon_s3_endpoint_(arena),
        amazon_s3_storage_class_(arena) {}

inline void ConfigFile::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, max_image_resolution_),
           0,
           offsetof(Impl_, amazon_s3_upload_part_size_bytes_) -
               offsetof(Impl_, max_image_resolution_) +
               sizeof(Impl_::amazon_s3_upload_part_size_bytes_));
}
ConfigFile::~ConfigFile() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigFile)
  SharedDtor(*this);
}
inline void ConfigFile::SharedDtor(MessageLite& self) {
  ConfigFile& this_ = static_cast<ConfigFile&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.driver_name_.Destroy();
  this_._impl_.amazon_s3_access_key_id_.Destroy();
  this_._impl_.amazon_s3_secret_access_key_.Destroy();
  this_._impl_.amazon_s3_bucket_.Destroy();
  this_._impl_.amazon_s3_path_prefix_.Destroy();
  this_._impl_.amazon_s3_region_.Destroy();
  this_._impl_.amazon_s3_endpoint_.Destroy();
  this_._impl_.amazon_s3_storage_class_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConfigFile::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigFile(arena);
}
constexpr auto ConfigFile::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ConfigFile),
                                            alignof(ConfigFile));
}
constexpr auto ConfigFile::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigFile_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigFile::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigFile>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigFile::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigFile>(), &ConfigFile::ByteSizeLong,
              &ConfigFile::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_._cached_size_),
          false,
      },
      &ConfigFile::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigFile_class_data_ =
        ConfigFile::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigFile::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigFile_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigFile_class_data_.tc_table);
  return ConfigFile_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 19, 0, 200, 2>
ConfigFile::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_._has_bits_),
    0, // no _extensions_
    19, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294443008,  // skipmap
    offsetof(decltype(_table_), field_entries),
    19,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ConfigFile_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigFile>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool enable_file_attachments = 1 [json_name = "enableFileAttachments"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigFile, _impl_.enable_file_attachments_), 10>(),
     {8, 10, 0, PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.enable_file_attachments_)}},
    // optional bool enable_mobile_upload = 2 [json_name = "enableMobileUpload"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigFile, _impl_.enable_mobile_upload_), 11>(),
     {16, 11, 0, PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.enable_mobile_upload_)}},
    // optional bool enable_mobile_download = 3 [json_name = "enableMobileDownload"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigFile, _impl_.enable_mobile_download_), 12>(),
     {24, 12, 0, PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.enable_mobile_download_)}},
    // optional int64 max_image_resolution = 4 [json_name = "maxImageResolution"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ConfigFile, _impl_.max_image_resolution_), 8>(),
     {32, 8, 0, PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.max_image_resolution_)}},
    // optional int64 max_image_decoder_concurrency = 5 [json_name = "maxImageDecoderConcurrency"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ConfigFile, _impl_.max_image_decoder_concurrency_), 9>(),
     {40, 9, 0, PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.max_image_decoder_concurrency_)}},
    // optional string driver_name = 6 [json_name = "driverName"];
    {::_pbi::TcParser::FastUS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.driver_name_)}},
    // optional string amazon_s3_access_key_id = 7 [json_name = "amazonS3AccessKeyId"];
    {::_pbi::TcParser::FastUS1,
     {58, 1, 0, PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_access_key_id_)}},
    // optional string amazon_s3_secret_access_key = 8 [json_name = "amazonS3SecretAccessKey"];
    {::_pbi::TcParser::FastUS1,
     {66, 2, 0, PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_secret_access_key_)}},
    // optional string amazon_s3_bucket = 9 [json_name = "amazonS3Bucket"];
    {::_pbi::TcParser::FastUS1,
     {74, 3, 0, PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_bucket_)}},
    // optional string amazon_s3_path_prefix = 10 [json_name = "amazonS3PathPrefix"];
    {::_pbi::TcParser::FastUS1,
     {82, 4, 0, PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_path_prefix_)}},
    // optional string amazon_s3_region = 11 [json_name = "amazonS3Region"];
    {::_pbi::TcParser::FastUS1,
     {90, 5, 0, PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_region_)}},
    // optional string amazon_s3_endpoint = 12 [json_name = "amazonS3Endpoint"];
    {::_pbi::TcParser::FastUS1,
     {98, 6, 0, PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_endpoint_)}},
    // optional bool amazon_s3_ssl = 13 [json_name = "amazonS3Ssl"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigFile, _impl_.amazon_s3_ssl_), 13>(),
     {104, 13, 0, PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_ssl_)}},
    // optional bool amazon_s3_sign_v2 = 14 [json_name = "amazonS3SignV2"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigFile, _impl_.amazon_s3_sign_v2_), 14>(),
     {112, 14, 0, PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_sign_v2_)}},
    // optional bool amazon_s3_sse = 15 [json_name = "amazonS3Sse"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigFile, _impl_.amazon_s3_sse_), 15>(),
     {120, 15, 0, PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_sse_)}},
    // optional bool amazon_s3_trace = 16 [json_name = "amazonS3Trace"];
    {::_pbi::TcParser::FastV8S2,
     {384, 16, 0, PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_trace_)}},
    // optional int64 amazon_s3_request_timeout_milliseconds = 17 [json_name = "amazonS3RequestTimeoutMilliseconds"];
    {::_pbi::TcParser::FastV64S2,
     {392, 17, 0, PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_request_timeout_milliseconds_)}},
    // optional int64 amazon_s3_upload_part_size_bytes = 18 [json_name = "amazonS3UploadPartSizeBytes"];
    {::_pbi::TcParser::FastV64S2,
     {400, 18, 0, PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_upload_part_size_bytes_)}},
    // optional string amazon_s3_storage_class = 19 [json_name = "amazonS3StorageClass"];
    {::_pbi::TcParser::FastUS2,
     {410, 7, 0, PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_storage_class_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool enable_file_attachments = 1 [json_name = "enableFileAttachments"];
    {PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.enable_file_attachments_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_mobile_upload = 2 [json_name = "enableMobileUpload"];
    {PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.enable_mobile_upload_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_mobile_download = 3 [json_name = "enableMobileDownload"];
    {PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.enable_mobile_download_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int64 max_image_resolution = 4 [json_name = "maxImageResolution"];
    {PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.max_image_resolution_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional int64 max_image_decoder_concurrency = 5 [json_name = "maxImageDecoderConcurrency"];
    {PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.max_image_decoder_concurrency_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional string driver_name = 6 [json_name = "driverName"];
    {PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.driver_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string amazon_s3_access_key_id = 7 [json_name = "amazonS3AccessKeyId"];
    {PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_access_key_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string amazon_s3_secret_access_key = 8 [json_name = "amazonS3SecretAccessKey"];
    {PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_secret_access_key_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string amazon_s3_bucket = 9 [json_name = "amazonS3Bucket"];
    {PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_bucket_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string amazon_s3_path_prefix = 10 [json_name = "amazonS3PathPrefix"];
    {PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_path_prefix_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string amazon_s3_region = 11 [json_name = "amazonS3Region"];
    {PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_region_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string amazon_s3_endpoint = 12 [json_name = "amazonS3Endpoint"];
    {PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_endpoint_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool amazon_s3_ssl = 13 [json_name = "amazonS3Ssl"];
    {PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_ssl_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool amazon_s3_sign_v2 = 14 [json_name = "amazonS3SignV2"];
    {PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_sign_v2_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool amazon_s3_sse = 15 [json_name = "amazonS3Sse"];
    {PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_sse_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool amazon_s3_trace = 16 [json_name = "amazonS3Trace"];
    {PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_trace_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int64 amazon_s3_request_timeout_milliseconds = 17 [json_name = "amazonS3RequestTimeoutMilliseconds"];
    {PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_request_timeout_milliseconds_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional int64 amazon_s3_upload_part_size_bytes = 18 [json_name = "amazonS3UploadPartSizeBytes"];
    {PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_upload_part_size_bytes_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional string amazon_s3_storage_class = 19 [json_name = "amazonS3StorageClass"];
    {PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_storage_class_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\24\0\0\0\0\0\13\27\33\20\25\20\22\0\0\0\0\0\0\27\0\0\0\0"
    "common.v1.ConfigFile"
    "driver_name"
    "amazon_s3_access_key_id"
    "amazon_s3_secret_access_key"
    "amazon_s3_bucket"
    "amazon_s3_path_prefix"
    "amazon_s3_region"
    "amazon_s3_endpoint"
    "amazon_s3_storage_class"
  }},
};
PROTOBUF_NOINLINE void ConfigFile::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigFile)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.driver_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.amazon_s3_access_key_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.amazon_s3_secret_access_key_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.amazon_s3_bucket_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.amazon_s3_path_prefix_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _impl_.amazon_s3_region_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _impl_.amazon_s3_endpoint_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _impl_.amazon_s3_storage_class_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    ::memset(&_impl_.max_image_resolution_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.amazon_s3_sse_) -
        reinterpret_cast<char*>(&_impl_.max_image_resolution_)) + sizeof(_impl_.amazon_s3_sse_));
  }
  if ((cached_has_bits & 0x00070000u) != 0) {
    ::memset(&_impl_.amazon_s3_trace_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.amazon_s3_upload_part_size_bytes_) -
        reinterpret_cast<char*>(&_impl_.amazon_s3_trace_)) + sizeof(_impl_.amazon_s3_upload_part_size_bytes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigFile::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigFile& this_ = static_cast<const ConfigFile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigFile::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigFile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigFile)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional bool enable_file_attachments = 1 [json_name = "enableFileAttachments"];
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this_._internal_enable_file_attachments(), target);
  }

  // optional bool enable_mobile_upload = 2 [json_name = "enableMobileUpload"];
  if ((cached_has_bits & 0x00000800u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this_._internal_enable_mobile_upload(), target);
  }

  // optional bool enable_mobile_download = 3 [json_name = "enableMobileDownload"];
  if ((cached_has_bits & 0x00001000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this_._internal_enable_mobile_download(), target);
  }

  // optional int64 max_image_resolution = 4 [json_name = "maxImageResolution"];
  if ((cached_has_bits & 0x00000100u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<4>(
            stream, this_._internal_max_image_resolution(), target);
  }

  // optional int64 max_image_decoder_concurrency = 5 [json_name = "maxImageDecoderConcurrency"];
  if ((cached_has_bits & 0x00000200u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<5>(
            stream, this_._internal_max_image_decoder_concurrency(), target);
  }

  // optional string driver_name = 6 [json_name = "driverName"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    const ::std::string& _s = this_._internal_driver_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigFile.driver_name");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional string amazon_s3_access_key_id = 7 [json_name = "amazonS3AccessKeyId"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    const ::std::string& _s = this_._internal_amazon_s3_access_key_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigFile.amazon_s3_access_key_id");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional string amazon_s3_secret_access_key = 8 [json_name = "amazonS3SecretAccessKey"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    const ::std::string& _s = this_._internal_amazon_s3_secret_access_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigFile.amazon_s3_secret_access_key");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // optional string amazon_s3_bucket = 9 [json_name = "amazonS3Bucket"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    const ::std::string& _s = this_._internal_amazon_s3_bucket();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigFile.amazon_s3_bucket");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // optional string amazon_s3_path_prefix = 10 [json_name = "amazonS3PathPrefix"];
  if ((cached_has_bits & 0x00000010u) != 0) {
    const ::std::string& _s = this_._internal_amazon_s3_path_prefix();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigFile.amazon_s3_path_prefix");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // optional string amazon_s3_region = 11 [json_name = "amazonS3Region"];
  if ((cached_has_bits & 0x00000020u) != 0) {
    const ::std::string& _s = this_._internal_amazon_s3_region();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigFile.amazon_s3_region");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // optional string amazon_s3_endpoint = 12 [json_name = "amazonS3Endpoint"];
  if ((cached_has_bits & 0x00000040u) != 0) {
    const ::std::string& _s = this_._internal_amazon_s3_endpoint();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigFile.amazon_s3_endpoint");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // optional bool amazon_s3_ssl = 13 [json_name = "amazonS3Ssl"];
  if ((cached_has_bits & 0x00002000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this_._internal_amazon_s3_ssl(), target);
  }

  // optional bool amazon_s3_sign_v2 = 14 [json_name = "amazonS3SignV2"];
  if ((cached_has_bits & 0x00004000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this_._internal_amazon_s3_sign_v2(), target);
  }

  // optional bool amazon_s3_sse = 15 [json_name = "amazonS3Sse"];
  if ((cached_has_bits & 0x00008000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        15, this_._internal_amazon_s3_sse(), target);
  }

  // optional bool amazon_s3_trace = 16 [json_name = "amazonS3Trace"];
  if ((cached_has_bits & 0x00010000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        16, this_._internal_amazon_s3_trace(), target);
  }

  // optional int64 amazon_s3_request_timeout_milliseconds = 17 [json_name = "amazonS3RequestTimeoutMilliseconds"];
  if ((cached_has_bits & 0x00020000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        17, this_._internal_amazon_s3_request_timeout_milliseconds(), target);
  }

  // optional int64 amazon_s3_upload_part_size_bytes = 18 [json_name = "amazonS3UploadPartSizeBytes"];
  if ((cached_has_bits & 0x00040000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        18, this_._internal_amazon_s3_upload_part_size_bytes(), target);
  }

  // optional string amazon_s3_storage_class = 19 [json_name = "amazonS3StorageClass"];
  if ((cached_has_bits & 0x00000080u) != 0) {
    const ::std::string& _s = this_._internal_amazon_s3_storage_class();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigFile.amazon_s3_storage_class");
    target = stream->WriteStringMaybeAliased(19, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigFile)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigFile::ByteSizeLong(const MessageLite& base) {
  const ConfigFile& this_ = static_cast<const ConfigFile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigFile::ByteSizeLong() const {
  const ConfigFile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigFile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00010000u & cached_has_bits) * 3;
  total_size += ::absl::popcount(0x0000fc00u & cached_has_bits) * 2;
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // optional string driver_name = 6 [json_name = "driverName"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_driver_name());
    }
    // optional string amazon_s3_access_key_id = 7 [json_name = "amazonS3AccessKeyId"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_amazon_s3_access_key_id());
    }
    // optional string amazon_s3_secret_access_key = 8 [json_name = "amazonS3SecretAccessKey"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_amazon_s3_secret_access_key());
    }
    // optional string amazon_s3_bucket = 9 [json_name = "amazonS3Bucket"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_amazon_s3_bucket());
    }
    // optional string amazon_s3_path_prefix = 10 [json_name = "amazonS3PathPrefix"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_amazon_s3_path_prefix());
    }
    // optional string amazon_s3_region = 11 [json_name = "amazonS3Region"];
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_amazon_s3_region());
    }
    // optional string amazon_s3_endpoint = 12 [json_name = "amazonS3Endpoint"];
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_amazon_s3_endpoint());
    }
    // optional string amazon_s3_storage_class = 19 [json_name = "amazonS3StorageClass"];
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_amazon_s3_storage_class());
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    // optional int64 max_image_resolution = 4 [json_name = "maxImageResolution"];
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this_._internal_max_image_resolution());
    }
    // optional int64 max_image_decoder_concurrency = 5 [json_name = "maxImageDecoderConcurrency"];
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this_._internal_max_image_decoder_concurrency());
    }
  }
  if ((cached_has_bits & 0x00060000u) != 0) {
    // optional int64 amazon_s3_request_timeout_milliseconds = 17 [json_name = "amazonS3RequestTimeoutMilliseconds"];
    if ((cached_has_bits & 0x00020000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                      this_._internal_amazon_s3_request_timeout_milliseconds());
    }
    // optional int64 amazon_s3_upload_part_size_bytes = 18 [json_name = "amazonS3UploadPartSizeBytes"];
    if ((cached_has_bits & 0x00040000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                      this_._internal_amazon_s3_upload_part_size_bytes());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigFile::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigFile*>(&to_msg);
  auto& from = static_cast<const ConfigFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigFile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_driver_name(from._internal_driver_name());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_amazon_s3_access_key_id(from._internal_amazon_s3_access_key_id());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_amazon_s3_secret_access_key(from._internal_amazon_s3_secret_access_key());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_internal_set_amazon_s3_bucket(from._internal_amazon_s3_bucket());
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_internal_set_amazon_s3_path_prefix(from._internal_amazon_s3_path_prefix());
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_internal_set_amazon_s3_region(from._internal_amazon_s3_region());
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_internal_set_amazon_s3_endpoint(from._internal_amazon_s3_endpoint());
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_internal_set_amazon_s3_storage_class(from._internal_amazon_s3_storage_class());
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.max_image_resolution_ = from._impl_.max_image_resolution_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.max_image_decoder_concurrency_ = from._impl_.max_image_decoder_concurrency_;
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.enable_file_attachments_ = from._impl_.enable_file_attachments_;
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _this->_impl_.enable_mobile_upload_ = from._impl_.enable_mobile_upload_;
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      _this->_impl_.enable_mobile_download_ = from._impl_.enable_mobile_download_;
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      _this->_impl_.amazon_s3_ssl_ = from._impl_.amazon_s3_ssl_;
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      _this->_impl_.amazon_s3_sign_v2_ = from._impl_.amazon_s3_sign_v2_;
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      _this->_impl_.amazon_s3_sse_ = from._impl_.amazon_s3_sse_;
    }
  }
  if ((cached_has_bits & 0x00070000u) != 0) {
    if ((cached_has_bits & 0x00010000u) != 0) {
      _this->_impl_.amazon_s3_trace_ = from._impl_.amazon_s3_trace_;
    }
    if ((cached_has_bits & 0x00020000u) != 0) {
      _this->_impl_.amazon_s3_request_timeout_milliseconds_ = from._impl_.amazon_s3_request_timeout_milliseconds_;
    }
    if ((cached_has_bits & 0x00040000u) != 0) {
      _this->_impl_.amazon_s3_upload_part_size_bytes_ = from._impl_.amazon_s3_upload_part_size_bytes_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigFile::CopyFrom(const ConfigFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigFile::InternalSwap(ConfigFile* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.driver_name_, &other->_impl_.driver_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amazon_s3_access_key_id_, &other->_impl_.amazon_s3_access_key_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amazon_s3_secret_access_key_, &other->_impl_.amazon_s3_secret_access_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amazon_s3_bucket_, &other->_impl_.amazon_s3_bucket_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amazon_s3_path_prefix_, &other->_impl_.amazon_s3_path_prefix_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amazon_s3_region_, &other->_impl_.amazon_s3_region_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amazon_s3_endpoint_, &other->_impl_.amazon_s3_endpoint_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amazon_s3_storage_class_, &other->_impl_.amazon_s3_storage_class_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.amazon_s3_upload_part_size_bytes_)
      + sizeof(ConfigFile::_impl_.amazon_s3_upload_part_size_bytes_)
      - PROTOBUF_FIELD_OFFSET(ConfigFile, _impl_.max_image_resolution_)>(
          reinterpret_cast<char*>(&_impl_.max_image_resolution_),
          reinterpret_cast<char*>(&other->_impl_.max_image_resolution_));
}

::google::protobuf::Metadata ConfigFile::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigEmail::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConfigEmail>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_._has_bits_);
};

ConfigEmail::ConfigEmail(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigEmail_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigEmail)
}
PROTOBUF_NDEBUG_INLINE ConfigEmail::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::ConfigEmail& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        feedback_email_(arena, from.feedback_email_),
        reply_to_address_(arena, from.reply_to_address_),
        smtp_username_(arena, from.smtp_username_),
        smtp_password_(arena, from.smtp_password_),
        smtp_server_(arena, from.smtp_server_),
        smtp_port_(arena, from.smtp_port_),
        connection_security_(arena, from.connection_security_),
        push_notification_server_(arena, from.push_notification_server_),
        push_notification_contents_(arena, from.push_notification_contents_),
        email_notification_contents_type_(arena, from.email_notification_contents_type_),
        login_button_color_(arena, from.login_button_color_),
        login_button_border_color_(arena, from.login_button_border_color_),
        login_button_text_color_(arena, from.login_button_text_color_) {}

ConfigEmail::ConfigEmail(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigEmail& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigEmail_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigEmail* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, send_email_notifications_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, send_email_notifications_),
           offsetof(Impl_, rate_limiting_max_burst_) -
               offsetof(Impl_, send_email_notifications_) +
               sizeof(Impl_::rate_limiting_max_burst_));

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigEmail)
}
PROTOBUF_NDEBUG_INLINE ConfigEmail::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        feedback_email_(arena),
        reply_to_address_(arena),
        smtp_username_(arena),
        smtp_password_(arena),
        smtp_server_(arena),
        smtp_port_(arena),
        connection_security_(arena),
        push_notification_server_(arena),
        push_notification_contents_(arena),
        email_notification_contents_type_(arena),
        login_button_color_(arena),
        login_button_border_color_(arena),
        login_button_text_color_(arena) {}

inline void ConfigEmail::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, send_email_notifications_),
           0,
           offsetof(Impl_, rate_limiting_max_burst_) -
               offsetof(Impl_, send_email_notifications_) +
               sizeof(Impl_::rate_limiting_max_burst_));
}
ConfigEmail::~ConfigEmail() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigEmail)
  SharedDtor(*this);
}
inline void ConfigEmail::SharedDtor(MessageLite& self) {
  ConfigEmail& this_ = static_cast<ConfigEmail&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.feedback_email_.Destroy();
  this_._impl_.reply_to_address_.Destroy();
  this_._impl_.smtp_username_.Destroy();
  this_._impl_.smtp_password_.Destroy();
  this_._impl_.smtp_server_.Destroy();
  this_._impl_.smtp_port_.Destroy();
  this_._impl_.connection_security_.Destroy();
  this_._impl_.push_notification_server_.Destroy();
  this_._impl_.push_notification_contents_.Destroy();
  this_._impl_.email_notification_contents_type_.Destroy();
  this_._impl_.login_button_color_.Destroy();
  this_._impl_.login_button_border_color_.Destroy();
  this_._impl_.login_button_text_color_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConfigEmail::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigEmail(arena);
}
constexpr auto ConfigEmail::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ConfigEmail),
                                            alignof(ConfigEmail));
}
constexpr auto ConfigEmail::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigEmail_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigEmail::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigEmail>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigEmail::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigEmail>(), &ConfigEmail::ByteSizeLong,
              &ConfigEmail::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_._cached_size_),
          false,
      },
      &ConfigEmail::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigEmail_class_data_ =
        ConfigEmail::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigEmail::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigEmail_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigEmail_class_data_.tc_table);
  return ConfigEmail_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 26, 0, 297, 2>
ConfigEmail::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_._has_bits_),
    0, // no _extensions_
    26, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4227858432,  // skipmap
    offsetof(decltype(_table_), field_entries),
    26,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ConfigEmail_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigEmail>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool send_email_notifications = 1 [json_name = "sendEmailNotifications"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigEmail, _impl_.send_email_notifications_), 13>(),
     {8, 13, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.send_email_notifications_)}},
    // optional bool require_email_verification = 2 [json_name = "requireEmailVerification"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigEmail, _impl_.require_email_verification_), 14>(),
     {16, 14, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.require_email_verification_)}},
    // optional string feedback_email = 3 [json_name = "feedbackEmail"];
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.feedback_email_)}},
    // optional string reply_to_address = 4 [json_name = "replyToAddress"];
    {::_pbi::TcParser::FastUS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.reply_to_address_)}},
    // optional bool enable_smtp_auth = 5 [json_name = "enableSmtpAuth"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigEmail, _impl_.enable_smtp_auth_), 15>(),
     {40, 15, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.enable_smtp_auth_)}},
    // optional string smtp_username = 6 [json_name = "smtpUsername"];
    {::_pbi::TcParser::FastUS1,
     {50, 2, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.smtp_username_)}},
    // optional string smtp_password = 7 [json_name = "smtpPassword"];
    {::_pbi::TcParser::FastUS1,
     {58, 3, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.smtp_password_)}},
    // optional string smtp_server = 8 [json_name = "smtpServer"];
    {::_pbi::TcParser::FastUS1,
     {66, 4, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.smtp_server_)}},
    // optional string smtp_port = 9 [json_name = "smtpPort"];
    {::_pbi::TcParser::FastUS1,
     {74, 5, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.smtp_port_)}},
    // optional int32 smtp_server_timeout = 10 [json_name = "smtpServerTimeout"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigEmail, _impl_.smtp_server_timeout_), 17>(),
     {80, 17, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.smtp_server_timeout_)}},
    // optional string connection_security = 11 [json_name = "connectionSecurity"];
    {::_pbi::TcParser::FastUS1,
     {90, 6, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.connection_security_)}},
    // optional bool send_push_notifications = 12 [json_name = "sendPushNotifications"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigEmail, _impl_.send_push_notifications_), 16>(),
     {96, 16, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.send_push_notifications_)}},
    // optional string push_notification_server = 13 [json_name = "pushNotificationServer"];
    {::_pbi::TcParser::FastUS1,
     {106, 7, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.push_notification_server_)}},
    // optional string push_notification_contents = 14 [json_name = "pushNotificationContents"];
    {::_pbi::TcParser::FastUS1,
     {114, 8, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.push_notification_contents_)}},
    // optional int32 push_notification_buffer = 15 [json_name = "pushNotificationBuffer"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigEmail, _impl_.push_notification_buffer_), 18>(),
     {120, 18, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.push_notification_buffer_)}},
    // optional bool enable_email_batching = 16 [json_name = "enableEmailBatching"];
    {::_pbi::TcParser::FastV8S2,
     {384, 20, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.enable_email_batching_)}},
    // optional int32 email_batching_buffer_size = 17 [json_name = "emailBatchingBufferSize"];
    {::_pbi::TcParser::FastV32S2,
     {392, 19, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.email_batching_buffer_size_)}},
    // optional int32 email_batching_interval = 18 [json_name = "emailBatchingInterval"];
    {::_pbi::TcParser::FastV32S2,
     {400, 22, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.email_batching_interval_)}},
    // optional bool skip_server_certificate_verification = 19 [json_name = "skipServerCertificateVerification"];
    {::_pbi::TcParser::FastV8S2,
     {408, 21, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.skip_server_certificate_verification_)}},
    // optional string email_notification_contents_type = 20 [json_name = "emailNotificationContentsType"];
    {::_pbi::TcParser::FastUS2,
     {418, 9, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.email_notification_contents_type_)}},
    // optional string login_button_color = 21 [json_name = "loginButtonColor"];
    {::_pbi::TcParser::FastUS2,
     {426, 10, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.login_button_color_)}},
    // optional string login_button_border_color = 22 [json_name = "loginButtonBorderColor"];
    {::_pbi::TcParser::FastUS2,
     {434, 11, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.login_button_border_color_)}},
    // optional string login_button_text_color = 23 [json_name = "loginButtonTextColor"];
    {::_pbi::TcParser::FastUS2,
     {442, 12, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.login_button_text_color_)}},
    // optional int32 rate_limiting_memory_size = 24 [json_name = "rateLimitingMemorySize"];
    {::_pbi::TcParser::FastV32S2,
     {448, 23, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.rate_limiting_memory_size_)}},
    // optional int32 rate_limiting_per_hour = 25 [json_name = "rateLimitingPerHour"];
    {::_pbi::TcParser::FastV32S2,
     {456, 24, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.rate_limiting_per_hour_)}},
    // optional int32 rate_limiting_max_burst = 26 [json_name = "rateLimitingMaxBurst"];
    {::_pbi::TcParser::FastV32S2,
     {464, 25, 0, PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.rate_limiting_max_burst_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool send_email_notifications = 1 [json_name = "sendEmailNotifications"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.send_email_notifications_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool require_email_verification = 2 [json_name = "requireEmailVerification"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.require_email_verification_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string feedback_email = 3 [json_name = "feedbackEmail"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.feedback_email_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string reply_to_address = 4 [json_name = "replyToAddress"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.reply_to_address_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool enable_smtp_auth = 5 [json_name = "enableSmtpAuth"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.enable_smtp_auth_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string smtp_username = 6 [json_name = "smtpUsername"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.smtp_username_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string smtp_password = 7 [json_name = "smtpPassword"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.smtp_password_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string smtp_server = 8 [json_name = "smtpServer"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.smtp_server_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string smtp_port = 9 [json_name = "smtpPort"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.smtp_port_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 smtp_server_timeout = 10 [json_name = "smtpServerTimeout"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.smtp_server_timeout_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string connection_security = 11 [json_name = "connectionSecurity"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.connection_security_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool send_push_notifications = 12 [json_name = "sendPushNotifications"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.send_push_notifications_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string push_notification_server = 13 [json_name = "pushNotificationServer"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.push_notification_server_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string push_notification_contents = 14 [json_name = "pushNotificationContents"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.push_notification_contents_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 push_notification_buffer = 15 [json_name = "pushNotificationBuffer"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.push_notification_buffer_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool enable_email_batching = 16 [json_name = "enableEmailBatching"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.enable_email_batching_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 email_batching_buffer_size = 17 [json_name = "emailBatchingBufferSize"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.email_batching_buffer_size_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 email_batching_interval = 18 [json_name = "emailBatchingInterval"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.email_batching_interval_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool skip_server_certificate_verification = 19 [json_name = "skipServerCertificateVerification"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.skip_server_certificate_verification_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string email_notification_contents_type = 20 [json_name = "emailNotificationContentsType"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.email_notification_contents_type_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string login_button_color = 21 [json_name = "loginButtonColor"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.login_button_color_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string login_button_border_color = 22 [json_name = "loginButtonBorderColor"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.login_button_border_color_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string login_button_text_color = 23 [json_name = "loginButtonTextColor"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.login_button_text_color_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 rate_limiting_memory_size = 24 [json_name = "rateLimitingMemorySize"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.rate_limiting_memory_size_), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 rate_limiting_per_hour = 25 [json_name = "rateLimitingPerHour"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.rate_limiting_per_hour_), _Internal::kHasBitsOffset + 24, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 rate_limiting_max_burst = 26 [json_name = "rateLimitingMaxBurst"];
    {PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.rate_limiting_max_burst_), _Internal::kHasBitsOffset + 25, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\25\0\0\16\20\0\15\15\13\11\0\23\0\30\32\0\0\0\0\0\40\22\31\27\0\0\0\0\0\0\0\0"
    "common.v1.ConfigEmail"
    "feedback_email"
    "reply_to_address"
    "smtp_username"
    "smtp_password"
    "smtp_server"
    "smtp_port"
    "connection_security"
    "push_notification_server"
    "push_notification_contents"
    "email_notification_contents_type"
    "login_button_color"
    "login_button_border_color"
    "login_button_text_color"
  }},
};
PROTOBUF_NOINLINE void ConfigEmail::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigEmail)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.feedback_email_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.reply_to_address_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.smtp_username_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.smtp_password_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.smtp_server_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _impl_.smtp_port_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _impl_.connection_security_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _impl_.push_notification_server_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x00001f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _impl_.push_notification_contents_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _impl_.email_notification_contents_type_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _impl_.login_button_color_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _impl_.login_button_border_color_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      _impl_.login_button_text_color_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000e000u) != 0) {
    ::memset(&_impl_.send_email_notifications_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.enable_smtp_auth_) -
        reinterpret_cast<char*>(&_impl_.send_email_notifications_)) + sizeof(_impl_.enable_smtp_auth_));
  }
  if ((cached_has_bits & 0x00ff0000u) != 0) {
    ::memset(&_impl_.send_push_notifications_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.rate_limiting_memory_size_) -
        reinterpret_cast<char*>(&_impl_.send_push_notifications_)) + sizeof(_impl_.rate_limiting_memory_size_));
  }
  if ((cached_has_bits & 0x03000000u) != 0) {
    ::memset(&_impl_.rate_limiting_per_hour_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.rate_limiting_max_burst_) -
        reinterpret_cast<char*>(&_impl_.rate_limiting_per_hour_)) + sizeof(_impl_.rate_limiting_max_burst_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigEmail::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigEmail& this_ = static_cast<const ConfigEmail&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigEmail::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigEmail& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigEmail)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional bool send_email_notifications = 1 [json_name = "sendEmailNotifications"];
  if ((cached_has_bits & 0x00002000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this_._internal_send_email_notifications(), target);
  }

  // optional bool require_email_verification = 2 [json_name = "requireEmailVerification"];
  if ((cached_has_bits & 0x00004000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this_._internal_require_email_verification(), target);
  }

  // optional string feedback_email = 3 [json_name = "feedbackEmail"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    const ::std::string& _s = this_._internal_feedback_email();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigEmail.feedback_email");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string reply_to_address = 4 [json_name = "replyToAddress"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    const ::std::string& _s = this_._internal_reply_to_address();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigEmail.reply_to_address");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional bool enable_smtp_auth = 5 [json_name = "enableSmtpAuth"];
  if ((cached_has_bits & 0x00008000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this_._internal_enable_smtp_auth(), target);
  }

  // optional string smtp_username = 6 [json_name = "smtpUsername"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    const ::std::string& _s = this_._internal_smtp_username();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigEmail.smtp_username");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional string smtp_password = 7 [json_name = "smtpPassword"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    const ::std::string& _s = this_._internal_smtp_password();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigEmail.smtp_password");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional string smtp_server = 8 [json_name = "smtpServer"];
  if ((cached_has_bits & 0x00000010u) != 0) {
    const ::std::string& _s = this_._internal_smtp_server();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigEmail.smtp_server");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // optional string smtp_port = 9 [json_name = "smtpPort"];
  if ((cached_has_bits & 0x00000020u) != 0) {
    const ::std::string& _s = this_._internal_smtp_port();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigEmail.smtp_port");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // optional int32 smtp_server_timeout = 10 [json_name = "smtpServerTimeout"];
  if ((cached_has_bits & 0x00020000u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<10>(
            stream, this_._internal_smtp_server_timeout(), target);
  }

  // optional string connection_security = 11 [json_name = "connectionSecurity"];
  if ((cached_has_bits & 0x00000040u) != 0) {
    const ::std::string& _s = this_._internal_connection_security();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigEmail.connection_security");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // optional bool send_push_notifications = 12 [json_name = "sendPushNotifications"];
  if ((cached_has_bits & 0x00010000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this_._internal_send_push_notifications(), target);
  }

  // optional string push_notification_server = 13 [json_name = "pushNotificationServer"];
  if ((cached_has_bits & 0x00000080u) != 0) {
    const ::std::string& _s = this_._internal_push_notification_server();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigEmail.push_notification_server");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // optional string push_notification_contents = 14 [json_name = "pushNotificationContents"];
  if ((cached_has_bits & 0x00000100u) != 0) {
    const ::std::string& _s = this_._internal_push_notification_contents();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigEmail.push_notification_contents");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // optional int32 push_notification_buffer = 15 [json_name = "pushNotificationBuffer"];
  if ((cached_has_bits & 0x00040000u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<15>(
            stream, this_._internal_push_notification_buffer(), target);
  }

  // optional bool enable_email_batching = 16 [json_name = "enableEmailBatching"];
  if ((cached_has_bits & 0x00100000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        16, this_._internal_enable_email_batching(), target);
  }

  // optional int32 email_batching_buffer_size = 17 [json_name = "emailBatchingBufferSize"];
  if ((cached_has_bits & 0x00080000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        17, this_._internal_email_batching_buffer_size(), target);
  }

  // optional int32 email_batching_interval = 18 [json_name = "emailBatchingInterval"];
  if ((cached_has_bits & 0x00400000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        18, this_._internal_email_batching_interval(), target);
  }

  // optional bool skip_server_certificate_verification = 19 [json_name = "skipServerCertificateVerification"];
  if ((cached_has_bits & 0x00200000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        19, this_._internal_skip_server_certificate_verification(), target);
  }

  // optional string email_notification_contents_type = 20 [json_name = "emailNotificationContentsType"];
  if ((cached_has_bits & 0x00000200u) != 0) {
    const ::std::string& _s = this_._internal_email_notification_contents_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigEmail.email_notification_contents_type");
    target = stream->WriteStringMaybeAliased(20, _s, target);
  }

  // optional string login_button_color = 21 [json_name = "loginButtonColor"];
  if ((cached_has_bits & 0x00000400u) != 0) {
    const ::std::string& _s = this_._internal_login_button_color();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigEmail.login_button_color");
    target = stream->WriteStringMaybeAliased(21, _s, target);
  }

  // optional string login_button_border_color = 22 [json_name = "loginButtonBorderColor"];
  if ((cached_has_bits & 0x00000800u) != 0) {
    const ::std::string& _s = this_._internal_login_button_border_color();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigEmail.login_button_border_color");
    target = stream->WriteStringMaybeAliased(22, _s, target);
  }

  // optional string login_button_text_color = 23 [json_name = "loginButtonTextColor"];
  if ((cached_has_bits & 0x00001000u) != 0) {
    const ::std::string& _s = this_._internal_login_button_text_color();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigEmail.login_button_text_color");
    target = stream->WriteStringMaybeAliased(23, _s, target);
  }

  // optional int32 rate_limiting_memory_size = 24 [json_name = "rateLimitingMemorySize"];
  if ((cached_has_bits & 0x00800000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        24, this_._internal_rate_limiting_memory_size(), target);
  }

  // optional int32 rate_limiting_per_hour = 25 [json_name = "rateLimitingPerHour"];
  if ((cached_has_bits & 0x01000000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        25, this_._internal_rate_limiting_per_hour(), target);
  }

  // optional int32 rate_limiting_max_burst = 26 [json_name = "rateLimitingMaxBurst"];
  if ((cached_has_bits & 0x02000000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        26, this_._internal_rate_limiting_max_burst(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigEmail)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigEmail::ByteSizeLong(const MessageLite& base) {
  const ConfigEmail& this_ = static_cast<const ConfigEmail&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigEmail::ByteSizeLong() const {
  const ConfigEmail& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigEmail)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00300000u & cached_has_bits) * 3;
  total_size += ::absl::popcount(0x0001e000u & cached_has_bits) * 2;
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // optional string feedback_email = 3 [json_name = "feedbackEmail"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_feedback_email());
    }
    // optional string reply_to_address = 4 [json_name = "replyToAddress"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_reply_to_address());
    }
    // optional string smtp_username = 6 [json_name = "smtpUsername"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_smtp_username());
    }
    // optional string smtp_password = 7 [json_name = "smtpPassword"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_smtp_password());
    }
    // optional string smtp_server = 8 [json_name = "smtpServer"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_smtp_server());
    }
    // optional string smtp_port = 9 [json_name = "smtpPort"];
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_smtp_port());
    }
    // optional string connection_security = 11 [json_name = "connectionSecurity"];
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_connection_security());
    }
    // optional string push_notification_server = 13 [json_name = "pushNotificationServer"];
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_push_notification_server());
    }
  }
  if ((cached_has_bits & 0x00001f00u) != 0) {
    // optional string push_notification_contents = 14 [json_name = "pushNotificationContents"];
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_push_notification_contents());
    }
    // optional string email_notification_contents_type = 20 [json_name = "emailNotificationContentsType"];
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_email_notification_contents_type());
    }
    // optional string login_button_color = 21 [json_name = "loginButtonColor"];
    if ((cached_has_bits & 0x00000400u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_login_button_color());
    }
    // optional string login_button_border_color = 22 [json_name = "loginButtonBorderColor"];
    if ((cached_has_bits & 0x00000800u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_login_button_border_color());
    }
    // optional string login_button_text_color = 23 [json_name = "loginButtonTextColor"];
    if ((cached_has_bits & 0x00001000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_login_button_text_color());
    }
  }
  if ((cached_has_bits & 0x00ce0000u) != 0) {
    // optional int32 smtp_server_timeout = 10 [json_name = "smtpServerTimeout"];
    if ((cached_has_bits & 0x00020000u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_smtp_server_timeout());
    }
    // optional int32 push_notification_buffer = 15 [json_name = "pushNotificationBuffer"];
    if ((cached_has_bits & 0x00040000u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_push_notification_buffer());
    }
    // optional int32 email_batching_buffer_size = 17 [json_name = "emailBatchingBufferSize"];
    if ((cached_has_bits & 0x00080000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this_._internal_email_batching_buffer_size());
    }
    // optional int32 email_batching_interval = 18 [json_name = "emailBatchingInterval"];
    if ((cached_has_bits & 0x00400000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this_._internal_email_batching_interval());
    }
    // optional int32 rate_limiting_memory_size = 24 [json_name = "rateLimitingMemorySize"];
    if ((cached_has_bits & 0x00800000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this_._internal_rate_limiting_memory_size());
    }
  }
  if ((cached_has_bits & 0x03000000u) != 0) {
    // optional int32 rate_limiting_per_hour = 25 [json_name = "rateLimitingPerHour"];
    if ((cached_has_bits & 0x01000000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this_._internal_rate_limiting_per_hour());
    }
    // optional int32 rate_limiting_max_burst = 26 [json_name = "rateLimitingMaxBurst"];
    if ((cached_has_bits & 0x02000000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this_._internal_rate_limiting_max_burst());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigEmail::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigEmail*>(&to_msg);
  auto& from = static_cast<const ConfigEmail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigEmail)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_feedback_email(from._internal_feedback_email());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_reply_to_address(from._internal_reply_to_address());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_smtp_username(from._internal_smtp_username());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_internal_set_smtp_password(from._internal_smtp_password());
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_internal_set_smtp_server(from._internal_smtp_server());
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_internal_set_smtp_port(from._internal_smtp_port());
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_internal_set_connection_security(from._internal_connection_security());
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_internal_set_push_notification_server(from._internal_push_notification_server());
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_internal_set_push_notification_contents(from._internal_push_notification_contents());
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_internal_set_email_notification_contents_type(from._internal_email_notification_contents_type());
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_internal_set_login_button_color(from._internal_login_button_color());
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _this->_internal_set_login_button_border_color(from._internal_login_button_border_color());
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      _this->_internal_set_login_button_text_color(from._internal_login_button_text_color());
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      _this->_impl_.send_email_notifications_ = from._impl_.send_email_notifications_;
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      _this->_impl_.require_email_verification_ = from._impl_.require_email_verification_;
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      _this->_impl_.enable_smtp_auth_ = from._impl_.enable_smtp_auth_;
    }
  }
  if ((cached_has_bits & 0x00ff0000u) != 0) {
    if ((cached_has_bits & 0x00010000u) != 0) {
      _this->_impl_.send_push_notifications_ = from._impl_.send_push_notifications_;
    }
    if ((cached_has_bits & 0x00020000u) != 0) {
      _this->_impl_.smtp_server_timeout_ = from._impl_.smtp_server_timeout_;
    }
    if ((cached_has_bits & 0x00040000u) != 0) {
      _this->_impl_.push_notification_buffer_ = from._impl_.push_notification_buffer_;
    }
    if ((cached_has_bits & 0x00080000u) != 0) {
      _this->_impl_.email_batching_buffer_size_ = from._impl_.email_batching_buffer_size_;
    }
    if ((cached_has_bits & 0x00100000u) != 0) {
      _this->_impl_.enable_email_batching_ = from._impl_.enable_email_batching_;
    }
    if ((cached_has_bits & 0x00200000u) != 0) {
      _this->_impl_.skip_server_certificate_verification_ = from._impl_.skip_server_certificate_verification_;
    }
    if ((cached_has_bits & 0x00400000u) != 0) {
      _this->_impl_.email_batching_interval_ = from._impl_.email_batching_interval_;
    }
    if ((cached_has_bits & 0x00800000u) != 0) {
      _this->_impl_.rate_limiting_memory_size_ = from._impl_.rate_limiting_memory_size_;
    }
  }
  if ((cached_has_bits & 0x03000000u) != 0) {
    if ((cached_has_bits & 0x01000000u) != 0) {
      _this->_impl_.rate_limiting_per_hour_ = from._impl_.rate_limiting_per_hour_;
    }
    if ((cached_has_bits & 0x02000000u) != 0) {
      _this->_impl_.rate_limiting_max_burst_ = from._impl_.rate_limiting_max_burst_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigEmail::CopyFrom(const ConfigEmail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigEmail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigEmail::InternalSwap(ConfigEmail* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.feedback_email_, &other->_impl_.feedback_email_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reply_to_address_, &other->_impl_.reply_to_address_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.smtp_username_, &other->_impl_.smtp_username_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.smtp_password_, &other->_impl_.smtp_password_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.smtp_server_, &other->_impl_.smtp_server_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.smtp_port_, &other->_impl_.smtp_port_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.connection_security_, &other->_impl_.connection_security_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.push_notification_server_, &other->_impl_.push_notification_server_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.push_notification_contents_, &other->_impl_.push_notification_contents_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.email_notification_contents_type_, &other->_impl_.email_notification_contents_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.login_button_color_, &other->_impl_.login_button_color_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.login_button_border_color_, &other->_impl_.login_button_border_color_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.login_button_text_color_, &other->_impl_.login_button_text_color_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.rate_limiting_max_burst_)
      + sizeof(ConfigEmail::_impl_.rate_limiting_max_burst_)
      - PROTOBUF_FIELD_OFFSET(ConfigEmail, _impl_.send_email_notifications_)>(
          reinterpret_cast<char*>(&_impl_.send_email_notifications_),
          reinterpret_cast<char*>(&other->_impl_.send_email_notifications_));
}

::google::protobuf::Metadata ConfigEmail::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigRateLimit::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConfigRateLimit>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConfigRateLimit, _impl_._has_bits_);
};

ConfigRateLimit::ConfigRateLimit(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigRateLimit_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigRateLimit)
}
PROTOBUF_NDEBUG_INLINE ConfigRateLimit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::ConfigRateLimit& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        vary_by_header_(arena, from.vary_by_header_) {}

ConfigRateLimit::ConfigRateLimit(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigRateLimit& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigRateLimit_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigRateLimit* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, per_sec_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, per_sec_),
           offsetof(Impl_, vary_by_user_) -
               offsetof(Impl_, per_sec_) +
               sizeof(Impl_::vary_by_user_));

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigRateLimit)
}
PROTOBUF_NDEBUG_INLINE ConfigRateLimit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        vary_by_header_(arena) {}

inline void ConfigRateLimit::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, per_sec_),
           0,
           offsetof(Impl_, vary_by_user_) -
               offsetof(Impl_, per_sec_) +
               sizeof(Impl_::vary_by_user_));
}
ConfigRateLimit::~ConfigRateLimit() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigRateLimit)
  SharedDtor(*this);
}
inline void ConfigRateLimit::SharedDtor(MessageLite& self) {
  ConfigRateLimit& this_ = static_cast<ConfigRateLimit&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.vary_by_header_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConfigRateLimit::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigRateLimit(arena);
}
constexpr auto ConfigRateLimit::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ConfigRateLimit),
                                            alignof(ConfigRateLimit));
}
constexpr auto ConfigRateLimit::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigRateLimit_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigRateLimit::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigRateLimit>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigRateLimit::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigRateLimit>(), &ConfigRateLimit::ByteSizeLong,
              &ConfigRateLimit::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigRateLimit, _impl_._cached_size_),
          false,
      },
      &ConfigRateLimit::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigRateLimit_class_data_ =
        ConfigRateLimit::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigRateLimit::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigRateLimit_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigRateLimit_class_data_.tc_table);
  return ConfigRateLimit_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 48, 2>
ConfigRateLimit::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigRateLimit, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ConfigRateLimit_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigRateLimit>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool enable = 1 [json_name = "enable"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigRateLimit, _impl_.enable_), 4>(),
     {8, 4, 0, PROTOBUF_FIELD_OFFSET(ConfigRateLimit, _impl_.enable_)}},
    // optional int32 per_sec = 2 [json_name = "perSec"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigRateLimit, _impl_.per_sec_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(ConfigRateLimit, _impl_.per_sec_)}},
    // optional int32 max_burst = 3 [json_name = "maxBurst"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigRateLimit, _impl_.max_burst_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(ConfigRateLimit, _impl_.max_burst_)}},
    // optional int32 memory_store_size = 4 [json_name = "memoryStoreSize"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigRateLimit, _impl_.memory_store_size_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(ConfigRateLimit, _impl_.memory_store_size_)}},
    // optional bool vary_by_remote_addr = 5 [json_name = "varyByRemoteAddr"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigRateLimit, _impl_.vary_by_remote_addr_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(ConfigRateLimit, _impl_.vary_by_remote_addr_)}},
    // optional bool vary_by_user = 6 [json_name = "varyByUser"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigRateLimit, _impl_.vary_by_user_), 6>(),
     {48, 6, 0, PROTOBUF_FIELD_OFFSET(ConfigRateLimit, _impl_.vary_by_user_)}},
    // string vary_by_header = 7 [json_name = "varyByHeader"];
    {::_pbi::TcParser::FastUS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigRateLimit, _impl_.vary_by_header_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool enable = 1 [json_name = "enable"];
    {PROTOBUF_FIELD_OFFSET(ConfigRateLimit, _impl_.enable_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 per_sec = 2 [json_name = "perSec"];
    {PROTOBUF_FIELD_OFFSET(ConfigRateLimit, _impl_.per_sec_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 max_burst = 3 [json_name = "maxBurst"];
    {PROTOBUF_FIELD_OFFSET(ConfigRateLimit, _impl_.max_burst_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 memory_store_size = 4 [json_name = "memoryStoreSize"];
    {PROTOBUF_FIELD_OFFSET(ConfigRateLimit, _impl_.memory_store_size_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool vary_by_remote_addr = 5 [json_name = "varyByRemoteAddr"];
    {PROTOBUF_FIELD_OFFSET(ConfigRateLimit, _impl_.vary_by_remote_addr_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool vary_by_user = 6 [json_name = "varyByUser"];
    {PROTOBUF_FIELD_OFFSET(ConfigRateLimit, _impl_.vary_by_user_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // string vary_by_header = 7 [json_name = "varyByHeader"];
    {PROTOBUF_FIELD_OFFSET(ConfigRateLimit, _impl_.vary_by_header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\31\0\0\0\0\0\0\16"
    "common.v1.ConfigRateLimit"
    "vary_by_header"
  }},
};
PROTOBUF_NOINLINE void ConfigRateLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigRateLimit)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.vary_by_header_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000007eu) != 0) {
    ::memset(&_impl_.per_sec_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.vary_by_user_) -
        reinterpret_cast<char*>(&_impl_.per_sec_)) + sizeof(_impl_.vary_by_user_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigRateLimit::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigRateLimit& this_ = static_cast<const ConfigRateLimit&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigRateLimit::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigRateLimit& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigRateLimit)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional bool enable = 1 [json_name = "enable"];
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this_._internal_enable(), target);
  }

  // optional int32 per_sec = 2 [json_name = "perSec"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
            stream, this_._internal_per_sec(), target);
  }

  // optional int32 max_burst = 3 [json_name = "maxBurst"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
            stream, this_._internal_max_burst(), target);
  }

  // optional int32 memory_store_size = 4 [json_name = "memoryStoreSize"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
            stream, this_._internal_memory_store_size(), target);
  }

  // optional bool vary_by_remote_addr = 5 [json_name = "varyByRemoteAddr"];
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this_._internal_vary_by_remote_addr(), target);
  }

  // optional bool vary_by_user = 6 [json_name = "varyByUser"];
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this_._internal_vary_by_user(), target);
  }

  // string vary_by_header = 7 [json_name = "varyByHeader"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (!this_._internal_vary_by_header().empty()) {
      const ::std::string& _s = this_._internal_vary_by_header();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigRateLimit.vary_by_header");
      target = stream->WriteStringMaybeAliased(7, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigRateLimit)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigRateLimit::ByteSizeLong(const MessageLite& base) {
  const ConfigRateLimit& this_ = static_cast<const ConfigRateLimit&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigRateLimit::ByteSizeLong() const {
  const ConfigRateLimit& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigRateLimit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00000070u & cached_has_bits) * 2;
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // string vary_by_header = 7 [json_name = "varyByHeader"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_vary_by_header().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_vary_by_header());
      }
    }
    // optional int32 per_sec = 2 [json_name = "perSec"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_per_sec());
    }
    // optional int32 max_burst = 3 [json_name = "maxBurst"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_max_burst());
    }
    // optional int32 memory_store_size = 4 [json_name = "memoryStoreSize"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_memory_store_size());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigRateLimit::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigRateLimit*>(&to_msg);
  auto& from = static_cast<const ConfigRateLimit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigRateLimit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_vary_by_header().empty()) {
        _this->_internal_set_vary_by_header(from._internal_vary_by_header());
      } else {
        if (_this->_impl_.vary_by_header_.IsDefault()) {
          _this->_internal_set_vary_by_header("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.per_sec_ = from._impl_.per_sec_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.max_burst_ = from._impl_.max_burst_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.memory_store_size_ = from._impl_.memory_store_size_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.enable_ = from._impl_.enable_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.vary_by_remote_addr_ = from._impl_.vary_by_remote_addr_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.vary_by_user_ = from._impl_.vary_by_user_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigRateLimit::CopyFrom(const ConfigRateLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigRateLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigRateLimit::InternalSwap(ConfigRateLimit* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.vary_by_header_, &other->_impl_.vary_by_header_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigRateLimit, _impl_.vary_by_user_)
      + sizeof(ConfigRateLimit::_impl_.vary_by_user_)
      - PROTOBUF_FIELD_OFFSET(ConfigRateLimit, _impl_.per_sec_)>(
          reinterpret_cast<char*>(&_impl_.per_sec_),
          reinterpret_cast<char*>(&other->_impl_.per_sec_));
}

::google::protobuf::Metadata ConfigRateLimit::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigPrivacy::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConfigPrivacy>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConfigPrivacy, _impl_._has_bits_);
};

ConfigPrivacy::ConfigPrivacy(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigPrivacy_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigPrivacy)
}
ConfigPrivacy::ConfigPrivacy(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfigPrivacy& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigPrivacy_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE ConfigPrivacy::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void ConfigPrivacy::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, show_email_address_),
           0,
           offsetof(Impl_, show_full_name_) -
               offsetof(Impl_, show_email_address_) +
               sizeof(Impl_::show_full_name_));
}
ConfigPrivacy::~ConfigPrivacy() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigPrivacy)
  SharedDtor(*this);
}
inline void ConfigPrivacy::SharedDtor(MessageLite& self) {
  ConfigPrivacy& this_ = static_cast<ConfigPrivacy&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConfigPrivacy::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigPrivacy(arena);
}
constexpr auto ConfigPrivacy::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ConfigPrivacy),
                                            alignof(ConfigPrivacy));
}
constexpr auto ConfigPrivacy::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigPrivacy_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigPrivacy::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigPrivacy>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigPrivacy::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigPrivacy>(), &ConfigPrivacy::ByteSizeLong,
              &ConfigPrivacy::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigPrivacy, _impl_._cached_size_),
          false,
      },
      &ConfigPrivacy::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigPrivacy_class_data_ =
        ConfigPrivacy::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigPrivacy::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigPrivacy_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigPrivacy_class_data_.tc_table);
  return ConfigPrivacy_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2>
ConfigPrivacy::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigPrivacy, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ConfigPrivacy_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigPrivacy>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional bool show_full_name = 2 [json_name = "showFullName"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigPrivacy, _impl_.show_full_name_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(ConfigPrivacy, _impl_.show_full_name_)}},
    // optional bool show_email_address = 1 [json_name = "showEmailAddress"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigPrivacy, _impl_.show_email_address_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigPrivacy, _impl_.show_email_address_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool show_email_address = 1 [json_name = "showEmailAddress"];
    {PROTOBUF_FIELD_OFFSET(ConfigPrivacy, _impl_.show_email_address_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool show_full_name = 2 [json_name = "showFullName"];
    {PROTOBUF_FIELD_OFFSET(ConfigPrivacy, _impl_.show_full_name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void ConfigPrivacy::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigPrivacy)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.show_email_address_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.show_full_name_) -
      reinterpret_cast<char*>(&_impl_.show_email_address_)) + sizeof(_impl_.show_full_name_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigPrivacy::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigPrivacy& this_ = static_cast<const ConfigPrivacy&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigPrivacy::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigPrivacy& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigPrivacy)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional bool show_email_address = 1 [json_name = "showEmailAddress"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this_._internal_show_email_address(), target);
  }

  // optional bool show_full_name = 2 [json_name = "showFullName"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this_._internal_show_full_name(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigPrivacy)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigPrivacy::ByteSizeLong(const MessageLite& base) {
  const ConfigPrivacy& this_ = static_cast<const ConfigPrivacy&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigPrivacy::ByteSizeLong() const {
  const ConfigPrivacy& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigPrivacy)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00000003u & cached_has_bits) * 2;
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigPrivacy::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigPrivacy*>(&to_msg);
  auto& from = static_cast<const ConfigPrivacy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigPrivacy)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_impl_.show_email_address_ = from._impl_.show_email_address_;
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.show_full_name_ = from._impl_.show_full_name_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigPrivacy::CopyFrom(const ConfigPrivacy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigPrivacy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigPrivacy::InternalSwap(ConfigPrivacy* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigPrivacy, _impl_.show_full_name_)
      + sizeof(ConfigPrivacy::_impl_.show_full_name_)
      - PROTOBUF_FIELD_OFFSET(ConfigPrivacy, _impl_.show_email_address_)>(
          reinterpret_cast<char*>(&_impl_.show_email_address_),
          reinterpret_cast<char*>(&other->_impl_.show_email_address_));
}

::google::protobuf::Metadata ConfigPrivacy::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigSupport::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConfigSupport>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConfigSupport, _impl_._has_bits_);
};

ConfigSupport::ConfigSupport(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigSupport_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigSupport)
}
PROTOBUF_NDEBUG_INLINE ConfigSupport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::ConfigSupport& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        terms_of_service_link_(arena, from.terms_of_service_link_),
        privacy_policy_link_(arena, from.privacy_policy_link_),
        about_link_(arena, from.about_link_),
        help_link_(arena, from.help_link_),
        report_a_problem_link_(arena, from.report_a_problem_link_),
        forgot_password_link_(arena, from.forgot_password_link_),
        support_email_(arena, from.support_email_) {}

ConfigSupport::ConfigSupport(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigSupport& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigSupport_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigSupport* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigSupport)
}
PROTOBUF_NDEBUG_INLINE ConfigSupport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        terms_of_service_link_(arena),
        privacy_policy_link_(arena),
        about_link_(arena),
        help_link_(arena),
        report_a_problem_link_(arena),
        forgot_password_link_(arena),
        support_email_(arena) {}

inline void ConfigSupport::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ConfigSupport::~ConfigSupport() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigSupport)
  SharedDtor(*this);
}
inline void ConfigSupport::SharedDtor(MessageLite& self) {
  ConfigSupport& this_ = static_cast<ConfigSupport&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.terms_of_service_link_.Destroy();
  this_._impl_.privacy_policy_link_.Destroy();
  this_._impl_.about_link_.Destroy();
  this_._impl_.help_link_.Destroy();
  this_._impl_.report_a_problem_link_.Destroy();
  this_._impl_.forgot_password_link_.Destroy();
  this_._impl_.support_email_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConfigSupport::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigSupport(arena);
}
constexpr auto ConfigSupport::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ConfigSupport),
                                            alignof(ConfigSupport));
}
constexpr auto ConfigSupport::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigSupport_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigSupport::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigSupport>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigSupport::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigSupport>(), &ConfigSupport::ByteSizeLong,
              &ConfigSupport::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigSupport, _impl_._cached_size_),
          false,
      },
      &ConfigSupport::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigSupport_class_data_ =
        ConfigSupport::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigSupport::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigSupport_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigSupport_class_data_.tc_table);
  return ConfigSupport_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 145, 2>
ConfigSupport::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigSupport, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ConfigSupport_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigSupport>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string terms_of_service_link = 1 [json_name = "termsOfServiceLink"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigSupport, _impl_.terms_of_service_link_)}},
    // optional string privacy_policy_link = 2 [json_name = "privacyPolicyLink"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ConfigSupport, _impl_.privacy_policy_link_)}},
    // optional string about_link = 3 [json_name = "aboutLink"];
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(ConfigSupport, _impl_.about_link_)}},
    // optional string help_link = 4 [json_name = "helpLink"];
    {::_pbi::TcParser::FastUS1,
     {34, 3, 0, PROTOBUF_FIELD_OFFSET(ConfigSupport, _impl_.help_link_)}},
    // optional string report_a_problem_link = 5 [json_name = "reportAProblemLink"];
    {::_pbi::TcParser::FastUS1,
     {42, 4, 0, PROTOBUF_FIELD_OFFSET(ConfigSupport, _impl_.report_a_problem_link_)}},
    // optional string forgot_password_link = 6 [json_name = "forgotPasswordLink"];
    {::_pbi::TcParser::FastUS1,
     {50, 5, 0, PROTOBUF_FIELD_OFFSET(ConfigSupport, _impl_.forgot_password_link_)}},
    // optional string support_email = 7 [json_name = "supportEmail"];
    {::_pbi::TcParser::FastUS1,
     {58, 6, 0, PROTOBUF_FIELD_OFFSET(ConfigSupport, _impl_.support_email_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string terms_of_service_link = 1 [json_name = "termsOfServiceLink"];
    {PROTOBUF_FIELD_OFFSET(ConfigSupport, _impl_.terms_of_service_link_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string privacy_policy_link = 2 [json_name = "privacyPolicyLink"];
    {PROTOBUF_FIELD_OFFSET(ConfigSupport, _impl_.privacy_policy_link_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string about_link = 3 [json_name = "aboutLink"];
    {PROTOBUF_FIELD_OFFSET(ConfigSupport, _impl_.about_link_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string help_link = 4 [json_name = "helpLink"];
    {PROTOBUF_FIELD_OFFSET(ConfigSupport, _impl_.help_link_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string report_a_problem_link = 5 [json_name = "reportAProblemLink"];
    {PROTOBUF_FIELD_OFFSET(ConfigSupport, _impl_.report_a_problem_link_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string forgot_password_link = 6 [json_name = "forgotPasswordLink"];
    {PROTOBUF_FIELD_OFFSET(ConfigSupport, _impl_.forgot_password_link_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string support_email = 7 [json_name = "supportEmail"];
    {PROTOBUF_FIELD_OFFSET(ConfigSupport, _impl_.support_email_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\27\25\23\12\11\25\24\15"
    "common.v1.ConfigSupport"
    "terms_of_service_link"
    "privacy_policy_link"
    "about_link"
    "help_link"
    "report_a_problem_link"
    "forgot_password_link"
    "support_email"
  }},
};
PROTOBUF_NOINLINE void ConfigSupport::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigSupport)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.terms_of_service_link_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.privacy_policy_link_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.about_link_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.help_link_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.report_a_problem_link_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _impl_.forgot_password_link_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _impl_.support_email_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigSupport::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigSupport& this_ = static_cast<const ConfigSupport&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigSupport::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigSupport& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigSupport)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional string terms_of_service_link = 1 [json_name = "termsOfServiceLink"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    const ::std::string& _s = this_._internal_terms_of_service_link();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSupport.terms_of_service_link");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string privacy_policy_link = 2 [json_name = "privacyPolicyLink"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    const ::std::string& _s = this_._internal_privacy_policy_link();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSupport.privacy_policy_link");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string about_link = 3 [json_name = "aboutLink"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    const ::std::string& _s = this_._internal_about_link();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSupport.about_link");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string help_link = 4 [json_name = "helpLink"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    const ::std::string& _s = this_._internal_help_link();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSupport.help_link");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string report_a_problem_link = 5 [json_name = "reportAProblemLink"];
  if ((cached_has_bits & 0x00000010u) != 0) {
    const ::std::string& _s = this_._internal_report_a_problem_link();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSupport.report_a_problem_link");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional string forgot_password_link = 6 [json_name = "forgotPasswordLink"];
  if ((cached_has_bits & 0x00000020u) != 0) {
    const ::std::string& _s = this_._internal_forgot_password_link();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSupport.forgot_password_link");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional string support_email = 7 [json_name = "supportEmail"];
  if ((cached_has_bits & 0x00000040u) != 0) {
    const ::std::string& _s = this_._internal_support_email();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSupport.support_email");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigSupport)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigSupport::ByteSizeLong(const MessageLite& base) {
  const ConfigSupport& this_ = static_cast<const ConfigSupport&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigSupport::ByteSizeLong() const {
  const ConfigSupport& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigSupport)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    // optional string terms_of_service_link = 1 [json_name = "termsOfServiceLink"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_terms_of_service_link());
    }
    // optional string privacy_policy_link = 2 [json_name = "privacyPolicyLink"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_privacy_policy_link());
    }
    // optional string about_link = 3 [json_name = "aboutLink"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_about_link());
    }
    // optional string help_link = 4 [json_name = "helpLink"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_help_link());
    }
    // optional string report_a_problem_link = 5 [json_name = "reportAProblemLink"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_report_a_problem_link());
    }
    // optional string forgot_password_link = 6 [json_name = "forgotPasswordLink"];
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_forgot_password_link());
    }
    // optional string support_email = 7 [json_name = "supportEmail"];
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_support_email());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigSupport::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigSupport*>(&to_msg);
  auto& from = static_cast<const ConfigSupport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigSupport)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_terms_of_service_link(from._internal_terms_of_service_link());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_privacy_policy_link(from._internal_privacy_policy_link());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_about_link(from._internal_about_link());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_internal_set_help_link(from._internal_help_link());
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_internal_set_report_a_problem_link(from._internal_report_a_problem_link());
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_internal_set_forgot_password_link(from._internal_forgot_password_link());
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_internal_set_support_email(from._internal_support_email());
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigSupport::CopyFrom(const ConfigSupport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigSupport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigSupport::InternalSwap(ConfigSupport* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.terms_of_service_link_, &other->_impl_.terms_of_service_link_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.privacy_policy_link_, &other->_impl_.privacy_policy_link_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.about_link_, &other->_impl_.about_link_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.help_link_, &other->_impl_.help_link_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.report_a_problem_link_, &other->_impl_.report_a_problem_link_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.forgot_password_link_, &other->_impl_.forgot_password_link_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.support_email_, &other->_impl_.support_email_, arena);
}

::google::protobuf::Metadata ConfigSupport::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigLocalization::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConfigLocalization>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConfigLocalization, _impl_._has_bits_);
};

ConfigLocalization::ConfigLocalization(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigLocalization_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigLocalization)
}
PROTOBUF_NDEBUG_INLINE ConfigLocalization::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::ConfigLocalization& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        available_locales_{visibility, arena, from.available_locales_},
        default_server_locale_(arena, from.default_server_locale_),
        default_client_locale_(arena, from.default_client_locale_) {}

ConfigLocalization::ConfigLocalization(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigLocalization& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigLocalization_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigLocalization* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigLocalization)
}
PROTOBUF_NDEBUG_INLINE ConfigLocalization::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        available_locales_{visibility, arena},
        default_server_locale_(arena),
        default_client_locale_(arena) {}

inline void ConfigLocalization::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ConfigLocalization::~ConfigLocalization() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigLocalization)
  SharedDtor(*this);
}
inline void ConfigLocalization::SharedDtor(MessageLite& self) {
  ConfigLocalization& this_ = static_cast<ConfigLocalization&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.default_server_locale_.Destroy();
  this_._impl_.default_client_locale_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConfigLocalization::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigLocalization(arena);
}
constexpr auto ConfigLocalization::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ConfigLocalization, _impl_.available_locales_) +
          decltype(ConfigLocalization::_impl_.available_locales_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ConfigLocalization), alignof(ConfigLocalization), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ConfigLocalization::PlacementNew_,
                                 sizeof(ConfigLocalization),
                                 alignof(ConfigLocalization));
  }
}
constexpr auto ConfigLocalization::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigLocalization_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigLocalization::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigLocalization>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigLocalization::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigLocalization>(), &ConfigLocalization::ByteSizeLong,
              &ConfigLocalization::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigLocalization, _impl_._cached_size_),
          false,
      },
      &ConfigLocalization::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigLocalization_class_data_ =
        ConfigLocalization::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigLocalization::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigLocalization_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigLocalization_class_data_.tc_table);
  return ConfigLocalization_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 96, 2>
ConfigLocalization::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigLocalization, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ConfigLocalization_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigLocalization>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string default_server_locale = 1 [json_name = "defaultServerLocale"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigLocalization, _impl_.default_server_locale_)}},
    // optional string default_client_locale = 2 [json_name = "defaultClientLocale"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ConfigLocalization, _impl_.default_client_locale_)}},
    // repeated string available_locales = 3 [json_name = "availableLocales"];
    {::_pbi::TcParser::FastUR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ConfigLocalization, _impl_.available_locales_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string default_server_locale = 1 [json_name = "defaultServerLocale"];
    {PROTOBUF_FIELD_OFFSET(ConfigLocalization, _impl_.default_server_locale_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string default_client_locale = 2 [json_name = "defaultClientLocale"];
    {PROTOBUF_FIELD_OFFSET(ConfigLocalization, _impl_.default_client_locale_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string available_locales = 3 [json_name = "availableLocales"];
    {PROTOBUF_FIELD_OFFSET(ConfigLocalization, _impl_.available_locales_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\34\25\25\21\0\0\0\0"
    "common.v1.ConfigLocalization"
    "default_server_locale"
    "default_client_locale"
    "available_locales"
  }},
};
PROTOBUF_NOINLINE void ConfigLocalization::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigLocalization)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.available_locales_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.default_server_locale_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.default_client_locale_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigLocalization::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigLocalization& this_ = static_cast<const ConfigLocalization&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigLocalization::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigLocalization& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigLocalization)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional string default_server_locale = 1 [json_name = "defaultServerLocale"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    const ::std::string& _s = this_._internal_default_server_locale();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLocalization.default_server_locale");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string default_client_locale = 2 [json_name = "defaultClientLocale"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    const ::std::string& _s = this_._internal_default_client_locale();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLocalization.default_client_locale");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated string available_locales = 3 [json_name = "availableLocales"];
  for (int i = 0, n = this_._internal_available_locales_size(); i < n; ++i) {
    const auto& s = this_._internal_available_locales().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLocalization.available_locales");
    target = stream->WriteString(3, s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigLocalization)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigLocalization::ByteSizeLong(const MessageLite& base) {
  const ConfigLocalization& this_ = static_cast<const ConfigLocalization&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigLocalization::ByteSizeLong() const {
  const ConfigLocalization& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigLocalization)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string available_locales = 3 [json_name = "availableLocales"];
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_available_locales().size());
      for (int i = 0, n = this_._internal_available_locales().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_available_locales().Get(i));
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // optional string default_server_locale = 1 [json_name = "defaultServerLocale"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_default_server_locale());
    }
    // optional string default_client_locale = 2 [json_name = "defaultClientLocale"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_default_client_locale());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigLocalization::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigLocalization*>(&to_msg);
  auto& from = static_cast<const ConfigLocalization&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigLocalization)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_available_locales()->MergeFrom(from._internal_available_locales());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_default_server_locale(from._internal_default_server_locale());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_default_client_locale(from._internal_default_client_locale());
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigLocalization::CopyFrom(const ConfigLocalization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigLocalization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigLocalization::InternalSwap(ConfigLocalization* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.available_locales_.InternalSwap(&other->_impl_.available_locales_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.default_server_locale_, &other->_impl_.default_server_locale_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.default_client_locale_, &other->_impl_.default_client_locale_, arena);
}

::google::protobuf::Metadata ConfigLocalization::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigLdap::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConfigLdap>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_._has_bits_);
};

ConfigLdap::ConfigLdap(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigLdap_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigLdap)
}
PROTOBUF_NDEBUG_INLINE ConfigLdap::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::ConfigLdap& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        ldap_server_(arena, from.ldap_server_),
        connection_security_(arena, from.connection_security_),
        base_dn_(arena, from.base_dn_),
        bind_username_(arena, from.bind_username_),
        bind_password_(arena, from.bind_password_),
        user_filter_(arena, from.user_filter_),
        group_filter_(arena, from.group_filter_),
        admin_filter_(arena, from.admin_filter_),
        group_display_name_attribute_(arena, from.group_display_name_attribute_),
        group_id_attribute_(arena, from.group_id_attribute_),
        first_name_attribute_(arena, from.first_name_attribute_),
        last_name_attribute_(arena, from.last_name_attribute_),
        email_attribute_(arena, from.email_attribute_),
        username_attribute_(arena, from.username_attribute_),
        nickname_attribute_(arena, from.nickname_attribute_),
        id_attribute_(arena, from.id_attribute_),
        position_attribute_(arena, from.position_attribute_),
        login_id_attribute_(arena, from.login_id_attribute_),
        picture_attribute_(arena, from.picture_attribute_),
        login_field_name_(arena, from.login_field_name_),
        login_button_color_(arena, from.login_button_color_),
        login_button_border_color_(arena, from.login_button_border_color_),
        login_button_text_color_(arena, from.login_button_text_color_) {}

ConfigLdap::ConfigLdap(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigLdap& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigLdap_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigLdap* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ldap_port_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, ldap_port_),
           offsetof(Impl_, max_page_size_) -
               offsetof(Impl_, ldap_port_) +
               sizeof(Impl_::max_page_size_));

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigLdap)
}
PROTOBUF_NDEBUG_INLINE ConfigLdap::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        ldap_server_(arena),
        connection_security_(arena),
        base_dn_(arena),
        bind_username_(arena),
        bind_password_(arena),
        user_filter_(arena),
        group_filter_(arena),
        admin_filter_(arena),
        group_display_name_attribute_(arena),
        group_id_attribute_(arena),
        first_name_attribute_(arena),
        last_name_attribute_(arena),
        email_attribute_(arena),
        username_attribute_(arena),
        nickname_attribute_(arena),
        id_attribute_(arena),
        position_attribute_(arena),
        login_id_attribute_(arena),
        picture_attribute_(arena),
        login_field_name_(arena),
        login_button_color_(arena),
        login_button_border_color_(arena),
        login_button_text_color_(arena) {}

inline void ConfigLdap::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ldap_port_),
           0,
           offsetof(Impl_, max_page_size_) -
               offsetof(Impl_, ldap_port_) +
               sizeof(Impl_::max_page_size_));
}
ConfigLdap::~ConfigLdap() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigLdap)
  SharedDtor(*this);
}
inline void ConfigLdap::SharedDtor(MessageLite& self) {
  ConfigLdap& this_ = static_cast<ConfigLdap&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.ldap_server_.Destroy();
  this_._impl_.connection_security_.Destroy();
  this_._impl_.base_dn_.Destroy();
  this_._impl_.bind_username_.Destroy();
  this_._impl_.bind_password_.Destroy();
  this_._impl_.user_filter_.Destroy();
  this_._impl_.group_filter_.Destroy();
  this_._impl_.admin_filter_.Destroy();
  this_._impl_.group_display_name_attribute_.Destroy();
  this_._impl_.group_id_attribute_.Destroy();
  this_._impl_.first_name_attribute_.Destroy();
  this_._impl_.last_name_attribute_.Destroy();
  this_._impl_.email_attribute_.Destroy();
  this_._impl_.username_attribute_.Destroy();
  this_._impl_.nickname_attribute_.Destroy();
  this_._impl_.id_attribute_.Destroy();
  this_._impl_.position_attribute_.Destroy();
  this_._impl_.login_id_attribute_.Destroy();
  this_._impl_.picture_attribute_.Destroy();
  this_._impl_.login_field_name_.Destroy();
  this_._impl_.login_button_color_.Destroy();
  this_._impl_.login_button_border_color_.Destroy();
  this_._impl_.login_button_text_color_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConfigLdap::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigLdap(arena);
}
constexpr auto ConfigLdap::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ConfigLdap),
                                            alignof(ConfigLdap));
}
constexpr auto ConfigLdap::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigLdap_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigLdap::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigLdap>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigLdap::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigLdap>(), &ConfigLdap::ByteSizeLong,
              &ConfigLdap::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_._cached_size_),
          false,
      },
      &ConfigLdap::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigLdap_class_data_ =
        ConfigLdap::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigLdap::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigLdap_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigLdap_class_data_.tc_table);
  return ConfigLdap_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 31, 0, 434, 2>
ConfigLdap::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_._has_bits_),
    0, // no _extensions_
    31, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    2147483648,  // skipmap
    offsetof(decltype(_table_), field_entries),
    31,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ConfigLdap_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigLdap>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool enable = 1 [json_name = "enable"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigLdap, _impl_.enable_), 24>(),
     {8, 24, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.enable_)}},
    // optional bool enable_sync = 2 [json_name = "enableSync"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigLdap, _impl_.enable_sync_), 25>(),
     {16, 25, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.enable_sync_)}},
    // optional string ldap_server = 3 [json_name = "ldapServer"];
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.ldap_server_)}},
    // optional int32 ldap_port = 4 [json_name = "ldapPort"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigLdap, _impl_.ldap_port_), 23>(),
     {32, 23, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.ldap_port_)}},
    // optional string connection_security = 5 [json_name = "connectionSecurity"];
    {::_pbi::TcParser::FastUS1,
     {42, 1, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.connection_security_)}},
    // optional string base_dn = 6 [json_name = "baseDn"];
    {::_pbi::TcParser::FastUS1,
     {50, 2, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.base_dn_)}},
    // optional string bind_username = 7 [json_name = "bindUsername"];
    {::_pbi::TcParser::FastUS1,
     {58, 3, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.bind_username_)}},
    // optional string bind_password = 8 [json_name = "bindPassword"];
    {::_pbi::TcParser::FastUS1,
     {66, 4, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.bind_password_)}},
    // optional int32 maximum_login_attempts = 9 [json_name = "maximumLoginAttempts"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigLdap, _impl_.maximum_login_attempts_), 27>(),
     {72, 27, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.maximum_login_attempts_)}},
    // optional string user_filter = 10 [json_name = "userFilter"];
    {::_pbi::TcParser::FastUS1,
     {82, 5, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.user_filter_)}},
    // optional string group_filter = 11 [json_name = "groupFilter"];
    {::_pbi::TcParser::FastUS1,
     {90, 6, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.group_filter_)}},
    // optional bool enable_admin_filter = 12 [json_name = "enableAdminFilter"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigLdap, _impl_.enable_admin_filter_), 26>(),
     {96, 26, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.enable_admin_filter_)}},
    // optional string admin_filter = 13 [json_name = "adminFilter"];
    {::_pbi::TcParser::FastUS1,
     {106, 7, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.admin_filter_)}},
    // optional string group_display_name_attribute = 14 [json_name = "groupDisplayNameAttribute"];
    {::_pbi::TcParser::FastUS1,
     {114, 8, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.group_display_name_attribute_)}},
    // optional string group_id_attribute = 15 [json_name = "groupIdAttribute"];
    {::_pbi::TcParser::FastUS1,
     {122, 9, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.group_id_attribute_)}},
    // optional string first_name_attribute = 16 [json_name = "firstNameAttribute"];
    {::_pbi::TcParser::FastUS2,
     {386, 10, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.first_name_attribute_)}},
    // optional string last_name_attribute = 17 [json_name = "lastNameAttribute"];
    {::_pbi::TcParser::FastUS2,
     {394, 11, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.last_name_attribute_)}},
    // optional string email_attribute = 18 [json_name = "emailAttribute"];
    {::_pbi::TcParser::FastUS2,
     {402, 12, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.email_attribute_)}},
    // optional string username_attribute = 19 [json_name = "usernameAttribute"];
    {::_pbi::TcParser::FastUS2,
     {410, 13, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.username_attribute_)}},
    // optional string nickname_attribute = 20 [json_name = "nicknameAttribute"];
    {::_pbi::TcParser::FastUS2,
     {418, 14, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.nickname_attribute_)}},
    // optional string id_attribute = 21 [json_name = "idAttribute"];
    {::_pbi::TcParser::FastUS2,
     {426, 15, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.id_attribute_)}},
    // optional string position_attribute = 22 [json_name = "positionAttribute"];
    {::_pbi::TcParser::FastUS2,
     {434, 16, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.position_attribute_)}},
    // optional string login_id_attribute = 23 [json_name = "loginIdAttribute"];
    {::_pbi::TcParser::FastUS2,
     {442, 17, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.login_id_attribute_)}},
    // optional string picture_attribute = 24 [json_name = "pictureAttribute"];
    {::_pbi::TcParser::FastUS2,
     {450, 18, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.picture_attribute_)}},
    // optional int32 sync_interval_minutes = 25 [json_name = "syncIntervalMinutes"];
    {::_pbi::TcParser::FastV32S2,
     {456, 28, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.sync_interval_minutes_)}},
    // optional int32 query_timeout = 26 [json_name = "queryTimeout"];
    {::_pbi::TcParser::FastV32S2,
     {464, 29, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.query_timeout_)}},
    // optional int32 max_page_size = 27 [json_name = "maxPageSize"];
    {::_pbi::TcParser::FastV32S2,
     {472, 30, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.max_page_size_)}},
    // optional string login_field_name = 28 [json_name = "loginFieldName"];
    {::_pbi::TcParser::FastUS2,
     {482, 19, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.login_field_name_)}},
    // optional string login_button_color = 29 [json_name = "loginButtonColor"];
    {::_pbi::TcParser::FastUS2,
     {490, 20, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.login_button_color_)}},
    // optional string login_button_border_color = 30 [json_name = "loginButtonBorderColor"];
    {::_pbi::TcParser::FastUS2,
     {498, 21, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.login_button_border_color_)}},
    // optional string login_button_text_color = 31 [json_name = "loginButtonTextColor"];
    {::_pbi::TcParser::FastUS2,
     {506, 22, 0, PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.login_button_text_color_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool enable = 1 [json_name = "enable"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.enable_), _Internal::kHasBitsOffset + 24, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_sync = 2 [json_name = "enableSync"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.enable_sync_), _Internal::kHasBitsOffset + 25, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string ldap_server = 3 [json_name = "ldapServer"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.ldap_server_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 ldap_port = 4 [json_name = "ldapPort"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.ldap_port_), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string connection_security = 5 [json_name = "connectionSecurity"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.connection_security_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string base_dn = 6 [json_name = "baseDn"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.base_dn_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string bind_username = 7 [json_name = "bindUsername"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.bind_username_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string bind_password = 8 [json_name = "bindPassword"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.bind_password_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 maximum_login_attempts = 9 [json_name = "maximumLoginAttempts"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.maximum_login_attempts_), _Internal::kHasBitsOffset + 27, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string user_filter = 10 [json_name = "userFilter"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.user_filter_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string group_filter = 11 [json_name = "groupFilter"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.group_filter_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool enable_admin_filter = 12 [json_name = "enableAdminFilter"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.enable_admin_filter_), _Internal::kHasBitsOffset + 26, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string admin_filter = 13 [json_name = "adminFilter"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.admin_filter_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string group_display_name_attribute = 14 [json_name = "groupDisplayNameAttribute"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.group_display_name_attribute_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string group_id_attribute = 15 [json_name = "groupIdAttribute"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.group_id_attribute_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string first_name_attribute = 16 [json_name = "firstNameAttribute"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.first_name_attribute_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string last_name_attribute = 17 [json_name = "lastNameAttribute"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.last_name_attribute_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string email_attribute = 18 [json_name = "emailAttribute"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.email_attribute_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string username_attribute = 19 [json_name = "usernameAttribute"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.username_attribute_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string nickname_attribute = 20 [json_name = "nicknameAttribute"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.nickname_attribute_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string id_attribute = 21 [json_name = "idAttribute"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.id_attribute_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string position_attribute = 22 [json_name = "positionAttribute"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.position_attribute_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string login_id_attribute = 23 [json_name = "loginIdAttribute"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.login_id_attribute_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string picture_attribute = 24 [json_name = "pictureAttribute"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.picture_attribute_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 sync_interval_minutes = 25 [json_name = "syncIntervalMinutes"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.sync_interval_minutes_), _Internal::kHasBitsOffset + 28, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 query_timeout = 26 [json_name = "queryTimeout"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.query_timeout_), _Internal::kHasBitsOffset + 29, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 max_page_size = 27 [json_name = "maxPageSize"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.max_page_size_), _Internal::kHasBitsOffset + 30, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string login_field_name = 28 [json_name = "loginFieldName"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.login_field_name_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string login_button_color = 29 [json_name = "loginButtonColor"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.login_button_color_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string login_button_border_color = 30 [json_name = "loginButtonBorderColor"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.login_button_border_color_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string login_button_text_color = 31 [json_name = "loginButtonTextColor"];
    {PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.login_button_text_color_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\24\0\0\13\0\23\7\15\15\0\13\14\0\14\34\22\24\23\17\22\22\14\22\22\21\0\0\0\20\22\31\27"
    "common.v1.ConfigLdap"
    "ldap_server"
    "connection_security"
    "base_dn"
    "bind_username"
    "bind_password"
    "user_filter"
    "group_filter"
    "admin_filter"
    "group_display_name_attribute"
    "group_id_attribute"
    "first_name_attribute"
    "last_name_attribute"
    "email_attribute"
    "username_attribute"
    "nickname_attribute"
    "id_attribute"
    "position_attribute"
    "login_id_attribute"
    "picture_attribute"
    "login_field_name"
    "login_button_color"
    "login_button_border_color"
    "login_button_text_color"
  }},
};
PROTOBUF_NOINLINE void ConfigLdap::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigLdap)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.ldap_server_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.connection_security_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.base_dn_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.bind_username_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.bind_password_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _impl_.user_filter_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _impl_.group_filter_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _impl_.admin_filter_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _impl_.group_display_name_attribute_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _impl_.group_id_attribute_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _impl_.first_name_attribute_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _impl_.last_name_attribute_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      _impl_.email_attribute_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      _impl_.username_attribute_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      _impl_.nickname_attribute_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      _impl_.id_attribute_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x007f0000u) != 0) {
    if ((cached_has_bits & 0x00010000u) != 0) {
      _impl_.position_attribute_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00020000u) != 0) {
      _impl_.login_id_attribute_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00040000u) != 0) {
      _impl_.picture_attribute_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00080000u) != 0) {
      _impl_.login_field_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00100000u) != 0) {
      _impl_.login_button_color_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00200000u) != 0) {
      _impl_.login_button_border_color_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00400000u) != 0) {
      _impl_.login_button_text_color_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.ldap_port_ = 0;
  if ((cached_has_bits & 0x7f000000u) != 0) {
    ::memset(&_impl_.enable_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.max_page_size_) -
        reinterpret_cast<char*>(&_impl_.enable_)) + sizeof(_impl_.max_page_size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigLdap::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigLdap& this_ = static_cast<const ConfigLdap&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigLdap::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigLdap& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigLdap)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional bool enable = 1 [json_name = "enable"];
  if ((cached_has_bits & 0x01000000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this_._internal_enable(), target);
  }

  // optional bool enable_sync = 2 [json_name = "enableSync"];
  if ((cached_has_bits & 0x02000000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this_._internal_enable_sync(), target);
  }

  // optional string ldap_server = 3 [json_name = "ldapServer"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    const ::std::string& _s = this_._internal_ldap_server();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLdap.ldap_server");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional int32 ldap_port = 4 [json_name = "ldapPort"];
  if ((cached_has_bits & 0x00800000u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
            stream, this_._internal_ldap_port(), target);
  }

  // optional string connection_security = 5 [json_name = "connectionSecurity"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    const ::std::string& _s = this_._internal_connection_security();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLdap.connection_security");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional string base_dn = 6 [json_name = "baseDn"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    const ::std::string& _s = this_._internal_base_dn();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLdap.base_dn");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional string bind_username = 7 [json_name = "bindUsername"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    const ::std::string& _s = this_._internal_bind_username();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLdap.bind_username");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional string bind_password = 8 [json_name = "bindPassword"];
  if ((cached_has_bits & 0x00000010u) != 0) {
    const ::std::string& _s = this_._internal_bind_password();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLdap.bind_password");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // optional int32 maximum_login_attempts = 9 [json_name = "maximumLoginAttempts"];
  if ((cached_has_bits & 0x08000000u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<9>(
            stream, this_._internal_maximum_login_attempts(), target);
  }

  // optional string user_filter = 10 [json_name = "userFilter"];
  if ((cached_has_bits & 0x00000020u) != 0) {
    const ::std::string& _s = this_._internal_user_filter();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLdap.user_filter");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // optional string group_filter = 11 [json_name = "groupFilter"];
  if ((cached_has_bits & 0x00000040u) != 0) {
    const ::std::string& _s = this_._internal_group_filter();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLdap.group_filter");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // optional bool enable_admin_filter = 12 [json_name = "enableAdminFilter"];
  if ((cached_has_bits & 0x04000000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this_._internal_enable_admin_filter(), target);
  }

  // optional string admin_filter = 13 [json_name = "adminFilter"];
  if ((cached_has_bits & 0x00000080u) != 0) {
    const ::std::string& _s = this_._internal_admin_filter();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLdap.admin_filter");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // optional string group_display_name_attribute = 14 [json_name = "groupDisplayNameAttribute"];
  if ((cached_has_bits & 0x00000100u) != 0) {
    const ::std::string& _s = this_._internal_group_display_name_attribute();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLdap.group_display_name_attribute");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // optional string group_id_attribute = 15 [json_name = "groupIdAttribute"];
  if ((cached_has_bits & 0x00000200u) != 0) {
    const ::std::string& _s = this_._internal_group_id_attribute();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLdap.group_id_attribute");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // optional string first_name_attribute = 16 [json_name = "firstNameAttribute"];
  if ((cached_has_bits & 0x00000400u) != 0) {
    const ::std::string& _s = this_._internal_first_name_attribute();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLdap.first_name_attribute");
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  // optional string last_name_attribute = 17 [json_name = "lastNameAttribute"];
  if ((cached_has_bits & 0x00000800u) != 0) {
    const ::std::string& _s = this_._internal_last_name_attribute();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLdap.last_name_attribute");
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  // optional string email_attribute = 18 [json_name = "emailAttribute"];
  if ((cached_has_bits & 0x00001000u) != 0) {
    const ::std::string& _s = this_._internal_email_attribute();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLdap.email_attribute");
    target = stream->WriteStringMaybeAliased(18, _s, target);
  }

  // optional string username_attribute = 19 [json_name = "usernameAttribute"];
  if ((cached_has_bits & 0x00002000u) != 0) {
    const ::std::string& _s = this_._internal_username_attribute();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLdap.username_attribute");
    target = stream->WriteStringMaybeAliased(19, _s, target);
  }

  // optional string nickname_attribute = 20 [json_name = "nicknameAttribute"];
  if ((cached_has_bits & 0x00004000u) != 0) {
    const ::std::string& _s = this_._internal_nickname_attribute();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLdap.nickname_attribute");
    target = stream->WriteStringMaybeAliased(20, _s, target);
  }

  // optional string id_attribute = 21 [json_name = "idAttribute"];
  if ((cached_has_bits & 0x00008000u) != 0) {
    const ::std::string& _s = this_._internal_id_attribute();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLdap.id_attribute");
    target = stream->WriteStringMaybeAliased(21, _s, target);
  }

  // optional string position_attribute = 22 [json_name = "positionAttribute"];
  if ((cached_has_bits & 0x00010000u) != 0) {
    const ::std::string& _s = this_._internal_position_attribute();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLdap.position_attribute");
    target = stream->WriteStringMaybeAliased(22, _s, target);
  }

  // optional string login_id_attribute = 23 [json_name = "loginIdAttribute"];
  if ((cached_has_bits & 0x00020000u) != 0) {
    const ::std::string& _s = this_._internal_login_id_attribute();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLdap.login_id_attribute");
    target = stream->WriteStringMaybeAliased(23, _s, target);
  }

  // optional string picture_attribute = 24 [json_name = "pictureAttribute"];
  if ((cached_has_bits & 0x00040000u) != 0) {
    const ::std::string& _s = this_._internal_picture_attribute();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLdap.picture_attribute");
    target = stream->WriteStringMaybeAliased(24, _s, target);
  }

  // optional int32 sync_interval_minutes = 25 [json_name = "syncIntervalMinutes"];
  if ((cached_has_bits & 0x10000000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        25, this_._internal_sync_interval_minutes(), target);
  }

  // optional int32 query_timeout = 26 [json_name = "queryTimeout"];
  if ((cached_has_bits & 0x20000000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        26, this_._internal_query_timeout(), target);
  }

  // optional int32 max_page_size = 27 [json_name = "maxPageSize"];
  if ((cached_has_bits & 0x40000000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        27, this_._internal_max_page_size(), target);
  }

  // optional string login_field_name = 28 [json_name = "loginFieldName"];
  if ((cached_has_bits & 0x00080000u) != 0) {
    const ::std::string& _s = this_._internal_login_field_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLdap.login_field_name");
    target = stream->WriteStringMaybeAliased(28, _s, target);
  }

  // optional string login_button_color = 29 [json_name = "loginButtonColor"];
  if ((cached_has_bits & 0x00100000u) != 0) {
    const ::std::string& _s = this_._internal_login_button_color();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLdap.login_button_color");
    target = stream->WriteStringMaybeAliased(29, _s, target);
  }

  // optional string login_button_border_color = 30 [json_name = "loginButtonBorderColor"];
  if ((cached_has_bits & 0x00200000u) != 0) {
    const ::std::string& _s = this_._internal_login_button_border_color();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLdap.login_button_border_color");
    target = stream->WriteStringMaybeAliased(30, _s, target);
  }

  // optional string login_button_text_color = 31 [json_name = "loginButtonTextColor"];
  if ((cached_has_bits & 0x00400000u) != 0) {
    const ::std::string& _s = this_._internal_login_button_text_color();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigLdap.login_button_text_color");
    target = stream->WriteStringMaybeAliased(31, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigLdap)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigLdap::ByteSizeLong(const MessageLite& base) {
  const ConfigLdap& this_ = static_cast<const ConfigLdap&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigLdap::ByteSizeLong() const {
  const ConfigLdap& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigLdap)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x07000000u & cached_has_bits) * 2;
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // optional string ldap_server = 3 [json_name = "ldapServer"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_ldap_server());
    }
    // optional string connection_security = 5 [json_name = "connectionSecurity"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_connection_security());
    }
    // optional string base_dn = 6 [json_name = "baseDn"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_base_dn());
    }
    // optional string bind_username = 7 [json_name = "bindUsername"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_bind_username());
    }
    // optional string bind_password = 8 [json_name = "bindPassword"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_bind_password());
    }
    // optional string user_filter = 10 [json_name = "userFilter"];
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_user_filter());
    }
    // optional string group_filter = 11 [json_name = "groupFilter"];
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_group_filter());
    }
    // optional string admin_filter = 13 [json_name = "adminFilter"];
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_admin_filter());
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    // optional string group_display_name_attribute = 14 [json_name = "groupDisplayNameAttribute"];
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_group_display_name_attribute());
    }
    // optional string group_id_attribute = 15 [json_name = "groupIdAttribute"];
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_group_id_attribute());
    }
    // optional string first_name_attribute = 16 [json_name = "firstNameAttribute"];
    if ((cached_has_bits & 0x00000400u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_first_name_attribute());
    }
    // optional string last_name_attribute = 17 [json_name = "lastNameAttribute"];
    if ((cached_has_bits & 0x00000800u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_last_name_attribute());
    }
    // optional string email_attribute = 18 [json_name = "emailAttribute"];
    if ((cached_has_bits & 0x00001000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_email_attribute());
    }
    // optional string username_attribute = 19 [json_name = "usernameAttribute"];
    if ((cached_has_bits & 0x00002000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_username_attribute());
    }
    // optional string nickname_attribute = 20 [json_name = "nicknameAttribute"];
    if ((cached_has_bits & 0x00004000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_nickname_attribute());
    }
    // optional string id_attribute = 21 [json_name = "idAttribute"];
    if ((cached_has_bits & 0x00008000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_id_attribute());
    }
  }
  if ((cached_has_bits & 0x00ff0000u) != 0) {
    // optional string position_attribute = 22 [json_name = "positionAttribute"];
    if ((cached_has_bits & 0x00010000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_position_attribute());
    }
    // optional string login_id_attribute = 23 [json_name = "loginIdAttribute"];
    if ((cached_has_bits & 0x00020000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_login_id_attribute());
    }
    // optional string picture_attribute = 24 [json_name = "pictureAttribute"];
    if ((cached_has_bits & 0x00040000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_picture_attribute());
    }
    // optional string login_field_name = 28 [json_name = "loginFieldName"];
    if ((cached_has_bits & 0x00080000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_login_field_name());
    }
    // optional string login_button_color = 29 [json_name = "loginButtonColor"];
    if ((cached_has_bits & 0x00100000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_login_button_color());
    }
    // optional string login_button_border_color = 30 [json_name = "loginButtonBorderColor"];
    if ((cached_has_bits & 0x00200000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_login_button_border_color());
    }
    // optional string login_button_text_color = 31 [json_name = "loginButtonTextColor"];
    if ((cached_has_bits & 0x00400000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_login_button_text_color());
    }
    // optional int32 ldap_port = 4 [json_name = "ldapPort"];
    if ((cached_has_bits & 0x00800000u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_ldap_port());
    }
  }
  if ((cached_has_bits & 0x78000000u) != 0) {
    // optional int32 maximum_login_attempts = 9 [json_name = "maximumLoginAttempts"];
    if ((cached_has_bits & 0x08000000u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_maximum_login_attempts());
    }
    // optional int32 sync_interval_minutes = 25 [json_name = "syncIntervalMinutes"];
    if ((cached_has_bits & 0x10000000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this_._internal_sync_interval_minutes());
    }
    // optional int32 query_timeout = 26 [json_name = "queryTimeout"];
    if ((cached_has_bits & 0x20000000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this_._internal_query_timeout());
    }
    // optional int32 max_page_size = 27 [json_name = "maxPageSize"];
    if ((cached_has_bits & 0x40000000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this_._internal_max_page_size());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigLdap::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigLdap*>(&to_msg);
  auto& from = static_cast<const ConfigLdap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigLdap)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_ldap_server(from._internal_ldap_server());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_connection_security(from._internal_connection_security());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_base_dn(from._internal_base_dn());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_internal_set_bind_username(from._internal_bind_username());
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_internal_set_bind_password(from._internal_bind_password());
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_internal_set_user_filter(from._internal_user_filter());
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_internal_set_group_filter(from._internal_group_filter());
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_internal_set_admin_filter(from._internal_admin_filter());
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_internal_set_group_display_name_attribute(from._internal_group_display_name_attribute());
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_internal_set_group_id_attribute(from._internal_group_id_attribute());
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_internal_set_first_name_attribute(from._internal_first_name_attribute());
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _this->_internal_set_last_name_attribute(from._internal_last_name_attribute());
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      _this->_internal_set_email_attribute(from._internal_email_attribute());
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      _this->_internal_set_username_attribute(from._internal_username_attribute());
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      _this->_internal_set_nickname_attribute(from._internal_nickname_attribute());
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      _this->_internal_set_id_attribute(from._internal_id_attribute());
    }
  }
  if ((cached_has_bits & 0x00ff0000u) != 0) {
    if ((cached_has_bits & 0x00010000u) != 0) {
      _this->_internal_set_position_attribute(from._internal_position_attribute());
    }
    if ((cached_has_bits & 0x00020000u) != 0) {
      _this->_internal_set_login_id_attribute(from._internal_login_id_attribute());
    }
    if ((cached_has_bits & 0x00040000u) != 0) {
      _this->_internal_set_picture_attribute(from._internal_picture_attribute());
    }
    if ((cached_has_bits & 0x00080000u) != 0) {
      _this->_internal_set_login_field_name(from._internal_login_field_name());
    }
    if ((cached_has_bits & 0x00100000u) != 0) {
      _this->_internal_set_login_button_color(from._internal_login_button_color());
    }
    if ((cached_has_bits & 0x00200000u) != 0) {
      _this->_internal_set_login_button_border_color(from._internal_login_button_border_color());
    }
    if ((cached_has_bits & 0x00400000u) != 0) {
      _this->_internal_set_login_button_text_color(from._internal_login_button_text_color());
    }
    if ((cached_has_bits & 0x00800000u) != 0) {
      _this->_impl_.ldap_port_ = from._impl_.ldap_port_;
    }
  }
  if ((cached_has_bits & 0x7f000000u) != 0) {
    if ((cached_has_bits & 0x01000000u) != 0) {
      _this->_impl_.enable_ = from._impl_.enable_;
    }
    if ((cached_has_bits & 0x02000000u) != 0) {
      _this->_impl_.enable_sync_ = from._impl_.enable_sync_;
    }
    if ((cached_has_bits & 0x04000000u) != 0) {
      _this->_impl_.enable_admin_filter_ = from._impl_.enable_admin_filter_;
    }
    if ((cached_has_bits & 0x08000000u) != 0) {
      _this->_impl_.maximum_login_attempts_ = from._impl_.maximum_login_attempts_;
    }
    if ((cached_has_bits & 0x10000000u) != 0) {
      _this->_impl_.sync_interval_minutes_ = from._impl_.sync_interval_minutes_;
    }
    if ((cached_has_bits & 0x20000000u) != 0) {
      _this->_impl_.query_timeout_ = from._impl_.query_timeout_;
    }
    if ((cached_has_bits & 0x40000000u) != 0) {
      _this->_impl_.max_page_size_ = from._impl_.max_page_size_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigLdap::CopyFrom(const ConfigLdap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigLdap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigLdap::InternalSwap(ConfigLdap* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ldap_server_, &other->_impl_.ldap_server_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.connection_security_, &other->_impl_.connection_security_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.base_dn_, &other->_impl_.base_dn_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bind_username_, &other->_impl_.bind_username_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bind_password_, &other->_impl_.bind_password_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_filter_, &other->_impl_.user_filter_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.group_filter_, &other->_impl_.group_filter_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.admin_filter_, &other->_impl_.admin_filter_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.group_display_name_attribute_, &other->_impl_.group_display_name_attribute_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.group_id_attribute_, &other->_impl_.group_id_attribute_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.first_name_attribute_, &other->_impl_.first_name_attribute_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.last_name_attribute_, &other->_impl_.last_name_attribute_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.email_attribute_, &other->_impl_.email_attribute_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_attribute_, &other->_impl_.username_attribute_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nickname_attribute_, &other->_impl_.nickname_attribute_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_attribute_, &other->_impl_.id_attribute_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.position_attribute_, &other->_impl_.position_attribute_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.login_id_attribute_, &other->_impl_.login_id_attribute_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.picture_attribute_, &other->_impl_.picture_attribute_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.login_field_name_, &other->_impl_.login_field_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.login_button_color_, &other->_impl_.login_button_color_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.login_button_border_color_, &other->_impl_.login_button_border_color_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.login_button_text_color_, &other->_impl_.login_button_text_color_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.max_page_size_)
      + sizeof(ConfigLdap::_impl_.max_page_size_)
      - PROTOBUF_FIELD_OFFSET(ConfigLdap, _impl_.ldap_port_)>(
          reinterpret_cast<char*>(&_impl_.ldap_port_),
          reinterpret_cast<char*>(&other->_impl_.ldap_port_));
}

::google::protobuf::Metadata ConfigLdap::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigSaml::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConfigSaml>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_._has_bits_);
};

ConfigSaml::ConfigSaml(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigSaml_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigSaml)
}
PROTOBUF_NDEBUG_INLINE ConfigSaml::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::ConfigSaml& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        idp_url_(arena, from.idp_url_),
        idp_descriptor_url_(arena, from.idp_descriptor_url_),
        idp_metadata_url_(arena, from.idp_metadata_url_),
        service_provider_identifier_(arena, from.service_provider_identifier_),
        assertion_consumer_service_url_(arena, from.assertion_consumer_service_url_),
        signature_algorithm_(arena, from.signature_algorithm_),
        canonical_algorithm_(arena, from.canonical_algorithm_),
        scoping_idp_provider_id_(arena, from.scoping_idp_provider_id_),
        scoping_idp_name_(arena, from.scoping_idp_name_),
        idp_certificate_file_(arena, from.idp_certificate_file_),
        public_certificate_file_(arena, from.public_certificate_file_),
        private_key_file_(arena, from.private_key_file_),
        id_attribute_(arena, from.id_attribute_),
        admin_attribute_(arena, from.admin_attribute_),
        first_name_attribute_(arena, from.first_name_attribute_),
        last_name_attribute_(arena, from.last_name_attribute_),
        email_attribute_(arena, from.email_attribute_),
        username_attribute_(arena, from.username_attribute_),
        nickname_attribute_(arena, from.nickname_attribute_),
        locale_attribute_(arena, from.locale_attribute_),
        position_attribute_(arena, from.position_attribute_),
        login_button_text_(arena, from.login_button_text_),
        login_button_color_(arena, from.login_button_color_),
        login_button_border_color_(arena, from.login_button_border_color_),
        login_button_text_color_(arena, from.login_button_text_color_) {}

ConfigSaml::ConfigSaml(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigSaml& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigSaml_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigSaml* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, enable_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, enable_),
           offsetof(Impl_, enable_admin_attribute_) -
               offsetof(Impl_, enable_) +
               sizeof(Impl_::enable_admin_attribute_));

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigSaml)
}
PROTOBUF_NDEBUG_INLINE ConfigSaml::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        idp_url_(arena),
        idp_descriptor_url_(arena),
        idp_metadata_url_(arena),
        service_provider_identifier_(arena),
        assertion_consumer_service_url_(arena),
        signature_algorithm_(arena),
        canonical_algorithm_(arena),
        scoping_idp_provider_id_(arena),
        scoping_idp_name_(arena),
        idp_certificate_file_(arena),
        public_certificate_file_(arena),
        private_key_file_(arena),
        id_attribute_(arena),
        admin_attribute_(arena),
        first_name_attribute_(arena),
        last_name_attribute_(arena),
        email_attribute_(arena),
        username_attribute_(arena),
        nickname_attribute_(arena),
        locale_attribute_(arena),
        position_attribute_(arena),
        login_button_text_(arena),
        login_button_color_(arena),
        login_button_border_color_(arena),
        login_button_text_color_(arena) {}

inline void ConfigSaml::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, enable_),
           0,
           offsetof(Impl_, enable_admin_attribute_) -
               offsetof(Impl_, enable_) +
               sizeof(Impl_::enable_admin_attribute_));
}
ConfigSaml::~ConfigSaml() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigSaml)
  SharedDtor(*this);
}
inline void ConfigSaml::SharedDtor(MessageLite& self) {
  ConfigSaml& this_ = static_cast<ConfigSaml&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.idp_url_.Destroy();
  this_._impl_.idp_descriptor_url_.Destroy();
  this_._impl_.idp_metadata_url_.Destroy();
  this_._impl_.service_provider_identifier_.Destroy();
  this_._impl_.assertion_consumer_service_url_.Destroy();
  this_._impl_.signature_algorithm_.Destroy();
  this_._impl_.canonical_algorithm_.Destroy();
  this_._impl_.scoping_idp_provider_id_.Destroy();
  this_._impl_.scoping_idp_name_.Destroy();
  this_._impl_.idp_certificate_file_.Destroy();
  this_._impl_.public_certificate_file_.Destroy();
  this_._impl_.private_key_file_.Destroy();
  this_._impl_.id_attribute_.Destroy();
  this_._impl_.admin_attribute_.Destroy();
  this_._impl_.first_name_attribute_.Destroy();
  this_._impl_.last_name_attribute_.Destroy();
  this_._impl_.email_attribute_.Destroy();
  this_._impl_.username_attribute_.Destroy();
  this_._impl_.nickname_attribute_.Destroy();
  this_._impl_.locale_attribute_.Destroy();
  this_._impl_.position_attribute_.Destroy();
  this_._impl_.login_button_text_.Destroy();
  this_._impl_.login_button_color_.Destroy();
  this_._impl_.login_button_border_color_.Destroy();
  this_._impl_.login_button_text_color_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConfigSaml::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigSaml(arena);
}
constexpr auto ConfigSaml::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ConfigSaml),
                                            alignof(ConfigSaml));
}
constexpr auto ConfigSaml::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigSaml_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigSaml::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigSaml>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigSaml::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigSaml>(), &ConfigSaml::ByteSizeLong,
              &ConfigSaml::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_._cached_size_),
          false,
      },
      &ConfigSaml::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigSaml_class_data_ =
        ConfigSaml::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigSaml::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigSaml_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigSaml_class_data_.tc_table);
  return ConfigSaml_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 33, 0, 529, 7>
ConfigSaml::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_._has_bits_),
    0, // no _extensions_
    33, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    33,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ConfigSaml_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigSaml>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool enable = 1 [json_name = "enable"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigSaml, _impl_.enable_), 25>(),
     {8, 25, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.enable_)}},
    // optional bool enable_sync_with_ldap = 2 [json_name = "enableSyncWithLdap"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigSaml, _impl_.enable_sync_with_ldap_), 26>(),
     {16, 26, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.enable_sync_with_ldap_)}},
    // optional bool enable_sync_with_ldap_include_auth = 3 [json_name = "enableSyncWithLdapIncludeAuth"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigSaml, _impl_.enable_sync_with_ldap_include_auth_), 27>(),
     {24, 27, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.enable_sync_with_ldap_include_auth_)}},
    // optional bool ignore_guests_ldap_sync = 4 [json_name = "ignoreGuestsLdapSync"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigSaml, _impl_.ignore_guests_ldap_sync_), 28>(),
     {32, 28, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.ignore_guests_ldap_sync_)}},
    // optional bool verify = 5 [json_name = "verify"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigSaml, _impl_.verify_), 29>(),
     {40, 29, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.verify_)}},
    // optional bool encrypt = 6 [json_name = "encrypt"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigSaml, _impl_.encrypt_), 30>(),
     {48, 30, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.encrypt_)}},
    // optional bool sign_request = 7 [json_name = "signRequest"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigSaml, _impl_.sign_request_), 31>(),
     {56, 31, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.sign_request_)}},
    // optional string idp_url = 8 [json_name = "idpUrl"];
    {::_pbi::TcParser::FastUS1,
     {66, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.idp_url_)}},
    // optional string idp_descriptor_url = 9 [json_name = "idpDescriptorUrl"];
    {::_pbi::TcParser::FastUS1,
     {74, 1, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.idp_descriptor_url_)}},
    // optional string idp_metadata_url = 10 [json_name = "idpMetadataUrl"];
    {::_pbi::TcParser::FastUS1,
     {82, 2, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.idp_metadata_url_)}},
    // optional string service_provider_identifier = 11 [json_name = "serviceProviderIdentifier"];
    {::_pbi::TcParser::FastUS1,
     {90, 3, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.service_provider_identifier_)}},
    // optional string assertion_consumer_service_url = 12 [json_name = "assertionConsumerServiceUrl"];
    {::_pbi::TcParser::FastUS1,
     {98, 4, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.assertion_consumer_service_url_)}},
    // optional string signature_algorithm = 13 [json_name = "signatureAlgorithm"];
    {::_pbi::TcParser::FastUS1,
     {106, 5, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.signature_algorithm_)}},
    // optional string canonical_algorithm = 14 [json_name = "canonicalAlgorithm"];
    {::_pbi::TcParser::FastUS1,
     {114, 6, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.canonical_algorithm_)}},
    // optional string scoping_idp_provider_id = 15 [json_name = "scopingIdpProviderId"];
    {::_pbi::TcParser::FastUS1,
     {122, 7, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.scoping_idp_provider_id_)}},
    // optional string scoping_idp_name = 16 [json_name = "scopingIdpName"];
    {::_pbi::TcParser::FastUS2,
     {386, 8, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.scoping_idp_name_)}},
    // optional string idp_certificate_file = 17 [json_name = "idpCertificateFile"];
    {::_pbi::TcParser::FastUS2,
     {394, 9, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.idp_certificate_file_)}},
    // optional string public_certificate_file = 18 [json_name = "publicCertificateFile"];
    {::_pbi::TcParser::FastUS2,
     {402, 10, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.public_certificate_file_)}},
    // optional string private_key_file = 19 [json_name = "privateKeyFile"];
    {::_pbi::TcParser::FastUS2,
     {410, 11, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.private_key_file_)}},
    // optional string id_attribute = 20 [json_name = "idAttribute"];
    {::_pbi::TcParser::FastUS2,
     {418, 12, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.id_attribute_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional string admin_attribute = 22 [json_name = "adminAttribute"];
    {::_pbi::TcParser::FastUS2,
     {434, 13, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.admin_attribute_)}},
    // optional string first_name_attribute = 23 [json_name = "firstNameAttribute"];
    {::_pbi::TcParser::FastUS2,
     {442, 14, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.first_name_attribute_)}},
    // optional string last_name_attribute = 24 [json_name = "lastNameAttribute"];
    {::_pbi::TcParser::FastUS2,
     {450, 15, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.last_name_attribute_)}},
    // optional string email_attribute = 25 [json_name = "emailAttribute"];
    {::_pbi::TcParser::FastUS2,
     {458, 16, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.email_attribute_)}},
    // optional string username_attribute = 26 [json_name = "usernameAttribute"];
    {::_pbi::TcParser::FastUS2,
     {466, 17, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.username_attribute_)}},
    // optional string nickname_attribute = 27 [json_name = "nicknameAttribute"];
    {::_pbi::TcParser::FastUS2,
     {474, 18, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.nickname_attribute_)}},
    // optional string locale_attribute = 28 [json_name = "localeAttribute"];
    {::_pbi::TcParser::FastUS2,
     {482, 19, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.locale_attribute_)}},
    // optional string position_attribute = 29 [json_name = "positionAttribute"];
    {::_pbi::TcParser::FastUS2,
     {490, 20, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.position_attribute_)}},
    // optional string login_button_text = 30 [json_name = "loginButtonText"];
    {::_pbi::TcParser::FastUS2,
     {498, 21, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.login_button_text_)}},
    // optional string login_button_color = 31 [json_name = "loginButtonColor"];
    {::_pbi::TcParser::FastUS2,
     {506, 22, 0, PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.login_button_color_)}},
  }}, {{
    33, 0, 1,
    65534, 32,
    65535, 65535
  }}, {{
    // optional bool enable = 1 [json_name = "enable"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.enable_), _Internal::kHasBitsOffset + 25, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_sync_with_ldap = 2 [json_name = "enableSyncWithLdap"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.enable_sync_with_ldap_), _Internal::kHasBitsOffset + 26, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_sync_with_ldap_include_auth = 3 [json_name = "enableSyncWithLdapIncludeAuth"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.enable_sync_with_ldap_include_auth_), _Internal::kHasBitsOffset + 27, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool ignore_guests_ldap_sync = 4 [json_name = "ignoreGuestsLdapSync"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.ignore_guests_ldap_sync_), _Internal::kHasBitsOffset + 28, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool verify = 5 [json_name = "verify"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.verify_), _Internal::kHasBitsOffset + 29, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool encrypt = 6 [json_name = "encrypt"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.encrypt_), _Internal::kHasBitsOffset + 30, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool sign_request = 7 [json_name = "signRequest"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.sign_request_), _Internal::kHasBitsOffset + 31, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string idp_url = 8 [json_name = "idpUrl"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.idp_url_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string idp_descriptor_url = 9 [json_name = "idpDescriptorUrl"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.idp_descriptor_url_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string idp_metadata_url = 10 [json_name = "idpMetadataUrl"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.idp_metadata_url_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string service_provider_identifier = 11 [json_name = "serviceProviderIdentifier"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.service_provider_identifier_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string assertion_consumer_service_url = 12 [json_name = "assertionConsumerServiceUrl"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.assertion_consumer_service_url_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string signature_algorithm = 13 [json_name = "signatureAlgorithm"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.signature_algorithm_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string canonical_algorithm = 14 [json_name = "canonicalAlgorithm"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.canonical_algorithm_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string scoping_idp_provider_id = 15 [json_name = "scopingIdpProviderId"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.scoping_idp_provider_id_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string scoping_idp_name = 16 [json_name = "scopingIdpName"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.scoping_idp_name_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string idp_certificate_file = 17 [json_name = "idpCertificateFile"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.idp_certificate_file_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string public_certificate_file = 18 [json_name = "publicCertificateFile"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.public_certificate_file_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string private_key_file = 19 [json_name = "privateKeyFile"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.private_key_file_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string id_attribute = 20 [json_name = "idAttribute"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.id_attribute_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool enable_admin_attribute = 21 [json_name = "enableAdminAttribute"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.enable_admin_attribute_), _Internal::kHasBitsOffset + 32, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string admin_attribute = 22 [json_name = "adminAttribute"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.admin_attribute_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string first_name_attribute = 23 [json_name = "firstNameAttribute"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.first_name_attribute_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string last_name_attribute = 24 [json_name = "lastNameAttribute"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.last_name_attribute_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string email_attribute = 25 [json_name = "emailAttribute"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.email_attribute_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string username_attribute = 26 [json_name = "usernameAttribute"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.username_attribute_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string nickname_attribute = 27 [json_name = "nicknameAttribute"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.nickname_attribute_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string locale_attribute = 28 [json_name = "localeAttribute"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.locale_attribute_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string position_attribute = 29 [json_name = "positionAttribute"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.position_attribute_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string login_button_text = 30 [json_name = "loginButtonText"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.login_button_text_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string login_button_color = 31 [json_name = "loginButtonColor"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.login_button_color_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string login_button_border_color = 32 [json_name = "loginButtonBorderColor"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.login_button_border_color_), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string login_button_text_color = 33 [json_name = "loginButtonTextColor"];
    {PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.login_button_text_color_), _Internal::kHasBitsOffset + 24, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\24\0\0\0\0\0\0\0\7\22\20\33\36\23\23\27\20\24\27\20\14\0\17\24\23\17\22\22\20\22\21\22\31\27\0\0\0\0\0\0"
    "common.v1.ConfigSaml"
    "idp_url"
    "idp_descriptor_url"
    "idp_metadata_url"
    "service_provider_identifier"
    "assertion_consumer_service_url"
    "signature_algorithm"
    "canonical_algorithm"
    "scoping_idp_provider_id"
    "scoping_idp_name"
    "idp_certificate_file"
    "public_certificate_file"
    "private_key_file"
    "id_attribute"
    "admin_attribute"
    "first_name_attribute"
    "last_name_attribute"
    "email_attribute"
    "username_attribute"
    "nickname_attribute"
    "locale_attribute"
    "position_attribute"
    "login_button_text"
    "login_button_color"
    "login_button_border_color"
    "login_button_text_color"
  }},
};
PROTOBUF_NOINLINE void ConfigSaml::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigSaml)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.idp_url_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.idp_descriptor_url_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.idp_metadata_url_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.service_provider_identifier_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.assertion_consumer_service_url_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _impl_.signature_algorithm_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _impl_.canonical_algorithm_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _impl_.scoping_idp_provider_id_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _impl_.scoping_idp_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _impl_.idp_certificate_file_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _impl_.public_certificate_file_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _impl_.private_key_file_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      _impl_.id_attribute_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      _impl_.admin_attribute_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      _impl_.first_name_attribute_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      _impl_.last_name_attribute_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x00ff0000u) != 0) {
    if ((cached_has_bits & 0x00010000u) != 0) {
      _impl_.email_attribute_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00020000u) != 0) {
      _impl_.username_attribute_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00040000u) != 0) {
      _impl_.nickname_attribute_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00080000u) != 0) {
      _impl_.locale_attribute_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00100000u) != 0) {
      _impl_.position_attribute_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00200000u) != 0) {
      _impl_.login_button_text_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00400000u) != 0) {
      _impl_.login_button_color_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00800000u) != 0) {
      _impl_.login_button_border_color_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x01000000u) != 0) {
    _impl_.login_button_text_color_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0xfe000000u) != 0) {
    ::memset(&_impl_.enable_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.sign_request_) -
        reinterpret_cast<char*>(&_impl_.enable_)) + sizeof(_impl_.sign_request_));
  }
  _impl_.enable_admin_attribute_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigSaml::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigSaml& this_ = static_cast<const ConfigSaml&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigSaml::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigSaml& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigSaml)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional bool enable = 1 [json_name = "enable"];
  if ((cached_has_bits & 0x02000000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this_._internal_enable(), target);
  }

  // optional bool enable_sync_with_ldap = 2 [json_name = "enableSyncWithLdap"];
  if ((cached_has_bits & 0x04000000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this_._internal_enable_sync_with_ldap(), target);
  }

  // optional bool enable_sync_with_ldap_include_auth = 3 [json_name = "enableSyncWithLdapIncludeAuth"];
  if ((cached_has_bits & 0x08000000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this_._internal_enable_sync_with_ldap_include_auth(), target);
  }

  // optional bool ignore_guests_ldap_sync = 4 [json_name = "ignoreGuestsLdapSync"];
  if ((cached_has_bits & 0x10000000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this_._internal_ignore_guests_ldap_sync(), target);
  }

  // optional bool verify = 5 [json_name = "verify"];
  if ((cached_has_bits & 0x20000000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this_._internal_verify(), target);
  }

  // optional bool encrypt = 6 [json_name = "encrypt"];
  if ((cached_has_bits & 0x40000000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this_._internal_encrypt(), target);
  }

  // optional bool sign_request = 7 [json_name = "signRequest"];
  if ((cached_has_bits & 0x80000000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this_._internal_sign_request(), target);
  }

  // optional string idp_url = 8 [json_name = "idpUrl"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    const ::std::string& _s = this_._internal_idp_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.idp_url");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // optional string idp_descriptor_url = 9 [json_name = "idpDescriptorUrl"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    const ::std::string& _s = this_._internal_idp_descriptor_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.idp_descriptor_url");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // optional string idp_metadata_url = 10 [json_name = "idpMetadataUrl"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    const ::std::string& _s = this_._internal_idp_metadata_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.idp_metadata_url");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // optional string service_provider_identifier = 11 [json_name = "serviceProviderIdentifier"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    const ::std::string& _s = this_._internal_service_provider_identifier();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.service_provider_identifier");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // optional string assertion_consumer_service_url = 12 [json_name = "assertionConsumerServiceUrl"];
  if ((cached_has_bits & 0x00000010u) != 0) {
    const ::std::string& _s = this_._internal_assertion_consumer_service_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.assertion_consumer_service_url");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // optional string signature_algorithm = 13 [json_name = "signatureAlgorithm"];
  if ((cached_has_bits & 0x00000020u) != 0) {
    const ::std::string& _s = this_._internal_signature_algorithm();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.signature_algorithm");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // optional string canonical_algorithm = 14 [json_name = "canonicalAlgorithm"];
  if ((cached_has_bits & 0x00000040u) != 0) {
    const ::std::string& _s = this_._internal_canonical_algorithm();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.canonical_algorithm");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // optional string scoping_idp_provider_id = 15 [json_name = "scopingIdpProviderId"];
  if ((cached_has_bits & 0x00000080u) != 0) {
    const ::std::string& _s = this_._internal_scoping_idp_provider_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.scoping_idp_provider_id");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // optional string scoping_idp_name = 16 [json_name = "scopingIdpName"];
  if ((cached_has_bits & 0x00000100u) != 0) {
    const ::std::string& _s = this_._internal_scoping_idp_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.scoping_idp_name");
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  // optional string idp_certificate_file = 17 [json_name = "idpCertificateFile"];
  if ((cached_has_bits & 0x00000200u) != 0) {
    const ::std::string& _s = this_._internal_idp_certificate_file();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.idp_certificate_file");
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  // optional string public_certificate_file = 18 [json_name = "publicCertificateFile"];
  if ((cached_has_bits & 0x00000400u) != 0) {
    const ::std::string& _s = this_._internal_public_certificate_file();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.public_certificate_file");
    target = stream->WriteStringMaybeAliased(18, _s, target);
  }

  // optional string private_key_file = 19 [json_name = "privateKeyFile"];
  if ((cached_has_bits & 0x00000800u) != 0) {
    const ::std::string& _s = this_._internal_private_key_file();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.private_key_file");
    target = stream->WriteStringMaybeAliased(19, _s, target);
  }

  // optional string id_attribute = 20 [json_name = "idAttribute"];
  if ((cached_has_bits & 0x00001000u) != 0) {
    const ::std::string& _s = this_._internal_id_attribute();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.id_attribute");
    target = stream->WriteStringMaybeAliased(20, _s, target);
  }

  cached_has_bits = this_._impl_._has_bits_[1];
  // optional bool enable_admin_attribute = 21 [json_name = "enableAdminAttribute"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        21, this_._internal_enable_admin_attribute(), target);
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional string admin_attribute = 22 [json_name = "adminAttribute"];
  if ((cached_has_bits & 0x00002000u) != 0) {
    const ::std::string& _s = this_._internal_admin_attribute();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.admin_attribute");
    target = stream->WriteStringMaybeAliased(22, _s, target);
  }

  // optional string first_name_attribute = 23 [json_name = "firstNameAttribute"];
  if ((cached_has_bits & 0x00004000u) != 0) {
    const ::std::string& _s = this_._internal_first_name_attribute();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.first_name_attribute");
    target = stream->WriteStringMaybeAliased(23, _s, target);
  }

  // optional string last_name_attribute = 24 [json_name = "lastNameAttribute"];
  if ((cached_has_bits & 0x00008000u) != 0) {
    const ::std::string& _s = this_._internal_last_name_attribute();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.last_name_attribute");
    target = stream->WriteStringMaybeAliased(24, _s, target);
  }

  // optional string email_attribute = 25 [json_name = "emailAttribute"];
  if ((cached_has_bits & 0x00010000u) != 0) {
    const ::std::string& _s = this_._internal_email_attribute();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.email_attribute");
    target = stream->WriteStringMaybeAliased(25, _s, target);
  }

  // optional string username_attribute = 26 [json_name = "usernameAttribute"];
  if ((cached_has_bits & 0x00020000u) != 0) {
    const ::std::string& _s = this_._internal_username_attribute();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.username_attribute");
    target = stream->WriteStringMaybeAliased(26, _s, target);
  }

  // optional string nickname_attribute = 27 [json_name = "nicknameAttribute"];
  if ((cached_has_bits & 0x00040000u) != 0) {
    const ::std::string& _s = this_._internal_nickname_attribute();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.nickname_attribute");
    target = stream->WriteStringMaybeAliased(27, _s, target);
  }

  // optional string locale_attribute = 28 [json_name = "localeAttribute"];
  if ((cached_has_bits & 0x00080000u) != 0) {
    const ::std::string& _s = this_._internal_locale_attribute();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.locale_attribute");
    target = stream->WriteStringMaybeAliased(28, _s, target);
  }

  // optional string position_attribute = 29 [json_name = "positionAttribute"];
  if ((cached_has_bits & 0x00100000u) != 0) {
    const ::std::string& _s = this_._internal_position_attribute();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.position_attribute");
    target = stream->WriteStringMaybeAliased(29, _s, target);
  }

  // optional string login_button_text = 30 [json_name = "loginButtonText"];
  if ((cached_has_bits & 0x00200000u) != 0) {
    const ::std::string& _s = this_._internal_login_button_text();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.login_button_text");
    target = stream->WriteStringMaybeAliased(30, _s, target);
  }

  // optional string login_button_color = 31 [json_name = "loginButtonColor"];
  if ((cached_has_bits & 0x00400000u) != 0) {
    const ::std::string& _s = this_._internal_login_button_color();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.login_button_color");
    target = stream->WriteStringMaybeAliased(31, _s, target);
  }

  // optional string login_button_border_color = 32 [json_name = "loginButtonBorderColor"];
  if ((cached_has_bits & 0x00800000u) != 0) {
    const ::std::string& _s = this_._internal_login_button_border_color();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.login_button_border_color");
    target = stream->WriteStringMaybeAliased(32, _s, target);
  }

  // optional string login_button_text_color = 33 [json_name = "loginButtonTextColor"];
  if ((cached_has_bits & 0x01000000u) != 0) {
    const ::std::string& _s = this_._internal_login_button_text_color();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigSaml.login_button_text_color");
    target = stream->WriteStringMaybeAliased(33, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigSaml)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigSaml::ByteSizeLong(const MessageLite& base) {
  const ConfigSaml& this_ = static_cast<const ConfigSaml&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigSaml::ByteSizeLong() const {
  const ConfigSaml& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigSaml)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0xfe000000u & cached_has_bits) * 2;
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // optional string idp_url = 8 [json_name = "idpUrl"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_idp_url());
    }
    // optional string idp_descriptor_url = 9 [json_name = "idpDescriptorUrl"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_idp_descriptor_url());
    }
    // optional string idp_metadata_url = 10 [json_name = "idpMetadataUrl"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_idp_metadata_url());
    }
    // optional string service_provider_identifier = 11 [json_name = "serviceProviderIdentifier"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_service_provider_identifier());
    }
    // optional string assertion_consumer_service_url = 12 [json_name = "assertionConsumerServiceUrl"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_assertion_consumer_service_url());
    }
    // optional string signature_algorithm = 13 [json_name = "signatureAlgorithm"];
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_signature_algorithm());
    }
    // optional string canonical_algorithm = 14 [json_name = "canonicalAlgorithm"];
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_canonical_algorithm());
    }
    // optional string scoping_idp_provider_id = 15 [json_name = "scopingIdpProviderId"];
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_scoping_idp_provider_id());
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    // optional string scoping_idp_name = 16 [json_name = "scopingIdpName"];
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_scoping_idp_name());
    }
    // optional string idp_certificate_file = 17 [json_name = "idpCertificateFile"];
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_idp_certificate_file());
    }
    // optional string public_certificate_file = 18 [json_name = "publicCertificateFile"];
    if ((cached_has_bits & 0x00000400u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_public_certificate_file());
    }
    // optional string private_key_file = 19 [json_name = "privateKeyFile"];
    if ((cached_has_bits & 0x00000800u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_private_key_file());
    }
    // optional string id_attribute = 20 [json_name = "idAttribute"];
    if ((cached_has_bits & 0x00001000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_id_attribute());
    }
    // optional string admin_attribute = 22 [json_name = "adminAttribute"];
    if ((cached_has_bits & 0x00002000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_admin_attribute());
    }
    // optional string first_name_attribute = 23 [json_name = "firstNameAttribute"];
    if ((cached_has_bits & 0x00004000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_first_name_attribute());
    }
    // optional string last_name_attribute = 24 [json_name = "lastNameAttribute"];
    if ((cached_has_bits & 0x00008000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_last_name_attribute());
    }
  }
  if ((cached_has_bits & 0x00ff0000u) != 0) {
    // optional string email_attribute = 25 [json_name = "emailAttribute"];
    if ((cached_has_bits & 0x00010000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_email_attribute());
    }
    // optional string username_attribute = 26 [json_name = "usernameAttribute"];
    if ((cached_has_bits & 0x00020000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_username_attribute());
    }
    // optional string nickname_attribute = 27 [json_name = "nicknameAttribute"];
    if ((cached_has_bits & 0x00040000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_nickname_attribute());
    }
    // optional string locale_attribute = 28 [json_name = "localeAttribute"];
    if ((cached_has_bits & 0x00080000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_locale_attribute());
    }
    // optional string position_attribute = 29 [json_name = "positionAttribute"];
    if ((cached_has_bits & 0x00100000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_position_attribute());
    }
    // optional string login_button_text = 30 [json_name = "loginButtonText"];
    if ((cached_has_bits & 0x00200000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_login_button_text());
    }
    // optional string login_button_color = 31 [json_name = "loginButtonColor"];
    if ((cached_has_bits & 0x00400000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_login_button_color());
    }
    // optional string login_button_border_color = 32 [json_name = "loginButtonBorderColor"];
    if ((cached_has_bits & 0x00800000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_login_button_border_color());
    }
  }
   {
    // optional string login_button_text_color = 33 [json_name = "loginButtonTextColor"];
    if ((cached_has_bits & 0x01000000u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_login_button_text_color());
    }
  }
  cached_has_bits = this_._impl_._has_bits_[1];
  total_size += static_cast<bool>(0x00000001u & cached_has_bits) * 3;
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigSaml::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigSaml*>(&to_msg);
  auto& from = static_cast<const ConfigSaml&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigSaml)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_idp_url(from._internal_idp_url());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_idp_descriptor_url(from._internal_idp_descriptor_url());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_idp_metadata_url(from._internal_idp_metadata_url());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_internal_set_service_provider_identifier(from._internal_service_provider_identifier());
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_internal_set_assertion_consumer_service_url(from._internal_assertion_consumer_service_url());
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_internal_set_signature_algorithm(from._internal_signature_algorithm());
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_internal_set_canonical_algorithm(from._internal_canonical_algorithm());
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_internal_set_scoping_idp_provider_id(from._internal_scoping_idp_provider_id());
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_internal_set_scoping_idp_name(from._internal_scoping_idp_name());
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_internal_set_idp_certificate_file(from._internal_idp_certificate_file());
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_internal_set_public_certificate_file(from._internal_public_certificate_file());
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _this->_internal_set_private_key_file(from._internal_private_key_file());
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      _this->_internal_set_id_attribute(from._internal_id_attribute());
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      _this->_internal_set_admin_attribute(from._internal_admin_attribute());
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      _this->_internal_set_first_name_attribute(from._internal_first_name_attribute());
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      _this->_internal_set_last_name_attribute(from._internal_last_name_attribute());
    }
  }
  if ((cached_has_bits & 0x00ff0000u) != 0) {
    if ((cached_has_bits & 0x00010000u) != 0) {
      _this->_internal_set_email_attribute(from._internal_email_attribute());
    }
    if ((cached_has_bits & 0x00020000u) != 0) {
      _this->_internal_set_username_attribute(from._internal_username_attribute());
    }
    if ((cached_has_bits & 0x00040000u) != 0) {
      _this->_internal_set_nickname_attribute(from._internal_nickname_attribute());
    }
    if ((cached_has_bits & 0x00080000u) != 0) {
      _this->_internal_set_locale_attribute(from._internal_locale_attribute());
    }
    if ((cached_has_bits & 0x00100000u) != 0) {
      _this->_internal_set_position_attribute(from._internal_position_attribute());
    }
    if ((cached_has_bits & 0x00200000u) != 0) {
      _this->_internal_set_login_button_text(from._internal_login_button_text());
    }
    if ((cached_has_bits & 0x00400000u) != 0) {
      _this->_internal_set_login_button_color(from._internal_login_button_color());
    }
    if ((cached_has_bits & 0x00800000u) != 0) {
      _this->_internal_set_login_button_border_color(from._internal_login_button_border_color());
    }
  }
  if ((cached_has_bits & 0xff000000u) != 0) {
    if ((cached_has_bits & 0x01000000u) != 0) {
      _this->_internal_set_login_button_text_color(from._internal_login_button_text_color());
    }
    if ((cached_has_bits & 0x02000000u) != 0) {
      _this->_impl_.enable_ = from._impl_.enable_;
    }
    if ((cached_has_bits & 0x04000000u) != 0) {
      _this->_impl_.enable_sync_with_ldap_ = from._impl_.enable_sync_with_ldap_;
    }
    if ((cached_has_bits & 0x08000000u) != 0) {
      _this->_impl_.enable_sync_with_ldap_include_auth_ = from._impl_.enable_sync_with_ldap_include_auth_;
    }
    if ((cached_has_bits & 0x10000000u) != 0) {
      _this->_impl_.ignore_guests_ldap_sync_ = from._impl_.ignore_guests_ldap_sync_;
    }
    if ((cached_has_bits & 0x20000000u) != 0) {
      _this->_impl_.verify_ = from._impl_.verify_;
    }
    if ((cached_has_bits & 0x40000000u) != 0) {
      _this->_impl_.encrypt_ = from._impl_.encrypt_;
    }
    if ((cached_has_bits & 0x80000000u) != 0) {
      _this->_impl_.sign_request_ = from._impl_.sign_request_;
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _this->_impl_.enable_admin_attribute_ = from._impl_.enable_admin_attribute_;
  }
  _this->_impl_._has_bits_.Or(from._impl_._has_bits_);
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigSaml::CopyFrom(const ConfigSaml& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigSaml)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigSaml::InternalSwap(ConfigSaml* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.idp_url_, &other->_impl_.idp_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.idp_descriptor_url_, &other->_impl_.idp_descriptor_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.idp_metadata_url_, &other->_impl_.idp_metadata_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.service_provider_identifier_, &other->_impl_.service_provider_identifier_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.assertion_consumer_service_url_, &other->_impl_.assertion_consumer_service_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_algorithm_, &other->_impl_.signature_algorithm_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.canonical_algorithm_, &other->_impl_.canonical_algorithm_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.scoping_idp_provider_id_, &other->_impl_.scoping_idp_provider_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.scoping_idp_name_, &other->_impl_.scoping_idp_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.idp_certificate_file_, &other->_impl_.idp_certificate_file_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.public_certificate_file_, &other->_impl_.public_certificate_file_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.private_key_file_, &other->_impl_.private_key_file_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_attribute_, &other->_impl_.id_attribute_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.admin_attribute_, &other->_impl_.admin_attribute_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.first_name_attribute_, &other->_impl_.first_name_attribute_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.last_name_attribute_, &other->_impl_.last_name_attribute_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.email_attribute_, &other->_impl_.email_attribute_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_attribute_, &other->_impl_.username_attribute_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nickname_attribute_, &other->_impl_.nickname_attribute_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.locale_attribute_, &other->_impl_.locale_attribute_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.position_attribute_, &other->_impl_.position_attribute_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.login_button_text_, &other->_impl_.login_button_text_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.login_button_color_, &other->_impl_.login_button_color_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.login_button_border_color_, &other->_impl_.login_button_border_color_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.login_button_text_color_, &other->_impl_.login_button_text_color_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.enable_admin_attribute_)
      + sizeof(ConfigSaml::_impl_.enable_admin_attribute_)
      - PROTOBUF_FIELD_OFFSET(ConfigSaml, _impl_.enable_)>(
          reinterpret_cast<char*>(&_impl_.enable_),
          reinterpret_cast<char*>(&other->_impl_.enable_));
}

::google::protobuf::Metadata ConfigSaml::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigNativeApp::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConfigNativeApp>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConfigNativeApp, _impl_._has_bits_);
};

ConfigNativeApp::ConfigNativeApp(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigNativeApp_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigNativeApp)
}
PROTOBUF_NDEBUG_INLINE ConfigNativeApp::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::ConfigNativeApp& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        app_custom_url_schemes_{visibility, arena, from.app_custom_url_schemes_},
        app_download_link_(arena, from.app_download_link_),
        android_app_download_link_(arena, from.android_app_download_link_),
        ios_app_download_link_(arena, from.ios_app_download_link_) {}

ConfigNativeApp::ConfigNativeApp(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigNativeApp& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigNativeApp_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigNativeApp* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, mobile_external_browser_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, mobile_external_browser_),
           offsetof(Impl_, mobile_jailbreak_protection_) -
               offsetof(Impl_, mobile_external_browser_) +
               sizeof(Impl_::mobile_jailbreak_protection_));

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigNativeApp)
}
PROTOBUF_NDEBUG_INLINE ConfigNativeApp::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        app_custom_url_schemes_{visibility, arena},
        app_download_link_(arena),
        android_app_download_link_(arena),
        ios_app_download_link_(arena) {}

inline void ConfigNativeApp::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, mobile_external_browser_),
           0,
           offsetof(Impl_, mobile_jailbreak_protection_) -
               offsetof(Impl_, mobile_external_browser_) +
               sizeof(Impl_::mobile_jailbreak_protection_));
}
ConfigNativeApp::~ConfigNativeApp() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigNativeApp)
  SharedDtor(*this);
}
inline void ConfigNativeApp::SharedDtor(MessageLite& self) {
  ConfigNativeApp& this_ = static_cast<ConfigNativeApp&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.app_download_link_.Destroy();
  this_._impl_.android_app_download_link_.Destroy();
  this_._impl_.ios_app_download_link_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConfigNativeApp::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigNativeApp(arena);
}
constexpr auto ConfigNativeApp::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ConfigNativeApp, _impl_.app_custom_url_schemes_) +
          decltype(ConfigNativeApp::_impl_.app_custom_url_schemes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ConfigNativeApp), alignof(ConfigNativeApp), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ConfigNativeApp::PlacementNew_,
                                 sizeof(ConfigNativeApp),
                                 alignof(ConfigNativeApp));
  }
}
constexpr auto ConfigNativeApp::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigNativeApp_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigNativeApp::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigNativeApp>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigNativeApp::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigNativeApp>(), &ConfigNativeApp::ByteSizeLong,
              &ConfigNativeApp::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigNativeApp, _impl_._cached_size_),
          false,
      },
      &ConfigNativeApp::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigNativeApp_class_data_ =
        ConfigNativeApp::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigNativeApp::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigNativeApp_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigNativeApp_class_data_.tc_table);
  return ConfigNativeApp_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 127, 2>
ConfigNativeApp::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigNativeApp, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ConfigNativeApp_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigNativeApp>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional bool mobile_jailbreak_protection = 8 [json_name = "mobileJailbreakProtection"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigNativeApp, _impl_.mobile_jailbreak_protection_), 6>(),
     {64, 6, 0, PROTOBUF_FIELD_OFFSET(ConfigNativeApp, _impl_.mobile_jailbreak_protection_)}},
    // repeated string app_custom_url_schemes = 1 [json_name = "appCustomUrlSchemes"];
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ConfigNativeApp, _impl_.app_custom_url_schemes_)}},
    // optional string app_download_link = 2 [json_name = "appDownloadLink"];
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigNativeApp, _impl_.app_download_link_)}},
    // optional string android_app_download_link = 3 [json_name = "androidAppDownloadLink"];
    {::_pbi::TcParser::FastUS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(ConfigNativeApp, _impl_.android_app_download_link_)}},
    // optional string ios_app_download_link = 4 [json_name = "iosAppDownloadLink"];
    {::_pbi::TcParser::FastUS1,
     {34, 2, 0, PROTOBUF_FIELD_OFFSET(ConfigNativeApp, _impl_.ios_app_download_link_)}},
    // optional bool mobile_external_browser = 5 [json_name = "mobileExternalBrowser"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigNativeApp, _impl_.mobile_external_browser_), 3>(),
     {40, 3, 0, PROTOBUF_FIELD_OFFSET(ConfigNativeApp, _impl_.mobile_external_browser_)}},
    // optional bool mobile_enable_biometrics = 6 [json_name = "mobileEnableBiometrics"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigNativeApp, _impl_.mobile_enable_biometrics_), 4>(),
     {48, 4, 0, PROTOBUF_FIELD_OFFSET(ConfigNativeApp, _impl_.mobile_enable_biometrics_)}},
    // optional bool mobile_prevent_screen_capture = 7 [json_name = "mobilePreventScreenCapture"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigNativeApp, _impl_.mobile_prevent_screen_capture_), 5>(),
     {56, 5, 0, PROTOBUF_FIELD_OFFSET(ConfigNativeApp, _impl_.mobile_prevent_screen_capture_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string app_custom_url_schemes = 1 [json_name = "appCustomUrlSchemes"];
    {PROTOBUF_FIELD_OFFSET(ConfigNativeApp, _impl_.app_custom_url_schemes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // optional string app_download_link = 2 [json_name = "appDownloadLink"];
    {PROTOBUF_FIELD_OFFSET(ConfigNativeApp, _impl_.app_download_link_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string android_app_download_link = 3 [json_name = "androidAppDownloadLink"];
    {PROTOBUF_FIELD_OFFSET(ConfigNativeApp, _impl_.android_app_download_link_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string ios_app_download_link = 4 [json_name = "iosAppDownloadLink"];
    {PROTOBUF_FIELD_OFFSET(ConfigNativeApp, _impl_.ios_app_download_link_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool mobile_external_browser = 5 [json_name = "mobileExternalBrowser"];
    {PROTOBUF_FIELD_OFFSET(ConfigNativeApp, _impl_.mobile_external_browser_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool mobile_enable_biometrics = 6 [json_name = "mobileEnableBiometrics"];
    {PROTOBUF_FIELD_OFFSET(ConfigNativeApp, _impl_.mobile_enable_biometrics_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool mobile_prevent_screen_capture = 7 [json_name = "mobilePreventScreenCapture"];
    {PROTOBUF_FIELD_OFFSET(ConfigNativeApp, _impl_.mobile_prevent_screen_capture_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool mobile_jailbreak_protection = 8 [json_name = "mobileJailbreakProtection"];
    {PROTOBUF_FIELD_OFFSET(ConfigNativeApp, _impl_.mobile_jailbreak_protection_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\31\26\21\31\25\0\0\0\0\0\0\0\0\0\0\0"
    "common.v1.ConfigNativeApp"
    "app_custom_url_schemes"
    "app_download_link"
    "android_app_download_link"
    "ios_app_download_link"
  }},
};
PROTOBUF_NOINLINE void ConfigNativeApp::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigNativeApp)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.app_custom_url_schemes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.app_download_link_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.android_app_download_link_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.ios_app_download_link_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&_impl_.mobile_external_browser_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.mobile_jailbreak_protection_) -
      reinterpret_cast<char*>(&_impl_.mobile_external_browser_)) + sizeof(_impl_.mobile_jailbreak_protection_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigNativeApp::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigNativeApp& this_ = static_cast<const ConfigNativeApp&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigNativeApp::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigNativeApp& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigNativeApp)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string app_custom_url_schemes = 1 [json_name = "appCustomUrlSchemes"];
  for (int i = 0, n = this_._internal_app_custom_url_schemes_size(); i < n; ++i) {
    const auto& s = this_._internal_app_custom_url_schemes().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigNativeApp.app_custom_url_schemes");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional string app_download_link = 2 [json_name = "appDownloadLink"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    const ::std::string& _s = this_._internal_app_download_link();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigNativeApp.app_download_link");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string android_app_download_link = 3 [json_name = "androidAppDownloadLink"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    const ::std::string& _s = this_._internal_android_app_download_link();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigNativeApp.android_app_download_link");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string ios_app_download_link = 4 [json_name = "iosAppDownloadLink"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    const ::std::string& _s = this_._internal_ios_app_download_link();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigNativeApp.ios_app_download_link");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional bool mobile_external_browser = 5 [json_name = "mobileExternalBrowser"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this_._internal_mobile_external_browser(), target);
  }

  // optional bool mobile_enable_biometrics = 6 [json_name = "mobileEnableBiometrics"];
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this_._internal_mobile_enable_biometrics(), target);
  }

  // optional bool mobile_prevent_screen_capture = 7 [json_name = "mobilePreventScreenCapture"];
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this_._internal_mobile_prevent_screen_capture(), target);
  }

  // optional bool mobile_jailbreak_protection = 8 [json_name = "mobileJailbreakProtection"];
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this_._internal_mobile_jailbreak_protection(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigNativeApp)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigNativeApp::ByteSizeLong(const MessageLite& base) {
  const ConfigNativeApp& this_ = static_cast<const ConfigNativeApp&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigNativeApp::ByteSizeLong() const {
  const ConfigNativeApp& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigNativeApp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string app_custom_url_schemes = 1 [json_name = "appCustomUrlSchemes"];
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_app_custom_url_schemes().size());
      for (int i = 0, n = this_._internal_app_custom_url_schemes().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_app_custom_url_schemes().Get(i));
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00000078u & cached_has_bits) * 2;
  if ((cached_has_bits & 0x00000007u) != 0) {
    // optional string app_download_link = 2 [json_name = "appDownloadLink"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_app_download_link());
    }
    // optional string android_app_download_link = 3 [json_name = "androidAppDownloadLink"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_android_app_download_link());
    }
    // optional string ios_app_download_link = 4 [json_name = "iosAppDownloadLink"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_ios_app_download_link());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigNativeApp::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigNativeApp*>(&to_msg);
  auto& from = static_cast<const ConfigNativeApp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigNativeApp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_app_custom_url_schemes()->MergeFrom(from._internal_app_custom_url_schemes());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_app_download_link(from._internal_app_download_link());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_android_app_download_link(from._internal_android_app_download_link());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_ios_app_download_link(from._internal_ios_app_download_link());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.mobile_external_browser_ = from._impl_.mobile_external_browser_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.mobile_enable_biometrics_ = from._impl_.mobile_enable_biometrics_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.mobile_prevent_screen_capture_ = from._impl_.mobile_prevent_screen_capture_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.mobile_jailbreak_protection_ = from._impl_.mobile_jailbreak_protection_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigNativeApp::CopyFrom(const ConfigNativeApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigNativeApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigNativeApp::InternalSwap(ConfigNativeApp* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.app_custom_url_schemes_.InternalSwap(&other->_impl_.app_custom_url_schemes_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.app_download_link_, &other->_impl_.app_download_link_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.android_app_download_link_, &other->_impl_.android_app_download_link_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ios_app_download_link_, &other->_impl_.ios_app_download_link_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigNativeApp, _impl_.mobile_jailbreak_protection_)
      + sizeof(ConfigNativeApp::_impl_.mobile_jailbreak_protection_)
      - PROTOBUF_FIELD_OFFSET(ConfigNativeApp, _impl_.mobile_external_browser_)>(
          reinterpret_cast<char*>(&_impl_.mobile_external_browser_),
          reinterpret_cast<char*>(&other->_impl_.mobile_external_browser_));
}

::google::protobuf::Metadata ConfigNativeApp::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigMeilisearch::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConfigMeilisearch>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_._has_bits_);
};

ConfigMeilisearch::ConfigMeilisearch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigMeilisearch_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigMeilisearch)
}
PROTOBUF_NDEBUG_INLINE ConfigMeilisearch::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::ConfigMeilisearch& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        server_url_(arena, from.server_url_),
        master_key_(arena, from.master_key_),
        index_prefix_(arena, from.index_prefix_) {}

ConfigMeilisearch::ConfigMeilisearch(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigMeilisearch& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigMeilisearch_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigMeilisearch* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, enable_indexing_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, enable_indexing_),
           offsetof(Impl_, search_cutoff_ms_) -
               offsetof(Impl_, enable_indexing_) +
               sizeof(Impl_::search_cutoff_ms_));

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigMeilisearch)
}
PROTOBUF_NDEBUG_INLINE ConfigMeilisearch::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        server_url_(arena),
        master_key_(arena),
        index_prefix_(arena) {}

inline void ConfigMeilisearch::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, enable_indexing_),
           0,
           offsetof(Impl_, search_cutoff_ms_) -
               offsetof(Impl_, enable_indexing_) +
               sizeof(Impl_::search_cutoff_ms_));
}
ConfigMeilisearch::~ConfigMeilisearch() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigMeilisearch)
  SharedDtor(*this);
}
inline void ConfigMeilisearch::SharedDtor(MessageLite& self) {
  ConfigMeilisearch& this_ = static_cast<ConfigMeilisearch&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.server_url_.Destroy();
  this_._impl_.master_key_.Destroy();
  this_._impl_.index_prefix_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConfigMeilisearch::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigMeilisearch(arena);
}
constexpr auto ConfigMeilisearch::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ConfigMeilisearch),
                                            alignof(ConfigMeilisearch));
}
constexpr auto ConfigMeilisearch::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigMeilisearch_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigMeilisearch::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigMeilisearch>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigMeilisearch::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigMeilisearch>(), &ConfigMeilisearch::ByteSizeLong,
              &ConfigMeilisearch::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_._cached_size_),
          false,
      },
      &ConfigMeilisearch::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigMeilisearch_class_data_ =
        ConfigMeilisearch::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigMeilisearch::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigMeilisearch_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigMeilisearch_class_data_.tc_table);
  return ConfigMeilisearch_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 76, 2>
ConfigMeilisearch::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ConfigMeilisearch_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigMeilisearch>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string server_url = 1 [json_name = "server_url"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_.server_url_)}},
    // optional string master_key = 2 [json_name = "masterKey"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_.master_key_)}},
    // optional bool enable_indexing = 3 [json_name = "enableIndexing"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigMeilisearch, _impl_.enable_indexing_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_.enable_indexing_)}},
    // optional bool enable_searching = 4 [json_name = "enableSearching"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigMeilisearch, _impl_.enable_searching_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_.enable_searching_)}},
    // optional bool enable_autocomplete = 5 [json_name = "enableAutocomplete"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigMeilisearch, _impl_.enable_autocomplete_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_.enable_autocomplete_)}},
    // optional int32 batch_size = 6 [json_name = "batchSize"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigMeilisearch, _impl_.batch_size_), 7>(),
     {48, 7, 0, PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_.batch_size_)}},
    // optional int32 request_timeout_seconds = 7 [json_name = "requestTimeoutSeconds"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigMeilisearch, _impl_.request_timeout_seconds_), 8>(),
     {56, 8, 0, PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_.request_timeout_seconds_)}},
    // optional string index_prefix = 8 [json_name = "indexPrefix"];
    {::_pbi::TcParser::FastUS1,
     {66, 2, 0, PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_.index_prefix_)}},
    // optional int32 search_cutoff_ms = 9 [json_name = "searchCutoffMs"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigMeilisearch, _impl_.search_cutoff_ms_), 9>(),
     {72, 9, 0, PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_.search_cutoff_ms_)}},
    // optional bool enable_typo_tolerance = 10 [json_name = "enableTypoTolerance"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigMeilisearch, _impl_.enable_typo_tolerance_), 6>(),
     {80, 6, 0, PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_.enable_typo_tolerance_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string server_url = 1 [json_name = "server_url"];
    {PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_.server_url_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string master_key = 2 [json_name = "masterKey"];
    {PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_.master_key_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool enable_indexing = 3 [json_name = "enableIndexing"];
    {PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_.enable_indexing_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_searching = 4 [json_name = "enableSearching"];
    {PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_.enable_searching_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_autocomplete = 5 [json_name = "enableAutocomplete"];
    {PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_.enable_autocomplete_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 batch_size = 6 [json_name = "batchSize"];
    {PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_.batch_size_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 request_timeout_seconds = 7 [json_name = "requestTimeoutSeconds"];
    {PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_.request_timeout_seconds_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string index_prefix = 8 [json_name = "indexPrefix"];
    {PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_.index_prefix_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 search_cutoff_ms = 9 [json_name = "searchCutoffMs"];
    {PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_.search_cutoff_ms_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool enable_typo_tolerance = 10 [json_name = "enableTypoTolerance"];
    {PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_.enable_typo_tolerance_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\33\12\12\0\0\0\0\0\14\0\0\0\0\0\0\0"
    "common.v1.ConfigMeilisearch"
    "server_url"
    "master_key"
    "index_prefix"
  }},
};
PROTOBUF_NOINLINE void ConfigMeilisearch::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigMeilisearch)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.server_url_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.master_key_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.index_prefix_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x000000f8u) != 0) {
    ::memset(&_impl_.enable_indexing_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.batch_size_) -
        reinterpret_cast<char*>(&_impl_.enable_indexing_)) + sizeof(_impl_.batch_size_));
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    ::memset(&_impl_.request_timeout_seconds_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.search_cutoff_ms_) -
        reinterpret_cast<char*>(&_impl_.request_timeout_seconds_)) + sizeof(_impl_.search_cutoff_ms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigMeilisearch::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigMeilisearch& this_ = static_cast<const ConfigMeilisearch&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigMeilisearch::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigMeilisearch& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigMeilisearch)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional string server_url = 1 [json_name = "server_url"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    const ::std::string& _s = this_._internal_server_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigMeilisearch.server_url");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string master_key = 2 [json_name = "masterKey"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    const ::std::string& _s = this_._internal_master_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigMeilisearch.master_key");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional bool enable_indexing = 3 [json_name = "enableIndexing"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this_._internal_enable_indexing(), target);
  }

  // optional bool enable_searching = 4 [json_name = "enableSearching"];
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this_._internal_enable_searching(), target);
  }

  // optional bool enable_autocomplete = 5 [json_name = "enableAutocomplete"];
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this_._internal_enable_autocomplete(), target);
  }

  // optional int32 batch_size = 6 [json_name = "batchSize"];
  if ((cached_has_bits & 0x00000080u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<6>(
            stream, this_._internal_batch_size(), target);
  }

  // optional int32 request_timeout_seconds = 7 [json_name = "requestTimeoutSeconds"];
  if ((cached_has_bits & 0x00000100u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<7>(
            stream, this_._internal_request_timeout_seconds(), target);
  }

  // optional string index_prefix = 8 [json_name = "indexPrefix"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    const ::std::string& _s = this_._internal_index_prefix();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigMeilisearch.index_prefix");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // optional int32 search_cutoff_ms = 9 [json_name = "searchCutoffMs"];
  if ((cached_has_bits & 0x00000200u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<9>(
            stream, this_._internal_search_cutoff_ms(), target);
  }

  // optional bool enable_typo_tolerance = 10 [json_name = "enableTypoTolerance"];
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this_._internal_enable_typo_tolerance(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigMeilisearch)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigMeilisearch::ByteSizeLong(const MessageLite& base) {
  const ConfigMeilisearch& this_ = static_cast<const ConfigMeilisearch&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigMeilisearch::ByteSizeLong() const {
  const ConfigMeilisearch& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigMeilisearch)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00000078u & cached_has_bits) * 2;
  if ((cached_has_bits & 0x00000087u) != 0) {
    // optional string server_url = 1 [json_name = "server_url"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_server_url());
    }
    // optional string master_key = 2 [json_name = "masterKey"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_master_key());
    }
    // optional string index_prefix = 8 [json_name = "indexPrefix"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_index_prefix());
    }
    // optional int32 batch_size = 6 [json_name = "batchSize"];
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_batch_size());
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    // optional int32 request_timeout_seconds = 7 [json_name = "requestTimeoutSeconds"];
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_request_timeout_seconds());
    }
    // optional int32 search_cutoff_ms = 9 [json_name = "searchCutoffMs"];
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_search_cutoff_ms());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigMeilisearch::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigMeilisearch*>(&to_msg);
  auto& from = static_cast<const ConfigMeilisearch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigMeilisearch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_server_url(from._internal_server_url());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_master_key(from._internal_master_key());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_index_prefix(from._internal_index_prefix());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.enable_indexing_ = from._impl_.enable_indexing_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.enable_searching_ = from._impl_.enable_searching_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.enable_autocomplete_ = from._impl_.enable_autocomplete_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.enable_typo_tolerance_ = from._impl_.enable_typo_tolerance_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.batch_size_ = from._impl_.batch_size_;
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.request_timeout_seconds_ = from._impl_.request_timeout_seconds_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.search_cutoff_ms_ = from._impl_.search_cutoff_ms_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigMeilisearch::CopyFrom(const ConfigMeilisearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigMeilisearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigMeilisearch::InternalSwap(ConfigMeilisearch* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.server_url_, &other->_impl_.server_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.master_key_, &other->_impl_.master_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.index_prefix_, &other->_impl_.index_prefix_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_.search_cutoff_ms_)
      + sizeof(ConfigMeilisearch::_impl_.search_cutoff_ms_)
      - PROTOBUF_FIELD_OFFSET(ConfigMeilisearch, _impl_.enable_indexing_)>(
          reinterpret_cast<char*>(&_impl_.enable_indexing_),
          reinterpret_cast<char*>(&other->_impl_.enable_indexing_));
}

::google::protobuf::Metadata ConfigMeilisearch::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigBleve::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConfigBleve>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConfigBleve, _impl_._has_bits_);
};

ConfigBleve::ConfigBleve(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigBleve_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigBleve)
}
PROTOBUF_NDEBUG_INLINE ConfigBleve::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::ConfigBleve& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        index_dir_(arena, from.index_dir_) {}

ConfigBleve::ConfigBleve(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigBleve& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigBleve_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigBleve* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, enable_indexing_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, enable_indexing_),
           offsetof(Impl_, batch_size_) -
               offsetof(Impl_, enable_indexing_) +
               sizeof(Impl_::batch_size_));

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigBleve)
}
PROTOBUF_NDEBUG_INLINE ConfigBleve::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        index_dir_(arena) {}

inline void ConfigBleve::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, enable_indexing_),
           0,
           offsetof(Impl_, batch_size_) -
               offsetof(Impl_, enable_indexing_) +
               sizeof(Impl_::batch_size_));
}
ConfigBleve::~ConfigBleve() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigBleve)
  SharedDtor(*this);
}
inline void ConfigBleve::SharedDtor(MessageLite& self) {
  ConfigBleve& this_ = static_cast<ConfigBleve&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.index_dir_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConfigBleve::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigBleve(arena);
}
constexpr auto ConfigBleve::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ConfigBleve),
                                            alignof(ConfigBleve));
}
constexpr auto ConfigBleve::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigBleve_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigBleve::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigBleve>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigBleve::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigBleve>(), &ConfigBleve::ByteSizeLong,
              &ConfigBleve::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigBleve, _impl_._cached_size_),
          false,
      },
      &ConfigBleve::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigBleve_class_data_ =
        ConfigBleve::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigBleve::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigBleve_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigBleve_class_data_.tc_table);
  return ConfigBleve_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 39, 2>
ConfigBleve::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigBleve, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ConfigBleve_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigBleve>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string index_dir = 1 [json_name = "indexDir"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigBleve, _impl_.index_dir_)}},
    // optional bool enable_indexing = 2 [json_name = "enableIndexing"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigBleve, _impl_.enable_indexing_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(ConfigBleve, _impl_.enable_indexing_)}},
    // optional bool enable_searching = 3 [json_name = "enableSearching"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigBleve, _impl_.enable_searching_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(ConfigBleve, _impl_.enable_searching_)}},
    // optional bool enable_autocomplete = 4 [json_name = "enableAutocomplete"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigBleve, _impl_.enable_autocomplete_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(ConfigBleve, _impl_.enable_autocomplete_)}},
    // optional int32 bulk_indexing_time_window_seconds = 5 [json_name = "bulkIndexingTimeWindowSeconds"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigBleve, _impl_.bulk_indexing_time_window_seconds_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(ConfigBleve, _impl_.bulk_indexing_time_window_seconds_)}},
    // optional int32 batch_size = 6 [json_name = "batchSize"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigBleve, _impl_.batch_size_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(ConfigBleve, _impl_.batch_size_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string index_dir = 1 [json_name = "indexDir"];
    {PROTOBUF_FIELD_OFFSET(ConfigBleve, _impl_.index_dir_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool enable_indexing = 2 [json_name = "enableIndexing"];
    {PROTOBUF_FIELD_OFFSET(ConfigBleve, _impl_.enable_indexing_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_searching = 3 [json_name = "enableSearching"];
    {PROTOBUF_FIELD_OFFSET(ConfigBleve, _impl_.enable_searching_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_autocomplete = 4 [json_name = "enableAutocomplete"];
    {PROTOBUF_FIELD_OFFSET(ConfigBleve, _impl_.enable_autocomplete_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 bulk_indexing_time_window_seconds = 5 [json_name = "bulkIndexingTimeWindowSeconds"];
    {PROTOBUF_FIELD_OFFSET(ConfigBleve, _impl_.bulk_indexing_time_window_seconds_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 batch_size = 6 [json_name = "batchSize"];
    {PROTOBUF_FIELD_OFFSET(ConfigBleve, _impl_.batch_size_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\25\11\0\0\0\0\0\0"
    "common.v1.ConfigBleve"
    "index_dir"
  }},
};
PROTOBUF_NOINLINE void ConfigBleve::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigBleve)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.index_dir_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000003eu) != 0) {
    ::memset(&_impl_.enable_indexing_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.batch_size_) -
        reinterpret_cast<char*>(&_impl_.enable_indexing_)) + sizeof(_impl_.batch_size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigBleve::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigBleve& this_ = static_cast<const ConfigBleve&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigBleve::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigBleve& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigBleve)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional string index_dir = 1 [json_name = "indexDir"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    const ::std::string& _s = this_._internal_index_dir();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigBleve.index_dir");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional bool enable_indexing = 2 [json_name = "enableIndexing"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this_._internal_enable_indexing(), target);
  }

  // optional bool enable_searching = 3 [json_name = "enableSearching"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this_._internal_enable_searching(), target);
  }

  // optional bool enable_autocomplete = 4 [json_name = "enableAutocomplete"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this_._internal_enable_autocomplete(), target);
  }

  // optional int32 bulk_indexing_time_window_seconds = 5 [json_name = "bulkIndexingTimeWindowSeconds"];
  if ((cached_has_bits & 0x00000010u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<5>(
            stream, this_._internal_bulk_indexing_time_window_seconds(), target);
  }

  // optional int32 batch_size = 6 [json_name = "batchSize"];
  if ((cached_has_bits & 0x00000020u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<6>(
            stream, this_._internal_batch_size(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigBleve)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigBleve::ByteSizeLong(const MessageLite& base) {
  const ConfigBleve& this_ = static_cast<const ConfigBleve&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigBleve::ByteSizeLong() const {
  const ConfigBleve& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigBleve)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x0000000eu & cached_has_bits) * 2;
  if ((cached_has_bits & 0x00000031u) != 0) {
    // optional string index_dir = 1 [json_name = "indexDir"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_index_dir());
    }
    // optional int32 bulk_indexing_time_window_seconds = 5 [json_name = "bulkIndexingTimeWindowSeconds"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_bulk_indexing_time_window_seconds());
    }
    // optional int32 batch_size = 6 [json_name = "batchSize"];
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_batch_size());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigBleve::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigBleve*>(&to_msg);
  auto& from = static_cast<const ConfigBleve&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigBleve)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_index_dir(from._internal_index_dir());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.enable_indexing_ = from._impl_.enable_indexing_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.enable_searching_ = from._impl_.enable_searching_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.enable_autocomplete_ = from._impl_.enable_autocomplete_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.bulk_indexing_time_window_seconds_ = from._impl_.bulk_indexing_time_window_seconds_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.batch_size_ = from._impl_.batch_size_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigBleve::CopyFrom(const ConfigBleve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigBleve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigBleve::InternalSwap(ConfigBleve* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.index_dir_, &other->_impl_.index_dir_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigBleve, _impl_.batch_size_)
      + sizeof(ConfigBleve::_impl_.batch_size_)
      - PROTOBUF_FIELD_OFFSET(ConfigBleve, _impl_.enable_indexing_)>(
          reinterpret_cast<char*>(&_impl_.enable_indexing_),
          reinterpret_cast<char*>(&other->_impl_.enable_indexing_));
}

::google::protobuf::Metadata ConfigBleve::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigDataRetention::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConfigDataRetention>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_._has_bits_);
};

ConfigDataRetention::ConfigDataRetention(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigDataRetention_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigDataRetention)
}
PROTOBUF_NDEBUG_INLINE ConfigDataRetention::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::ConfigDataRetention& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        deletion_job_start_time_(arena, from.deletion_job_start_time_) {}

ConfigDataRetention::ConfigDataRetention(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigDataRetention& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigDataRetention_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigDataRetention* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, enable_message_deletion_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, enable_message_deletion_),
           offsetof(Impl_, retention_ids_batch_size_) -
               offsetof(Impl_, enable_message_deletion_) +
               sizeof(Impl_::retention_ids_batch_size_));

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigDataRetention)
}
PROTOBUF_NDEBUG_INLINE ConfigDataRetention::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        deletion_job_start_time_(arena) {}

inline void ConfigDataRetention::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, enable_message_deletion_),
           0,
           offsetof(Impl_, retention_ids_batch_size_) -
               offsetof(Impl_, enable_message_deletion_) +
               sizeof(Impl_::retention_ids_batch_size_));
}
ConfigDataRetention::~ConfigDataRetention() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigDataRetention)
  SharedDtor(*this);
}
inline void ConfigDataRetention::SharedDtor(MessageLite& self) {
  ConfigDataRetention& this_ = static_cast<ConfigDataRetention&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.deletion_job_start_time_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConfigDataRetention::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigDataRetention(arena);
}
constexpr auto ConfigDataRetention::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ConfigDataRetention),
                                            alignof(ConfigDataRetention));
}
constexpr auto ConfigDataRetention::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigDataRetention_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigDataRetention::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigDataRetention>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigDataRetention::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigDataRetention>(), &ConfigDataRetention::ByteSizeLong,
              &ConfigDataRetention::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_._cached_size_),
          false,
      },
      &ConfigDataRetention::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigDataRetention_class_data_ =
        ConfigDataRetention::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigDataRetention::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigDataRetention_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigDataRetention_class_data_.tc_table);
  return ConfigDataRetention_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 69, 2>
ConfigDataRetention::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ConfigDataRetention_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigDataRetention>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool enable_message_deletion = 1 [json_name = "enableMessageDeletion"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigDataRetention, _impl_.enable_message_deletion_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_.enable_message_deletion_)}},
    // optional bool enable_file_deletion = 2 [json_name = "enableFileDeletion"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigDataRetention, _impl_.enable_file_deletion_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_.enable_file_deletion_)}},
    // optional bool enable_boards_deletion = 3 [json_name = "enableBoardsDeletion"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigDataRetention, _impl_.enable_boards_deletion_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_.enable_boards_deletion_)}},
    // optional int32 message_retention_hours = 4 [json_name = "messageRetentionHours"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigDataRetention, _impl_.message_retention_hours_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_.message_retention_hours_)}},
    // optional int32 file_retention_hours = 5 [json_name = "fileRetentionHours"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigDataRetention, _impl_.file_retention_hours_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_.file_retention_hours_)}},
    // optional int32 boards_retention_days = 6 [json_name = "boardsRetentionDays"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigDataRetention, _impl_.boards_retention_days_), 6>(),
     {48, 6, 0, PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_.boards_retention_days_)}},
    // optional string deletion_job_start_time = 7 [json_name = "deletionJobStartTime"];
    {::_pbi::TcParser::FastUS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_.deletion_job_start_time_)}},
    // optional int32 batch_size = 8 [json_name = "batchSize"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigDataRetention, _impl_.batch_size_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_.batch_size_)}},
    // optional int32 time_between_batches_milliseconds = 9 [json_name = "timeBetweenBatchesMilliseconds"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigDataRetention, _impl_.time_between_batches_milliseconds_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_.time_between_batches_milliseconds_)}},
    // optional int32 retention_ids_batch_size = 10 [json_name = "retentionIdsBatchSize"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigDataRetention, _impl_.retention_ids_batch_size_), 9>(),
     {80, 9, 0, PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_.retention_ids_batch_size_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool enable_message_deletion = 1 [json_name = "enableMessageDeletion"];
    {PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_.enable_message_deletion_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_file_deletion = 2 [json_name = "enableFileDeletion"];
    {PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_.enable_file_deletion_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_boards_deletion = 3 [json_name = "enableBoardsDeletion"];
    {PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_.enable_boards_deletion_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 message_retention_hours = 4 [json_name = "messageRetentionHours"];
    {PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_.message_retention_hours_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 file_retention_hours = 5 [json_name = "fileRetentionHours"];
    {PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_.file_retention_hours_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 boards_retention_days = 6 [json_name = "boardsRetentionDays"];
    {PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_.boards_retention_days_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string deletion_job_start_time = 7 [json_name = "deletionJobStartTime"];
    {PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_.deletion_job_start_time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 batch_size = 8 [json_name = "batchSize"];
    {PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_.batch_size_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 time_between_batches_milliseconds = 9 [json_name = "timeBetweenBatchesMilliseconds"];
    {PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_.time_between_batches_milliseconds_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 retention_ids_batch_size = 10 [json_name = "retentionIdsBatchSize"];
    {PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_.retention_ids_batch_size_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\35\0\0\0\0\0\0\27\0\0\0\0\0\0\0\0"
    "common.v1.ConfigDataRetention"
    "deletion_job_start_time"
  }},
};
PROTOBUF_NOINLINE void ConfigDataRetention::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigDataRetention)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.deletion_job_start_time_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x000000feu) != 0) {
    ::memset(&_impl_.enable_message_deletion_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.batch_size_) -
        reinterpret_cast<char*>(&_impl_.enable_message_deletion_)) + sizeof(_impl_.batch_size_));
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    ::memset(&_impl_.time_between_batches_milliseconds_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.retention_ids_batch_size_) -
        reinterpret_cast<char*>(&_impl_.time_between_batches_milliseconds_)) + sizeof(_impl_.retention_ids_batch_size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigDataRetention::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigDataRetention& this_ = static_cast<const ConfigDataRetention&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigDataRetention::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigDataRetention& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigDataRetention)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional bool enable_message_deletion = 1 [json_name = "enableMessageDeletion"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this_._internal_enable_message_deletion(), target);
  }

  // optional bool enable_file_deletion = 2 [json_name = "enableFileDeletion"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this_._internal_enable_file_deletion(), target);
  }

  // optional bool enable_boards_deletion = 3 [json_name = "enableBoardsDeletion"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this_._internal_enable_boards_deletion(), target);
  }

  // optional int32 message_retention_hours = 4 [json_name = "messageRetentionHours"];
  if ((cached_has_bits & 0x00000010u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
            stream, this_._internal_message_retention_hours(), target);
  }

  // optional int32 file_retention_hours = 5 [json_name = "fileRetentionHours"];
  if ((cached_has_bits & 0x00000020u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<5>(
            stream, this_._internal_file_retention_hours(), target);
  }

  // optional int32 boards_retention_days = 6 [json_name = "boardsRetentionDays"];
  if ((cached_has_bits & 0x00000040u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<6>(
            stream, this_._internal_boards_retention_days(), target);
  }

  // optional string deletion_job_start_time = 7 [json_name = "deletionJobStartTime"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    const ::std::string& _s = this_._internal_deletion_job_start_time();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigDataRetention.deletion_job_start_time");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional int32 batch_size = 8 [json_name = "batchSize"];
  if ((cached_has_bits & 0x00000080u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<8>(
            stream, this_._internal_batch_size(), target);
  }

  // optional int32 time_between_batches_milliseconds = 9 [json_name = "timeBetweenBatchesMilliseconds"];
  if ((cached_has_bits & 0x00000100u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<9>(
            stream, this_._internal_time_between_batches_milliseconds(), target);
  }

  // optional int32 retention_ids_batch_size = 10 [json_name = "retentionIdsBatchSize"];
  if ((cached_has_bits & 0x00000200u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<10>(
            stream, this_._internal_retention_ids_batch_size(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigDataRetention)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigDataRetention::ByteSizeLong(const MessageLite& base) {
  const ConfigDataRetention& this_ = static_cast<const ConfigDataRetention&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigDataRetention::ByteSizeLong() const {
  const ConfigDataRetention& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigDataRetention)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x0000000eu & cached_has_bits) * 2;
  if ((cached_has_bits & 0x000000f1u) != 0) {
    // optional string deletion_job_start_time = 7 [json_name = "deletionJobStartTime"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_deletion_job_start_time());
    }
    // optional int32 message_retention_hours = 4 [json_name = "messageRetentionHours"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_message_retention_hours());
    }
    // optional int32 file_retention_hours = 5 [json_name = "fileRetentionHours"];
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_file_retention_hours());
    }
    // optional int32 boards_retention_days = 6 [json_name = "boardsRetentionDays"];
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_boards_retention_days());
    }
    // optional int32 batch_size = 8 [json_name = "batchSize"];
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_batch_size());
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    // optional int32 time_between_batches_milliseconds = 9 [json_name = "timeBetweenBatchesMilliseconds"];
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_time_between_batches_milliseconds());
    }
    // optional int32 retention_ids_batch_size = 10 [json_name = "retentionIdsBatchSize"];
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_retention_ids_batch_size());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigDataRetention::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigDataRetention*>(&to_msg);
  auto& from = static_cast<const ConfigDataRetention&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigDataRetention)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_deletion_job_start_time(from._internal_deletion_job_start_time());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.enable_message_deletion_ = from._impl_.enable_message_deletion_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.enable_file_deletion_ = from._impl_.enable_file_deletion_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.enable_boards_deletion_ = from._impl_.enable_boards_deletion_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.message_retention_hours_ = from._impl_.message_retention_hours_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.file_retention_hours_ = from._impl_.file_retention_hours_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.boards_retention_days_ = from._impl_.boards_retention_days_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.batch_size_ = from._impl_.batch_size_;
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.time_between_batches_milliseconds_ = from._impl_.time_between_batches_milliseconds_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.retention_ids_batch_size_ = from._impl_.retention_ids_batch_size_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigDataRetention::CopyFrom(const ConfigDataRetention& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigDataRetention)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigDataRetention::InternalSwap(ConfigDataRetention* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deletion_job_start_time_, &other->_impl_.deletion_job_start_time_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_.retention_ids_batch_size_)
      + sizeof(ConfigDataRetention::_impl_.retention_ids_batch_size_)
      - PROTOBUF_FIELD_OFFSET(ConfigDataRetention, _impl_.enable_message_deletion_)>(
          reinterpret_cast<char*>(&_impl_.enable_message_deletion_),
          reinterpret_cast<char*>(&other->_impl_.enable_message_deletion_));
}

::google::protobuf::Metadata ConfigDataRetention::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigImageProxy::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConfigImageProxy>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConfigImageProxy, _impl_._has_bits_);
};

ConfigImageProxy::ConfigImageProxy(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigImageProxy_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigImageProxy)
}
PROTOBUF_NDEBUG_INLINE ConfigImageProxy::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::ConfigImageProxy& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        image_proxy_type_(arena, from.image_proxy_type_),
        remote_image_proxy_url_(arena, from.remote_image_proxy_url_),
        remote_image_proxy_options_(arena, from.remote_image_proxy_options_) {}

ConfigImageProxy::ConfigImageProxy(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigImageProxy& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigImageProxy_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigImageProxy* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.enable_ = from._impl_.enable_;

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigImageProxy)
}
PROTOBUF_NDEBUG_INLINE ConfigImageProxy::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        image_proxy_type_(arena),
        remote_image_proxy_url_(arena),
        remote_image_proxy_options_(arena) {}

inline void ConfigImageProxy::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.enable_ = {};
}
ConfigImageProxy::~ConfigImageProxy() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigImageProxy)
  SharedDtor(*this);
}
inline void ConfigImageProxy::SharedDtor(MessageLite& self) {
  ConfigImageProxy& this_ = static_cast<ConfigImageProxy&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.image_proxy_type_.Destroy();
  this_._impl_.remote_image_proxy_url_.Destroy();
  this_._impl_.remote_image_proxy_options_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConfigImageProxy::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigImageProxy(arena);
}
constexpr auto ConfigImageProxy::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ConfigImageProxy),
                                            alignof(ConfigImageProxy));
}
constexpr auto ConfigImageProxy::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigImageProxy_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigImageProxy::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigImageProxy>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigImageProxy::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigImageProxy>(), &ConfigImageProxy::ByteSizeLong,
              &ConfigImageProxy::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigImageProxy, _impl_._cached_size_),
          false,
      },
      &ConfigImageProxy::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigImageProxy_class_data_ =
        ConfigImageProxy::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigImageProxy::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigImageProxy_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigImageProxy_class_data_.tc_table);
  return ConfigImageProxy_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 99, 2>
ConfigImageProxy::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigImageProxy, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ConfigImageProxy_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigImageProxy>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional string remote_image_proxy_options = 4 [json_name = "remoteImageProxyOptions"];
    {::_pbi::TcParser::FastUS1,
     {34, 2, 0, PROTOBUF_FIELD_OFFSET(ConfigImageProxy, _impl_.remote_image_proxy_options_)}},
    // optional bool enable = 1 [json_name = "enable"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConfigImageProxy, _impl_.enable_), 3>(),
     {8, 3, 0, PROTOBUF_FIELD_OFFSET(ConfigImageProxy, _impl_.enable_)}},
    // optional string image_proxy_type = 2 [json_name = "imageProxyType"];
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigImageProxy, _impl_.image_proxy_type_)}},
    // optional string remote_image_proxy_url = 3 [json_name = "remoteImageProxyUrl"];
    {::_pbi::TcParser::FastUS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(ConfigImageProxy, _impl_.remote_image_proxy_url_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool enable = 1 [json_name = "enable"];
    {PROTOBUF_FIELD_OFFSET(ConfigImageProxy, _impl_.enable_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string image_proxy_type = 2 [json_name = "imageProxyType"];
    {PROTOBUF_FIELD_OFFSET(ConfigImageProxy, _impl_.image_proxy_type_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string remote_image_proxy_url = 3 [json_name = "remoteImageProxyUrl"];
    {PROTOBUF_FIELD_OFFSET(ConfigImageProxy, _impl_.remote_image_proxy_url_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string remote_image_proxy_options = 4 [json_name = "remoteImageProxyOptions"];
    {PROTOBUF_FIELD_OFFSET(ConfigImageProxy, _impl_.remote_image_proxy_options_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\32\0\20\26\32\0\0\0"
    "common.v1.ConfigImageProxy"
    "image_proxy_type"
    "remote_image_proxy_url"
    "remote_image_proxy_options"
  }},
};
PROTOBUF_NOINLINE void ConfigImageProxy::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigImageProxy)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.image_proxy_type_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.remote_image_proxy_url_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.remote_image_proxy_options_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.enable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigImageProxy::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigImageProxy& this_ = static_cast<const ConfigImageProxy&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigImageProxy::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigImageProxy& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigImageProxy)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional bool enable = 1 [json_name = "enable"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this_._internal_enable(), target);
  }

  // optional string image_proxy_type = 2 [json_name = "imageProxyType"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    const ::std::string& _s = this_._internal_image_proxy_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigImageProxy.image_proxy_type");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string remote_image_proxy_url = 3 [json_name = "remoteImageProxyUrl"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    const ::std::string& _s = this_._internal_remote_image_proxy_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigImageProxy.remote_image_proxy_url");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string remote_image_proxy_options = 4 [json_name = "remoteImageProxyOptions"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    const ::std::string& _s = this_._internal_remote_image_proxy_options();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigImageProxy.remote_image_proxy_options");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigImageProxy)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigImageProxy::ByteSizeLong(const MessageLite& base) {
  const ConfigImageProxy& this_ = static_cast<const ConfigImageProxy&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigImageProxy::ByteSizeLong() const {
  const ConfigImageProxy& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigImageProxy)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000008u & cached_has_bits) * 2;
  if ((cached_has_bits & 0x00000007u) != 0) {
    // optional string image_proxy_type = 2 [json_name = "imageProxyType"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_image_proxy_type());
    }
    // optional string remote_image_proxy_url = 3 [json_name = "remoteImageProxyUrl"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_remote_image_proxy_url());
    }
    // optional string remote_image_proxy_options = 4 [json_name = "remoteImageProxyOptions"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_remote_image_proxy_options());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigImageProxy::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigImageProxy*>(&to_msg);
  auto& from = static_cast<const ConfigImageProxy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigImageProxy)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_image_proxy_type(from._internal_image_proxy_type());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_remote_image_proxy_url(from._internal_remote_image_proxy_url());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_remote_image_proxy_options(from._internal_remote_image_proxy_options());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.enable_ = from._impl_.enable_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigImageProxy::CopyFrom(const ConfigImageProxy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigImageProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigImageProxy::InternalSwap(ConfigImageProxy* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.image_proxy_type_, &other->_impl_.image_proxy_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.remote_image_proxy_url_, &other->_impl_.remote_image_proxy_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.remote_image_proxy_options_, &other->_impl_.remote_image_proxy_options_, arena);
  swap(_impl_.enable_, other->_impl_.enable_);
}

::google::protobuf::Metadata ConfigImageProxy::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Config::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Config>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Config, _impl_._has_bits_);
};

Config::Config(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Config_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.Config)
}
PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::Config& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Config::Config(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Config& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Config_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Config* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.main_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.main_)
                : nullptr;
  _impl_.services_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.services_)
                : nullptr;
  _impl_.security_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.security_)
                : nullptr;
  _impl_.cache_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.cache_)
                : nullptr;
  _impl_.metrics_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.metrics_)
                : nullptr;
  _impl_.sso_ = ((cached_has_bits & 0x00000020u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.sso_)
                : nullptr;
  _impl_.sql_ = ((cached_has_bits & 0x00000040u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.sql_)
                : nullptr;
  _impl_.password_ = ((cached_has_bits & 0x00000080u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.password_)
                : nullptr;
  _impl_.file_ = ((cached_has_bits & 0x00000100u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.file_)
                : nullptr;
  _impl_.email_ = ((cached_has_bits & 0x00000200u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.email_)
                : nullptr;
  _impl_.rate_limit_ = ((cached_has_bits & 0x00000400u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.rate_limit_)
                : nullptr;
  _impl_.privacy_ = ((cached_has_bits & 0x00000800u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.privacy_)
                : nullptr;
  _impl_.support_ = ((cached_has_bits & 0x00001000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.support_)
                : nullptr;
  _impl_.localization_ = ((cached_has_bits & 0x00002000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.localization_)
                : nullptr;
  _impl_.ldap_ = ((cached_has_bits & 0x00004000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ldap_)
                : nullptr;
  _impl_.saml_ = ((cached_has_bits & 0x00008000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.saml_)
                : nullptr;
  _impl_.native_app_ = ((cached_has_bits & 0x00010000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.native_app_)
                : nullptr;
  _impl_.meilisearch_ = ((cached_has_bits & 0x00020000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.meilisearch_)
                : nullptr;
  _impl_.bleve_ = ((cached_has_bits & 0x00040000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.bleve_)
                : nullptr;
  _impl_.data_retention_ = ((cached_has_bits & 0x00080000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.data_retention_)
                : nullptr;
  _impl_.image_proxy_ = ((cached_has_bits & 0x00100000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.image_proxy_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:common.v1.Config)
}
PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void Config::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, main_),
           0,
           offsetof(Impl_, image_proxy_) -
               offsetof(Impl_, main_) +
               sizeof(Impl_::image_proxy_));
}
Config::~Config() {
  // @@protoc_insertion_point(destructor:common.v1.Config)
  SharedDtor(*this);
}
inline void Config::SharedDtor(MessageLite& self) {
  Config& this_ = static_cast<Config&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.main_;
  delete this_._impl_.services_;
  delete this_._impl_.security_;
  delete this_._impl_.cache_;
  delete this_._impl_.metrics_;
  delete this_._impl_.sso_;
  delete this_._impl_.sql_;
  delete this_._impl_.password_;
  delete this_._impl_.file_;
  delete this_._impl_.email_;
  delete this_._impl_.rate_limit_;
  delete this_._impl_.privacy_;
  delete this_._impl_.support_;
  delete this_._impl_.localization_;
  delete this_._impl_.ldap_;
  delete this_._impl_.saml_;
  delete this_._impl_.native_app_;
  delete this_._impl_.meilisearch_;
  delete this_._impl_.bleve_;
  delete this_._impl_.data_retention_;
  delete this_._impl_.image_proxy_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Config::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Config(arena);
}
constexpr auto Config::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Config),
                                            alignof(Config));
}
constexpr auto Config::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Config_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Config::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Config>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Config::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Config>(), &Config::ByteSizeLong,
              &Config::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Config, _impl_._cached_size_),
          false,
      },
      &Config::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Config_class_data_ =
        Config::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Config::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Config_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Config_class_data_.tc_table);
  return Config_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 21, 21, 0, 2>
Config::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Config, _impl_._has_bits_),
    0, // no _extensions_
    21, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4292870144,  // skipmap
    offsetof(decltype(_table_), field_entries),
    21,  // num_field_entries
    21,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Config_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::Config>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .common.v1.ConfigMain main = 1 [json_name = "main"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.main_)}},
    // .common.v1.ConfigServices services = 2 [json_name = "services"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Config, _impl_.services_)}},
    // .common.v1.ConfigSecurity security = 3 [json_name = "security"];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Config, _impl_.security_)}},
    // .common.v1.CacheConfig cache = 4 [json_name = "cache"];
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(Config, _impl_.cache_)}},
    // .common.v1.ConfigMetrics metrics = 5 [json_name = "metrics"];
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(Config, _impl_.metrics_)}},
    // .common.v1.ConfigSSO sso = 6 [json_name = "sso"];
    {::_pbi::TcParser::FastMtS1,
     {50, 5, 5, PROTOBUF_FIELD_OFFSET(Config, _impl_.sso_)}},
    // .common.v1.ConfigSql sql = 7 [json_name = "sql"];
    {::_pbi::TcParser::FastMtS1,
     {58, 6, 6, PROTOBUF_FIELD_OFFSET(Config, _impl_.sql_)}},
    // .common.v1.ConfigPassword password = 8 [json_name = "password"];
    {::_pbi::TcParser::FastMtS1,
     {66, 7, 7, PROTOBUF_FIELD_OFFSET(Config, _impl_.password_)}},
    // .common.v1.ConfigFile file = 9 [json_name = "file"];
    {::_pbi::TcParser::FastMtS1,
     {74, 8, 8, PROTOBUF_FIELD_OFFSET(Config, _impl_.file_)}},
    // .common.v1.ConfigEmail email = 10 [json_name = "email"];
    {::_pbi::TcParser::FastMtS1,
     {82, 9, 9, PROTOBUF_FIELD_OFFSET(Config, _impl_.email_)}},
    // .common.v1.ConfigRateLimit rate_limit = 11 [json_name = "rateLimit"];
    {::_pbi::TcParser::FastMtS1,
     {90, 10, 10, PROTOBUF_FIELD_OFFSET(Config, _impl_.rate_limit_)}},
    // .common.v1.ConfigPrivacy privacy = 12 [json_name = "privacy"];
    {::_pbi::TcParser::FastMtS1,
     {98, 11, 11, PROTOBUF_FIELD_OFFSET(Config, _impl_.privacy_)}},
    // .common.v1.ConfigSupport support = 13 [json_name = "support"];
    {::_pbi::TcParser::FastMtS1,
     {106, 12, 12, PROTOBUF_FIELD_OFFSET(Config, _impl_.support_)}},
    // .common.v1.ConfigLocalization localization = 14 [json_name = "localization"];
    {::_pbi::TcParser::FastMtS1,
     {114, 13, 13, PROTOBUF_FIELD_OFFSET(Config, _impl_.localization_)}},
    // .common.v1.ConfigLdap ldap = 15 [json_name = "ldap"];
    {::_pbi::TcParser::FastMtS1,
     {122, 14, 14, PROTOBUF_FIELD_OFFSET(Config, _impl_.ldap_)}},
    // .common.v1.ConfigSaml saml = 16 [json_name = "saml"];
    {::_pbi::TcParser::FastMtS2,
     {386, 15, 15, PROTOBUF_FIELD_OFFSET(Config, _impl_.saml_)}},
    // .common.v1.ConfigNativeApp native_app = 17 [json_name = "nativeApp"];
    {::_pbi::TcParser::FastMtS2,
     {394, 16, 16, PROTOBUF_FIELD_OFFSET(Config, _impl_.native_app_)}},
    // .common.v1.ConfigMeilisearch meilisearch = 18 [json_name = "meilisearch"];
    {::_pbi::TcParser::FastMtS2,
     {402, 17, 17, PROTOBUF_FIELD_OFFSET(Config, _impl_.meilisearch_)}},
    // .common.v1.ConfigBleve bleve = 19 [json_name = "bleve"];
    {::_pbi::TcParser::FastMtS2,
     {410, 18, 18, PROTOBUF_FIELD_OFFSET(Config, _impl_.bleve_)}},
    // .common.v1.ConfigDataRetention data_retention = 20 [json_name = "dataRetention"];
    {::_pbi::TcParser::FastMtS2,
     {418, 19, 19, PROTOBUF_FIELD_OFFSET(Config, _impl_.data_retention_)}},
    // .common.v1.ConfigImageProxy image_proxy = 21 [json_name = "imageProxy"];
    {::_pbi::TcParser::FastMtS2,
     {426, 20, 20, PROTOBUF_FIELD_OFFSET(Config, _impl_.image_proxy_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .common.v1.ConfigMain main = 1 [json_name = "main"];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.main_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .common.v1.ConfigServices services = 2 [json_name = "services"];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.services_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .common.v1.ConfigSecurity security = 3 [json_name = "security"];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.security_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .common.v1.CacheConfig cache = 4 [json_name = "cache"];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.cache_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .common.v1.ConfigMetrics metrics = 5 [json_name = "metrics"];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.metrics_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .common.v1.ConfigSSO sso = 6 [json_name = "sso"];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.sso_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .common.v1.ConfigSql sql = 7 [json_name = "sql"];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.sql_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .common.v1.ConfigPassword password = 8 [json_name = "password"];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.password_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .common.v1.ConfigFile file = 9 [json_name = "file"];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.file_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .common.v1.ConfigEmail email = 10 [json_name = "email"];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.email_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .common.v1.ConfigRateLimit rate_limit = 11 [json_name = "rateLimit"];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.rate_limit_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .common.v1.ConfigPrivacy privacy = 12 [json_name = "privacy"];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.privacy_), _Internal::kHasBitsOffset + 11, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .common.v1.ConfigSupport support = 13 [json_name = "support"];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.support_), _Internal::kHasBitsOffset + 12, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .common.v1.ConfigLocalization localization = 14 [json_name = "localization"];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.localization_), _Internal::kHasBitsOffset + 13, 13,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .common.v1.ConfigLdap ldap = 15 [json_name = "ldap"];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.ldap_), _Internal::kHasBitsOffset + 14, 14,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .common.v1.ConfigSaml saml = 16 [json_name = "saml"];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.saml_), _Internal::kHasBitsOffset + 15, 15,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .common.v1.ConfigNativeApp native_app = 17 [json_name = "nativeApp"];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.native_app_), _Internal::kHasBitsOffset + 16, 16,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .common.v1.ConfigMeilisearch meilisearch = 18 [json_name = "meilisearch"];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.meilisearch_), _Internal::kHasBitsOffset + 17, 17,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .common.v1.ConfigBleve bleve = 19 [json_name = "bleve"];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.bleve_), _Internal::kHasBitsOffset + 18, 18,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .common.v1.ConfigDataRetention data_retention = 20 [json_name = "dataRetention"];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.data_retention_), _Internal::kHasBitsOffset + 19, 19,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .common.v1.ConfigImageProxy image_proxy = 21 [json_name = "imageProxy"];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.image_proxy_), _Internal::kHasBitsOffset + 20, 20,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::common::v1::ConfigMain>()},
      {::_pbi::TcParser::GetTable<::common::v1::ConfigServices>()},
      {::_pbi::TcParser::GetTable<::common::v1::ConfigSecurity>()},
      {::_pbi::TcParser::GetTable<::common::v1::CacheConfig>()},
      {::_pbi::TcParser::GetTable<::common::v1::ConfigMetrics>()},
      {::_pbi::TcParser::GetTable<::common::v1::ConfigSSO>()},
      {::_pbi::TcParser::GetTable<::common::v1::ConfigSql>()},
      {::_pbi::TcParser::GetTable<::common::v1::ConfigPassword>()},
      {::_pbi::TcParser::GetTable<::common::v1::ConfigFile>()},
      {::_pbi::TcParser::GetTable<::common::v1::ConfigEmail>()},
      {::_pbi::TcParser::GetTable<::common::v1::ConfigRateLimit>()},
      {::_pbi::TcParser::GetTable<::common::v1::ConfigPrivacy>()},
      {::_pbi::TcParser::GetTable<::common::v1::ConfigSupport>()},
      {::_pbi::TcParser::GetTable<::common::v1::ConfigLocalization>()},
      {::_pbi::TcParser::GetTable<::common::v1::ConfigLdap>()},
      {::_pbi::TcParser::GetTable<::common::v1::ConfigSaml>()},
      {::_pbi::TcParser::GetTable<::common::v1::ConfigNativeApp>()},
      {::_pbi::TcParser::GetTable<::common::v1::ConfigMeilisearch>()},
      {::_pbi::TcParser::GetTable<::common::v1::ConfigBleve>()},
      {::_pbi::TcParser::GetTable<::common::v1::ConfigDataRetention>()},
      {::_pbi::TcParser::GetTable<::common::v1::ConfigImageProxy>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.Config)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.main_ != nullptr);
      _impl_.main_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.services_ != nullptr);
      _impl_.services_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.security_ != nullptr);
      _impl_.security_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.cache_ != nullptr);
      _impl_.cache_->Clear();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.metrics_ != nullptr);
      _impl_.metrics_->Clear();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(_impl_.sso_ != nullptr);
      _impl_.sso_->Clear();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(_impl_.sql_ != nullptr);
      _impl_.sql_->Clear();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(_impl_.password_ != nullptr);
      _impl_.password_->Clear();
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(_impl_.file_ != nullptr);
      _impl_.file_->Clear();
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(_impl_.email_ != nullptr);
      _impl_.email_->Clear();
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      ABSL_DCHECK(_impl_.rate_limit_ != nullptr);
      _impl_.rate_limit_->Clear();
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      ABSL_DCHECK(_impl_.privacy_ != nullptr);
      _impl_.privacy_->Clear();
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      ABSL_DCHECK(_impl_.support_ != nullptr);
      _impl_.support_->Clear();
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      ABSL_DCHECK(_impl_.localization_ != nullptr);
      _impl_.localization_->Clear();
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      ABSL_DCHECK(_impl_.ldap_ != nullptr);
      _impl_.ldap_->Clear();
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      ABSL_DCHECK(_impl_.saml_ != nullptr);
      _impl_.saml_->Clear();
    }
  }
  if ((cached_has_bits & 0x001f0000u) != 0) {
    if ((cached_has_bits & 0x00010000u) != 0) {
      ABSL_DCHECK(_impl_.native_app_ != nullptr);
      _impl_.native_app_->Clear();
    }
    if ((cached_has_bits & 0x00020000u) != 0) {
      ABSL_DCHECK(_impl_.meilisearch_ != nullptr);
      _impl_.meilisearch_->Clear();
    }
    if ((cached_has_bits & 0x00040000u) != 0) {
      ABSL_DCHECK(_impl_.bleve_ != nullptr);
      _impl_.bleve_->Clear();
    }
    if ((cached_has_bits & 0x00080000u) != 0) {
      ABSL_DCHECK(_impl_.data_retention_ != nullptr);
      _impl_.data_retention_->Clear();
    }
    if ((cached_has_bits & 0x00100000u) != 0) {
      ABSL_DCHECK(_impl_.image_proxy_ != nullptr);
      _impl_.image_proxy_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Config::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Config& this_ = static_cast<const Config&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Config::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Config& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.Config)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .common.v1.ConfigMain main = 1 [json_name = "main"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.main_, this_._impl_.main_->GetCachedSize(), target,
        stream);
  }

  // .common.v1.ConfigServices services = 2 [json_name = "services"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.services_, this_._impl_.services_->GetCachedSize(), target,
        stream);
  }

  // .common.v1.ConfigSecurity security = 3 [json_name = "security"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.security_, this_._impl_.security_->GetCachedSize(), target,
        stream);
  }

  // .common.v1.CacheConfig cache = 4 [json_name = "cache"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.cache_, this_._impl_.cache_->GetCachedSize(), target,
        stream);
  }

  // .common.v1.ConfigMetrics metrics = 5 [json_name = "metrics"];
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.metrics_, this_._impl_.metrics_->GetCachedSize(), target,
        stream);
  }

  // .common.v1.ConfigSSO sso = 6 [json_name = "sso"];
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.sso_, this_._impl_.sso_->GetCachedSize(), target,
        stream);
  }

  // .common.v1.ConfigSql sql = 7 [json_name = "sql"];
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *this_._impl_.sql_, this_._impl_.sql_->GetCachedSize(), target,
        stream);
  }

  // .common.v1.ConfigPassword password = 8 [json_name = "password"];
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *this_._impl_.password_, this_._impl_.password_->GetCachedSize(), target,
        stream);
  }

  // .common.v1.ConfigFile file = 9 [json_name = "file"];
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, *this_._impl_.file_, this_._impl_.file_->GetCachedSize(), target,
        stream);
  }

  // .common.v1.ConfigEmail email = 10 [json_name = "email"];
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, *this_._impl_.email_, this_._impl_.email_->GetCachedSize(), target,
        stream);
  }

  // .common.v1.ConfigRateLimit rate_limit = 11 [json_name = "rateLimit"];
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, *this_._impl_.rate_limit_, this_._impl_.rate_limit_->GetCachedSize(), target,
        stream);
  }

  // .common.v1.ConfigPrivacy privacy = 12 [json_name = "privacy"];
  if ((cached_has_bits & 0x00000800u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, *this_._impl_.privacy_, this_._impl_.privacy_->GetCachedSize(), target,
        stream);
  }

  // .common.v1.ConfigSupport support = 13 [json_name = "support"];
  if ((cached_has_bits & 0x00001000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        13, *this_._impl_.support_, this_._impl_.support_->GetCachedSize(), target,
        stream);
  }

  // .common.v1.ConfigLocalization localization = 14 [json_name = "localization"];
  if ((cached_has_bits & 0x00002000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        14, *this_._impl_.localization_, this_._impl_.localization_->GetCachedSize(), target,
        stream);
  }

  // .common.v1.ConfigLdap ldap = 15 [json_name = "ldap"];
  if ((cached_has_bits & 0x00004000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        15, *this_._impl_.ldap_, this_._impl_.ldap_->GetCachedSize(), target,
        stream);
  }

  // .common.v1.ConfigSaml saml = 16 [json_name = "saml"];
  if ((cached_has_bits & 0x00008000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        16, *this_._impl_.saml_, this_._impl_.saml_->GetCachedSize(), target,
        stream);
  }

  // .common.v1.ConfigNativeApp native_app = 17 [json_name = "nativeApp"];
  if ((cached_has_bits & 0x00010000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        17, *this_._impl_.native_app_, this_._impl_.native_app_->GetCachedSize(), target,
        stream);
  }

  // .common.v1.ConfigMeilisearch meilisearch = 18 [json_name = "meilisearch"];
  if ((cached_has_bits & 0x00020000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        18, *this_._impl_.meilisearch_, this_._impl_.meilisearch_->GetCachedSize(), target,
        stream);
  }

  // .common.v1.ConfigBleve bleve = 19 [json_name = "bleve"];
  if ((cached_has_bits & 0x00040000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        19, *this_._impl_.bleve_, this_._impl_.bleve_->GetCachedSize(), target,
        stream);
  }

  // .common.v1.ConfigDataRetention data_retention = 20 [json_name = "dataRetention"];
  if ((cached_has_bits & 0x00080000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        20, *this_._impl_.data_retention_, this_._impl_.data_retention_->GetCachedSize(), target,
        stream);
  }

  // .common.v1.ConfigImageProxy image_proxy = 21 [json_name = "imageProxy"];
  if ((cached_has_bits & 0x00100000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        21, *this_._impl_.image_proxy_, this_._impl_.image_proxy_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.Config)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Config::ByteSizeLong(const MessageLite& base) {
  const Config& this_ = static_cast<const Config&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Config::ByteSizeLong() const {
  const Config& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.Config)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // .common.v1.ConfigMain main = 1 [json_name = "main"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.main_);
    }
    // .common.v1.ConfigServices services = 2 [json_name = "services"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.services_);
    }
    // .common.v1.ConfigSecurity security = 3 [json_name = "security"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.security_);
    }
    // .common.v1.CacheConfig cache = 4 [json_name = "cache"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.cache_);
    }
    // .common.v1.ConfigMetrics metrics = 5 [json_name = "metrics"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.metrics_);
    }
    // .common.v1.ConfigSSO sso = 6 [json_name = "sso"];
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.sso_);
    }
    // .common.v1.ConfigSql sql = 7 [json_name = "sql"];
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.sql_);
    }
    // .common.v1.ConfigPassword password = 8 [json_name = "password"];
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.password_);
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    // .common.v1.ConfigFile file = 9 [json_name = "file"];
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.file_);
    }
    // .common.v1.ConfigEmail email = 10 [json_name = "email"];
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.email_);
    }
    // .common.v1.ConfigRateLimit rate_limit = 11 [json_name = "rateLimit"];
    if ((cached_has_bits & 0x00000400u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.rate_limit_);
    }
    // .common.v1.ConfigPrivacy privacy = 12 [json_name = "privacy"];
    if ((cached_has_bits & 0x00000800u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.privacy_);
    }
    // .common.v1.ConfigSupport support = 13 [json_name = "support"];
    if ((cached_has_bits & 0x00001000u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.support_);
    }
    // .common.v1.ConfigLocalization localization = 14 [json_name = "localization"];
    if ((cached_has_bits & 0x00002000u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.localization_);
    }
    // .common.v1.ConfigLdap ldap = 15 [json_name = "ldap"];
    if ((cached_has_bits & 0x00004000u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ldap_);
    }
    // .common.v1.ConfigSaml saml = 16 [json_name = "saml"];
    if ((cached_has_bits & 0x00008000u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.saml_);
    }
  }
  if ((cached_has_bits & 0x001f0000u) != 0) {
    // .common.v1.ConfigNativeApp native_app = 17 [json_name = "nativeApp"];
    if ((cached_has_bits & 0x00010000u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.native_app_);
    }
    // .common.v1.ConfigMeilisearch meilisearch = 18 [json_name = "meilisearch"];
    if ((cached_has_bits & 0x00020000u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.meilisearch_);
    }
    // .common.v1.ConfigBleve bleve = 19 [json_name = "bleve"];
    if ((cached_has_bits & 0x00040000u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.bleve_);
    }
    // .common.v1.ConfigDataRetention data_retention = 20 [json_name = "dataRetention"];
    if ((cached_has_bits & 0x00080000u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_retention_);
    }
    // .common.v1.ConfigImageProxy image_proxy = 21 [json_name = "imageProxy"];
    if ((cached_has_bits & 0x00100000u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.image_proxy_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Config::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Config*>(&to_msg);
  auto& from = static_cast<const Config&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.Config)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.main_ != nullptr);
      if (_this->_impl_.main_ == nullptr) {
        _this->_impl_.main_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.main_);
      } else {
        _this->_impl_.main_->MergeFrom(*from._impl_.main_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.services_ != nullptr);
      if (_this->_impl_.services_ == nullptr) {
        _this->_impl_.services_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.services_);
      } else {
        _this->_impl_.services_->MergeFrom(*from._impl_.services_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.security_ != nullptr);
      if (_this->_impl_.security_ == nullptr) {
        _this->_impl_.security_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.security_);
      } else {
        _this->_impl_.security_->MergeFrom(*from._impl_.security_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.cache_ != nullptr);
      if (_this->_impl_.cache_ == nullptr) {
        _this->_impl_.cache_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.cache_);
      } else {
        _this->_impl_.cache_->MergeFrom(*from._impl_.cache_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.metrics_ != nullptr);
      if (_this->_impl_.metrics_ == nullptr) {
        _this->_impl_.metrics_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.metrics_);
      } else {
        _this->_impl_.metrics_->MergeFrom(*from._impl_.metrics_);
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(from._impl_.sso_ != nullptr);
      if (_this->_impl_.sso_ == nullptr) {
        _this->_impl_.sso_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.sso_);
      } else {
        _this->_impl_.sso_->MergeFrom(*from._impl_.sso_);
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(from._impl_.sql_ != nullptr);
      if (_this->_impl_.sql_ == nullptr) {
        _this->_impl_.sql_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.sql_);
      } else {
        _this->_impl_.sql_->MergeFrom(*from._impl_.sql_);
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(from._impl_.password_ != nullptr);
      if (_this->_impl_.password_ == nullptr) {
        _this->_impl_.password_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.password_);
      } else {
        _this->_impl_.password_->MergeFrom(*from._impl_.password_);
      }
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(from._impl_.file_ != nullptr);
      if (_this->_impl_.file_ == nullptr) {
        _this->_impl_.file_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.file_);
      } else {
        _this->_impl_.file_->MergeFrom(*from._impl_.file_);
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(from._impl_.email_ != nullptr);
      if (_this->_impl_.email_ == nullptr) {
        _this->_impl_.email_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.email_);
      } else {
        _this->_impl_.email_->MergeFrom(*from._impl_.email_);
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      ABSL_DCHECK(from._impl_.rate_limit_ != nullptr);
      if (_this->_impl_.rate_limit_ == nullptr) {
        _this->_impl_.rate_limit_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.rate_limit_);
      } else {
        _this->_impl_.rate_limit_->MergeFrom(*from._impl_.rate_limit_);
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      ABSL_DCHECK(from._impl_.privacy_ != nullptr);
      if (_this->_impl_.privacy_ == nullptr) {
        _this->_impl_.privacy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.privacy_);
      } else {
        _this->_impl_.privacy_->MergeFrom(*from._impl_.privacy_);
      }
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      ABSL_DCHECK(from._impl_.support_ != nullptr);
      if (_this->_impl_.support_ == nullptr) {
        _this->_impl_.support_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.support_);
      } else {
        _this->_impl_.support_->MergeFrom(*from._impl_.support_);
      }
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      ABSL_DCHECK(from._impl_.localization_ != nullptr);
      if (_this->_impl_.localization_ == nullptr) {
        _this->_impl_.localization_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.localization_);
      } else {
        _this->_impl_.localization_->MergeFrom(*from._impl_.localization_);
      }
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      ABSL_DCHECK(from._impl_.ldap_ != nullptr);
      if (_this->_impl_.ldap_ == nullptr) {
        _this->_impl_.ldap_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ldap_);
      } else {
        _this->_impl_.ldap_->MergeFrom(*from._impl_.ldap_);
      }
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      ABSL_DCHECK(from._impl_.saml_ != nullptr);
      if (_this->_impl_.saml_ == nullptr) {
        _this->_impl_.saml_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.saml_);
      } else {
        _this->_impl_.saml_->MergeFrom(*from._impl_.saml_);
      }
    }
  }
  if ((cached_has_bits & 0x001f0000u) != 0) {
    if ((cached_has_bits & 0x00010000u) != 0) {
      ABSL_DCHECK(from._impl_.native_app_ != nullptr);
      if (_this->_impl_.native_app_ == nullptr) {
        _this->_impl_.native_app_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.native_app_);
      } else {
        _this->_impl_.native_app_->MergeFrom(*from._impl_.native_app_);
      }
    }
    if ((cached_has_bits & 0x00020000u) != 0) {
      ABSL_DCHECK(from._impl_.meilisearch_ != nullptr);
      if (_this->_impl_.meilisearch_ == nullptr) {
        _this->_impl_.meilisearch_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.meilisearch_);
      } else {
        _this->_impl_.meilisearch_->MergeFrom(*from._impl_.meilisearch_);
      }
    }
    if ((cached_has_bits & 0x00040000u) != 0) {
      ABSL_DCHECK(from._impl_.bleve_ != nullptr);
      if (_this->_impl_.bleve_ == nullptr) {
        _this->_impl_.bleve_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.bleve_);
      } else {
        _this->_impl_.bleve_->MergeFrom(*from._impl_.bleve_);
      }
    }
    if ((cached_has_bits & 0x00080000u) != 0) {
      ABSL_DCHECK(from._impl_.data_retention_ != nullptr);
      if (_this->_impl_.data_retention_ == nullptr) {
        _this->_impl_.data_retention_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.data_retention_);
      } else {
        _this->_impl_.data_retention_->MergeFrom(*from._impl_.data_retention_);
      }
    }
    if ((cached_has_bits & 0x00100000u) != 0) {
      ABSL_DCHECK(from._impl_.image_proxy_ != nullptr);
      if (_this->_impl_.image_proxy_ == nullptr) {
        _this->_impl_.image_proxy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.image_proxy_);
      } else {
        _this->_impl_.image_proxy_->MergeFrom(*from._impl_.image_proxy_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Config::InternalSwap(Config* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, _impl_.image_proxy_)
      + sizeof(Config::_impl_.image_proxy_)
      - PROTOBUF_FIELD_OFFSET(Config, _impl_.main_)>(
          reinterpret_cast<char*>(&_impl_.main_),
          reinterpret_cast<char*>(&other->_impl_.main_));
}

::google::protobuf::Metadata Config::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigGetRequest::_Internal {
 public:
};

ConfigGetRequest::ConfigGetRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, ConfigGetRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigGetRequest)
}
ConfigGetRequest::ConfigGetRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigGetRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, ConfigGetRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigGetRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigGetRequest)
}

inline void* PROTOBUF_NONNULL ConfigGetRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigGetRequest(arena);
}
constexpr auto ConfigGetRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ConfigGetRequest),
                                            alignof(ConfigGetRequest));
}
constexpr auto ConfigGetRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigGetRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigGetRequest::MergeImpl,
          ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<ConfigGetRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigGetRequest::SharedDtor,
          ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<ConfigGetRequest>(), &ConfigGetRequest::ByteSizeLong,
              &ConfigGetRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigGetRequest, _impl_._cached_size_),
          false,
      },
      &ConfigGetRequest::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigGetRequest_class_data_ =
        ConfigGetRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigGetRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigGetRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigGetRequest_class_data_.tc_table);
  return ConfigGetRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2>
ConfigGetRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ConfigGetRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigGetRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, // no field_entries, or aux_entries
  {{
  }},
};







::google::protobuf::Metadata ConfigGetRequest::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigGetResponse::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::common::v1::ConfigGetResponse, _impl_._oneof_case_);
};

void ConfigGetResponse::set_allocated_data(::common::v1::Config* PROTOBUF_NULLABLE data) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (data) {
    ::google::protobuf::Arena* submessage_arena = data->GetArena();
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(message_arena, data, submessage_arena);
    }
    set_has_data();
    _impl_.response_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigGetResponse.data)
}
void ConfigGetResponse::set_allocated_error(::shared::v1::AppError* PROTOBUF_NULLABLE error) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (error) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(error)->GetArena();
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(message_arena, error, submessage_arena);
    }
    set_has_error();
    _impl_.response_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigGetResponse.error)
}
void ConfigGetResponse::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() == kError) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.error_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.error_);
    }
    clear_has_response();
  }
}
ConfigGetResponse::ConfigGetResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigGetResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigGetResponse)
}
PROTOBUF_NDEBUG_INLINE ConfigGetResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::ConfigGetResponse& from_msg)
      : response_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

ConfigGetResponse::ConfigGetResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigGetResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigGetResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigGetResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (response_case()) {
    case RESPONSE_NOT_SET:
      break;
      case kData:
        _impl_.response_.data_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.response_.data_);
        break;
      case kError:
        _impl_.response_.error_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.response_.error_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigGetResponse)
}
PROTOBUF_NDEBUG_INLINE ConfigGetResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : response_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void ConfigGetResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ConfigGetResponse::~ConfigGetResponse() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigGetResponse)
  SharedDtor(*this);
}
inline void ConfigGetResponse::SharedDtor(MessageLite& self) {
  ConfigGetResponse& this_ = static_cast<ConfigGetResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_response()) {
    this_.clear_response();
  }
  this_._impl_.~Impl_();
}

void ConfigGetResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:common.v1.ConfigGetResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (response_case()) {
    case kData: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.data_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.data_);
      }
      break;
    }
    case kError: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.error_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.error_);
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}


inline void* PROTOBUF_NONNULL ConfigGetResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigGetResponse(arena);
}
constexpr auto ConfigGetResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ConfigGetResponse),
                                            alignof(ConfigGetResponse));
}
constexpr auto ConfigGetResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigGetResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigGetResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigGetResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigGetResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigGetResponse>(), &ConfigGetResponse::ByteSizeLong,
              &ConfigGetResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigGetResponse, _impl_._cached_size_),
          false,
      },
      &ConfigGetResponse::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigGetResponse_class_data_ =
        ConfigGetResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigGetResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigGetResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigGetResponse_class_data_.tc_table);
  return ConfigGetResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2>
ConfigGetResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ConfigGetResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigGetResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .common.v1.Config data = 1 [json_name = "data"];
    {PROTOBUF_FIELD_OFFSET(ConfigGetResponse, _impl_.response_.data_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .shared.v1.AppError error = 2 [json_name = "error"];
    {PROTOBUF_FIELD_OFFSET(ConfigGetResponse, _impl_.response_.error_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::common::v1::Config>()},
      {::_pbi::TcParser::GetTable<::shared::v1::AppError>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void ConfigGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigGetResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigGetResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigGetResponse& this_ = static_cast<const ConfigGetResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigGetResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigGetResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigGetResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (this_.response_case()) {
    case kData: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, *this_._impl_.response_.data_, this_._impl_.response_.data_->GetCachedSize(), target,
          stream);
      break;
    }
    case kError: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *this_._impl_.response_.error_, this_._impl_.response_.error_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigGetResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigGetResponse::ByteSizeLong(const MessageLite& base) {
  const ConfigGetResponse& this_ = static_cast<const ConfigGetResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigGetResponse::ByteSizeLong() const {
  const ConfigGetResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigGetResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  switch (this_.response_case()) {
    // .common.v1.Config data = 1 [json_name = "data"];
    case kData: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.response_.data_);
      break;
    }
    // .shared.v1.AppError error = 2 [json_name = "error"];
    case kError: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.response_.error_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigGetResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigGetResponse*>(&to_msg);
  auto& from = static_cast<const ConfigGetResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigGetResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_response();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kData: {
        if (oneof_needs_init) {
          _this->_impl_.response_.data_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.response_.data_);
        } else {
          _this->_impl_.response_.data_->MergeFrom(*from._impl_.response_.data_);
        }
        break;
      }
      case kError: {
        if (oneof_needs_init) {
          _this->_impl_.response_.error_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.response_.error_);
        } else {
          _this->_impl_.response_.error_->MergeFrom(*from._impl_.response_.error_);
        }
        break;
      }
      case RESPONSE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigGetResponse::CopyFrom(const ConfigGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigGetResponse::InternalSwap(ConfigGetResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata ConfigGetResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigUpdateRequest::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConfigUpdateRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConfigUpdateRequest, _impl_._has_bits_);
};

ConfigUpdateRequest::ConfigUpdateRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigUpdateRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigUpdateRequest)
}
PROTOBUF_NDEBUG_INLINE ConfigUpdateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::ConfigUpdateRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ConfigUpdateRequest::ConfigUpdateRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigUpdateRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigUpdateRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigUpdateRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.config_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.config_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigUpdateRequest)
}
PROTOBUF_NDEBUG_INLINE ConfigUpdateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void ConfigUpdateRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.config_ = {};
}
ConfigUpdateRequest::~ConfigUpdateRequest() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigUpdateRequest)
  SharedDtor(*this);
}
inline void ConfigUpdateRequest::SharedDtor(MessageLite& self) {
  ConfigUpdateRequest& this_ = static_cast<ConfigUpdateRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.config_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConfigUpdateRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigUpdateRequest(arena);
}
constexpr auto ConfigUpdateRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ConfigUpdateRequest),
                                            alignof(ConfigUpdateRequest));
}
constexpr auto ConfigUpdateRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigUpdateRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigUpdateRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigUpdateRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigUpdateRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigUpdateRequest>(), &ConfigUpdateRequest::ByteSizeLong,
              &ConfigUpdateRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigUpdateRequest, _impl_._cached_size_),
          false,
      },
      &ConfigUpdateRequest::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigUpdateRequest_class_data_ =
        ConfigUpdateRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigUpdateRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigUpdateRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigUpdateRequest_class_data_.tc_table);
  return ConfigUpdateRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
ConfigUpdateRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigUpdateRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ConfigUpdateRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigUpdateRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .common.v1.Config config = 1 [json_name = "config"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigUpdateRequest, _impl_.config_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .common.v1.Config config = 1 [json_name = "config"];
    {PROTOBUF_FIELD_OFFSET(ConfigUpdateRequest, _impl_.config_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::common::v1::Config>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void ConfigUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigUpdateRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.config_ != nullptr);
    _impl_.config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigUpdateRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigUpdateRequest& this_ = static_cast<const ConfigUpdateRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigUpdateRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigUpdateRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigUpdateRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .common.v1.Config config = 1 [json_name = "config"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.config_, this_._impl_.config_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigUpdateRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigUpdateRequest::ByteSizeLong(const MessageLite& base) {
  const ConfigUpdateRequest& this_ = static_cast<const ConfigUpdateRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigUpdateRequest::ByteSizeLong() const {
  const ConfigUpdateRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigUpdateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // .common.v1.Config config = 1 [json_name = "config"];
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.config_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigUpdateRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigUpdateRequest*>(&to_msg);
  auto& from = static_cast<const ConfigUpdateRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigUpdateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.config_ != nullptr);
    if (_this->_impl_.config_ == nullptr) {
      _this->_impl_.config_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.config_);
    } else {
      _this->_impl_.config_->MergeFrom(*from._impl_.config_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigUpdateRequest::CopyFrom(const ConfigUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigUpdateRequest::InternalSwap(ConfigUpdateRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.config_, other->_impl_.config_);
}

::google::protobuf::Metadata ConfigUpdateRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigUpdateResponse::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::common::v1::ConfigUpdateResponse, _impl_._oneof_case_);
};

void ConfigUpdateResponse::set_allocated_data(::common::v1::Config* PROTOBUF_NULLABLE data) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (data) {
    ::google::protobuf::Arena* submessage_arena = data->GetArena();
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(message_arena, data, submessage_arena);
    }
    set_has_data();
    _impl_.response_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigUpdateResponse.data)
}
void ConfigUpdateResponse::set_allocated_error(::shared::v1::AppError* PROTOBUF_NULLABLE error) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (error) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(error)->GetArena();
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(message_arena, error, submessage_arena);
    }
    set_has_error();
    _impl_.response_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigUpdateResponse.error)
}
void ConfigUpdateResponse::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() == kError) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.error_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.error_);
    }
    clear_has_response();
  }
}
ConfigUpdateResponse::ConfigUpdateResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigUpdateResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigUpdateResponse)
}
PROTOBUF_NDEBUG_INLINE ConfigUpdateResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::ConfigUpdateResponse& from_msg)
      : response_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

ConfigUpdateResponse::ConfigUpdateResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigUpdateResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigUpdateResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigUpdateResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (response_case()) {
    case RESPONSE_NOT_SET:
      break;
      case kData:
        _impl_.response_.data_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.response_.data_);
        break;
      case kError:
        _impl_.response_.error_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.response_.error_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigUpdateResponse)
}
PROTOBUF_NDEBUG_INLINE ConfigUpdateResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : response_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void ConfigUpdateResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ConfigUpdateResponse::~ConfigUpdateResponse() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigUpdateResponse)
  SharedDtor(*this);
}
inline void ConfigUpdateResponse::SharedDtor(MessageLite& self) {
  ConfigUpdateResponse& this_ = static_cast<ConfigUpdateResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_response()) {
    this_.clear_response();
  }
  this_._impl_.~Impl_();
}

void ConfigUpdateResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:common.v1.ConfigUpdateResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (response_case()) {
    case kData: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.data_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.data_);
      }
      break;
    }
    case kError: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.error_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.error_);
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}


inline void* PROTOBUF_NONNULL ConfigUpdateResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigUpdateResponse(arena);
}
constexpr auto ConfigUpdateResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ConfigUpdateResponse),
                                            alignof(ConfigUpdateResponse));
}
constexpr auto ConfigUpdateResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigUpdateResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigUpdateResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigUpdateResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigUpdateResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigUpdateResponse>(), &ConfigUpdateResponse::ByteSizeLong,
              &ConfigUpdateResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigUpdateResponse, _impl_._cached_size_),
          false,
      },
      &ConfigUpdateResponse::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigUpdateResponse_class_data_ =
        ConfigUpdateResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigUpdateResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigUpdateResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigUpdateResponse_class_data_.tc_table);
  return ConfigUpdateResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2>
ConfigUpdateResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ConfigUpdateResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigUpdateResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .common.v1.Config data = 1 [json_name = "data"];
    {PROTOBUF_FIELD_OFFSET(ConfigUpdateResponse, _impl_.response_.data_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .shared.v1.AppError error = 2 [json_name = "error"];
    {PROTOBUF_FIELD_OFFSET(ConfigUpdateResponse, _impl_.response_.error_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::common::v1::Config>()},
      {::_pbi::TcParser::GetTable<::shared::v1::AppError>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void ConfigUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigUpdateResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigUpdateResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigUpdateResponse& this_ = static_cast<const ConfigUpdateResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigUpdateResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigUpdateResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigUpdateResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (this_.response_case()) {
    case kData: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, *this_._impl_.response_.data_, this_._impl_.response_.data_->GetCachedSize(), target,
          stream);
      break;
    }
    case kError: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *this_._impl_.response_.error_, this_._impl_.response_.error_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigUpdateResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigUpdateResponse::ByteSizeLong(const MessageLite& base) {
  const ConfigUpdateResponse& this_ = static_cast<const ConfigUpdateResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigUpdateResponse::ByteSizeLong() const {
  const ConfigUpdateResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigUpdateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  switch (this_.response_case()) {
    // .common.v1.Config data = 1 [json_name = "data"];
    case kData: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.response_.data_);
      break;
    }
    // .shared.v1.AppError error = 2 [json_name = "error"];
    case kError: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.response_.error_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigUpdateResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigUpdateResponse*>(&to_msg);
  auto& from = static_cast<const ConfigUpdateResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigUpdateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_response();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kData: {
        if (oneof_needs_init) {
          _this->_impl_.response_.data_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.response_.data_);
        } else {
          _this->_impl_.response_.data_->MergeFrom(*from._impl_.response_.data_);
        }
        break;
      }
      case kError: {
        if (oneof_needs_init) {
          _this->_impl_.response_.error_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.response_.error_);
        } else {
          _this->_impl_.response_.error_->MergeFrom(*from._impl_.response_.error_);
        }
        break;
      }
      case RESPONSE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigUpdateResponse::CopyFrom(const ConfigUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigUpdateResponse::InternalSwap(ConfigUpdateResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata ConfigUpdateResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigListenerResponse::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::common::v1::ConfigListenerResponse, _impl_._oneof_case_);
};

void ConfigListenerResponse::set_allocated_data(::common::v1::Config* PROTOBUF_NULLABLE data) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (data) {
    ::google::protobuf::Arena* submessage_arena = data->GetArena();
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(message_arena, data, submessage_arena);
    }
    set_has_data();
    _impl_.response_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigListenerResponse.data)
}
void ConfigListenerResponse::set_allocated_error(::shared::v1::AppError* PROTOBUF_NULLABLE error) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (error) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(error)->GetArena();
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(message_arena, error, submessage_arena);
    }
    set_has_error();
    _impl_.response_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:common.v1.ConfigListenerResponse.error)
}
void ConfigListenerResponse::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() == kError) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.error_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.error_);
    }
    clear_has_response();
  }
}
ConfigListenerResponse::ConfigListenerResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigListenerResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigListenerResponse)
}
PROTOBUF_NDEBUG_INLINE ConfigListenerResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::ConfigListenerResponse& from_msg)
      : response_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

ConfigListenerResponse::ConfigListenerResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigListenerResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigListenerResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigListenerResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (response_case()) {
    case RESPONSE_NOT_SET:
      break;
      case kData:
        _impl_.response_.data_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.response_.data_);
        break;
      case kError:
        _impl_.response_.error_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.response_.error_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigListenerResponse)
}
PROTOBUF_NDEBUG_INLINE ConfigListenerResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : response_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void ConfigListenerResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ConfigListenerResponse::~ConfigListenerResponse() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigListenerResponse)
  SharedDtor(*this);
}
inline void ConfigListenerResponse::SharedDtor(MessageLite& self) {
  ConfigListenerResponse& this_ = static_cast<ConfigListenerResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_response()) {
    this_.clear_response();
  }
  this_._impl_.~Impl_();
}

void ConfigListenerResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:common.v1.ConfigListenerResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (response_case()) {
    case kData: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.data_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.data_);
      }
      break;
    }
    case kError: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.error_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.error_);
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}


inline void* PROTOBUF_NONNULL ConfigListenerResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigListenerResponse(arena);
}
constexpr auto ConfigListenerResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ConfigListenerResponse),
                                            alignof(ConfigListenerResponse));
}
constexpr auto ConfigListenerResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigListenerResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigListenerResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigListenerResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigListenerResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigListenerResponse>(), &ConfigListenerResponse::ByteSizeLong,
              &ConfigListenerResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigListenerResponse, _impl_._cached_size_),
          false,
      },
      &ConfigListenerResponse::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigListenerResponse_class_data_ =
        ConfigListenerResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigListenerResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigListenerResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigListenerResponse_class_data_.tc_table);
  return ConfigListenerResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2>
ConfigListenerResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ConfigListenerResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigListenerResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .common.v1.Config data = 1 [json_name = "data"];
    {PROTOBUF_FIELD_OFFSET(ConfigListenerResponse, _impl_.response_.data_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .shared.v1.AppError error = 2 [json_name = "error"];
    {PROTOBUF_FIELD_OFFSET(ConfigListenerResponse, _impl_.response_.error_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::common::v1::Config>()},
      {::_pbi::TcParser::GetTable<::shared::v1::AppError>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void ConfigListenerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigListenerResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigListenerResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigListenerResponse& this_ = static_cast<const ConfigListenerResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigListenerResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigListenerResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigListenerResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (this_.response_case()) {
    case kData: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, *this_._impl_.response_.data_, this_._impl_.response_.data_->GetCachedSize(), target,
          stream);
      break;
    }
    case kError: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *this_._impl_.response_.error_, this_._impl_.response_.error_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigListenerResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigListenerResponse::ByteSizeLong(const MessageLite& base) {
  const ConfigListenerResponse& this_ = static_cast<const ConfigListenerResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigListenerResponse::ByteSizeLong() const {
  const ConfigListenerResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigListenerResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  switch (this_.response_case()) {
    // .common.v1.Config data = 1 [json_name = "data"];
    case kData: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.response_.data_);
      break;
    }
    // .shared.v1.AppError error = 2 [json_name = "error"];
    case kError: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.response_.error_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigListenerResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigListenerResponse*>(&to_msg);
  auto& from = static_cast<const ConfigListenerResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigListenerResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_response();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kData: {
        if (oneof_needs_init) {
          _this->_impl_.response_.data_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.response_.data_);
        } else {
          _this->_impl_.response_.data_->MergeFrom(*from._impl_.response_.data_);
        }
        break;
      }
      case kError: {
        if (oneof_needs_init) {
          _this->_impl_.response_.error_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.response_.error_);
        } else {
          _this->_impl_.response_.error_->MergeFrom(*from._impl_.response_.error_);
        }
        break;
      }
      case RESPONSE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigListenerResponse::CopyFrom(const ConfigListenerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigListenerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigListenerResponse::InternalSwap(ConfigListenerResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata ConfigListenerResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConfigListenerRequest::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConfigListenerRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConfigListenerRequest, _impl_._has_bits_);
};

ConfigListenerRequest::ConfigListenerRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigListenerRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.v1.ConfigListenerRequest)
}
PROTOBUF_NDEBUG_INLINE ConfigListenerRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::common::v1::ConfigListenerRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        client_id_(arena, from.client_id_) {}

ConfigListenerRequest::ConfigListenerRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConfigListenerRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConfigListenerRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigListenerRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:common.v1.ConfigListenerRequest)
}
PROTOBUF_NDEBUG_INLINE ConfigListenerRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        client_id_(arena) {}

inline void ConfigListenerRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ConfigListenerRequest::~ConfigListenerRequest() {
  // @@protoc_insertion_point(destructor:common.v1.ConfigListenerRequest)
  SharedDtor(*this);
}
inline void ConfigListenerRequest::SharedDtor(MessageLite& self) {
  ConfigListenerRequest& this_ = static_cast<ConfigListenerRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.client_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConfigListenerRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConfigListenerRequest(arena);
}
constexpr auto ConfigListenerRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ConfigListenerRequest),
                                            alignof(ConfigListenerRequest));
}
constexpr auto ConfigListenerRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConfigListenerRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConfigListenerRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConfigListenerRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConfigListenerRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConfigListenerRequest>(), &ConfigListenerRequest::ByteSizeLong,
              &ConfigListenerRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConfigListenerRequest, _impl_._cached_size_),
          false,
      },
      &ConfigListenerRequest::kDescriptorMethods,
      &descriptor_table_common_2fv1_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConfigListenerRequest_class_data_ =
        ConfigListenerRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConfigListenerRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConfigListenerRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConfigListenerRequest_class_data_.tc_table);
  return ConfigListenerRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 49, 2>
ConfigListenerRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigListenerRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ConfigListenerRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::common::v1::ConfigListenerRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string client_id = 1 [json_name = "clientId"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigListenerRequest, _impl_.client_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string client_id = 1 [json_name = "clientId"];
    {PROTOBUF_FIELD_OFFSET(ConfigListenerRequest, _impl_.client_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\37\11\0\0\0\0\0\0"
    "common.v1.ConfigListenerRequest"
    "client_id"
  }},
};
PROTOBUF_NOINLINE void ConfigListenerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:common.v1.ConfigListenerRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.client_id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConfigListenerRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConfigListenerRequest& this_ = static_cast<const ConfigListenerRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConfigListenerRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConfigListenerRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:common.v1.ConfigListenerRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string client_id = 1 [json_name = "clientId"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_client_id().empty()) {
      const ::std::string& _s = this_._internal_client_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "common.v1.ConfigListenerRequest.client_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.v1.ConfigListenerRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConfigListenerRequest::ByteSizeLong(const MessageLite& base) {
  const ConfigListenerRequest& this_ = static_cast<const ConfigListenerRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConfigListenerRequest::ByteSizeLong() const {
  const ConfigListenerRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:common.v1.ConfigListenerRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // string client_id = 1 [json_name = "clientId"];
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_client_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_client_id());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConfigListenerRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigListenerRequest*>(&to_msg);
  auto& from = static_cast<const ConfigListenerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.v1.ConfigListenerRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (!from._internal_client_id().empty()) {
      _this->_internal_set_client_id(from._internal_client_id());
    } else {
      if (_this->_impl_.client_id_.IsDefault()) {
        _this->_internal_set_client_id("");
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigListenerRequest::CopyFrom(const ConfigListenerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.v1.ConfigListenerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigListenerRequest::InternalSwap(ConfigListenerRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_id_, &other->_impl_.client_id_, arena);
}

::google::protobuf::Metadata ConfigListenerRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace common
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_common_2fv1_2fconfig_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
