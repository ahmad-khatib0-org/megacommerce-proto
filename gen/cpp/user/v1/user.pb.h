// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: user/v1/user.proto
// Protobuf C++ Version: 6.31.1

#ifndef user_2fv1_2fuser_2eproto_2epb_2eh
#define user_2fv1_2fuser_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_type_handler.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field.h"
#include "google/protobuf/unknown_field_set.h"
#include "user/v1/supplier.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_user_2fv1_2fuser_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_user_2fv1_2fuser_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_user_2fv1_2fuser_2eproto;
}  // extern "C"
namespace user {
namespace v1 {
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull User_class_data_;
class User_NotifyPropsEntry_DoNotUse;
struct User_NotifyPropsEntry_DoNotUseDefaultTypeInternal;
extern User_NotifyPropsEntry_DoNotUseDefaultTypeInternal _User_NotifyPropsEntry_DoNotUse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull User_NotifyPropsEntry_DoNotUse_class_data_;
class User_PropsEntry_DoNotUse;
struct User_PropsEntry_DoNotUseDefaultTypeInternal;
extern User_PropsEntry_DoNotUseDefaultTypeInternal _User_PropsEntry_DoNotUse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull User_PropsEntry_DoNotUse_class_data_;
}  // namespace v1
}  // namespace user
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace user {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class User_PropsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<std::string, std::string,
                             ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                             ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType =
      ::google::protobuf::internal::MapEntry<std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  User_PropsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR User_PropsEntry_DoNotUse(::google::protobuf::internal::ConstantInitialized);
  explicit User_PropsEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr const void* PROTOBUF_NONNULL internal_default_instance() {
    return &_User_PropsEntry_DoNotUse_default_instance_;
  }


  static constexpr auto InternalGenerateClassData_();

 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_user_2fv1_2fuser_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 40,
                                   2>
      _table_;

  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();
};
extern const ::google::protobuf::internal::ClassDataFull User_PropsEntry_DoNotUse_class_data_;
// -------------------------------------------------------------------

class User_NotifyPropsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<std::string, std::string,
                             ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                             ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType =
      ::google::protobuf::internal::MapEntry<std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  User_NotifyPropsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR User_NotifyPropsEntry_DoNotUse(::google::protobuf::internal::ConstantInitialized);
  explicit User_NotifyPropsEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr const void* PROTOBUF_NONNULL internal_default_instance() {
    return &_User_NotifyPropsEntry_DoNotUse_default_instance_;
  }


  static constexpr auto InternalGenerateClassData_();

 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_user_2fv1_2fuser_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 46,
                                   2>
      _table_;

  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();
};
extern const ::google::protobuf::internal::ClassDataFull User_NotifyPropsEntry_DoNotUse_class_data_;
// -------------------------------------------------------------------

class User final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:user.v1.User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(User* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(User));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR User(::google::protobuf::internal::ConstantInitialized);

  inline User(const User& from) : User(nullptr, from) {}
  inline User(User&& from) noexcept
      : User(nullptr, ::std::move(from)) {}
  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *reinterpret_cast<const User*>(
        &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(User& a, User& b) { a.Swap(&b); }
  inline void Swap(User* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<User>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const User& from) { User::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(User* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "user.v1.User"; }

 protected:
  explicit User(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  User(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const User& from);
  User(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, User&& from) noexcept
      : User(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRolesFieldNumber = 12,
    kPropsFieldNumber = 13,
    kNotifyPropsFieldNumber = 14,
    kIdFieldNumber = 1,
    kUsernameFieldNumber = 2,
    kFirstNameFieldNumber = 3,
    kLastNameFieldNumber = 4,
    kEmailFieldNumber = 5,
    kUserTypeFieldNumber = 6,
    kMembershipFieldNumber = 7,
    kPasswordFieldNumber = 9,
    kAuthDataFieldNumber = 10,
    kAuthServiceFieldNumber = 11,
    kLocaleFieldNumber = 18,
    kMfaSecretFieldNumber = 20,
    kIsEmailVerifiedFieldNumber = 8,
    kMfaActiveFieldNumber = 19,
    kFailedAttemptsFieldNumber = 17,
    kLastPasswordUpdateFieldNumber = 15,
    kLastPictureUpdateFieldNumber = 16,
    kLastActivityAtFieldNumber = 21,
    kLastLoginFieldNumber = 22,
    kCreatedAtFieldNumber = 23,
    kUpdatedAtFieldNumber = 24,
    kDeletedAtFieldNumber = 25,
  };
  // repeated string roles = 12 [json_name = "roles"];
  int roles_size() const;
  private:
  int _internal_roles_size() const;

  public:
  void clear_roles() ;
  const ::std::string& roles(int index) const;
  ::std::string* PROTOBUF_NONNULL mutable_roles(int index);
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_roles(int index, Arg_&& value, Args_... args);
  ::std::string* PROTOBUF_NONNULL add_roles();
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void add_roles(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<::std::string>& roles() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL mutable_roles();

  private:
  const ::google::protobuf::RepeatedPtrField<::std::string>& _internal_roles() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL _internal_mutable_roles();

  public:
  // map<string, string> props = 13 [json_name = "props"];
  int props_size() const;
  private:
  int _internal_props_size() const;

  public:
  void clear_props() ;
  const ::google::protobuf::Map<std::string, std::string>& props() const;
  ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL mutable_props();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_props() const;
  ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL _internal_mutable_props();

  public:
  // map<string, string> notify_props = 14 [json_name = "notifyProps"];
  int notify_props_size() const;
  private:
  int _internal_notify_props_size() const;

  public:
  void clear_notify_props() ;
  const ::google::protobuf::Map<std::string, std::string>& notify_props() const;
  ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL mutable_notify_props();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_notify_props() const;
  ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL _internal_mutable_notify_props();

  public:
  // optional string id = 1 [json_name = "id"];
  bool has_id() const;
  void clear_id() ;
  const ::std::string& id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_id();
  void set_allocated_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_id();

  public:
  // optional string username = 2 [json_name = "username"];
  bool has_username() const;
  void clear_username() ;
  const ::std::string& username() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_username();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_username();
  void set_allocated_username(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_username() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_username(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_username();

  public:
  // optional string first_name = 3 [json_name = "firstName"];
  bool has_first_name() const;
  void clear_first_name() ;
  const ::std::string& first_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_first_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_first_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_first_name();
  void set_allocated_first_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_first_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_first_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_first_name();

  public:
  // optional string last_name = 4 [json_name = "lastName"];
  bool has_last_name() const;
  void clear_last_name() ;
  const ::std::string& last_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_last_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_last_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_last_name();
  void set_allocated_last_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_last_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_last_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_last_name();

  public:
  // optional string email = 5 [json_name = "email"];
  bool has_email() const;
  void clear_email() ;
  const ::std::string& email() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_email();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_email();
  void set_allocated_email(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_email() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_email(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_email();

  public:
  // optional string user_type = 6 [json_name = "userType"];
  bool has_user_type() const;
  void clear_user_type() ;
  const ::std::string& user_type() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_user_type(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_user_type();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_user_type();
  void set_allocated_user_type(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_user_type() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_user_type(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_user_type();

  public:
  // optional string membership = 7 [json_name = "membership"];
  bool has_membership() const;
  void clear_membership() ;
  const ::std::string& membership() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_membership(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_membership();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_membership();
  void set_allocated_membership(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_membership() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_membership(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_membership();

  public:
  // optional string password = 9 [json_name = "password"];
  bool has_password() const;
  void clear_password() ;
  const ::std::string& password() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_password();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_password();
  void set_allocated_password(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_password() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_password(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_password();

  public:
  // optional string auth_data = 10 [json_name = "authData"];
  bool has_auth_data() const;
  void clear_auth_data() ;
  const ::std::string& auth_data() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_auth_data(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_auth_data();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_auth_data();
  void set_allocated_auth_data(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_auth_data() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_auth_data(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_auth_data();

  public:
  // optional string auth_service = 11 [json_name = "authService"];
  bool has_auth_service() const;
  void clear_auth_service() ;
  const ::std::string& auth_service() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_auth_service(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_auth_service();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_auth_service();
  void set_allocated_auth_service(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_auth_service() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_auth_service(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_auth_service();

  public:
  // optional string locale = 18 [json_name = "locale"];
  bool has_locale() const;
  void clear_locale() ;
  const ::std::string& locale() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_locale(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_locale();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_locale();
  void set_allocated_locale(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_locale() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_locale(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_locale();

  public:
  // optional string mfa_secret = 20 [json_name = "mfaSecret"];
  bool has_mfa_secret() const;
  void clear_mfa_secret() ;
  const ::std::string& mfa_secret() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_mfa_secret(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_mfa_secret();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_mfa_secret();
  void set_allocated_mfa_secret(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_mfa_secret() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_mfa_secret(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_mfa_secret();

  public:
  // optional bool is_email_verified = 8 [json_name = "isEmailVerified"];
  bool has_is_email_verified() const;
  void clear_is_email_verified() ;
  bool is_email_verified() const;
  void set_is_email_verified(bool value);

  private:
  bool _internal_is_email_verified() const;
  void _internal_set_is_email_verified(bool value);

  public:
  // optional bool mfa_active = 19 [json_name = "mfaActive"];
  bool has_mfa_active() const;
  void clear_mfa_active() ;
  bool mfa_active() const;
  void set_mfa_active(bool value);

  private:
  bool _internal_mfa_active() const;
  void _internal_set_mfa_active(bool value);

  public:
  // optional int32 failed_attempts = 17 [json_name = "failedAttempts"];
  bool has_failed_attempts() const;
  void clear_failed_attempts() ;
  ::int32_t failed_attempts() const;
  void set_failed_attempts(::int32_t value);

  private:
  ::int32_t _internal_failed_attempts() const;
  void _internal_set_failed_attempts(::int32_t value);

  public:
  // optional int64 last_password_update = 15 [json_name = "lastPasswordUpdate"];
  bool has_last_password_update() const;
  void clear_last_password_update() ;
  ::int64_t last_password_update() const;
  void set_last_password_update(::int64_t value);

  private:
  ::int64_t _internal_last_password_update() const;
  void _internal_set_last_password_update(::int64_t value);

  public:
  // optional int64 last_picture_update = 16 [json_name = "lastPictureUpdate"];
  bool has_last_picture_update() const;
  void clear_last_picture_update() ;
  ::int64_t last_picture_update() const;
  void set_last_picture_update(::int64_t value);

  private:
  ::int64_t _internal_last_picture_update() const;
  void _internal_set_last_picture_update(::int64_t value);

  public:
  // optional int64 last_activity_at = 21 [json_name = "lastActivityAt"];
  bool has_last_activity_at() const;
  void clear_last_activity_at() ;
  ::int64_t last_activity_at() const;
  void set_last_activity_at(::int64_t value);

  private:
  ::int64_t _internal_last_activity_at() const;
  void _internal_set_last_activity_at(::int64_t value);

  public:
  // optional int64 last_login = 22 [json_name = "lastLogin"];
  bool has_last_login() const;
  void clear_last_login() ;
  ::int64_t last_login() const;
  void set_last_login(::int64_t value);

  private:
  ::int64_t _internal_last_login() const;
  void _internal_set_last_login(::int64_t value);

  public:
  // optional int64 created_at = 23 [json_name = "createdAt"];
  bool has_created_at() const;
  void clear_created_at() ;
  ::int64_t created_at() const;
  void set_created_at(::int64_t value);

  private:
  ::int64_t _internal_created_at() const;
  void _internal_set_created_at(::int64_t value);

  public:
  // optional int64 updated_at = 24 [json_name = "updatedAt"];
  bool has_updated_at() const;
  void clear_updated_at() ;
  ::int64_t updated_at() const;
  void set_updated_at(::int64_t value);

  private:
  ::int64_t _internal_updated_at() const;
  void _internal_set_updated_at(::int64_t value);

  public:
  // optional int64 deleted_at = 25 [json_name = "deletedAt"];
  bool has_deleted_at() const;
  void clear_deleted_at() ;
  ::int64_t deleted_at() const;
  void set_deleted_at(::int64_t value);

  private:
  ::int64_t _internal_deleted_at() const;
  void _internal_set_deleted_at(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:user.v1.User)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 25,
                                   2, 165,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const User& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<::std::string> roles_;
    ::google::protobuf::internal::MapField<User_PropsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        props_;
    ::google::protobuf::internal::MapField<User_NotifyPropsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        notify_props_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr first_name_;
    ::google::protobuf::internal::ArenaStringPtr last_name_;
    ::google::protobuf::internal::ArenaStringPtr email_;
    ::google::protobuf::internal::ArenaStringPtr user_type_;
    ::google::protobuf::internal::ArenaStringPtr membership_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::ArenaStringPtr auth_data_;
    ::google::protobuf::internal::ArenaStringPtr auth_service_;
    ::google::protobuf::internal::ArenaStringPtr locale_;
    ::google::protobuf::internal::ArenaStringPtr mfa_secret_;
    bool is_email_verified_;
    bool mfa_active_;
    ::int32_t failed_attempts_;
    ::int64_t last_password_update_;
    ::int64_t last_picture_update_;
    ::int64_t last_activity_at_;
    ::int64_t last_login_;
    ::int64_t created_at_;
    ::int64_t updated_at_;
    ::int64_t deleted_at_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2fv1_2fuser_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull User_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// User

// optional string id = 1 [json_name = "id"];
inline bool User::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void User::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& User::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:user.v1.User.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void User::set_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:user.v1.User.id)
}
inline ::std::string* PROTOBUF_NONNULL User::mutable_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:user.v1.User.id)
  return _s;
}
inline const ::std::string& User::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void User::_internal_set_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL User::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE User::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:user.v1.User.id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.id_.Set("", GetArena());
  }
  return released;
}
inline void User::set_allocated_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:user.v1.User.id)
}

// optional string username = 2 [json_name = "username"];
inline bool User::has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void User::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& User::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:user.v1.User.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void User::set_username(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:user.v1.User.username)
}
inline ::std::string* PROTOBUF_NONNULL User::mutable_username()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:user.v1.User.username)
  return _s;
}
inline const ::std::string& User::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void User::_internal_set_username(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.username_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL User::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.username_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE User::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:user.v1.User.username)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.username_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.username_.Set("", GetArena());
  }
  return released;
}
inline void User::set_allocated_username(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:user.v1.User.username)
}

// optional string first_name = 3 [json_name = "firstName"];
inline bool User::has_first_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void User::clear_first_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.first_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& User::first_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:user.v1.User.first_name)
  return _internal_first_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void User::set_first_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.first_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:user.v1.User.first_name)
}
inline ::std::string* PROTOBUF_NONNULL User::mutable_first_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_first_name();
  // @@protoc_insertion_point(field_mutable:user.v1.User.first_name)
  return _s;
}
inline const ::std::string& User::_internal_first_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.first_name_.Get();
}
inline void User::_internal_set_first_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.first_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL User::_internal_mutable_first_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.first_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE User::release_first_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:user.v1.User.first_name)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.first_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.first_name_.Set("", GetArena());
  }
  return released;
}
inline void User::set_allocated_first_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.first_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.first_name_.IsDefault()) {
    _impl_.first_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:user.v1.User.first_name)
}

// optional string last_name = 4 [json_name = "lastName"];
inline bool User::has_last_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void User::clear_last_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& User::last_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:user.v1.User.last_name)
  return _internal_last_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void User::set_last_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.last_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:user.v1.User.last_name)
}
inline ::std::string* PROTOBUF_NONNULL User::mutable_last_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_last_name();
  // @@protoc_insertion_point(field_mutable:user.v1.User.last_name)
  return _s;
}
inline const ::std::string& User::_internal_last_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_name_.Get();
}
inline void User::_internal_set_last_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.last_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL User::_internal_mutable_last_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.last_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE User::release_last_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:user.v1.User.last_name)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.last_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.last_name_.Set("", GetArena());
  }
  return released;
}
inline void User::set_allocated_last_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.last_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_name_.IsDefault()) {
    _impl_.last_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:user.v1.User.last_name)
}

// optional string email = 5 [json_name = "email"];
inline bool User::has_email() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void User::clear_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& User::email() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:user.v1.User.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void User::set_email(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:user.v1.User.email)
}
inline ::std::string* PROTOBUF_NONNULL User::mutable_email()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:user.v1.User.email)
  return _s;
}
inline const ::std::string& User::_internal_email() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.email_.Get();
}
inline void User::_internal_set_email(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.email_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL User::_internal_mutable_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.email_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE User::release_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:user.v1.User.email)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.email_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.email_.Set("", GetArena());
  }
  return released;
}
inline void User::set_allocated_email(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.email_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:user.v1.User.email)
}

// optional string user_type = 6 [json_name = "userType"];
inline bool User::has_user_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void User::clear_user_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::std::string& User::user_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:user.v1.User.user_type)
  return _internal_user_type();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void User::set_user_type(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.user_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:user.v1.User.user_type)
}
inline ::std::string* PROTOBUF_NONNULL User::mutable_user_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_user_type();
  // @@protoc_insertion_point(field_mutable:user.v1.User.user_type)
  return _s;
}
inline const ::std::string& User::_internal_user_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_type_.Get();
}
inline void User::_internal_set_user_type(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.user_type_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL User::_internal_mutable_user_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.user_type_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE User::release_user_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:user.v1.User.user_type)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.user_type_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.user_type_.Set("", GetArena());
  }
  return released;
}
inline void User::set_allocated_user_type(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.user_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_type_.IsDefault()) {
    _impl_.user_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:user.v1.User.user_type)
}

// optional string membership = 7 [json_name = "membership"];
inline bool User::has_membership() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void User::clear_membership() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.membership_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::std::string& User::membership() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:user.v1.User.membership)
  return _internal_membership();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void User::set_membership(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.membership_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:user.v1.User.membership)
}
inline ::std::string* PROTOBUF_NONNULL User::mutable_membership()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_membership();
  // @@protoc_insertion_point(field_mutable:user.v1.User.membership)
  return _s;
}
inline const ::std::string& User::_internal_membership() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.membership_.Get();
}
inline void User::_internal_set_membership(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.membership_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL User::_internal_mutable_membership() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.membership_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE User::release_membership() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:user.v1.User.membership)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.membership_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.membership_.Set("", GetArena());
  }
  return released;
}
inline void User::set_allocated_membership(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.membership_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.membership_.IsDefault()) {
    _impl_.membership_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:user.v1.User.membership)
}

// optional bool is_email_verified = 8 [json_name = "isEmailVerified"];
inline bool User::has_is_email_verified() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void User::clear_is_email_verified() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_email_verified_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool User::is_email_verified() const {
  // @@protoc_insertion_point(field_get:user.v1.User.is_email_verified)
  return _internal_is_email_verified();
}
inline void User::set_is_email_verified(bool value) {
  _internal_set_is_email_verified(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:user.v1.User.is_email_verified)
}
inline bool User::_internal_is_email_verified() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_email_verified_;
}
inline void User::_internal_set_is_email_verified(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_email_verified_ = value;
}

// optional string password = 9 [json_name = "password"];
inline bool User::has_password() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void User::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::std::string& User::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:user.v1.User.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void User::set_password(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:user.v1.User.password)
}
inline ::std::string* PROTOBUF_NONNULL User::mutable_password()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:user.v1.User.password)
  return _s;
}
inline const ::std::string& User::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void User::_internal_set_password(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.password_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL User::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.password_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE User::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:user.v1.User.password)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.password_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.password_.Set("", GetArena());
  }
  return released;
}
inline void User::set_allocated_password(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:user.v1.User.password)
}

// optional string auth_data = 10 [json_name = "authData"];
inline bool User::has_auth_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void User::clear_auth_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auth_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::std::string& User::auth_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:user.v1.User.auth_data)
  return _internal_auth_data();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void User::set_auth_data(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.auth_data_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:user.v1.User.auth_data)
}
inline ::std::string* PROTOBUF_NONNULL User::mutable_auth_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_auth_data();
  // @@protoc_insertion_point(field_mutable:user.v1.User.auth_data)
  return _s;
}
inline const ::std::string& User::_internal_auth_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.auth_data_.Get();
}
inline void User::_internal_set_auth_data(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.auth_data_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL User::_internal_mutable_auth_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.auth_data_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE User::release_auth_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:user.v1.User.auth_data)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.auth_data_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.auth_data_.Set("", GetArena());
  }
  return released;
}
inline void User::set_allocated_auth_data(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.auth_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.auth_data_.IsDefault()) {
    _impl_.auth_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:user.v1.User.auth_data)
}

// optional string auth_service = 11 [json_name = "authService"];
inline bool User::has_auth_service() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void User::clear_auth_service() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auth_service_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::std::string& User::auth_service() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:user.v1.User.auth_service)
  return _internal_auth_service();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void User::set_auth_service(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.auth_service_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:user.v1.User.auth_service)
}
inline ::std::string* PROTOBUF_NONNULL User::mutable_auth_service()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_auth_service();
  // @@protoc_insertion_point(field_mutable:user.v1.User.auth_service)
  return _s;
}
inline const ::std::string& User::_internal_auth_service() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.auth_service_.Get();
}
inline void User::_internal_set_auth_service(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.auth_service_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL User::_internal_mutable_auth_service() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.auth_service_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE User::release_auth_service() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:user.v1.User.auth_service)
  if ((_impl_._has_bits_[0] & 0x00000200u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* released = _impl_.auth_service_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.auth_service_.Set("", GetArena());
  }
  return released;
}
inline void User::set_allocated_auth_service(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.auth_service_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.auth_service_.IsDefault()) {
    _impl_.auth_service_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:user.v1.User.auth_service)
}

// repeated string roles = 12 [json_name = "roles"];
inline int User::_internal_roles_size() const {
  return _internal_roles().size();
}
inline int User::roles_size() const {
  return _internal_roles_size();
}
inline void User::clear_roles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roles_.Clear();
}
inline ::std::string* PROTOBUF_NONNULL User::add_roles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::std::string* _s = _internal_mutable_roles()->Add();
  // @@protoc_insertion_point(field_add_mutable:user.v1.User.roles)
  return _s;
}
inline const ::std::string& User::roles(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:user.v1.User.roles)
  return _internal_roles().Get(index);
}
inline ::std::string* PROTOBUF_NONNULL User::mutable_roles(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:user.v1.User.roles)
  return _internal_mutable_roles()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void User::set_roles(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(*_internal_mutable_roles()->Mutable(index), ::std::forward<Arg_>(value),
                        args... );
  // @@protoc_insertion_point(field_set:user.v1.User.roles)
}
template <typename Arg_, typename... Args_>
inline void User::add_roles(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_roles(),
                               ::std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:user.v1.User.roles)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>& User::roles()
    const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:user.v1.User.roles)
  return _internal_roles();
}
inline ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL
User::mutable_roles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:user.v1.User.roles)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_roles();
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
User::_internal_roles() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.roles_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL
User::_internal_mutable_roles() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.roles_;
}

// map<string, string> props = 13 [json_name = "props"];
inline int User::_internal_props_size() const {
  return _internal_props().size();
}
inline int User::props_size() const {
  return _internal_props_size();
}
inline void User::clear_props() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.props_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& User::_internal_props() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.props_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& User::props() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:user.v1.User.props)
  return _internal_props();
}
inline ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL User::_internal_mutable_props() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.props_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL User::mutable_props()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:user.v1.User.props)
  return _internal_mutable_props();
}

// map<string, string> notify_props = 14 [json_name = "notifyProps"];
inline int User::_internal_notify_props_size() const {
  return _internal_notify_props().size();
}
inline int User::notify_props_size() const {
  return _internal_notify_props_size();
}
inline void User::clear_notify_props() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.notify_props_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& User::_internal_notify_props() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.notify_props_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& User::notify_props() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:user.v1.User.notify_props)
  return _internal_notify_props();
}
inline ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL User::_internal_mutable_notify_props() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.notify_props_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL User::mutable_notify_props()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:user.v1.User.notify_props)
  return _internal_mutable_notify_props();
}

// optional int64 last_password_update = 15 [json_name = "lastPasswordUpdate"];
inline bool User::has_last_password_update() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void User::clear_last_password_update() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_password_update_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::int64_t User::last_password_update() const {
  // @@protoc_insertion_point(field_get:user.v1.User.last_password_update)
  return _internal_last_password_update();
}
inline void User::set_last_password_update(::int64_t value) {
  _internal_set_last_password_update(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:user.v1.User.last_password_update)
}
inline ::int64_t User::_internal_last_password_update() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_password_update_;
}
inline void User::_internal_set_last_password_update(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_password_update_ = value;
}

// optional int64 last_picture_update = 16 [json_name = "lastPictureUpdate"];
inline bool User::has_last_picture_update() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void User::clear_last_picture_update() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_picture_update_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int64_t User::last_picture_update() const {
  // @@protoc_insertion_point(field_get:user.v1.User.last_picture_update)
  return _internal_last_picture_update();
}
inline void User::set_last_picture_update(::int64_t value) {
  _internal_set_last_picture_update(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:user.v1.User.last_picture_update)
}
inline ::int64_t User::_internal_last_picture_update() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_picture_update_;
}
inline void User::_internal_set_last_picture_update(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_picture_update_ = value;
}

// optional int32 failed_attempts = 17 [json_name = "failedAttempts"];
inline bool User::has_failed_attempts() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void User::clear_failed_attempts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failed_attempts_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::int32_t User::failed_attempts() const {
  // @@protoc_insertion_point(field_get:user.v1.User.failed_attempts)
  return _internal_failed_attempts();
}
inline void User::set_failed_attempts(::int32_t value) {
  _internal_set_failed_attempts(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:user.v1.User.failed_attempts)
}
inline ::int32_t User::_internal_failed_attempts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.failed_attempts_;
}
inline void User::_internal_set_failed_attempts(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failed_attempts_ = value;
}

// optional string locale = 18 [json_name = "locale"];
inline bool User::has_locale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void User::clear_locale() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.locale_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::std::string& User::locale() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:user.v1.User.locale)
  return _internal_locale();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void User::set_locale(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.locale_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:user.v1.User.locale)
}
inline ::std::string* PROTOBUF_NONNULL User::mutable_locale()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_locale();
  // @@protoc_insertion_point(field_mutable:user.v1.User.locale)
  return _s;
}
inline const ::std::string& User::_internal_locale() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.locale_.Get();
}
inline void User::_internal_set_locale(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.locale_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL User::_internal_mutable_locale() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.locale_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE User::release_locale() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:user.v1.User.locale)
  if ((_impl_._has_bits_[0] & 0x00000400u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* released = _impl_.locale_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.locale_.Set("", GetArena());
  }
  return released;
}
inline void User::set_allocated_locale(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.locale_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.locale_.IsDefault()) {
    _impl_.locale_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:user.v1.User.locale)
}

// optional bool mfa_active = 19 [json_name = "mfaActive"];
inline bool User::has_mfa_active() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void User::clear_mfa_active() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mfa_active_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool User::mfa_active() const {
  // @@protoc_insertion_point(field_get:user.v1.User.mfa_active)
  return _internal_mfa_active();
}
inline void User::set_mfa_active(bool value) {
  _internal_set_mfa_active(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:user.v1.User.mfa_active)
}
inline bool User::_internal_mfa_active() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mfa_active_;
}
inline void User::_internal_set_mfa_active(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mfa_active_ = value;
}

// optional string mfa_secret = 20 [json_name = "mfaSecret"];
inline bool User::has_mfa_secret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void User::clear_mfa_secret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mfa_secret_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::std::string& User::mfa_secret() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:user.v1.User.mfa_secret)
  return _internal_mfa_secret();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void User::set_mfa_secret(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.mfa_secret_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:user.v1.User.mfa_secret)
}
inline ::std::string* PROTOBUF_NONNULL User::mutable_mfa_secret()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_mfa_secret();
  // @@protoc_insertion_point(field_mutable:user.v1.User.mfa_secret)
  return _s;
}
inline const ::std::string& User::_internal_mfa_secret() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mfa_secret_.Get();
}
inline void User::_internal_set_mfa_secret(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.mfa_secret_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL User::_internal_mutable_mfa_secret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  return _impl_.mfa_secret_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE User::release_mfa_secret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:user.v1.User.mfa_secret)
  if ((_impl_._has_bits_[0] & 0x00000800u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000800u;
  auto* released = _impl_.mfa_secret_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.mfa_secret_.Set("", GetArena());
  }
  return released;
}
inline void User::set_allocated_mfa_secret(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.mfa_secret_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.mfa_secret_.IsDefault()) {
    _impl_.mfa_secret_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:user.v1.User.mfa_secret)
}

// optional int64 last_activity_at = 21 [json_name = "lastActivityAt"];
inline bool User::has_last_activity_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void User::clear_last_activity_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_activity_at_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::int64_t User::last_activity_at() const {
  // @@protoc_insertion_point(field_get:user.v1.User.last_activity_at)
  return _internal_last_activity_at();
}
inline void User::set_last_activity_at(::int64_t value) {
  _internal_set_last_activity_at(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:user.v1.User.last_activity_at)
}
inline ::int64_t User::_internal_last_activity_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_activity_at_;
}
inline void User::_internal_set_last_activity_at(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_activity_at_ = value;
}

// optional int64 last_login = 22 [json_name = "lastLogin"];
inline bool User::has_last_login() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void User::clear_last_login() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_login_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::int64_t User::last_login() const {
  // @@protoc_insertion_point(field_get:user.v1.User.last_login)
  return _internal_last_login();
}
inline void User::set_last_login(::int64_t value) {
  _internal_set_last_login(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:user.v1.User.last_login)
}
inline ::int64_t User::_internal_last_login() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_login_;
}
inline void User::_internal_set_last_login(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_login_ = value;
}

// optional int64 created_at = 23 [json_name = "createdAt"];
inline bool User::has_created_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void User::clear_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::int64_t User::created_at() const {
  // @@protoc_insertion_point(field_get:user.v1.User.created_at)
  return _internal_created_at();
}
inline void User::set_created_at(::int64_t value) {
  _internal_set_created_at(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:user.v1.User.created_at)
}
inline ::int64_t User::_internal_created_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_at_;
}
inline void User::_internal_set_created_at(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_ = value;
}

// optional int64 updated_at = 24 [json_name = "updatedAt"];
inline bool User::has_updated_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void User::clear_updated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updated_at_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::int64_t User::updated_at() const {
  // @@protoc_insertion_point(field_get:user.v1.User.updated_at)
  return _internal_updated_at();
}
inline void User::set_updated_at(::int64_t value) {
  _internal_set_updated_at(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:user.v1.User.updated_at)
}
inline ::int64_t User::_internal_updated_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.updated_at_;
}
inline void User::_internal_set_updated_at(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updated_at_ = value;
}

// optional int64 deleted_at = 25 [json_name = "deletedAt"];
inline bool User::has_deleted_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void User::clear_deleted_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deleted_at_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::int64_t User::deleted_at() const {
  // @@protoc_insertion_point(field_get:user.v1.User.deleted_at)
  return _internal_deleted_at();
}
inline void User::set_deleted_at(::int64_t value) {
  _internal_set_deleted_at(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:user.v1.User.deleted_at)
}
inline ::int64_t User::_internal_deleted_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.deleted_at_;
}
inline void User::_internal_set_deleted_at(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deleted_at_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace user


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // user_2fv1_2fuser_2eproto_2epb_2eh
