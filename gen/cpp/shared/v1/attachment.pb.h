// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: shared/v1/attachment.proto
// Protobuf C++ Version: 6.31.1

#ifndef shared_2fv1_2fattachment_2eproto_2epb_2eh
#define shared_2fv1_2fattachment_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "shared/v1/struct.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_shared_2fv1_2fattachment_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_shared_2fv1_2fattachment_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_shared_2fv1_2fattachment_2eproto;
}  // extern "C"
namespace shared {
namespace v1 {
enum AttachmentErrorType : int;
extern const uint32_t AttachmentErrorType_internal_data_[];
class Attachment;
struct AttachmentDefaultTypeInternal;
extern AttachmentDefaultTypeInternal _Attachment_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Attachment_class_data_;
class AttachmentError;
struct AttachmentErrorDefaultTypeInternal;
extern AttachmentErrorDefaultTypeInternal _AttachmentError_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull AttachmentError_class_data_;
class Attachments;
struct AttachmentsDefaultTypeInternal;
extern AttachmentsDefaultTypeInternal _Attachments_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Attachments_class_data_;
class Crop;
struct CropDefaultTypeInternal;
extern CropDefaultTypeInternal _Crop_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Crop_class_data_;
}  // namespace v1
}  // namespace shared
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::shared::v1::AttachmentErrorType_internal_data_>
    internal::EnumTraitsImpl::value<::shared::v1::AttachmentErrorType>;
}  // namespace protobuf
}  // namespace google

namespace shared {
namespace v1 {
enum AttachmentErrorType : int {
  UNSPECIFIED = 0,
  INVALID_BASE64 = 1,
  INVALID_FILE_TYPE = 2,
  BIG_FILE = 3,
  DECODE_IMG = 4,
  BIG_DIMENSIONS_IMG = 5,
  UNSUPPORTED_FILE_TYPE = 6,
  AttachmentErrorType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  AttachmentErrorType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t AttachmentErrorType_internal_data_[];
inline constexpr AttachmentErrorType AttachmentErrorType_MIN =
    static_cast<AttachmentErrorType>(0);
inline constexpr AttachmentErrorType AttachmentErrorType_MAX =
    static_cast<AttachmentErrorType>(6);
inline bool AttachmentErrorType_IsValid(int value) {
  return 0 <= value && value <= 6;
}
inline constexpr int AttachmentErrorType_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL AttachmentErrorType_descriptor();
template <typename T>
const ::std::string& AttachmentErrorType_Name(T value) {
  static_assert(::std::is_same<T, AttachmentErrorType>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to AttachmentErrorType_Name().");
  return AttachmentErrorType_Name(static_cast<AttachmentErrorType>(value));
}
template <>
inline const ::std::string& AttachmentErrorType_Name(AttachmentErrorType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AttachmentErrorType_descriptor, 0, 6>(
      static_cast<int>(value));
}
inline bool AttachmentErrorType_Parse(
    ::absl::string_view name, AttachmentErrorType* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<AttachmentErrorType>(AttachmentErrorType_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class Crop final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:shared.v1.Crop) */ {
 public:
  inline Crop() : Crop(nullptr) {}
  ~Crop() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Crop* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Crop));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Crop(::google::protobuf::internal::ConstantInitialized);

  inline Crop(const Crop& from) : Crop(nullptr, from) {}
  inline Crop(Crop&& from) noexcept
      : Crop(nullptr, ::std::move(from)) {}
  inline Crop& operator=(const Crop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Crop& operator=(Crop&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Crop& default_instance() {
    return *reinterpret_cast<const Crop*>(
        &_Crop_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Crop& a, Crop& b) { a.Swap(&b); }
  inline void Swap(Crop* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Crop* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Crop* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Crop>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Crop& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Crop& from) { Crop::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Crop* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "shared.v1.Crop"; }

 protected:
  explicit Crop(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Crop(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Crop& from);
  Crop(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Crop&& from) noexcept
      : Crop(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kAspectRatioFieldNumber = 5,
  };
  // float x = 1 [json_name = "x"];
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2 [json_name = "y"];
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float width = 3 [json_name = "width"];
  void clear_width() ;
  float width() const;
  void set_width(float value);

  private:
  float _internal_width() const;
  void _internal_set_width(float value);

  public:
  // float height = 4 [json_name = "height"];
  void clear_height() ;
  float height() const;
  void set_height(float value);

  private:
  float _internal_height() const;
  void _internal_set_height(float value);

  public:
  // float aspect_ratio = 5 [json_name = "aspectRatio"];
  void clear_aspect_ratio() ;
  float aspect_ratio() const;
  void set_aspect_ratio(float value);

  private:
  float _internal_aspect_ratio() const;
  void _internal_set_aspect_ratio(float value);

  public:
  // @@protoc_insertion_point(class_scope:shared.v1.Crop)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Crop& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    float x_;
    float y_;
    float width_;
    float height_;
    float aspect_ratio_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_shared_2fv1_2fattachment_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Crop_class_data_;
// -------------------------------------------------------------------

class AttachmentError final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:shared.v1.AttachmentError) */ {
 public:
  inline AttachmentError() : AttachmentError(nullptr) {}
  ~AttachmentError() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AttachmentError* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AttachmentError));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AttachmentError(::google::protobuf::internal::ConstantInitialized);

  inline AttachmentError(const AttachmentError& from) : AttachmentError(nullptr, from) {}
  inline AttachmentError(AttachmentError&& from) noexcept
      : AttachmentError(nullptr, ::std::move(from)) {}
  inline AttachmentError& operator=(const AttachmentError& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttachmentError& operator=(AttachmentError&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttachmentError& default_instance() {
    return *reinterpret_cast<const AttachmentError*>(
        &_AttachmentError_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(AttachmentError& a, AttachmentError& b) { a.Swap(&b); }
  inline void Swap(AttachmentError* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttachmentError* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttachmentError* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AttachmentError>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AttachmentError& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AttachmentError& from) { AttachmentError::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AttachmentError* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "shared.v1.AttachmentError"; }

 protected:
  explicit AttachmentError(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  AttachmentError(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const AttachmentError& from);
  AttachmentError(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, AttachmentError&& from) noexcept
      : AttachmentError(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kMessageFieldNumber = 3,
    kErrorFieldNumber = 4,
    kTypeFieldNumber = 2,
  };
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const ::std::string& id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_id();
  void set_allocated_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_id();

  public:
  // string message = 3 [json_name = "message"];
  void clear_message() ;
  const ::std::string& message() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_message();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_message();
  void set_allocated_message(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_message() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_message(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_message();

  public:
  // string error = 4 [json_name = "error"];
  void clear_error() ;
  const ::std::string& error() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_error();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_error();
  void set_allocated_error(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_error() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_error(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_error();

  public:
  // .shared.v1.AttachmentErrorType type = 2 [json_name = "type"];
  void clear_type() ;
  ::shared::v1::AttachmentErrorType type() const;
  void set_type(::shared::v1::AttachmentErrorType value);

  private:
  ::shared::v1::AttachmentErrorType _internal_type() const;
  void _internal_set_type(::shared::v1::AttachmentErrorType value);

  public:
  // @@protoc_insertion_point(class_scope:shared.v1.AttachmentError)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   0, 48,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const AttachmentError& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr error_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_shared_2fv1_2fattachment_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull AttachmentError_class_data_;
// -------------------------------------------------------------------

class Attachment final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:shared.v1.Attachment) */ {
 public:
  inline Attachment() : Attachment(nullptr) {}
  ~Attachment() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Attachment* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Attachment));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Attachment(::google::protobuf::internal::ConstantInitialized);

  inline Attachment(const Attachment& from) : Attachment(nullptr, from) {}
  inline Attachment(Attachment&& from) noexcept
      : Attachment(nullptr, ::std::move(from)) {}
  inline Attachment& operator=(const Attachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attachment& operator=(Attachment&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Attachment& default_instance() {
    return *reinterpret_cast<const Attachment*>(
        &_Attachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Attachment& a, Attachment& b) { a.Swap(&b); }
  inline void Swap(Attachment* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attachment* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Attachment* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Attachment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Attachment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Attachment& from) { Attachment::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Attachment* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "shared.v1.Attachment"; }

 protected:
  explicit Attachment(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Attachment(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Attachment& from);
  Attachment(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Attachment&& from) noexcept
      : Attachment(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kFilenameFieldNumber = 2,
    kFileTypeFieldNumber = 3,
    kFileExtensionFieldNumber = 5,
    kBase64FieldNumber = 6,
    kDataFieldNumber = 10,
    kMimeFieldNumber = 11,
    kChecksumFieldNumber = 12,
    kCropFieldNumber = 8,
    kMetadataFieldNumber = 9,
    kFileSizeFieldNumber = 4,
    kExifOrientationFieldNumber = 7,
  };
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const ::std::string& id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_id();
  void set_allocated_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_id();

  public:
  // string filename = 2 [json_name = "filename"];
  void clear_filename() ;
  const ::std::string& filename() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_filename();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_filename();
  void set_allocated_filename(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_filename() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_filename();

  public:
  // string file_type = 3 [json_name = "fileType"];
  void clear_file_type() ;
  const ::std::string& file_type() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_file_type(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_file_type();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_file_type();
  void set_allocated_file_type(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_file_type() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_file_type(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_file_type();

  public:
  // string file_extension = 5 [json_name = "fileExtension"];
  void clear_file_extension() ;
  const ::std::string& file_extension() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_file_extension(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_file_extension();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_file_extension();
  void set_allocated_file_extension(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_file_extension() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_file_extension(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_file_extension();

  public:
  // string base64 = 6 [json_name = "base64"];
  void clear_base64() ;
  const ::std::string& base64() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_base64(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_base64();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_base64();
  void set_allocated_base64(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_base64() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_base64(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_base64();

  public:
  // bytes data = 10 [json_name = "data"];
  void clear_data() ;
  const ::std::string& data() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_data();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_data();
  void set_allocated_data(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_data() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_data(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_data();

  public:
  // string mime = 11 [json_name = "mime"];
  void clear_mime() ;
  const ::std::string& mime() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_mime(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_mime();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_mime();
  void set_allocated_mime(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_mime() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_mime(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_mime();

  public:
  // optional string checksum = 12 [json_name = "checksum"];
  bool has_checksum() const;
  void clear_checksum() ;
  const ::std::string& checksum() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_checksum(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_checksum();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_checksum();
  void set_allocated_checksum(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_checksum() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_checksum(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_checksum();

  public:
  // .shared.v1.Crop crop = 8 [json_name = "crop"];
  bool has_crop() const;
  void clear_crop() ;
  const ::shared::v1::Crop& crop() const;
  [[nodiscard]] ::shared::v1::Crop* PROTOBUF_NULLABLE release_crop();
  ::shared::v1::Crop* PROTOBUF_NONNULL mutable_crop();
  void set_allocated_crop(::shared::v1::Crop* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_crop(::shared::v1::Crop* PROTOBUF_NULLABLE value);
  ::shared::v1::Crop* PROTOBUF_NULLABLE unsafe_arena_release_crop();

  private:
  const ::shared::v1::Crop& _internal_crop() const;
  ::shared::v1::Crop* PROTOBUF_NONNULL _internal_mutable_crop();

  public:
  // .shared.v1.Struct metadata = 9 [json_name = "metadata"];
  bool has_metadata() const;
  void clear_metadata() ;
  const ::shared::v1::Struct& metadata() const;
  [[nodiscard]] ::shared::v1::Struct* PROTOBUF_NULLABLE release_metadata();
  ::shared::v1::Struct* PROTOBUF_NONNULL mutable_metadata();
  void set_allocated_metadata(::shared::v1::Struct* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_metadata(::shared::v1::Struct* PROTOBUF_NULLABLE value);
  ::shared::v1::Struct* PROTOBUF_NULLABLE unsafe_arena_release_metadata();

  private:
  const ::shared::v1::Struct& _internal_metadata() const;
  ::shared::v1::Struct* PROTOBUF_NONNULL _internal_mutable_metadata();

  public:
  // int64 file_size = 4 [json_name = "fileSize"];
  void clear_file_size() ;
  ::int64_t file_size() const;
  void set_file_size(::int64_t value);

  private:
  ::int64_t _internal_file_size() const;
  void _internal_set_file_size(::int64_t value);

  public:
  // int32 exif_orientation = 7 [json_name = "exifOrientation"];
  void clear_exif_orientation() ;
  ::int32_t exif_orientation() const;
  void set_exif_orientation(::int32_t value);

  private:
  ::int32_t _internal_exif_orientation() const;
  void _internal_set_exif_orientation(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:shared.v1.Attachment)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 12,
                                   2, 88,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Attachment& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::google::protobuf::internal::ArenaStringPtr file_type_;
    ::google::protobuf::internal::ArenaStringPtr file_extension_;
    ::google::protobuf::internal::ArenaStringPtr base64_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::ArenaStringPtr mime_;
    ::google::protobuf::internal::ArenaStringPtr checksum_;
    ::shared::v1::Crop* PROTOBUF_NULLABLE crop_;
    ::shared::v1::Struct* PROTOBUF_NULLABLE metadata_;
    ::int64_t file_size_;
    ::int32_t exif_orientation_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_shared_2fv1_2fattachment_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Attachment_class_data_;
// -------------------------------------------------------------------

class Attachments final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:shared.v1.Attachments) */ {
 public:
  inline Attachments() : Attachments(nullptr) {}
  ~Attachments() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Attachments* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Attachments));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Attachments(::google::protobuf::internal::ConstantInitialized);

  inline Attachments(const Attachments& from) : Attachments(nullptr, from) {}
  inline Attachments(Attachments&& from) noexcept
      : Attachments(nullptr, ::std::move(from)) {}
  inline Attachments& operator=(const Attachments& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attachments& operator=(Attachments&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Attachments& default_instance() {
    return *reinterpret_cast<const Attachments*>(
        &_Attachments_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Attachments& a, Attachments& b) { a.Swap(&b); }
  inline void Swap(Attachments* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attachments* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Attachments* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Attachments>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Attachments& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Attachments& from) { Attachments::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Attachments* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "shared.v1.Attachments"; }

 protected:
  explicit Attachments(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Attachments(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Attachments& from);
  Attachments(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Attachments&& from) noexcept
      : Attachments(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAttachmentsFieldNumber = 1,
  };
  // repeated .shared.v1.Attachment attachments = 1 [json_name = "attachments"];
  int attachments_size() const;
  private:
  int _internal_attachments_size() const;

  public:
  void clear_attachments() ;
  ::shared::v1::Attachment* PROTOBUF_NONNULL mutable_attachments(int index);
  ::google::protobuf::RepeatedPtrField<::shared::v1::Attachment>* PROTOBUF_NONNULL mutable_attachments();

  private:
  const ::google::protobuf::RepeatedPtrField<::shared::v1::Attachment>& _internal_attachments() const;
  ::google::protobuf::RepeatedPtrField<::shared::v1::Attachment>* PROTOBUF_NONNULL _internal_mutable_attachments();
  public:
  const ::shared::v1::Attachment& attachments(int index) const;
  ::shared::v1::Attachment* PROTOBUF_NONNULL add_attachments();
  const ::google::protobuf::RepeatedPtrField<::shared::v1::Attachment>& attachments() const;
  // @@protoc_insertion_point(class_scope:shared.v1.Attachments)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Attachments& from_msg);
    ::google::protobuf::RepeatedPtrField< ::shared::v1::Attachment > attachments_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_shared_2fv1_2fattachment_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Attachments_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Attachment

// string id = 1 [json_name = "id"];
inline void Attachment::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Attachment::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shared.v1.Attachment.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Attachment::set_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:shared.v1.Attachment.id)
}
inline ::std::string* PROTOBUF_NONNULL Attachment::mutable_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:shared.v1.Attachment.id)
  return _s;
}
inline const ::std::string& Attachment::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void Attachment::_internal_set_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Attachment::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Attachment::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:shared.v1.Attachment.id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.id_.Set("", GetArena());
  }
  return released;
}
inline void Attachment::set_allocated_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:shared.v1.Attachment.id)
}

// string filename = 2 [json_name = "filename"];
inline void Attachment::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& Attachment::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shared.v1.Attachment.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Attachment::set_filename(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:shared.v1.Attachment.filename)
}
inline ::std::string* PROTOBUF_NONNULL Attachment::mutable_filename()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:shared.v1.Attachment.filename)
  return _s;
}
inline const ::std::string& Attachment::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void Attachment::_internal_set_filename(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.filename_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Attachment::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.filename_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Attachment::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:shared.v1.Attachment.filename)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.filename_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.filename_.Set("", GetArena());
  }
  return released;
}
inline void Attachment::set_allocated_filename(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.filename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:shared.v1.Attachment.filename)
}

// string file_type = 3 [json_name = "fileType"];
inline void Attachment::clear_file_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& Attachment::file_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shared.v1.Attachment.file_type)
  return _internal_file_type();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Attachment::set_file_type(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.file_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:shared.v1.Attachment.file_type)
}
inline ::std::string* PROTOBUF_NONNULL Attachment::mutable_file_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_file_type();
  // @@protoc_insertion_point(field_mutable:shared.v1.Attachment.file_type)
  return _s;
}
inline const ::std::string& Attachment::_internal_file_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_type_.Get();
}
inline void Attachment::_internal_set_file_type(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.file_type_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Attachment::_internal_mutable_file_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.file_type_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Attachment::release_file_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:shared.v1.Attachment.file_type)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.file_type_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.file_type_.Set("", GetArena());
  }
  return released;
}
inline void Attachment::set_allocated_file_type(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.file_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.file_type_.IsDefault()) {
    _impl_.file_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:shared.v1.Attachment.file_type)
}

// int64 file_size = 4 [json_name = "fileSize"];
inline void Attachment::clear_file_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_size_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int64_t Attachment::file_size() const {
  // @@protoc_insertion_point(field_get:shared.v1.Attachment.file_size)
  return _internal_file_size();
}
inline void Attachment::set_file_size(::int64_t value) {
  _internal_set_file_size(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:shared.v1.Attachment.file_size)
}
inline ::int64_t Attachment::_internal_file_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_size_;
}
inline void Attachment::_internal_set_file_size(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_size_ = value;
}

// string file_extension = 5 [json_name = "fileExtension"];
inline void Attachment::clear_file_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_extension_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& Attachment::file_extension() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shared.v1.Attachment.file_extension)
  return _internal_file_extension();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Attachment::set_file_extension(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.file_extension_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:shared.v1.Attachment.file_extension)
}
inline ::std::string* PROTOBUF_NONNULL Attachment::mutable_file_extension()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_file_extension();
  // @@protoc_insertion_point(field_mutable:shared.v1.Attachment.file_extension)
  return _s;
}
inline const ::std::string& Attachment::_internal_file_extension() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_extension_.Get();
}
inline void Attachment::_internal_set_file_extension(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.file_extension_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Attachment::_internal_mutable_file_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.file_extension_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Attachment::release_file_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:shared.v1.Attachment.file_extension)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.file_extension_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.file_extension_.Set("", GetArena());
  }
  return released;
}
inline void Attachment::set_allocated_file_extension(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.file_extension_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.file_extension_.IsDefault()) {
    _impl_.file_extension_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:shared.v1.Attachment.file_extension)
}

// string base64 = 6 [json_name = "base64"];
inline void Attachment::clear_base64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base64_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& Attachment::base64() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shared.v1.Attachment.base64)
  return _internal_base64();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Attachment::set_base64(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.base64_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:shared.v1.Attachment.base64)
}
inline ::std::string* PROTOBUF_NONNULL Attachment::mutable_base64()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_base64();
  // @@protoc_insertion_point(field_mutable:shared.v1.Attachment.base64)
  return _s;
}
inline const ::std::string& Attachment::_internal_base64() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.base64_.Get();
}
inline void Attachment::_internal_set_base64(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.base64_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Attachment::_internal_mutable_base64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.base64_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Attachment::release_base64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:shared.v1.Attachment.base64)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.base64_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.base64_.Set("", GetArena());
  }
  return released;
}
inline void Attachment::set_allocated_base64(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.base64_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.base64_.IsDefault()) {
    _impl_.base64_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:shared.v1.Attachment.base64)
}

// int32 exif_orientation = 7 [json_name = "exifOrientation"];
inline void Attachment::clear_exif_orientation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exif_orientation_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t Attachment::exif_orientation() const {
  // @@protoc_insertion_point(field_get:shared.v1.Attachment.exif_orientation)
  return _internal_exif_orientation();
}
inline void Attachment::set_exif_orientation(::int32_t value) {
  _internal_set_exif_orientation(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:shared.v1.Attachment.exif_orientation)
}
inline ::int32_t Attachment::_internal_exif_orientation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.exif_orientation_;
}
inline void Attachment::_internal_set_exif_orientation(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exif_orientation_ = value;
}

// .shared.v1.Crop crop = 8 [json_name = "crop"];
inline bool Attachment::has_crop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.crop_ != nullptr);
  return value;
}
inline void Attachment::clear_crop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.crop_ != nullptr) _impl_.crop_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::shared::v1::Crop& Attachment::_internal_crop() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::shared::v1::Crop* p = _impl_.crop_;
  return p != nullptr ? *p : reinterpret_cast<const ::shared::v1::Crop&>(::shared::v1::_Crop_default_instance_);
}
inline const ::shared::v1::Crop& Attachment::crop() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shared.v1.Attachment.crop)
  return _internal_crop();
}
inline void Attachment::unsafe_arena_set_allocated_crop(
    ::shared::v1::Crop* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.crop_);
  }
  _impl_.crop_ = reinterpret_cast<::shared::v1::Crop*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:shared.v1.Attachment.crop)
}
inline ::shared::v1::Crop* PROTOBUF_NULLABLE Attachment::release_crop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::shared::v1::Crop* released = _impl_.crop_;
  _impl_.crop_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::shared::v1::Crop* PROTOBUF_NULLABLE Attachment::unsafe_arena_release_crop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:shared.v1.Attachment.crop)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::shared::v1::Crop* temp = _impl_.crop_;
  _impl_.crop_ = nullptr;
  return temp;
}
inline ::shared::v1::Crop* PROTOBUF_NONNULL Attachment::_internal_mutable_crop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.crop_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::shared::v1::Crop>(GetArena());
    _impl_.crop_ = reinterpret_cast<::shared::v1::Crop*>(p);
  }
  return _impl_.crop_;
}
inline ::shared::v1::Crop* PROTOBUF_NONNULL Attachment::mutable_crop()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000100u;
  ::shared::v1::Crop* _msg = _internal_mutable_crop();
  // @@protoc_insertion_point(field_mutable:shared.v1.Attachment.crop)
  return _msg;
}
inline void Attachment::set_allocated_crop(::shared::v1::Crop* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.crop_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.crop_ = reinterpret_cast<::shared::v1::Crop*>(value);
  // @@protoc_insertion_point(field_set_allocated:shared.v1.Attachment.crop)
}

// .shared.v1.Struct metadata = 9 [json_name = "metadata"];
inline bool Attachment::has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
  return value;
}
inline const ::shared::v1::Struct& Attachment::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::shared::v1::Struct* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::shared::v1::Struct&>(::shared::v1::_Struct_default_instance_);
}
inline const ::shared::v1::Struct& Attachment::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shared.v1.Attachment.metadata)
  return _internal_metadata();
}
inline void Attachment::unsafe_arena_set_allocated_metadata(
    ::shared::v1::Struct* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = reinterpret_cast<::shared::v1::Struct*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:shared.v1.Attachment.metadata)
}
inline ::shared::v1::Struct* PROTOBUF_NULLABLE Attachment::release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::shared::v1::Struct* released = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::shared::v1::Struct* PROTOBUF_NULLABLE Attachment::unsafe_arena_release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:shared.v1.Attachment.metadata)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::shared::v1::Struct* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::shared::v1::Struct* PROTOBUF_NONNULL Attachment::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.metadata_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::shared::v1::Struct>(GetArena());
    _impl_.metadata_ = reinterpret_cast<::shared::v1::Struct*>(p);
  }
  return _impl_.metadata_;
}
inline ::shared::v1::Struct* PROTOBUF_NONNULL Attachment::mutable_metadata()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000200u;
  ::shared::v1::Struct* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:shared.v1.Attachment.metadata)
  return _msg;
}
inline void Attachment::set_allocated_metadata(::shared::v1::Struct* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.metadata_ = reinterpret_cast<::shared::v1::Struct*>(value);
  // @@protoc_insertion_point(field_set_allocated:shared.v1.Attachment.metadata)
}

// bytes data = 10 [json_name = "data"];
inline void Attachment::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::std::string& Attachment::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shared.v1.Attachment.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Attachment::set_data(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:shared.v1.Attachment.data)
}
inline ::std::string* PROTOBUF_NONNULL Attachment::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:shared.v1.Attachment.data)
  return _s;
}
inline const ::std::string& Attachment::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void Attachment::_internal_set_data(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.data_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Attachment::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.data_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Attachment::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:shared.v1.Attachment.data)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.data_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.data_.Set("", GetArena());
  }
  return released;
}
inline void Attachment::set_allocated_data(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:shared.v1.Attachment.data)
}

// string mime = 11 [json_name = "mime"];
inline void Attachment::clear_mime() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mime_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::std::string& Attachment::mime() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shared.v1.Attachment.mime)
  return _internal_mime();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Attachment::set_mime(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.mime_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:shared.v1.Attachment.mime)
}
inline ::std::string* PROTOBUF_NONNULL Attachment::mutable_mime()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_mime();
  // @@protoc_insertion_point(field_mutable:shared.v1.Attachment.mime)
  return _s;
}
inline const ::std::string& Attachment::_internal_mime() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mime_.Get();
}
inline void Attachment::_internal_set_mime(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.mime_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Attachment::_internal_mutable_mime() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.mime_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Attachment::release_mime() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:shared.v1.Attachment.mime)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.mime_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.mime_.Set("", GetArena());
  }
  return released;
}
inline void Attachment::set_allocated_mime(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.mime_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.mime_.IsDefault()) {
    _impl_.mime_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:shared.v1.Attachment.mime)
}

// optional string checksum = 12 [json_name = "checksum"];
inline bool Attachment::has_checksum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Attachment::clear_checksum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.checksum_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::std::string& Attachment::checksum() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shared.v1.Attachment.checksum)
  return _internal_checksum();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Attachment::set_checksum(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.checksum_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:shared.v1.Attachment.checksum)
}
inline ::std::string* PROTOBUF_NONNULL Attachment::mutable_checksum()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_checksum();
  // @@protoc_insertion_point(field_mutable:shared.v1.Attachment.checksum)
  return _s;
}
inline const ::std::string& Attachment::_internal_checksum() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.checksum_.Get();
}
inline void Attachment::_internal_set_checksum(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.checksum_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Attachment::_internal_mutable_checksum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.checksum_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Attachment::release_checksum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:shared.v1.Attachment.checksum)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.checksum_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.checksum_.Set("", GetArena());
  }
  return released;
}
inline void Attachment::set_allocated_checksum(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.checksum_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.checksum_.IsDefault()) {
    _impl_.checksum_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:shared.v1.Attachment.checksum)
}

// -------------------------------------------------------------------

// Attachments

// repeated .shared.v1.Attachment attachments = 1 [json_name = "attachments"];
inline int Attachments::_internal_attachments_size() const {
  return _internal_attachments().size();
}
inline int Attachments::attachments_size() const {
  return _internal_attachments_size();
}
inline void Attachments::clear_attachments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attachments_.Clear();
}
inline ::shared::v1::Attachment* PROTOBUF_NONNULL Attachments::mutable_attachments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:shared.v1.Attachments.attachments)
  return _internal_mutable_attachments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::shared::v1::Attachment>* PROTOBUF_NONNULL Attachments::mutable_attachments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:shared.v1.Attachments.attachments)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_attachments();
}
inline const ::shared::v1::Attachment& Attachments::attachments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shared.v1.Attachments.attachments)
  return _internal_attachments().Get(index);
}
inline ::shared::v1::Attachment* PROTOBUF_NONNULL Attachments::add_attachments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::shared::v1::Attachment* _add = _internal_mutable_attachments()->Add();
  // @@protoc_insertion_point(field_add:shared.v1.Attachments.attachments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::shared::v1::Attachment>& Attachments::attachments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:shared.v1.Attachments.attachments)
  return _internal_attachments();
}
inline const ::google::protobuf::RepeatedPtrField<::shared::v1::Attachment>&
Attachments::_internal_attachments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attachments_;
}
inline ::google::protobuf::RepeatedPtrField<::shared::v1::Attachment>* PROTOBUF_NONNULL
Attachments::_internal_mutable_attachments() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.attachments_;
}

// -------------------------------------------------------------------

// Crop

// float x = 1 [json_name = "x"];
inline void Crop::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Crop::x() const {
  // @@protoc_insertion_point(field_get:shared.v1.Crop.x)
  return _internal_x();
}
inline void Crop::set_x(float value) {
  _internal_set_x(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:shared.v1.Crop.x)
}
inline float Crop::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void Crop::_internal_set_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// float y = 2 [json_name = "y"];
inline void Crop::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Crop::y() const {
  // @@protoc_insertion_point(field_get:shared.v1.Crop.y)
  return _internal_y();
}
inline void Crop::set_y(float value) {
  _internal_set_y(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:shared.v1.Crop.y)
}
inline float Crop::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void Crop::_internal_set_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// float width = 3 [json_name = "width"];
inline void Crop::clear_width() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Crop::width() const {
  // @@protoc_insertion_point(field_get:shared.v1.Crop.width)
  return _internal_width();
}
inline void Crop::set_width(float value) {
  _internal_set_width(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:shared.v1.Crop.width)
}
inline float Crop::_internal_width() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.width_;
}
inline void Crop::_internal_set_width(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = value;
}

// float height = 4 [json_name = "height"];
inline void Crop::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Crop::height() const {
  // @@protoc_insertion_point(field_get:shared.v1.Crop.height)
  return _internal_height();
}
inline void Crop::set_height(float value) {
  _internal_set_height(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:shared.v1.Crop.height)
}
inline float Crop::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void Crop::_internal_set_height(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// float aspect_ratio = 5 [json_name = "aspectRatio"];
inline void Crop::clear_aspect_ratio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.aspect_ratio_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float Crop::aspect_ratio() const {
  // @@protoc_insertion_point(field_get:shared.v1.Crop.aspect_ratio)
  return _internal_aspect_ratio();
}
inline void Crop::set_aspect_ratio(float value) {
  _internal_set_aspect_ratio(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:shared.v1.Crop.aspect_ratio)
}
inline float Crop::_internal_aspect_ratio() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.aspect_ratio_;
}
inline void Crop::_internal_set_aspect_ratio(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.aspect_ratio_ = value;
}

// -------------------------------------------------------------------

// AttachmentError

// string id = 1 [json_name = "id"];
inline void AttachmentError::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& AttachmentError::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shared.v1.AttachmentError.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void AttachmentError::set_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:shared.v1.AttachmentError.id)
}
inline ::std::string* PROTOBUF_NONNULL AttachmentError::mutable_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:shared.v1.AttachmentError.id)
  return _s;
}
inline const ::std::string& AttachmentError::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void AttachmentError::_internal_set_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL AttachmentError::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE AttachmentError::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:shared.v1.AttachmentError.id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.id_.Set("", GetArena());
  }
  return released;
}
inline void AttachmentError::set_allocated_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:shared.v1.AttachmentError.id)
}

// .shared.v1.AttachmentErrorType type = 2 [json_name = "type"];
inline void AttachmentError::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::shared::v1::AttachmentErrorType AttachmentError::type() const {
  // @@protoc_insertion_point(field_get:shared.v1.AttachmentError.type)
  return _internal_type();
}
inline void AttachmentError::set_type(::shared::v1::AttachmentErrorType value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:shared.v1.AttachmentError.type)
}
inline ::shared::v1::AttachmentErrorType AttachmentError::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::shared::v1::AttachmentErrorType>(_impl_.type_);
}
inline void AttachmentError::_internal_set_type(::shared::v1::AttachmentErrorType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string message = 3 [json_name = "message"];
inline void AttachmentError::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& AttachmentError::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shared.v1.AttachmentError.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void AttachmentError::set_message(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:shared.v1.AttachmentError.message)
}
inline ::std::string* PROTOBUF_NONNULL AttachmentError::mutable_message()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:shared.v1.AttachmentError.message)
  return _s;
}
inline const ::std::string& AttachmentError::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void AttachmentError::_internal_set_message(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.message_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL AttachmentError::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.message_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE AttachmentError::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:shared.v1.AttachmentError.message)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.message_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.message_.Set("", GetArena());
  }
  return released;
}
inline void AttachmentError::set_allocated_message(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:shared.v1.AttachmentError.message)
}

// string error = 4 [json_name = "error"];
inline void AttachmentError::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& AttachmentError::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shared.v1.AttachmentError.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void AttachmentError::set_error(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:shared.v1.AttachmentError.error)
}
inline ::std::string* PROTOBUF_NONNULL AttachmentError::mutable_error()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:shared.v1.AttachmentError.error)
  return _s;
}
inline const ::std::string& AttachmentError::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_.Get();
}
inline void AttachmentError::_internal_set_error(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.error_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL AttachmentError::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.error_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE AttachmentError::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:shared.v1.AttachmentError.error)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.error_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.error_.Set("", GetArena());
  }
  return released;
}
inline void AttachmentError::set_allocated_error(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.error_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:shared.v1.AttachmentError.error)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace shared


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::shared::v1::AttachmentErrorType> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::shared::v1::AttachmentErrorType>() {
  return ::shared::v1::AttachmentErrorType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // shared_2fv1_2fattachment_2eproto_2epb_2eh
