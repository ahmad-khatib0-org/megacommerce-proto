// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: shared/v1/attachment.proto
// Protobuf C++ Version: 6.31.1

#include "shared/v1/attachment.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace shared {
namespace v1 {

inline constexpr Crop::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        x_{0},
        y_{0},
        width_{0},
        height_{0},
        aspect_ratio_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Crop::Crop(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Crop_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CropDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CropDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CropDefaultTypeInternal() {}
  union {
    Crop _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CropDefaultTypeInternal _Crop_default_instance_;

inline constexpr AttachmentError::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        error_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_{static_cast< ::shared::v1::AttachmentErrorType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR AttachmentError::AttachmentError(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AttachmentError_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AttachmentErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttachmentErrorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttachmentErrorDefaultTypeInternal() {}
  union {
    AttachmentError _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttachmentErrorDefaultTypeInternal _AttachmentError_default_instance_;

inline constexpr Attachment::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        filename_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        file_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        file_extension_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        base64_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mime_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        checksum_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        crop_{nullptr},
        metadata_{nullptr},
        file_size_{::int64_t{0}},
        exif_orientation_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Attachment::Attachment(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Attachment_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AttachmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttachmentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttachmentDefaultTypeInternal() {}
  union {
    Attachment _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttachmentDefaultTypeInternal _Attachment_default_instance_;

inline constexpr Attachments::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : attachments_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Attachments::Attachments(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Attachments_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AttachmentsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttachmentsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttachmentsDefaultTypeInternal() {}
  union {
    Attachments _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttachmentsDefaultTypeInternal _Attachments_default_instance_;
}  // namespace v1
}  // namespace shared
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_shared_2fv1_2fattachment_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_shared_2fv1_2fattachment_2eproto = nullptr;
const ::uint32_t
    TableStruct_shared_2fv1_2fattachment_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::shared::v1::Attachment, _impl_._has_bits_),
        15, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::shared::v1::Attachment, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::shared::v1::Attachment, _impl_.filename_),
        PROTOBUF_FIELD_OFFSET(::shared::v1::Attachment, _impl_.file_type_),
        PROTOBUF_FIELD_OFFSET(::shared::v1::Attachment, _impl_.file_size_),
        PROTOBUF_FIELD_OFFSET(::shared::v1::Attachment, _impl_.file_extension_),
        PROTOBUF_FIELD_OFFSET(::shared::v1::Attachment, _impl_.base64_),
        PROTOBUF_FIELD_OFFSET(::shared::v1::Attachment, _impl_.exif_orientation_),
        PROTOBUF_FIELD_OFFSET(::shared::v1::Attachment, _impl_.crop_),
        PROTOBUF_FIELD_OFFSET(::shared::v1::Attachment, _impl_.metadata_),
        PROTOBUF_FIELD_OFFSET(::shared::v1::Attachment, _impl_.data_),
        PROTOBUF_FIELD_OFFSET(::shared::v1::Attachment, _impl_.mime_),
        PROTOBUF_FIELD_OFFSET(::shared::v1::Attachment, _impl_.checksum_),
        0,
        1,
        2,
        10,
        3,
        4,
        11,
        8,
        9,
        5,
        6,
        7,
        0x000, // bitmap
        PROTOBUF_FIELD_OFFSET(::shared::v1::Attachments, _impl_.attachments_),
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::shared::v1::Crop, _impl_._has_bits_),
        8, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::shared::v1::Crop, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::shared::v1::Crop, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::shared::v1::Crop, _impl_.width_),
        PROTOBUF_FIELD_OFFSET(::shared::v1::Crop, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::shared::v1::Crop, _impl_.aspect_ratio_),
        0,
        1,
        2,
        3,
        4,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::shared::v1::AttachmentError, _impl_._has_bits_),
        7, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::shared::v1::AttachmentError, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::shared::v1::AttachmentError, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::shared::v1::AttachmentError, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::shared::v1::AttachmentError, _impl_.error_),
        0,
        3,
        1,
        2,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::shared::v1::Attachment)},
        {27, sizeof(::shared::v1::Attachments)},
        {29, sizeof(::shared::v1::Crop)},
        {42, sizeof(::shared::v1::AttachmentError)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::shared::v1::_Attachment_default_instance_._instance,
    &::shared::v1::_Attachments_default_instance_._instance,
    &::shared::v1::_Crop_default_instance_._instance,
    &::shared::v1::_AttachmentError_default_instance_._instance,
};
const char descriptor_table_protodef_shared_2fv1_2fattachment_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\032shared/v1/attachment.proto\022\tshared.v1\032"
    "\026shared/v1/struct.proto\"\206\003\n\nAttachment\022\016"
    "\n\002id\030\001 \001(\tR\002id\022\032\n\010filename\030\002 \001(\tR\010filena"
    "me\022\033\n\tfile_type\030\003 \001(\tR\010fileType\022\033\n\tfile_"
    "size\030\004 \001(\003R\010fileSize\022%\n\016file_extension\030\005"
    " \001(\tR\rfileExtension\022\026\n\006base64\030\006 \001(\tR\006bas"
    "e64\022)\n\020exif_orientation\030\007 \001(\005R\017exifOrien"
    "tation\022#\n\004crop\030\010 \001(\0132\017.shared.v1.CropR\004c"
    "rop\022-\n\010metadata\030\t \001(\0132\021.shared.v1.Struct"
    "R\010metadata\022\022\n\004data\030\n \001(\014R\004data\022\022\n\004mime\030\013"
    " \001(\tR\004mime\022\037\n\010checksum\030\014 \001(\tH\000R\010checksum"
    "\210\001\001B\013\n\t_checksum\"F\n\013Attachments\0227\n\013attac"
    "hments\030\001 \003(\0132\025.shared.v1.AttachmentR\013att"
    "achments\"s\n\004Crop\022\014\n\001x\030\001 \001(\002R\001x\022\014\n\001y\030\002 \001("
    "\002R\001y\022\024\n\005width\030\003 \001(\002R\005width\022\026\n\006height\030\004 \001"
    "(\002R\006height\022!\n\014aspect_ratio\030\005 \001(\002R\013aspect"
    "Ratio\"\205\001\n\017AttachmentError\022\016\n\002id\030\001 \001(\tR\002i"
    "d\0222\n\004type\030\002 \001(\0162\036.shared.v1.AttachmentEr"
    "rorTypeR\004type\022\030\n\007message\030\003 \001(\tR\007message\022"
    "\024\n\005error\030\004 \001(\tR\005error*\242\001\n\023AttachmentErro"
    "rType\022\017\n\013UNSPECIFIED\020\000\022\022\n\016INVALID_BASE64"
    "\020\001\022\025\n\021INVALID_FILE_TYPE\020\002\022\014\n\010BIG_FILE\020\003\022"
    "\016\n\nDECODE_IMG\020\004\022\026\n\022BIG_DIMENSIONS_IMG\020\005\022"
    "\031\n\025UNSUPPORTED_FILE_TYPE\020\006Bu\n\032org.megaco"
    "mmerce.shared.v1B\017AttachmentProtoZCgithu"
    "b.com/ahmad-khatib0-org/megacommerce-pro"
    "to/gen/go/shared/v1;v1\370\001\001b\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_shared_2fv1_2fattachment_2eproto_deps[1] = {
        &::descriptor_table_shared_2fv1_2fstruct_2eproto,
};
static ::absl::once_flag descriptor_table_shared_2fv1_2fattachment_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_shared_2fv1_2fattachment_2eproto = {
    false,
    false,
    1073,
    descriptor_table_protodef_shared_2fv1_2fattachment_2eproto,
    "shared/v1/attachment.proto",
    &descriptor_table_shared_2fv1_2fattachment_2eproto_once,
    descriptor_table_shared_2fv1_2fattachment_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_shared_2fv1_2fattachment_2eproto::offsets,
    file_level_enum_descriptors_shared_2fv1_2fattachment_2eproto,
    file_level_service_descriptors_shared_2fv1_2fattachment_2eproto,
};
namespace shared {
namespace v1 {
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL AttachmentErrorType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_shared_2fv1_2fattachment_2eproto);
  return file_level_enum_descriptors_shared_2fv1_2fattachment_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t AttachmentErrorType_internal_data_[] = {
    458752u, 0u, };
// ===================================================================

class Attachment::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Attachment>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Attachment, _impl_._has_bits_);
};

void Attachment::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.metadata_ != nullptr) _impl_.metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
Attachment::Attachment(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Attachment_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:shared.v1.Attachment)
}
PROTOBUF_NDEBUG_INLINE Attachment::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::shared::v1::Attachment& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        id_(arena, from.id_),
        filename_(arena, from.filename_),
        file_type_(arena, from.file_type_),
        file_extension_(arena, from.file_extension_),
        base64_(arena, from.base64_),
        data_(arena, from.data_),
        mime_(arena, from.mime_),
        checksum_(arena, from.checksum_) {}

Attachment::Attachment(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Attachment& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Attachment_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Attachment* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.crop_ = ((cached_has_bits & 0x00000100u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.crop_)
                : nullptr;
  _impl_.metadata_ = ((cached_has_bits & 0x00000200u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.metadata_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, file_size_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, file_size_),
           offsetof(Impl_, exif_orientation_) -
               offsetof(Impl_, file_size_) +
               sizeof(Impl_::exif_orientation_));

  // @@protoc_insertion_point(copy_constructor:shared.v1.Attachment)
}
PROTOBUF_NDEBUG_INLINE Attachment::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        id_(arena),
        filename_(arena),
        file_type_(arena),
        file_extension_(arena),
        base64_(arena),
        data_(arena),
        mime_(arena),
        checksum_(arena) {}

inline void Attachment::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, crop_),
           0,
           offsetof(Impl_, exif_orientation_) -
               offsetof(Impl_, crop_) +
               sizeof(Impl_::exif_orientation_));
}
Attachment::~Attachment() {
  // @@protoc_insertion_point(destructor:shared.v1.Attachment)
  SharedDtor(*this);
}
inline void Attachment::SharedDtor(MessageLite& self) {
  Attachment& this_ = static_cast<Attachment&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.filename_.Destroy();
  this_._impl_.file_type_.Destroy();
  this_._impl_.file_extension_.Destroy();
  this_._impl_.base64_.Destroy();
  this_._impl_.data_.Destroy();
  this_._impl_.mime_.Destroy();
  this_._impl_.checksum_.Destroy();
  delete this_._impl_.crop_;
  delete this_._impl_.metadata_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Attachment::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Attachment(arena);
}
constexpr auto Attachment::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Attachment),
                                            alignof(Attachment));
}
constexpr auto Attachment::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Attachment_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Attachment::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Attachment>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Attachment::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Attachment>(), &Attachment::ByteSizeLong,
              &Attachment::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Attachment, _impl_._cached_size_),
          false,
      },
      &Attachment::kDescriptorMethods,
      &descriptor_table_shared_2fv1_2fattachment_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Attachment_class_data_ =
        Attachment::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Attachment::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Attachment_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Attachment_class_data_.tc_table);
  return Attachment_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 2, 88, 2>
Attachment::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Attachment, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Attachment_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::shared::v1::Attachment>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1 [json_name = "id"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Attachment, _impl_.id_)}},
    // string filename = 2 [json_name = "filename"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(Attachment, _impl_.filename_)}},
    // string file_type = 3 [json_name = "fileType"];
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(Attachment, _impl_.file_type_)}},
    // int64 file_size = 4 [json_name = "fileSize"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Attachment, _impl_.file_size_), 10>(),
     {32, 10, 0, PROTOBUF_FIELD_OFFSET(Attachment, _impl_.file_size_)}},
    // string file_extension = 5 [json_name = "fileExtension"];
    {::_pbi::TcParser::FastUS1,
     {42, 3, 0, PROTOBUF_FIELD_OFFSET(Attachment, _impl_.file_extension_)}},
    // string base64 = 6 [json_name = "base64"];
    {::_pbi::TcParser::FastUS1,
     {50, 4, 0, PROTOBUF_FIELD_OFFSET(Attachment, _impl_.base64_)}},
    // int32 exif_orientation = 7 [json_name = "exifOrientation"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Attachment, _impl_.exif_orientation_), 11>(),
     {56, 11, 0, PROTOBUF_FIELD_OFFSET(Attachment, _impl_.exif_orientation_)}},
    // .shared.v1.Crop crop = 8 [json_name = "crop"];
    {::_pbi::TcParser::FastMtS1,
     {66, 8, 0, PROTOBUF_FIELD_OFFSET(Attachment, _impl_.crop_)}},
    // .shared.v1.Struct metadata = 9 [json_name = "metadata"];
    {::_pbi::TcParser::FastMtS1,
     {74, 9, 1, PROTOBUF_FIELD_OFFSET(Attachment, _impl_.metadata_)}},
    // bytes data = 10 [json_name = "data"];
    {::_pbi::TcParser::FastBS1,
     {82, 5, 0, PROTOBUF_FIELD_OFFSET(Attachment, _impl_.data_)}},
    // string mime = 11 [json_name = "mime"];
    {::_pbi::TcParser::FastUS1,
     {90, 6, 0, PROTOBUF_FIELD_OFFSET(Attachment, _impl_.mime_)}},
    // optional string checksum = 12 [json_name = "checksum"];
    {::_pbi::TcParser::FastUS1,
     {98, 7, 0, PROTOBUF_FIELD_OFFSET(Attachment, _impl_.checksum_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(Attachment, _impl_.id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string filename = 2 [json_name = "filename"];
    {PROTOBUF_FIELD_OFFSET(Attachment, _impl_.filename_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string file_type = 3 [json_name = "fileType"];
    {PROTOBUF_FIELD_OFFSET(Attachment, _impl_.file_type_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 file_size = 4 [json_name = "fileSize"];
    {PROTOBUF_FIELD_OFFSET(Attachment, _impl_.file_size_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // string file_extension = 5 [json_name = "fileExtension"];
    {PROTOBUF_FIELD_OFFSET(Attachment, _impl_.file_extension_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string base64 = 6 [json_name = "base64"];
    {PROTOBUF_FIELD_OFFSET(Attachment, _impl_.base64_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 exif_orientation = 7 [json_name = "exifOrientation"];
    {PROTOBUF_FIELD_OFFSET(Attachment, _impl_.exif_orientation_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // .shared.v1.Crop crop = 8 [json_name = "crop"];
    {PROTOBUF_FIELD_OFFSET(Attachment, _impl_.crop_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .shared.v1.Struct metadata = 9 [json_name = "metadata"];
    {PROTOBUF_FIELD_OFFSET(Attachment, _impl_.metadata_), _Internal::kHasBitsOffset + 9, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes data = 10 [json_name = "data"];
    {PROTOBUF_FIELD_OFFSET(Attachment, _impl_.data_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // string mime = 11 [json_name = "mime"];
    {PROTOBUF_FIELD_OFFSET(Attachment, _impl_.mime_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string checksum = 12 [json_name = "checksum"];
    {PROTOBUF_FIELD_OFFSET(Attachment, _impl_.checksum_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::shared::v1::Crop>()},
      {::_pbi::TcParser::GetTable<::shared::v1::Struct>()},
  }},
  {{
    "\24\2\10\11\0\16\6\0\0\0\0\4\10\0\0\0"
    "shared.v1.Attachment"
    "id"
    "filename"
    "file_type"
    "file_extension"
    "base64"
    "mime"
    "checksum"
  }},
};
PROTOBUF_NOINLINE void Attachment::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.v1.Attachment)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.filename_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.file_type_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.file_extension_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.base64_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _impl_.data_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _impl_.mime_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _impl_.checksum_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(_impl_.crop_ != nullptr);
      _impl_.crop_->Clear();
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(_impl_.metadata_ != nullptr);
      _impl_.metadata_->Clear();
    }
  }
  if ((cached_has_bits & 0x00000c00u) != 0) {
    ::memset(&_impl_.file_size_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.exif_orientation_) -
        reinterpret_cast<char*>(&_impl_.file_size_)) + sizeof(_impl_.exif_orientation_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Attachment::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Attachment& this_ = static_cast<const Attachment&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Attachment::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Attachment& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:shared.v1.Attachment)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string id = 1 [json_name = "id"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_id().empty()) {
      const ::std::string& _s = this_._internal_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "shared.v1.Attachment.id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string filename = 2 [json_name = "filename"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_filename().empty()) {
      const ::std::string& _s = this_._internal_filename();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "shared.v1.Attachment.filename");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string file_type = 3 [json_name = "fileType"];
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_file_type().empty()) {
      const ::std::string& _s = this_._internal_file_type();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "shared.v1.Attachment.file_type");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // int64 file_size = 4 [json_name = "fileSize"];
  if ((this_._impl_._has_bits_[0] & 0x00000400u) != 0) {
    if (this_._internal_file_size() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<4>(
              stream, this_._internal_file_size(), target);
    }
  }

  // string file_extension = 5 [json_name = "fileExtension"];
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!this_._internal_file_extension().empty()) {
      const ::std::string& _s = this_._internal_file_extension();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "shared.v1.Attachment.file_extension");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  // string base64 = 6 [json_name = "base64"];
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (!this_._internal_base64().empty()) {
      const ::std::string& _s = this_._internal_base64();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "shared.v1.Attachment.base64");
      target = stream->WriteStringMaybeAliased(6, _s, target);
    }
  }

  // int32 exif_orientation = 7 [json_name = "exifOrientation"];
  if ((this_._impl_._has_bits_[0] & 0x00000800u) != 0) {
    if (this_._internal_exif_orientation() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<7>(
              stream, this_._internal_exif_orientation(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .shared.v1.Crop crop = 8 [json_name = "crop"];
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *this_._impl_.crop_, this_._impl_.crop_->GetCachedSize(), target,
        stream);
  }

  // .shared.v1.Struct metadata = 9 [json_name = "metadata"];
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, *this_._impl_.metadata_, this_._impl_.metadata_->GetCachedSize(), target,
        stream);
  }

  // bytes data = 10 [json_name = "data"];
  if ((cached_has_bits & 0x00000020u) != 0) {
    if (!this_._internal_data().empty()) {
      const ::std::string& _s = this_._internal_data();
      target = stream->WriteBytesMaybeAliased(10, _s, target);
    }
  }

  // string mime = 11 [json_name = "mime"];
  if ((cached_has_bits & 0x00000040u) != 0) {
    if (!this_._internal_mime().empty()) {
      const ::std::string& _s = this_._internal_mime();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "shared.v1.Attachment.mime");
      target = stream->WriteStringMaybeAliased(11, _s, target);
    }
  }

  // optional string checksum = 12 [json_name = "checksum"];
  if ((cached_has_bits & 0x00000080u) != 0) {
    const ::std::string& _s = this_._internal_checksum();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "shared.v1.Attachment.checksum");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.v1.Attachment)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Attachment::ByteSizeLong(const MessageLite& base) {
  const Attachment& this_ = static_cast<const Attachment&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Attachment::ByteSizeLong() const {
  const Attachment& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:shared.v1.Attachment)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string id = 1 [json_name = "id"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_id());
      }
    }
    // string filename = 2 [json_name = "filename"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_filename().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_filename());
      }
    }
    // string file_type = 3 [json_name = "fileType"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_file_type().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_file_type());
      }
    }
    // string file_extension = 5 [json_name = "fileExtension"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!this_._internal_file_extension().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_file_extension());
      }
    }
    // string base64 = 6 [json_name = "base64"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!this_._internal_base64().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_base64());
      }
    }
    // bytes data = 10 [json_name = "data"];
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!this_._internal_data().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_data());
      }
    }
    // string mime = 11 [json_name = "mime"];
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (!this_._internal_mime().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_mime());
      }
    }
    // optional string checksum = 12 [json_name = "checksum"];
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_checksum());
    }
  }
  if ((cached_has_bits & 0x00000f00u) != 0) {
    // .shared.v1.Crop crop = 8 [json_name = "crop"];
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.crop_);
    }
    // .shared.v1.Struct metadata = 9 [json_name = "metadata"];
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.metadata_);
    }
    // int64 file_size = 4 [json_name = "fileSize"];
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (this_._internal_file_size() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_file_size());
      }
    }
    // int32 exif_orientation = 7 [json_name = "exifOrientation"];
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (this_._internal_exif_orientation() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_exif_orientation());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Attachment::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Attachment*>(&to_msg);
  auto& from = static_cast<const Attachment&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:shared.v1.Attachment)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_id().empty()) {
        _this->_internal_set_id(from._internal_id());
      } else {
        if (_this->_impl_.id_.IsDefault()) {
          _this->_internal_set_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_filename().empty()) {
        _this->_internal_set_filename(from._internal_filename());
      } else {
        if (_this->_impl_.filename_.IsDefault()) {
          _this->_internal_set_filename("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_file_type().empty()) {
        _this->_internal_set_file_type(from._internal_file_type());
      } else {
        if (_this->_impl_.file_type_.IsDefault()) {
          _this->_internal_set_file_type("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!from._internal_file_extension().empty()) {
        _this->_internal_set_file_extension(from._internal_file_extension());
      } else {
        if (_this->_impl_.file_extension_.IsDefault()) {
          _this->_internal_set_file_extension("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!from._internal_base64().empty()) {
        _this->_internal_set_base64(from._internal_base64());
      } else {
        if (_this->_impl_.base64_.IsDefault()) {
          _this->_internal_set_base64("");
        }
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!from._internal_data().empty()) {
        _this->_internal_set_data(from._internal_data());
      } else {
        if (_this->_impl_.data_.IsDefault()) {
          _this->_internal_set_data("");
        }
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (!from._internal_mime().empty()) {
        _this->_internal_set_mime(from._internal_mime());
      } else {
        if (_this->_impl_.mime_.IsDefault()) {
          _this->_internal_set_mime("");
        }
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_internal_set_checksum(from._internal_checksum());
    }
  }
  if ((cached_has_bits & 0x00000f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(from._impl_.crop_ != nullptr);
      if (_this->_impl_.crop_ == nullptr) {
        _this->_impl_.crop_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.crop_);
      } else {
        _this->_impl_.crop_->MergeFrom(*from._impl_.crop_);
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(from._impl_.metadata_ != nullptr);
      if (_this->_impl_.metadata_ == nullptr) {
        _this->_impl_.metadata_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.metadata_);
      } else {
        _this->_impl_.metadata_->MergeFrom(*from._impl_.metadata_);
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (from._internal_file_size() != 0) {
        _this->_impl_.file_size_ = from._impl_.file_size_;
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (from._internal_exif_orientation() != 0) {
        _this->_impl_.exif_orientation_ = from._impl_.exif_orientation_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Attachment::CopyFrom(const Attachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.v1.Attachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Attachment::InternalSwap(Attachment* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filename_, &other->_impl_.filename_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.file_type_, &other->_impl_.file_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.file_extension_, &other->_impl_.file_extension_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.base64_, &other->_impl_.base64_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mime_, &other->_impl_.mime_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.checksum_, &other->_impl_.checksum_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Attachment, _impl_.exif_orientation_)
      + sizeof(Attachment::_impl_.exif_orientation_)
      - PROTOBUF_FIELD_OFFSET(Attachment, _impl_.crop_)>(
          reinterpret_cast<char*>(&_impl_.crop_),
          reinterpret_cast<char*>(&other->_impl_.crop_));
}

::google::protobuf::Metadata Attachment::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Attachments::_Internal {
 public:
};

Attachments::Attachments(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Attachments_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:shared.v1.Attachments)
}
PROTOBUF_NDEBUG_INLINE Attachments::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::shared::v1::Attachments& from_msg)
      : attachments_{visibility, arena, from.attachments_},
        _cached_size_{0} {}

Attachments::Attachments(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Attachments& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Attachments_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Attachments* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:shared.v1.Attachments)
}
PROTOBUF_NDEBUG_INLINE Attachments::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : attachments_{visibility, arena},
        _cached_size_{0} {}

inline void Attachments::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Attachments::~Attachments() {
  // @@protoc_insertion_point(destructor:shared.v1.Attachments)
  SharedDtor(*this);
}
inline void Attachments::SharedDtor(MessageLite& self) {
  Attachments& this_ = static_cast<Attachments&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Attachments::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Attachments(arena);
}
constexpr auto Attachments::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Attachments, _impl_.attachments_) +
          decltype(Attachments::_impl_.attachments_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Attachments), alignof(Attachments), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Attachments::PlacementNew_,
                                 sizeof(Attachments),
                                 alignof(Attachments));
  }
}
constexpr auto Attachments::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Attachments_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Attachments::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Attachments>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Attachments::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Attachments>(), &Attachments::ByteSizeLong,
              &Attachments::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Attachments, _impl_._cached_size_),
          false,
      },
      &Attachments::kDescriptorMethods,
      &descriptor_table_shared_2fv1_2fattachment_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Attachments_class_data_ =
        Attachments::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Attachments::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Attachments_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Attachments_class_data_.tc_table);
  return Attachments_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
Attachments::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Attachments_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::shared::v1::Attachments>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .shared.v1.Attachment attachments = 1 [json_name = "attachments"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Attachments, _impl_.attachments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .shared.v1.Attachment attachments = 1 [json_name = "attachments"];
    {PROTOBUF_FIELD_OFFSET(Attachments, _impl_.attachments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::shared::v1::Attachment>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void Attachments::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.v1.Attachments)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attachments_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Attachments::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Attachments& this_ = static_cast<const Attachments&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Attachments::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Attachments& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:shared.v1.Attachments)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .shared.v1.Attachment attachments = 1 [json_name = "attachments"];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_attachments_size());
       i < n; i++) {
    const auto& repfield = this_._internal_attachments().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.v1.Attachments)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Attachments::ByteSizeLong(const MessageLite& base) {
  const Attachments& this_ = static_cast<const Attachments&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Attachments::ByteSizeLong() const {
  const Attachments& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:shared.v1.Attachments)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .shared.v1.Attachment attachments = 1 [json_name = "attachments"];
    {
      total_size += 1UL * this_._internal_attachments_size();
      for (const auto& msg : this_._internal_attachments()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Attachments::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Attachments*>(&to_msg);
  auto& from = static_cast<const Attachments&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:shared.v1.Attachments)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_attachments()->MergeFrom(
      from._internal_attachments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Attachments::CopyFrom(const Attachments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.v1.Attachments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Attachments::InternalSwap(Attachments* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attachments_.InternalSwap(&other->_impl_.attachments_);
}

::google::protobuf::Metadata Attachments::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Crop::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Crop>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Crop, _impl_._has_bits_);
};

Crop::Crop(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Crop_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:shared.v1.Crop)
}
Crop::Crop(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Crop& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Crop_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE Crop::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void Crop::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, aspect_ratio_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::aspect_ratio_));
}
Crop::~Crop() {
  // @@protoc_insertion_point(destructor:shared.v1.Crop)
  SharedDtor(*this);
}
inline void Crop::SharedDtor(MessageLite& self) {
  Crop& this_ = static_cast<Crop&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Crop::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Crop(arena);
}
constexpr auto Crop::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Crop),
                                            alignof(Crop));
}
constexpr auto Crop::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Crop_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Crop::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Crop>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Crop::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Crop>(), &Crop::ByteSizeLong,
              &Crop::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Crop, _impl_._cached_size_),
          false,
      },
      &Crop::kDescriptorMethods,
      &descriptor_table_shared_2fv1_2fattachment_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Crop_class_data_ =
        Crop::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Crop::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Crop_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Crop_class_data_.tc_table);
  return Crop_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2>
Crop::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Crop, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Crop_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::shared::v1::Crop>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float x = 1 [json_name = "x"];
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(Crop, _impl_.x_)}},
    // float y = 2 [json_name = "y"];
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(Crop, _impl_.y_)}},
    // float width = 3 [json_name = "width"];
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(Crop, _impl_.width_)}},
    // float height = 4 [json_name = "height"];
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(Crop, _impl_.height_)}},
    // float aspect_ratio = 5 [json_name = "aspectRatio"];
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(Crop, _impl_.aspect_ratio_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1 [json_name = "x"];
    {PROTOBUF_FIELD_OFFSET(Crop, _impl_.x_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float y = 2 [json_name = "y"];
    {PROTOBUF_FIELD_OFFSET(Crop, _impl_.y_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float width = 3 [json_name = "width"];
    {PROTOBUF_FIELD_OFFSET(Crop, _impl_.width_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float height = 4 [json_name = "height"];
    {PROTOBUF_FIELD_OFFSET(Crop, _impl_.height_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float aspect_ratio = 5 [json_name = "aspectRatio"];
    {PROTOBUF_FIELD_OFFSET(Crop, _impl_.aspect_ratio_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void Crop::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.v1.Crop)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    ::memset(&_impl_.x_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.aspect_ratio_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.aspect_ratio_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Crop::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Crop& this_ = static_cast<const Crop&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Crop::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Crop& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:shared.v1.Crop)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float x = 1 [json_name = "x"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          1, this_._internal_x(), target);
    }
  }

  // float y = 2 [json_name = "y"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          2, this_._internal_y(), target);
    }
  }

  // float width = 3 [json_name = "width"];
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_width()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          3, this_._internal_width(), target);
    }
  }

  // float height = 4 [json_name = "height"];
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_height()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          4, this_._internal_height(), target);
    }
  }

  // float aspect_ratio = 5 [json_name = "aspectRatio"];
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_aspect_ratio()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          5, this_._internal_aspect_ratio(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.v1.Crop)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Crop::ByteSizeLong(const MessageLite& base) {
  const Crop& this_ = static_cast<const Crop&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Crop::ByteSizeLong() const {
  const Crop& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:shared.v1.Crop)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // float x = 1 [json_name = "x"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
        total_size += 5;
      }
    }
    // float y = 2 [json_name = "y"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
        total_size += 5;
      }
    }
    // float width = 3 [json_name = "width"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_width()) != 0) {
        total_size += 5;
      }
    }
    // float height = 4 [json_name = "height"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_height()) != 0) {
        total_size += 5;
      }
    }
    // float aspect_ratio = 5 [json_name = "aspectRatio"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_aspect_ratio()) != 0) {
        total_size += 5;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Crop::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Crop*>(&to_msg);
  auto& from = static_cast<const Crop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:shared.v1.Crop)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_x()) != 0) {
        _this->_impl_.x_ = from._impl_.x_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_y()) != 0) {
        _this->_impl_.y_ = from._impl_.y_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_width()) != 0) {
        _this->_impl_.width_ = from._impl_.width_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_height()) != 0) {
        _this->_impl_.height_ = from._impl_.height_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_aspect_ratio()) != 0) {
        _this->_impl_.aspect_ratio_ = from._impl_.aspect_ratio_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Crop::CopyFrom(const Crop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.v1.Crop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Crop::InternalSwap(Crop* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Crop, _impl_.aspect_ratio_)
      + sizeof(Crop::_impl_.aspect_ratio_)
      - PROTOBUF_FIELD_OFFSET(Crop, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Crop::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AttachmentError::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<AttachmentError>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AttachmentError, _impl_._has_bits_);
};

AttachmentError::AttachmentError(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AttachmentError_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:shared.v1.AttachmentError)
}
PROTOBUF_NDEBUG_INLINE AttachmentError::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::shared::v1::AttachmentError& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        id_(arena, from.id_),
        message_(arena, from.message_),
        error_(arena, from.error_) {}

AttachmentError::AttachmentError(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AttachmentError& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AttachmentError_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AttachmentError* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:shared.v1.AttachmentError)
}
PROTOBUF_NDEBUG_INLINE AttachmentError::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        id_(arena),
        message_(arena),
        error_(arena) {}

inline void AttachmentError::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.type_ = {};
}
AttachmentError::~AttachmentError() {
  // @@protoc_insertion_point(destructor:shared.v1.AttachmentError)
  SharedDtor(*this);
}
inline void AttachmentError::SharedDtor(MessageLite& self) {
  AttachmentError& this_ = static_cast<AttachmentError&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.message_.Destroy();
  this_._impl_.error_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AttachmentError::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AttachmentError(arena);
}
constexpr auto AttachmentError::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AttachmentError),
                                            alignof(AttachmentError));
}
constexpr auto AttachmentError::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AttachmentError_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AttachmentError::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AttachmentError>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AttachmentError::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AttachmentError>(), &AttachmentError::ByteSizeLong,
              &AttachmentError::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AttachmentError, _impl_._cached_size_),
          false,
      },
      &AttachmentError::kDescriptorMethods,
      &descriptor_table_shared_2fv1_2fattachment_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AttachmentError_class_data_ =
        AttachmentError::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AttachmentError::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AttachmentError_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AttachmentError_class_data_.tc_table);
  return AttachmentError_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 48, 2>
AttachmentError::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AttachmentError, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    AttachmentError_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::shared::v1::AttachmentError>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string error = 4 [json_name = "error"];
    {::_pbi::TcParser::FastUS1,
     {34, 2, 0, PROTOBUF_FIELD_OFFSET(AttachmentError, _impl_.error_)}},
    // string id = 1 [json_name = "id"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AttachmentError, _impl_.id_)}},
    // .shared.v1.AttachmentErrorType type = 2 [json_name = "type"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AttachmentError, _impl_.type_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(AttachmentError, _impl_.type_)}},
    // string message = 3 [json_name = "message"];
    {::_pbi::TcParser::FastUS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(AttachmentError, _impl_.message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(AttachmentError, _impl_.id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .shared.v1.AttachmentErrorType type = 2 [json_name = "type"];
    {PROTOBUF_FIELD_OFFSET(AttachmentError, _impl_.type_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // string message = 3 [json_name = "message"];
    {PROTOBUF_FIELD_OFFSET(AttachmentError, _impl_.message_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string error = 4 [json_name = "error"];
    {PROTOBUF_FIELD_OFFSET(AttachmentError, _impl_.error_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\31\2\0\7\5\0\0\0"
    "shared.v1.AttachmentError"
    "id"
    "message"
    "error"
  }},
};
PROTOBUF_NOINLINE void AttachmentError::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.v1.AttachmentError)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.error_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AttachmentError::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AttachmentError& this_ = static_cast<const AttachmentError&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AttachmentError::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AttachmentError& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:shared.v1.AttachmentError)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string id = 1 [json_name = "id"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_id().empty()) {
      const ::std::string& _s = this_._internal_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "shared.v1.AttachmentError.id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // .shared.v1.AttachmentErrorType type = 2 [json_name = "type"];
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          2, this_._internal_type(), target);
    }
  }

  // string message = 3 [json_name = "message"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_message().empty()) {
      const ::std::string& _s = this_._internal_message();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "shared.v1.AttachmentError.message");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // string error = 4 [json_name = "error"];
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_error().empty()) {
      const ::std::string& _s = this_._internal_error();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "shared.v1.AttachmentError.error");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.v1.AttachmentError)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AttachmentError::ByteSizeLong(const MessageLite& base) {
  const AttachmentError& this_ = static_cast<const AttachmentError&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AttachmentError::ByteSizeLong() const {
  const AttachmentError& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:shared.v1.AttachmentError)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // string id = 1 [json_name = "id"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_id());
      }
    }
    // string message = 3 [json_name = "message"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_message().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_message());
      }
    }
    // string error = 4 [json_name = "error"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_error().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_error());
      }
    }
    // .shared.v1.AttachmentErrorType type = 2 [json_name = "type"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AttachmentError::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AttachmentError*>(&to_msg);
  auto& from = static_cast<const AttachmentError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:shared.v1.AttachmentError)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_id().empty()) {
        _this->_internal_set_id(from._internal_id());
      } else {
        if (_this->_impl_.id_.IsDefault()) {
          _this->_internal_set_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_message().empty()) {
        _this->_internal_set_message(from._internal_message());
      } else {
        if (_this->_impl_.message_.IsDefault()) {
          _this->_internal_set_message("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_error().empty()) {
        _this->_internal_set_error(from._internal_error());
      } else {
        if (_this->_impl_.error_.IsDefault()) {
          _this->_internal_set_error("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AttachmentError::CopyFrom(const AttachmentError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.v1.AttachmentError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AttachmentError::InternalSwap(AttachmentError* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_, &other->_impl_.error_, arena);
  swap(_impl_.type_, other->_impl_.type_);
}

::google::protobuf::Metadata AttachmentError::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace shared
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_shared_2fv1_2fattachment_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
