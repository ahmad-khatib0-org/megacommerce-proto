/**
 * @fileoverview gRPC-Web generated client stub for common.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v0.0.0
// source: common/v1/common.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as common_v1_config_pb from '../../common/v1/config_pb'; // proto import: "common/v1/config.proto"
import * as common_v1_common_pb from '../../common/v1/common_pb'; // proto import: "common/v1/common.proto"


export class CommonServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorConfigGet = new grpcWeb.MethodDescriptor(
    '/common.v1.CommonService/ConfigGet',
    grpcWeb.MethodType.UNARY,
    common_v1_common_pb.ConfigGetRequest,
    common_v1_config_pb.Config,
    (request: common_v1_common_pb.ConfigGetRequest) => {
      return request.serializeBinary();
    },
    common_v1_config_pb.Config.deserializeBinary
  );

  configGet(
    request: common_v1_common_pb.ConfigGetRequest,
    metadata?: grpcWeb.Metadata | null): Promise<common_v1_config_pb.Config>;

  configGet(
    request: common_v1_common_pb.ConfigGetRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_v1_config_pb.Config) => void): grpcWeb.ClientReadableStream<common_v1_config_pb.Config>;

  configGet(
    request: common_v1_common_pb.ConfigGetRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_v1_config_pb.Config) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/common.v1.CommonService/ConfigGet',
        request,
        metadata || {},
        this.methodDescriptorConfigGet,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/common.v1.CommonService/ConfigGet',
    request,
    metadata || {},
    this.methodDescriptorConfigGet);
  }

  methodDescriptorConfigUpdate = new grpcWeb.MethodDescriptor(
    '/common.v1.CommonService/ConfigUpdate',
    grpcWeb.MethodType.UNARY,
    common_v1_common_pb.ConfigUpdateRequest,
    common_v1_config_pb.Config,
    (request: common_v1_common_pb.ConfigUpdateRequest) => {
      return request.serializeBinary();
    },
    common_v1_config_pb.Config.deserializeBinary
  );

  configUpdate(
    request: common_v1_common_pb.ConfigUpdateRequest,
    metadata?: grpcWeb.Metadata | null): Promise<common_v1_config_pb.Config>;

  configUpdate(
    request: common_v1_common_pb.ConfigUpdateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_v1_config_pb.Config) => void): grpcWeb.ClientReadableStream<common_v1_config_pb.Config>;

  configUpdate(
    request: common_v1_common_pb.ConfigUpdateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_v1_config_pb.Config) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/common.v1.CommonService/ConfigUpdate',
        request,
        metadata || {},
        this.methodDescriptorConfigUpdate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/common.v1.CommonService/ConfigUpdate',
    request,
    metadata || {},
    this.methodDescriptorConfigUpdate);
  }

  methodDescriptorConfigListener = new grpcWeb.MethodDescriptor(
    '/common.v1.CommonService/ConfigListener',
    grpcWeb.MethodType.SERVER_STREAMING,
    common_v1_common_pb.ConfigListenerRequest,
    common_v1_config_pb.Config,
    (request: common_v1_common_pb.ConfigListenerRequest) => {
      return request.serializeBinary();
    },
    common_v1_config_pb.Config.deserializeBinary
  );

  configListener(
    request: common_v1_common_pb.ConfigListenerRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<common_v1_config_pb.Config> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/common.v1.CommonService/ConfigListener',
      request,
      metadata || {},
      this.methodDescriptorConfigListener);
  }

}

