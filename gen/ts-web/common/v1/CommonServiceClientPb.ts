/**
 * @fileoverview gRPC-Web generated client stub for common.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v0.0.0
// source: common/v1/common.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as common_v1_config_pb from '../../common/v1/config_pb'; // proto import: "common/v1/config.proto"
import * as common_v1_types_pb from '../../common/v1/types_pb'; // proto import: "common/v1/types.proto"
import * as common_v1_trans_pb from '../../common/v1/trans_pb'; // proto import: "common/v1/trans.proto"


export class CommonServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorPing = new grpcWeb.MethodDescriptor(
    '/common.v1.CommonService/Ping',
    grpcWeb.MethodType.UNARY,
    common_v1_types_pb.PingRequest,
    common_v1_types_pb.PingResponse,
    (request: common_v1_types_pb.PingRequest) => {
      return request.serializeBinary();
    },
    common_v1_types_pb.PingResponse.deserializeBinary
  );

  ping(
    request: common_v1_types_pb.PingRequest,
    metadata?: grpcWeb.Metadata | null): Promise<common_v1_types_pb.PingResponse>;

  ping(
    request: common_v1_types_pb.PingRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_v1_types_pb.PingResponse) => void): grpcWeb.ClientReadableStream<common_v1_types_pb.PingResponse>;

  ping(
    request: common_v1_types_pb.PingRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_v1_types_pb.PingResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/common.v1.CommonService/Ping',
        request,
        metadata || {},
        this.methodDescriptorPing,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/common.v1.CommonService/Ping',
    request,
    metadata || {},
    this.methodDescriptorPing);
  }

  methodDescriptorConfigGet = new grpcWeb.MethodDescriptor(
    '/common.v1.CommonService/ConfigGet',
    grpcWeb.MethodType.UNARY,
    common_v1_config_pb.ConfigGetRequest,
    common_v1_config_pb.ConfigGetResponse,
    (request: common_v1_config_pb.ConfigGetRequest) => {
      return request.serializeBinary();
    },
    common_v1_config_pb.ConfigGetResponse.deserializeBinary
  );

  configGet(
    request: common_v1_config_pb.ConfigGetRequest,
    metadata?: grpcWeb.Metadata | null): Promise<common_v1_config_pb.ConfigGetResponse>;

  configGet(
    request: common_v1_config_pb.ConfigGetRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_v1_config_pb.ConfigGetResponse) => void): grpcWeb.ClientReadableStream<common_v1_config_pb.ConfigGetResponse>;

  configGet(
    request: common_v1_config_pb.ConfigGetRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_v1_config_pb.ConfigGetResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/common.v1.CommonService/ConfigGet',
        request,
        metadata || {},
        this.methodDescriptorConfigGet,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/common.v1.CommonService/ConfigGet',
    request,
    metadata || {},
    this.methodDescriptorConfigGet);
  }

  methodDescriptorConfigUpdate = new grpcWeb.MethodDescriptor(
    '/common.v1.CommonService/ConfigUpdate',
    grpcWeb.MethodType.UNARY,
    common_v1_config_pb.ConfigUpdateRequest,
    common_v1_config_pb.ConfigUpdateResponse,
    (request: common_v1_config_pb.ConfigUpdateRequest) => {
      return request.serializeBinary();
    },
    common_v1_config_pb.ConfigUpdateResponse.deserializeBinary
  );

  configUpdate(
    request: common_v1_config_pb.ConfigUpdateRequest,
    metadata?: grpcWeb.Metadata | null): Promise<common_v1_config_pb.ConfigUpdateResponse>;

  configUpdate(
    request: common_v1_config_pb.ConfigUpdateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_v1_config_pb.ConfigUpdateResponse) => void): grpcWeb.ClientReadableStream<common_v1_config_pb.ConfigUpdateResponse>;

  configUpdate(
    request: common_v1_config_pb.ConfigUpdateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_v1_config_pb.ConfigUpdateResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/common.v1.CommonService/ConfigUpdate',
        request,
        metadata || {},
        this.methodDescriptorConfigUpdate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/common.v1.CommonService/ConfigUpdate',
    request,
    metadata || {},
    this.methodDescriptorConfigUpdate);
  }

  methodDescriptorConfigListener = new grpcWeb.MethodDescriptor(
    '/common.v1.CommonService/ConfigListener',
    grpcWeb.MethodType.SERVER_STREAMING,
    common_v1_config_pb.ConfigListenerRequest,
    common_v1_config_pb.ConfigListenerResponse,
    (request: common_v1_config_pb.ConfigListenerRequest) => {
      return request.serializeBinary();
    },
    common_v1_config_pb.ConfigListenerResponse.deserializeBinary
  );

  configListener(
    request: common_v1_config_pb.ConfigListenerRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<common_v1_config_pb.ConfigListenerResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/common.v1.CommonService/ConfigListener',
      request,
      metadata || {},
      this.methodDescriptorConfigListener);
  }

  methodDescriptorTranslationsGet = new grpcWeb.MethodDescriptor(
    '/common.v1.CommonService/TranslationsGet',
    grpcWeb.MethodType.UNARY,
    common_v1_trans_pb.TranslationsGetRequest,
    common_v1_trans_pb.TranslationsGetResponse,
    (request: common_v1_trans_pb.TranslationsGetRequest) => {
      return request.serializeBinary();
    },
    common_v1_trans_pb.TranslationsGetResponse.deserializeBinary
  );

  translationsGet(
    request: common_v1_trans_pb.TranslationsGetRequest,
    metadata?: grpcWeb.Metadata | null): Promise<common_v1_trans_pb.TranslationsGetResponse>;

  translationsGet(
    request: common_v1_trans_pb.TranslationsGetRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_v1_trans_pb.TranslationsGetResponse) => void): grpcWeb.ClientReadableStream<common_v1_trans_pb.TranslationsGetResponse>;

  translationsGet(
    request: common_v1_trans_pb.TranslationsGetRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_v1_trans_pb.TranslationsGetResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/common.v1.CommonService/TranslationsGet',
        request,
        metadata || {},
        this.methodDescriptorTranslationsGet,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/common.v1.CommonService/TranslationsGet',
    request,
    metadata || {},
    this.methodDescriptorTranslationsGet);
  }

  methodDescriptorTranslationForLangGet = new grpcWeb.MethodDescriptor(
    '/common.v1.CommonService/TranslationForLangGet',
    grpcWeb.MethodType.UNARY,
    common_v1_trans_pb.TranslationsForLangGetRequest,
    common_v1_trans_pb.TranslationsForLangGetResponse,
    (request: common_v1_trans_pb.TranslationsForLangGetRequest) => {
      return request.serializeBinary();
    },
    common_v1_trans_pb.TranslationsForLangGetResponse.deserializeBinary
  );

  translationForLangGet(
    request: common_v1_trans_pb.TranslationsForLangGetRequest,
    metadata?: grpcWeb.Metadata | null): Promise<common_v1_trans_pb.TranslationsForLangGetResponse>;

  translationForLangGet(
    request: common_v1_trans_pb.TranslationsForLangGetRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_v1_trans_pb.TranslationsForLangGetResponse) => void): grpcWeb.ClientReadableStream<common_v1_trans_pb.TranslationsForLangGetResponse>;

  translationForLangGet(
    request: common_v1_trans_pb.TranslationsForLangGetRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_v1_trans_pb.TranslationsForLangGetResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/common.v1.CommonService/TranslationForLangGet',
        request,
        metadata || {},
        this.methodDescriptorTranslationForLangGet,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/common.v1.CommonService/TranslationForLangGet',
    request,
    metadata || {},
    this.methodDescriptorTranslationForLangGet);
  }

}

