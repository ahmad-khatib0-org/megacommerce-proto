// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: search/v1/tasks.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../shared/v1/time";

export const protobufPackage = "search.v1";

/** Minimal task-create / add-documents response */
export interface TaskCreateResponse {
  /** Meili returns a numeric task id (examples show "taskUid"). Use uint64. */
  taskUid: string;
  /** index uid string */
  indexUid: string;
  /** status e.g. "enqueued", "processing", "succeeded", "failed" */
  status: string;
  /** type e.g. "documentAdditionOrUpdate" */
  type: string;
  /** enqueuedAt is returned as an RFC3339 string in JSON. Use Timestamp for typed time. */
  enqueuedAt?: Timestamp | undefined;
}

function createBaseTaskCreateResponse(): TaskCreateResponse {
  return { taskUid: "0", indexUid: "", status: "", type: "", enqueuedAt: undefined };
}

export const TaskCreateResponse: MessageFns<TaskCreateResponse> = {
  encode(message: TaskCreateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskUid !== "0") {
      writer.uint32(8).uint64(message.taskUid);
    }
    if (message.indexUid !== "") {
      writer.uint32(18).string(message.indexUid);
    }
    if (message.status !== "") {
      writer.uint32(26).string(message.status);
    }
    if (message.type !== "") {
      writer.uint32(34).string(message.type);
    }
    if (message.enqueuedAt !== undefined) {
      Timestamp.encode(message.enqueuedAt, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskCreateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskCreateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.taskUid = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.indexUid = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.enqueuedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskCreateResponse {
    return {
      taskUid: isSet(object.taskUid) ? globalThis.String(object.taskUid) : "0",
      indexUid: isSet(object.indexUid) ? globalThis.String(object.indexUid) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      enqueuedAt: isSet(object.enqueuedAt) ? Timestamp.fromJSON(object.enqueuedAt) : undefined,
    };
  },

  toJSON(message: TaskCreateResponse): unknown {
    const obj: any = {};
    if (message.taskUid !== "0") {
      obj.taskUid = message.taskUid;
    }
    if (message.indexUid !== "") {
      obj.indexUid = message.indexUid;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.enqueuedAt !== undefined) {
      obj.enqueuedAt = Timestamp.toJSON(message.enqueuedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskCreateResponse>, I>>(base?: I): TaskCreateResponse {
    return TaskCreateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskCreateResponse>, I>>(object: I): TaskCreateResponse {
    const message = createBaseTaskCreateResponse();
    message.taskUid = object.taskUid ?? "0";
    message.indexUid = object.indexUid ?? "";
    message.status = object.status ?? "";
    message.type = object.type ?? "";
    message.enqueuedAt = (object.enqueuedAt !== undefined && object.enqueuedAt !== null)
      ? Timestamp.fromPartial(object.enqueuedAt)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
