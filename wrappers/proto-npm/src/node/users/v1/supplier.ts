// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: users/v1/supplier.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Attachment } from "../../shared/v1/attachment";
import { AppError } from "../../shared/v1/error";
import { SuccessResponseData } from "../../shared/v1/types";

export const protobufPackage = "users.v1";

export interface SupplierCreateRequest {
  username: string;
  email: string;
  firstName: string;
  lastName: string;
  password: string;
  membership: string;
  image?: Attachment | undefined;
}

export interface SupplierCreateResponse {
  data?: SuccessResponseData | undefined;
  error?: AppError | undefined;
}

function createBaseSupplierCreateRequest(): SupplierCreateRequest {
  return { username: "", email: "", firstName: "", lastName: "", password: "", membership: "", image: undefined };
}

export const SupplierCreateRequest: MessageFns<SupplierCreateRequest> = {
  encode(message: SupplierCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.firstName !== "") {
      writer.uint32(26).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(34).string(message.lastName);
    }
    if (message.password !== "") {
      writer.uint32(42).string(message.password);
    }
    if (message.membership !== "") {
      writer.uint32(50).string(message.membership);
    }
    if (message.image !== undefined) {
      Attachment.encode(message.image, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SupplierCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSupplierCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.membership = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.image = Attachment.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SupplierCreateRequest {
    return {
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      membership: isSet(object.membership) ? globalThis.String(object.membership) : "",
      image: isSet(object.image) ? Attachment.fromJSON(object.image) : undefined,
    };
  },

  toJSON(message: SupplierCreateRequest): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.membership !== "") {
      obj.membership = message.membership;
    }
    if (message.image !== undefined) {
      obj.image = Attachment.toJSON(message.image);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SupplierCreateRequest>, I>>(base?: I): SupplierCreateRequest {
    return SupplierCreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SupplierCreateRequest>, I>>(object: I): SupplierCreateRequest {
    const message = createBaseSupplierCreateRequest();
    message.username = object.username ?? "";
    message.email = object.email ?? "";
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.password = object.password ?? "";
    message.membership = object.membership ?? "";
    message.image = (object.image !== undefined && object.image !== null)
      ? Attachment.fromPartial(object.image)
      : undefined;
    return message;
  },
};

function createBaseSupplierCreateResponse(): SupplierCreateResponse {
  return { data: undefined, error: undefined };
}

export const SupplierCreateResponse: MessageFns<SupplierCreateResponse> = {
  encode(message: SupplierCreateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      SuccessResponseData.encode(message.data, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      AppError.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SupplierCreateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSupplierCreateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = SuccessResponseData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = AppError.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SupplierCreateResponse {
    return {
      data: isSet(object.data) ? SuccessResponseData.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? AppError.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: SupplierCreateResponse): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = SuccessResponseData.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = AppError.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SupplierCreateResponse>, I>>(base?: I): SupplierCreateResponse {
    return SupplierCreateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SupplierCreateResponse>, I>>(object: I): SupplierCreateResponse {
    const message = createBaseSupplierCreateResponse();
    message.data = (object.data !== undefined && object.data !== null)
      ? SuccessResponseData.fromPartial(object.data)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? AppError.fromPartial(object.error)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
