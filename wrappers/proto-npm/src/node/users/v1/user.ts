// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: users/v1/user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "users.v1";

export interface UserImageMetadata {
  mime: string;
  height: number;
  widht: number;
  sizeBytes: string;
}

export interface User {
  id?: string | undefined;
  username?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  userType?: string | undefined;
  image?: string | undefined;
  imageMetadata?: UserImageMetadata | undefined;
  membership?: string | undefined;
  isEmailVerified?: boolean | undefined;
  password?: string | undefined;
  authData?: string | undefined;
  authService?: string | undefined;
  roles: string[];
  props: string[];
  notifyProps: string[];
  lastPasswordUpdate?: string | undefined;
  lastPictureUpdate?: string | undefined;
  failedAttempts?: number | undefined;
  locale?: string | undefined;
  mfaActive?: boolean | undefined;
  mfaSecret?: string | undefined;
  lastActivityAt?: string | undefined;
  lastLogin?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
}

function createBaseUserImageMetadata(): UserImageMetadata {
  return { mime: "", height: 0, widht: 0, sizeBytes: "0" };
}

export const UserImageMetadata: MessageFns<UserImageMetadata> = {
  encode(message: UserImageMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mime !== "") {
      writer.uint32(10).string(message.mime);
    }
    if (message.height !== 0) {
      writer.uint32(16).int32(message.height);
    }
    if (message.widht !== 0) {
      writer.uint32(24).int32(message.widht);
    }
    if (message.sizeBytes !== "0") {
      writer.uint32(32).int64(message.sizeBytes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserImageMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserImageMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mime = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.height = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.widht = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.sizeBytes = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserImageMetadata {
    return {
      mime: isSet(object.mime) ? globalThis.String(object.mime) : "",
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      widht: isSet(object.widht) ? globalThis.Number(object.widht) : 0,
      sizeBytes: isSet(object.sizeBytes) ? globalThis.String(object.sizeBytes) : "0",
    };
  },

  toJSON(message: UserImageMetadata): unknown {
    const obj: any = {};
    if (message.mime !== "") {
      obj.mime = message.mime;
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.widht !== 0) {
      obj.widht = Math.round(message.widht);
    }
    if (message.sizeBytes !== "0") {
      obj.sizeBytes = message.sizeBytes;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserImageMetadata>, I>>(base?: I): UserImageMetadata {
    return UserImageMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserImageMetadata>, I>>(object: I): UserImageMetadata {
    const message = createBaseUserImageMetadata();
    message.mime = object.mime ?? "";
    message.height = object.height ?? 0;
    message.widht = object.widht ?? 0;
    message.sizeBytes = object.sizeBytes ?? "0";
    return message;
  },
};

function createBaseUser(): User {
  return {
    id: undefined,
    username: undefined,
    firstName: undefined,
    lastName: undefined,
    email: undefined,
    userType: undefined,
    image: undefined,
    imageMetadata: undefined,
    membership: undefined,
    isEmailVerified: undefined,
    password: undefined,
    authData: undefined,
    authService: undefined,
    roles: [],
    props: [],
    notifyProps: [],
    lastPasswordUpdate: undefined,
    lastPictureUpdate: undefined,
    failedAttempts: undefined,
    locale: undefined,
    mfaActive: undefined,
    mfaSecret: undefined,
    lastActivityAt: undefined,
    lastLogin: undefined,
    createdAt: undefined,
    updatedAt: undefined,
    deletedAt: undefined,
  };
}

export const User: MessageFns<User> = {
  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.username !== undefined) {
      writer.uint32(18).string(message.username);
    }
    if (message.firstName !== undefined) {
      writer.uint32(26).string(message.firstName);
    }
    if (message.lastName !== undefined) {
      writer.uint32(34).string(message.lastName);
    }
    if (message.email !== undefined) {
      writer.uint32(42).string(message.email);
    }
    if (message.userType !== undefined) {
      writer.uint32(50).string(message.userType);
    }
    if (message.image !== undefined) {
      writer.uint32(58).string(message.image);
    }
    if (message.imageMetadata !== undefined) {
      UserImageMetadata.encode(message.imageMetadata, writer.uint32(66).fork()).join();
    }
    if (message.membership !== undefined) {
      writer.uint32(74).string(message.membership);
    }
    if (message.isEmailVerified !== undefined) {
      writer.uint32(80).bool(message.isEmailVerified);
    }
    if (message.password !== undefined) {
      writer.uint32(90).string(message.password);
    }
    if (message.authData !== undefined) {
      writer.uint32(98).string(message.authData);
    }
    if (message.authService !== undefined) {
      writer.uint32(106).string(message.authService);
    }
    for (const v of message.roles) {
      writer.uint32(114).string(v!);
    }
    for (const v of message.props) {
      writer.uint32(122).string(v!);
    }
    for (const v of message.notifyProps) {
      writer.uint32(130).string(v!);
    }
    if (message.lastPasswordUpdate !== undefined) {
      writer.uint32(136).int64(message.lastPasswordUpdate);
    }
    if (message.lastPictureUpdate !== undefined) {
      writer.uint32(144).int64(message.lastPictureUpdate);
    }
    if (message.failedAttempts !== undefined) {
      writer.uint32(152).int32(message.failedAttempts);
    }
    if (message.locale !== undefined) {
      writer.uint32(162).string(message.locale);
    }
    if (message.mfaActive !== undefined) {
      writer.uint32(168).bool(message.mfaActive);
    }
    if (message.mfaSecret !== undefined) {
      writer.uint32(178).string(message.mfaSecret);
    }
    if (message.lastActivityAt !== undefined) {
      writer.uint32(184).int64(message.lastActivityAt);
    }
    if (message.lastLogin !== undefined) {
      writer.uint32(192).int64(message.lastLogin);
    }
    if (message.createdAt !== undefined) {
      writer.uint32(200).int64(message.createdAt);
    }
    if (message.updatedAt !== undefined) {
      writer.uint32(208).int64(message.updatedAt);
    }
    if (message.deletedAt !== undefined) {
      writer.uint32(216).int64(message.deletedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.userType = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.imageMetadata = UserImageMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.membership = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.isEmailVerified = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.authData = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.authService = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.roles.push(reader.string());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.props.push(reader.string());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.notifyProps.push(reader.string());
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.lastPasswordUpdate = reader.int64().toString();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.lastPictureUpdate = reader.int64().toString();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.failedAttempts = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.locale = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.mfaActive = reader.bool();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.mfaSecret = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.lastActivityAt = reader.int64().toString();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.lastLogin = reader.int64().toString();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.createdAt = reader.int64().toString();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.updatedAt = reader.int64().toString();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.deletedAt = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      username: isSet(object.username) ? globalThis.String(object.username) : undefined,
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : undefined,
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : undefined,
      email: isSet(object.email) ? globalThis.String(object.email) : undefined,
      userType: isSet(object.userType) ? globalThis.String(object.userType) : undefined,
      image: isSet(object.image) ? globalThis.String(object.image) : undefined,
      imageMetadata: isSet(object.imageMetadata) ? UserImageMetadata.fromJSON(object.imageMetadata) : undefined,
      membership: isSet(object.membership) ? globalThis.String(object.membership) : undefined,
      isEmailVerified: isSet(object.isEmailVerified) ? globalThis.Boolean(object.isEmailVerified) : undefined,
      password: isSet(object.password) ? globalThis.String(object.password) : undefined,
      authData: isSet(object.authData) ? globalThis.String(object.authData) : undefined,
      authService: isSet(object.authService) ? globalThis.String(object.authService) : undefined,
      roles: globalThis.Array.isArray(object?.roles) ? object.roles.map((e: any) => globalThis.String(e)) : [],
      props: globalThis.Array.isArray(object?.props) ? object.props.map((e: any) => globalThis.String(e)) : [],
      notifyProps: globalThis.Array.isArray(object?.notifyProps)
        ? object.notifyProps.map((e: any) => globalThis.String(e))
        : [],
      lastPasswordUpdate: isSet(object.lastPasswordUpdate) ? globalThis.String(object.lastPasswordUpdate) : undefined,
      lastPictureUpdate: isSet(object.lastPictureUpdate) ? globalThis.String(object.lastPictureUpdate) : undefined,
      failedAttempts: isSet(object.failedAttempts) ? globalThis.Number(object.failedAttempts) : undefined,
      locale: isSet(object.locale) ? globalThis.String(object.locale) : undefined,
      mfaActive: isSet(object.mfaActive) ? globalThis.Boolean(object.mfaActive) : undefined,
      mfaSecret: isSet(object.mfaSecret) ? globalThis.String(object.mfaSecret) : undefined,
      lastActivityAt: isSet(object.lastActivityAt) ? globalThis.String(object.lastActivityAt) : undefined,
      lastLogin: isSet(object.lastLogin) ? globalThis.String(object.lastLogin) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : undefined,
      deletedAt: isSet(object.deletedAt) ? globalThis.String(object.deletedAt) : undefined,
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.username !== undefined) {
      obj.username = message.username;
    }
    if (message.firstName !== undefined) {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== undefined) {
      obj.lastName = message.lastName;
    }
    if (message.email !== undefined) {
      obj.email = message.email;
    }
    if (message.userType !== undefined) {
      obj.userType = message.userType;
    }
    if (message.image !== undefined) {
      obj.image = message.image;
    }
    if (message.imageMetadata !== undefined) {
      obj.imageMetadata = UserImageMetadata.toJSON(message.imageMetadata);
    }
    if (message.membership !== undefined) {
      obj.membership = message.membership;
    }
    if (message.isEmailVerified !== undefined) {
      obj.isEmailVerified = message.isEmailVerified;
    }
    if (message.password !== undefined) {
      obj.password = message.password;
    }
    if (message.authData !== undefined) {
      obj.authData = message.authData;
    }
    if (message.authService !== undefined) {
      obj.authService = message.authService;
    }
    if (message.roles?.length) {
      obj.roles = message.roles;
    }
    if (message.props?.length) {
      obj.props = message.props;
    }
    if (message.notifyProps?.length) {
      obj.notifyProps = message.notifyProps;
    }
    if (message.lastPasswordUpdate !== undefined) {
      obj.lastPasswordUpdate = message.lastPasswordUpdate;
    }
    if (message.lastPictureUpdate !== undefined) {
      obj.lastPictureUpdate = message.lastPictureUpdate;
    }
    if (message.failedAttempts !== undefined) {
      obj.failedAttempts = Math.round(message.failedAttempts);
    }
    if (message.locale !== undefined) {
      obj.locale = message.locale;
    }
    if (message.mfaActive !== undefined) {
      obj.mfaActive = message.mfaActive;
    }
    if (message.mfaSecret !== undefined) {
      obj.mfaSecret = message.mfaSecret;
    }
    if (message.lastActivityAt !== undefined) {
      obj.lastActivityAt = message.lastActivityAt;
    }
    if (message.lastLogin !== undefined) {
      obj.lastLogin = message.lastLogin;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt;
    }
    if (message.deletedAt !== undefined) {
      obj.deletedAt = message.deletedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User>, I>>(base?: I): User {
    return User.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User {
    const message = createBaseUser();
    message.id = object.id ?? undefined;
    message.username = object.username ?? undefined;
    message.firstName = object.firstName ?? undefined;
    message.lastName = object.lastName ?? undefined;
    message.email = object.email ?? undefined;
    message.userType = object.userType ?? undefined;
    message.image = object.image ?? undefined;
    message.imageMetadata = (object.imageMetadata !== undefined && object.imageMetadata !== null)
      ? UserImageMetadata.fromPartial(object.imageMetadata)
      : undefined;
    message.membership = object.membership ?? undefined;
    message.isEmailVerified = object.isEmailVerified ?? undefined;
    message.password = object.password ?? undefined;
    message.authData = object.authData ?? undefined;
    message.authService = object.authService ?? undefined;
    message.roles = object.roles?.map((e) => e) || [];
    message.props = object.props?.map((e) => e) || [];
    message.notifyProps = object.notifyProps?.map((e) => e) || [];
    message.lastPasswordUpdate = object.lastPasswordUpdate ?? undefined;
    message.lastPictureUpdate = object.lastPictureUpdate ?? undefined;
    message.failedAttempts = object.failedAttempts ?? undefined;
    message.locale = object.locale ?? undefined;
    message.mfaActive = object.mfaActive ?? undefined;
    message.mfaSecret = object.mfaSecret ?? undefined;
    message.lastActivityAt = object.lastActivityAt ?? undefined;
    message.lastLogin = object.lastLogin ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.deletedAt = object.deletedAt ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
