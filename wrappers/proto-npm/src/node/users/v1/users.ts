// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: users/v1/users.proto

/* eslint-disable */
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import {
  EmailConfirmationRequest,
  EmailConfirmationResponse,
  LoginRequest,
  LoginResponse,
  PasswordForgotRequest,
  PasswordForgotResponse,
} from "./auth";
import { SupplierCreateRequest, SupplierCreateResponse } from "./supplier";

export const protobufPackage = "users.v1";

export type UsersServiceService = typeof UsersServiceService;
export const UsersServiceService = {
  createSupplier: {
    path: "/users.v1.UsersService/CreateSupplier",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SupplierCreateRequest): Buffer =>
      Buffer.from(SupplierCreateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): SupplierCreateRequest => SupplierCreateRequest.decode(value),
    responseSerialize: (value: SupplierCreateResponse): Buffer =>
      Buffer.from(SupplierCreateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): SupplierCreateResponse => SupplierCreateResponse.decode(value),
  },
  emailConfirmation: {
    path: "/users.v1.UsersService/EmailConfirmation",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EmailConfirmationRequest): Buffer =>
      Buffer.from(EmailConfirmationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): EmailConfirmationRequest => EmailConfirmationRequest.decode(value),
    responseSerialize: (value: EmailConfirmationResponse): Buffer =>
      Buffer.from(EmailConfirmationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): EmailConfirmationResponse => EmailConfirmationResponse.decode(value),
  },
  passwordForgot: {
    path: "/users.v1.UsersService/PasswordForgot",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PasswordForgotRequest): Buffer =>
      Buffer.from(PasswordForgotRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): PasswordForgotRequest => PasswordForgotRequest.decode(value),
    responseSerialize: (value: PasswordForgotResponse): Buffer =>
      Buffer.from(PasswordForgotResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): PasswordForgotResponse => PasswordForgotResponse.decode(value),
  },
  login: {
    path: "/users.v1.UsersService/Login",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: LoginRequest): Buffer => Buffer.from(LoginRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): LoginRequest => LoginRequest.decode(value),
    responseSerialize: (value: LoginResponse): Buffer => Buffer.from(LoginResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): LoginResponse => LoginResponse.decode(value),
  },
} as const;

export interface UsersServiceServer extends UntypedServiceImplementation {
  createSupplier: handleUnaryCall<SupplierCreateRequest, SupplierCreateResponse>;
  emailConfirmation: handleUnaryCall<EmailConfirmationRequest, EmailConfirmationResponse>;
  passwordForgot: handleUnaryCall<PasswordForgotRequest, PasswordForgotResponse>;
  login: handleUnaryCall<LoginRequest, LoginResponse>;
}

export interface UsersServiceClient extends Client {
  createSupplier(
    request: SupplierCreateRequest,
    callback: (error: ServiceError | null, response: SupplierCreateResponse) => void,
  ): ClientUnaryCall;
  createSupplier(
    request: SupplierCreateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SupplierCreateResponse) => void,
  ): ClientUnaryCall;
  createSupplier(
    request: SupplierCreateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SupplierCreateResponse) => void,
  ): ClientUnaryCall;
  emailConfirmation(
    request: EmailConfirmationRequest,
    callback: (error: ServiceError | null, response: EmailConfirmationResponse) => void,
  ): ClientUnaryCall;
  emailConfirmation(
    request: EmailConfirmationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: EmailConfirmationResponse) => void,
  ): ClientUnaryCall;
  emailConfirmation(
    request: EmailConfirmationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: EmailConfirmationResponse) => void,
  ): ClientUnaryCall;
  passwordForgot(
    request: PasswordForgotRequest,
    callback: (error: ServiceError | null, response: PasswordForgotResponse) => void,
  ): ClientUnaryCall;
  passwordForgot(
    request: PasswordForgotRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: PasswordForgotResponse) => void,
  ): ClientUnaryCall;
  passwordForgot(
    request: PasswordForgotRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: PasswordForgotResponse) => void,
  ): ClientUnaryCall;
  login(
    request: LoginRequest,
    callback: (error: ServiceError | null, response: LoginResponse) => void,
  ): ClientUnaryCall;
  login(
    request: LoginRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: LoginResponse) => void,
  ): ClientUnaryCall;
  login(
    request: LoginRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: LoginResponse) => void,
  ): ClientUnaryCall;
}

export const UsersServiceClient = makeGenericClientConstructor(
  UsersServiceService,
  "users.v1.UsersService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UsersServiceClient;
  service: typeof UsersServiceService;
  serviceName: string;
};
