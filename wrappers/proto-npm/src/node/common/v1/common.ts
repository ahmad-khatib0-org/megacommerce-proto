// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: common/v1/common.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientReadableStream,
  type ClientUnaryCall,
  type handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import {
  ConfigGetRequest,
  ConfigGetResponse,
  ConfigListenerRequest,
  ConfigListenerResponse,
  ConfigUpdateRequest,
  ConfigUpdateResponse,
} from "./config";
import {
  TranslationsForLangGetRequest,
  TranslationsForLangGetResponse,
  TranslationsGetRequest,
  TranslationsGetResponse,
} from "./trans";
import { PingRequest, PingResponse } from "./types";

export const protobufPackage = "common.v1";

export type CommonServiceService = typeof CommonServiceService;
export const CommonServiceService = {
  ping: {
    path: "/common.v1.CommonService/Ping",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PingRequest) => Buffer.from(PingRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => PingRequest.decode(value),
    responseSerialize: (value: PingResponse) => Buffer.from(PingResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => PingResponse.decode(value),
  },
  configGet: {
    path: "/common.v1.CommonService/ConfigGet",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ConfigGetRequest) => Buffer.from(ConfigGetRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ConfigGetRequest.decode(value),
    responseSerialize: (value: ConfigGetResponse) => Buffer.from(ConfigGetResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ConfigGetResponse.decode(value),
  },
  configUpdate: {
    path: "/common.v1.CommonService/ConfigUpdate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ConfigUpdateRequest) => Buffer.from(ConfigUpdateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ConfigUpdateRequest.decode(value),
    responseSerialize: (value: ConfigUpdateResponse) => Buffer.from(ConfigUpdateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ConfigUpdateResponse.decode(value),
  },
  configListener: {
    path: "/common.v1.CommonService/ConfigListener",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: ConfigListenerRequest) => Buffer.from(ConfigListenerRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ConfigListenerRequest.decode(value),
    responseSerialize: (value: ConfigListenerResponse) => Buffer.from(ConfigListenerResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ConfigListenerResponse.decode(value),
  },
  translationsGet: {
    path: "/common.v1.CommonService/TranslationsGet",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TranslationsGetRequest) => Buffer.from(TranslationsGetRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => TranslationsGetRequest.decode(value),
    responseSerialize: (value: TranslationsGetResponse) => Buffer.from(TranslationsGetResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TranslationsGetResponse.decode(value),
  },
  translationsForLangGet: {
    path: "/common.v1.CommonService/TranslationsForLangGet",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TranslationsForLangGetRequest) =>
      Buffer.from(TranslationsForLangGetRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => TranslationsForLangGetRequest.decode(value),
    responseSerialize: (value: TranslationsForLangGetResponse) =>
      Buffer.from(TranslationsForLangGetResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TranslationsForLangGetResponse.decode(value),
  },
} as const;

export interface CommonServiceServer extends UntypedServiceImplementation {
  ping: handleUnaryCall<PingRequest, PingResponse>;
  configGet: handleUnaryCall<ConfigGetRequest, ConfigGetResponse>;
  configUpdate: handleUnaryCall<ConfigUpdateRequest, ConfigUpdateResponse>;
  configListener: handleServerStreamingCall<ConfigListenerRequest, ConfigListenerResponse>;
  translationsGet: handleUnaryCall<TranslationsGetRequest, TranslationsGetResponse>;
  translationsForLangGet: handleUnaryCall<TranslationsForLangGetRequest, TranslationsForLangGetResponse>;
}

export interface CommonServiceClient extends Client {
  ping(request: PingRequest, callback: (error: ServiceError | null, response: PingResponse) => void): ClientUnaryCall;
  ping(
    request: PingRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: PingResponse) => void,
  ): ClientUnaryCall;
  ping(
    request: PingRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: PingResponse) => void,
  ): ClientUnaryCall;
  configGet(
    request: ConfigGetRequest,
    callback: (error: ServiceError | null, response: ConfigGetResponse) => void,
  ): ClientUnaryCall;
  configGet(
    request: ConfigGetRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ConfigGetResponse) => void,
  ): ClientUnaryCall;
  configGet(
    request: ConfigGetRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ConfigGetResponse) => void,
  ): ClientUnaryCall;
  configUpdate(
    request: ConfigUpdateRequest,
    callback: (error: ServiceError | null, response: ConfigUpdateResponse) => void,
  ): ClientUnaryCall;
  configUpdate(
    request: ConfigUpdateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ConfigUpdateResponse) => void,
  ): ClientUnaryCall;
  configUpdate(
    request: ConfigUpdateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ConfigUpdateResponse) => void,
  ): ClientUnaryCall;
  configListener(
    request: ConfigListenerRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<ConfigListenerResponse>;
  configListener(
    request: ConfigListenerRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<ConfigListenerResponse>;
  translationsGet(
    request: TranslationsGetRequest,
    callback: (error: ServiceError | null, response: TranslationsGetResponse) => void,
  ): ClientUnaryCall;
  translationsGet(
    request: TranslationsGetRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TranslationsGetResponse) => void,
  ): ClientUnaryCall;
  translationsGet(
    request: TranslationsGetRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TranslationsGetResponse) => void,
  ): ClientUnaryCall;
  translationsForLangGet(
    request: TranslationsForLangGetRequest,
    callback: (error: ServiceError | null, response: TranslationsForLangGetResponse) => void,
  ): ClientUnaryCall;
  translationsForLangGet(
    request: TranslationsForLangGetRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TranslationsForLangGetResponse) => void,
  ): ClientUnaryCall;
  translationsForLangGet(
    request: TranslationsForLangGetRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TranslationsForLangGetResponse) => void,
  ): ClientUnaryCall;
}

export const CommonServiceClient = makeGenericClientConstructor(
  CommonServiceService,
  "common.v1.CommonService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): CommonServiceClient;
  service: typeof CommonServiceService;
  serviceName: string;
};
