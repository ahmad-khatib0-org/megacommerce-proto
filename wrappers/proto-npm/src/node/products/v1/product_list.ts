// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: products/v1/product_list.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AppError } from "../../shared/v1/error";
import { OrderDirection } from "../../shared/v1/types";

export const protobufPackage = "products.v1";

export enum ProductShippingMethod {
  STANDARD = 0,
  EXPRESS = 1,
  UNRECOGNIZED = -1,
}

export function productShippingMethodFromJSON(object: any): ProductShippingMethod {
  switch (object) {
    case 0:
    case "STANDARD":
      return ProductShippingMethod.STANDARD;
    case 1:
    case "EXPRESS":
      return ProductShippingMethod.EXPRESS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProductShippingMethod.UNRECOGNIZED;
  }
}

export function productShippingMethodToJSON(object: ProductShippingMethod): string {
  switch (object) {
    case ProductShippingMethod.STANDARD:
      return "STANDARD";
    case ProductShippingMethod.EXPRESS:
      return "EXPRESS";
    case ProductShippingMethod.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ProductItemMetadataType {
  CUPON = 0,
  NEW_SHOPPER = 1,
  BUNDLE = 2,
  UNRECOGNIZED = -1,
}

export function productItemMetadataTypeFromJSON(object: any): ProductItemMetadataType {
  switch (object) {
    case 0:
    case "CUPON":
      return ProductItemMetadataType.CUPON;
    case 1:
    case "NEW_SHOPPER":
      return ProductItemMetadataType.NEW_SHOPPER;
    case 2:
    case "BUNDLE":
      return ProductItemMetadataType.BUNDLE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProductItemMetadataType.UNRECOGNIZED;
  }
}

export function productItemMetadataTypeToJSON(object: ProductItemMetadataType): string {
  switch (object) {
    case ProductItemMetadataType.CUPON:
      return "CUPON";
    case ProductItemMetadataType.NEW_SHOPPER:
      return "NEW_SHOPPER";
    case ProductItemMetadataType.BUNDLE:
      return "BUNDLE";
    case ProductItemMetadataType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ProductPrice {
  amount: number;
  formatted: string;
  discountPrice?: number | undefined;
  saveAmount?: string | undefined;
  savePercentage?: string | undefined;
}

export interface ProductShippingInfo {
  free: boolean;
  method: ProductShippingMethod;
  origin: string;
  minEstimatedDays: number;
  maxEstimatedDays: number;
}

export interface ProductItemMetadata {
  type: ProductItemMetadataType;
  label: string;
}

export interface ProductItem {
  id: string;
  title: string;
  image: string;
  price?: ProductPrice | undefined;
  rating?: number | undefined;
  sold?: number | undefined;
  meta: ProductItemMetadata[];
}

export interface ProductListItem {
  id: string;
  userId: string;
  title: string;
  description: string;
  slug: string;
  price: string;
  currencyCode: string;
  arEnabled: boolean;
}

export interface ProductListRequest {
  page: number;
  lastId: string;
  orderPrice?: OrderDirection | undefined;
}

export interface ProductListResponse {
  data?: ProductListResponseData | undefined;
  error?: AppError | undefined;
}

export interface ProductListResponseData {
  data: ProductListItem[];
}

function createBaseProductPrice(): ProductPrice {
  return { amount: 0, formatted: "", discountPrice: undefined, saveAmount: undefined, savePercentage: undefined };
}

export const ProductPrice: MessageFns<ProductPrice> = {
  encode(message: ProductPrice, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== 0) {
      writer.uint32(13).float(message.amount);
    }
    if (message.formatted !== "") {
      writer.uint32(18).string(message.formatted);
    }
    if (message.discountPrice !== undefined) {
      writer.uint32(29).float(message.discountPrice);
    }
    if (message.saveAmount !== undefined) {
      writer.uint32(34).string(message.saveAmount);
    }
    if (message.savePercentage !== undefined) {
      writer.uint32(42).string(message.savePercentage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductPrice {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductPrice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.amount = reader.float();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.formatted = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.discountPrice = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.saveAmount = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.savePercentage = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductPrice {
    return {
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      formatted: isSet(object.formatted) ? globalThis.String(object.formatted) : "",
      discountPrice: isSet(object.discountPrice) ? globalThis.Number(object.discountPrice) : undefined,
      saveAmount: isSet(object.saveAmount) ? globalThis.String(object.saveAmount) : undefined,
      savePercentage: isSet(object.savePercentage) ? globalThis.String(object.savePercentage) : undefined,
    };
  },

  toJSON(message: ProductPrice): unknown {
    const obj: any = {};
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    if (message.formatted !== "") {
      obj.formatted = message.formatted;
    }
    if (message.discountPrice !== undefined) {
      obj.discountPrice = message.discountPrice;
    }
    if (message.saveAmount !== undefined) {
      obj.saveAmount = message.saveAmount;
    }
    if (message.savePercentage !== undefined) {
      obj.savePercentage = message.savePercentage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductPrice>, I>>(base?: I): ProductPrice {
    return ProductPrice.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductPrice>, I>>(object: I): ProductPrice {
    const message = createBaseProductPrice();
    message.amount = object.amount ?? 0;
    message.formatted = object.formatted ?? "";
    message.discountPrice = object.discountPrice ?? undefined;
    message.saveAmount = object.saveAmount ?? undefined;
    message.savePercentage = object.savePercentage ?? undefined;
    return message;
  },
};

function createBaseProductShippingInfo(): ProductShippingInfo {
  return { free: false, method: 0, origin: "", minEstimatedDays: 0, maxEstimatedDays: 0 };
}

export const ProductShippingInfo: MessageFns<ProductShippingInfo> = {
  encode(message: ProductShippingInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.free !== false) {
      writer.uint32(8).bool(message.free);
    }
    if (message.method !== 0) {
      writer.uint32(16).int32(message.method);
    }
    if (message.origin !== "") {
      writer.uint32(26).string(message.origin);
    }
    if (message.minEstimatedDays !== 0) {
      writer.uint32(32).int32(message.minEstimatedDays);
    }
    if (message.maxEstimatedDays !== 0) {
      writer.uint32(40).int32(message.maxEstimatedDays);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductShippingInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductShippingInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.free = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.method = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.origin = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.minEstimatedDays = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.maxEstimatedDays = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductShippingInfo {
    return {
      free: isSet(object.free) ? globalThis.Boolean(object.free) : false,
      method: isSet(object.method) ? productShippingMethodFromJSON(object.method) : 0,
      origin: isSet(object.origin) ? globalThis.String(object.origin) : "",
      minEstimatedDays: isSet(object.minEstimatedDays) ? globalThis.Number(object.minEstimatedDays) : 0,
      maxEstimatedDays: isSet(object.maxEstimatedDays) ? globalThis.Number(object.maxEstimatedDays) : 0,
    };
  },

  toJSON(message: ProductShippingInfo): unknown {
    const obj: any = {};
    if (message.free !== false) {
      obj.free = message.free;
    }
    if (message.method !== 0) {
      obj.method = productShippingMethodToJSON(message.method);
    }
    if (message.origin !== "") {
      obj.origin = message.origin;
    }
    if (message.minEstimatedDays !== 0) {
      obj.minEstimatedDays = Math.round(message.minEstimatedDays);
    }
    if (message.maxEstimatedDays !== 0) {
      obj.maxEstimatedDays = Math.round(message.maxEstimatedDays);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductShippingInfo>, I>>(base?: I): ProductShippingInfo {
    return ProductShippingInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductShippingInfo>, I>>(object: I): ProductShippingInfo {
    const message = createBaseProductShippingInfo();
    message.free = object.free ?? false;
    message.method = object.method ?? 0;
    message.origin = object.origin ?? "";
    message.minEstimatedDays = object.minEstimatedDays ?? 0;
    message.maxEstimatedDays = object.maxEstimatedDays ?? 0;
    return message;
  },
};

function createBaseProductItemMetadata(): ProductItemMetadata {
  return { type: 0, label: "" };
}

export const ProductItemMetadata: MessageFns<ProductItemMetadata> = {
  encode(message: ProductItemMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.label !== "") {
      writer.uint32(18).string(message.label);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductItemMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductItemMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.label = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductItemMetadata {
    return {
      type: isSet(object.type) ? productItemMetadataTypeFromJSON(object.type) : 0,
      label: isSet(object.label) ? globalThis.String(object.label) : "",
    };
  },

  toJSON(message: ProductItemMetadata): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = productItemMetadataTypeToJSON(message.type);
    }
    if (message.label !== "") {
      obj.label = message.label;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductItemMetadata>, I>>(base?: I): ProductItemMetadata {
    return ProductItemMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductItemMetadata>, I>>(object: I): ProductItemMetadata {
    const message = createBaseProductItemMetadata();
    message.type = object.type ?? 0;
    message.label = object.label ?? "";
    return message;
  },
};

function createBaseProductItem(): ProductItem {
  return { id: "", title: "", image: "", price: undefined, rating: undefined, sold: undefined, meta: [] };
}

export const ProductItem: MessageFns<ProductItem> = {
  encode(message: ProductItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.image !== "") {
      writer.uint32(26).string(message.image);
    }
    if (message.price !== undefined) {
      ProductPrice.encode(message.price, writer.uint32(34).fork()).join();
    }
    if (message.rating !== undefined) {
      writer.uint32(45).float(message.rating);
    }
    if (message.sold !== undefined) {
      writer.uint32(48).int32(message.sold);
    }
    for (const v of message.meta) {
      ProductItemMetadata.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.price = ProductPrice.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.rating = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.sold = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.meta.push(ProductItemMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductItem {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      price: isSet(object.price) ? ProductPrice.fromJSON(object.price) : undefined,
      rating: isSet(object.rating) ? globalThis.Number(object.rating) : undefined,
      sold: isSet(object.sold) ? globalThis.Number(object.sold) : undefined,
      meta: globalThis.Array.isArray(object?.meta) ? object.meta.map((e: any) => ProductItemMetadata.fromJSON(e)) : [],
    };
  },

  toJSON(message: ProductItem): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.price !== undefined) {
      obj.price = ProductPrice.toJSON(message.price);
    }
    if (message.rating !== undefined) {
      obj.rating = message.rating;
    }
    if (message.sold !== undefined) {
      obj.sold = Math.round(message.sold);
    }
    if (message.meta?.length) {
      obj.meta = message.meta.map((e) => ProductItemMetadata.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductItem>, I>>(base?: I): ProductItem {
    return ProductItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductItem>, I>>(object: I): ProductItem {
    const message = createBaseProductItem();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    message.image = object.image ?? "";
    message.price = (object.price !== undefined && object.price !== null)
      ? ProductPrice.fromPartial(object.price)
      : undefined;
    message.rating = object.rating ?? undefined;
    message.sold = object.sold ?? undefined;
    message.meta = object.meta?.map((e) => ProductItemMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseProductListItem(): ProductListItem {
  return { id: "", userId: "", title: "", description: "", slug: "", price: "", currencyCode: "", arEnabled: false };
}

export const ProductListItem: MessageFns<ProductListItem> = {
  encode(message: ProductListItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.title !== "") {
      writer.uint32(50).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(58).string(message.description);
    }
    if (message.slug !== "") {
      writer.uint32(66).string(message.slug);
    }
    if (message.price !== "") {
      writer.uint32(74).string(message.price);
    }
    if (message.currencyCode !== "") {
      writer.uint32(82).string(message.currencyCode);
    }
    if (message.arEnabled !== false) {
      writer.uint32(104).bool(message.arEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductListItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductListItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.price = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.currencyCode = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.arEnabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductListItem {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      price: isSet(object.price) ? globalThis.String(object.price) : "",
      currencyCode: isSet(object.currencyCode) ? globalThis.String(object.currencyCode) : "",
      arEnabled: isSet(object.arEnabled) ? globalThis.Boolean(object.arEnabled) : false,
    };
  },

  toJSON(message: ProductListItem): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.price !== "") {
      obj.price = message.price;
    }
    if (message.currencyCode !== "") {
      obj.currencyCode = message.currencyCode;
    }
    if (message.arEnabled !== false) {
      obj.arEnabled = message.arEnabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductListItem>, I>>(base?: I): ProductListItem {
    return ProductListItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductListItem>, I>>(object: I): ProductListItem {
    const message = createBaseProductListItem();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.slug = object.slug ?? "";
    message.price = object.price ?? "";
    message.currencyCode = object.currencyCode ?? "";
    message.arEnabled = object.arEnabled ?? false;
    return message;
  },
};

function createBaseProductListRequest(): ProductListRequest {
  return { page: 0, lastId: "", orderPrice: undefined };
}

export const ProductListRequest: MessageFns<ProductListRequest> = {
  encode(message: ProductListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).uint32(message.page);
    }
    if (message.lastId !== "") {
      writer.uint32(18).string(message.lastId);
    }
    if (message.orderPrice !== undefined) {
      OrderDirection.encode(message.orderPrice, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lastId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.orderPrice = OrderDirection.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductListRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      lastId: isSet(object.lastId) ? globalThis.String(object.lastId) : "",
      orderPrice: isSet(object.orderPrice) ? OrderDirection.fromJSON(object.orderPrice) : undefined,
    };
  },

  toJSON(message: ProductListRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.lastId !== "") {
      obj.lastId = message.lastId;
    }
    if (message.orderPrice !== undefined) {
      obj.orderPrice = OrderDirection.toJSON(message.orderPrice);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductListRequest>, I>>(base?: I): ProductListRequest {
    return ProductListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductListRequest>, I>>(object: I): ProductListRequest {
    const message = createBaseProductListRequest();
    message.page = object.page ?? 0;
    message.lastId = object.lastId ?? "";
    message.orderPrice = (object.orderPrice !== undefined && object.orderPrice !== null)
      ? OrderDirection.fromPartial(object.orderPrice)
      : undefined;
    return message;
  },
};

function createBaseProductListResponse(): ProductListResponse {
  return { data: undefined, error: undefined };
}

export const ProductListResponse: MessageFns<ProductListResponse> = {
  encode(message: ProductListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ProductListResponseData.encode(message.data, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      AppError.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ProductListResponseData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = AppError.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductListResponse {
    return {
      data: isSet(object.data) ? ProductListResponseData.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? AppError.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ProductListResponse): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ProductListResponseData.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = AppError.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductListResponse>, I>>(base?: I): ProductListResponse {
    return ProductListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductListResponse>, I>>(object: I): ProductListResponse {
    const message = createBaseProductListResponse();
    message.data = (object.data !== undefined && object.data !== null)
      ? ProductListResponseData.fromPartial(object.data)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? AppError.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseProductListResponseData(): ProductListResponseData {
  return { data: [] };
}

export const ProductListResponseData: MessageFns<ProductListResponseData> = {
  encode(message: ProductListResponseData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.data) {
      ProductListItem.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductListResponseData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductListResponseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data.push(ProductListItem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductListResponseData {
    return {
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => ProductListItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: ProductListResponseData): unknown {
    const obj: any = {};
    if (message.data?.length) {
      obj.data = message.data.map((e) => ProductListItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductListResponseData>, I>>(base?: I): ProductListResponseData {
    return ProductListResponseData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductListResponseData>, I>>(object: I): ProductListResponseData {
    const message = createBaseProductListResponseData();
    message.data = object.data?.map((e) => ProductListItem.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
