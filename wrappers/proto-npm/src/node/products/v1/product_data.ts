// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: products/v1/product_data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AppError } from "../../shared/v1/error";
import { ProductTags } from "./product";
import { Subcategory, SubcategoryTranslations } from "./product_categories";

export const protobufPackage = "products.v1";

export interface ProductDataResponseData {
  subcategory?: ProductDataResponseSubcategory | undefined;
  tags?: ProductTags | undefined;
}

export interface ProductDataResponseSubcategory {
  data?: Subcategory | undefined;
  translations?: SubcategoryTranslations | undefined;
}

export interface ProductDataRequest {
  subcategory?: ProductDataRequestCategory | undefined;
  getTags?: boolean | undefined;
}

export interface ProductDataRequestCategory {
  category: string;
  subcategory: string;
}

export interface ProductDataResponse {
  data?: ProductDataResponseData | undefined;
  error?: AppError | undefined;
}

function createBaseProductDataResponseData(): ProductDataResponseData {
  return { subcategory: undefined, tags: undefined };
}

export const ProductDataResponseData: MessageFns<ProductDataResponseData> = {
  encode(message: ProductDataResponseData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subcategory !== undefined) {
      ProductDataResponseSubcategory.encode(message.subcategory, writer.uint32(10).fork()).join();
    }
    if (message.tags !== undefined) {
      ProductTags.encode(message.tags, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductDataResponseData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductDataResponseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.subcategory = ProductDataResponseSubcategory.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tags = ProductTags.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductDataResponseData {
    return {
      subcategory: isSet(object.subcategory) ? ProductDataResponseSubcategory.fromJSON(object.subcategory) : undefined,
      tags: isSet(object.tags) ? ProductTags.fromJSON(object.tags) : undefined,
    };
  },

  toJSON(message: ProductDataResponseData): unknown {
    const obj: any = {};
    if (message.subcategory !== undefined) {
      obj.subcategory = ProductDataResponseSubcategory.toJSON(message.subcategory);
    }
    if (message.tags !== undefined) {
      obj.tags = ProductTags.toJSON(message.tags);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductDataResponseData>, I>>(base?: I): ProductDataResponseData {
    return ProductDataResponseData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductDataResponseData>, I>>(object: I): ProductDataResponseData {
    const message = createBaseProductDataResponseData();
    message.subcategory = (object.subcategory !== undefined && object.subcategory !== null)
      ? ProductDataResponseSubcategory.fromPartial(object.subcategory)
      : undefined;
    message.tags = (object.tags !== undefined && object.tags !== null)
      ? ProductTags.fromPartial(object.tags)
      : undefined;
    return message;
  },
};

function createBaseProductDataResponseSubcategory(): ProductDataResponseSubcategory {
  return { data: undefined, translations: undefined };
}

export const ProductDataResponseSubcategory: MessageFns<ProductDataResponseSubcategory> = {
  encode(message: ProductDataResponseSubcategory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      Subcategory.encode(message.data, writer.uint32(10).fork()).join();
    }
    if (message.translations !== undefined) {
      SubcategoryTranslations.encode(message.translations, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductDataResponseSubcategory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductDataResponseSubcategory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = Subcategory.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.translations = SubcategoryTranslations.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductDataResponseSubcategory {
    return {
      data: isSet(object.data) ? Subcategory.fromJSON(object.data) : undefined,
      translations: isSet(object.translations) ? SubcategoryTranslations.fromJSON(object.translations) : undefined,
    };
  },

  toJSON(message: ProductDataResponseSubcategory): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = Subcategory.toJSON(message.data);
    }
    if (message.translations !== undefined) {
      obj.translations = SubcategoryTranslations.toJSON(message.translations);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductDataResponseSubcategory>, I>>(base?: I): ProductDataResponseSubcategory {
    return ProductDataResponseSubcategory.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductDataResponseSubcategory>, I>>(
    object: I,
  ): ProductDataResponseSubcategory {
    const message = createBaseProductDataResponseSubcategory();
    message.data = (object.data !== undefined && object.data !== null)
      ? Subcategory.fromPartial(object.data)
      : undefined;
    message.translations = (object.translations !== undefined && object.translations !== null)
      ? SubcategoryTranslations.fromPartial(object.translations)
      : undefined;
    return message;
  },
};

function createBaseProductDataRequest(): ProductDataRequest {
  return { subcategory: undefined, getTags: undefined };
}

export const ProductDataRequest: MessageFns<ProductDataRequest> = {
  encode(message: ProductDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subcategory !== undefined) {
      ProductDataRequestCategory.encode(message.subcategory, writer.uint32(10).fork()).join();
    }
    if (message.getTags !== undefined) {
      writer.uint32(16).bool(message.getTags);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.subcategory = ProductDataRequestCategory.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.getTags = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductDataRequest {
    return {
      subcategory: isSet(object.subcategory) ? ProductDataRequestCategory.fromJSON(object.subcategory) : undefined,
      getTags: isSet(object.getTags) ? globalThis.Boolean(object.getTags) : undefined,
    };
  },

  toJSON(message: ProductDataRequest): unknown {
    const obj: any = {};
    if (message.subcategory !== undefined) {
      obj.subcategory = ProductDataRequestCategory.toJSON(message.subcategory);
    }
    if (message.getTags !== undefined) {
      obj.getTags = message.getTags;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductDataRequest>, I>>(base?: I): ProductDataRequest {
    return ProductDataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductDataRequest>, I>>(object: I): ProductDataRequest {
    const message = createBaseProductDataRequest();
    message.subcategory = (object.subcategory !== undefined && object.subcategory !== null)
      ? ProductDataRequestCategory.fromPartial(object.subcategory)
      : undefined;
    message.getTags = object.getTags ?? undefined;
    return message;
  },
};

function createBaseProductDataRequestCategory(): ProductDataRequestCategory {
  return { category: "", subcategory: "" };
}

export const ProductDataRequestCategory: MessageFns<ProductDataRequestCategory> = {
  encode(message: ProductDataRequestCategory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.category !== "") {
      writer.uint32(10).string(message.category);
    }
    if (message.subcategory !== "") {
      writer.uint32(18).string(message.subcategory);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductDataRequestCategory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductDataRequestCategory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.category = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.subcategory = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductDataRequestCategory {
    return {
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      subcategory: isSet(object.subcategory) ? globalThis.String(object.subcategory) : "",
    };
  },

  toJSON(message: ProductDataRequestCategory): unknown {
    const obj: any = {};
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.subcategory !== "") {
      obj.subcategory = message.subcategory;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductDataRequestCategory>, I>>(base?: I): ProductDataRequestCategory {
    return ProductDataRequestCategory.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductDataRequestCategory>, I>>(object: I): ProductDataRequestCategory {
    const message = createBaseProductDataRequestCategory();
    message.category = object.category ?? "";
    message.subcategory = object.subcategory ?? "";
    return message;
  },
};

function createBaseProductDataResponse(): ProductDataResponse {
  return { data: undefined, error: undefined };
}

export const ProductDataResponse: MessageFns<ProductDataResponse> = {
  encode(message: ProductDataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ProductDataResponseData.encode(message.data, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      AppError.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductDataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ProductDataResponseData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = AppError.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductDataResponse {
    return {
      data: isSet(object.data) ? ProductDataResponseData.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? AppError.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ProductDataResponse): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ProductDataResponseData.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = AppError.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductDataResponse>, I>>(base?: I): ProductDataResponse {
    return ProductDataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductDataResponse>, I>>(object: I): ProductDataResponse {
    const message = createBaseProductDataResponse();
    message.data = (object.data !== undefined && object.data !== null)
      ? ProductDataResponseData.fromPartial(object.data)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? AppError.fromPartial(object.error)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
