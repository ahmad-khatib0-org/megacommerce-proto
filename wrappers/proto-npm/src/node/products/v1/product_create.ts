// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: products/v1/product_create.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AppError } from "../../shared/v1/error";
import { Empty } from "../../shared/v1/types";

export const protobufPackage = "products.v1";

export interface ProductCreateTag {
  id?: number | undefined;
  name?: string | undefined;
}

export interface ProductCreateRequest {
  title: string;
  description: string;
  sku: string;
  price: string;
  currencyCode: string;
  tags: ProductCreateTag[];
  arEnabled: boolean;
}

export interface ProductCreateResponse {
  data?: Empty | undefined;
  error?: AppError | undefined;
}

function createBaseProductCreateTag(): ProductCreateTag {
  return { id: undefined, name: undefined };
}

export const ProductCreateTag: MessageFns<ProductCreateTag> = {
  encode(message: ProductCreateTag, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductCreateTag {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductCreateTag();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductCreateTag {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
    };
  },

  toJSON(message: ProductCreateTag): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductCreateTag>, I>>(base?: I): ProductCreateTag {
    return ProductCreateTag.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductCreateTag>, I>>(object: I): ProductCreateTag {
    const message = createBaseProductCreateTag();
    message.id = object.id ?? undefined;
    message.name = object.name ?? undefined;
    return message;
  },
};

function createBaseProductCreateRequest(): ProductCreateRequest {
  return { title: "", description: "", sku: "", price: "", currencyCode: "", tags: [], arEnabled: false };
}

export const ProductCreateRequest: MessageFns<ProductCreateRequest> = {
  encode(message: ProductCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.sku !== "") {
      writer.uint32(26).string(message.sku);
    }
    if (message.price !== "") {
      writer.uint32(34).string(message.price);
    }
    if (message.currencyCode !== "") {
      writer.uint32(42).string(message.currencyCode);
    }
    for (const v of message.tags) {
      ProductCreateTag.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.arEnabled !== false) {
      writer.uint32(56).bool(message.arEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sku = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.price = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.currencyCode = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.tags.push(ProductCreateTag.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.arEnabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductCreateRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      sku: isSet(object.sku) ? globalThis.String(object.sku) : "",
      price: isSet(object.price) ? globalThis.String(object.price) : "",
      currencyCode: isSet(object.currencyCode) ? globalThis.String(object.currencyCode) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => ProductCreateTag.fromJSON(e)) : [],
      arEnabled: isSet(object.arEnabled) ? globalThis.Boolean(object.arEnabled) : false,
    };
  },

  toJSON(message: ProductCreateRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.sku !== "") {
      obj.sku = message.sku;
    }
    if (message.price !== "") {
      obj.price = message.price;
    }
    if (message.currencyCode !== "") {
      obj.currencyCode = message.currencyCode;
    }
    if (message.tags?.length) {
      obj.tags = message.tags.map((e) => ProductCreateTag.toJSON(e));
    }
    if (message.arEnabled !== false) {
      obj.arEnabled = message.arEnabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductCreateRequest>, I>>(base?: I): ProductCreateRequest {
    return ProductCreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductCreateRequest>, I>>(object: I): ProductCreateRequest {
    const message = createBaseProductCreateRequest();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.sku = object.sku ?? "";
    message.price = object.price ?? "";
    message.currencyCode = object.currencyCode ?? "";
    message.tags = object.tags?.map((e) => ProductCreateTag.fromPartial(e)) || [];
    message.arEnabled = object.arEnabled ?? false;
    return message;
  },
};

function createBaseProductCreateResponse(): ProductCreateResponse {
  return { data: undefined, error: undefined };
}

export const ProductCreateResponse: MessageFns<ProductCreateResponse> = {
  encode(message: ProductCreateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      Empty.encode(message.data, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      AppError.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductCreateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductCreateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = Empty.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = AppError.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductCreateResponse {
    return {
      data: isSet(object.data) ? Empty.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? AppError.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ProductCreateResponse): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = Empty.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = AppError.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductCreateResponse>, I>>(base?: I): ProductCreateResponse {
    return ProductCreateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductCreateResponse>, I>>(object: I): ProductCreateResponse {
    const message = createBaseProductCreateResponse();
    message.data = (object.data !== undefined && object.data !== null) ? Empty.fromPartial(object.data) : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? AppError.fromPartial(object.error)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
