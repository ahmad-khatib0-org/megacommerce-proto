// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: shared/v1/validation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "shared.v1";

export enum NumericRuleType {
  NUMERIC_RULE_TYPE_MIN = 0,
  NUMERIC_RULE_TYPE_MAX = 1,
  /** NUMERIC_RULE_TYPE_GT - greater than */
  NUMERIC_RULE_TYPE_GT = 2,
  /** NUMERIC_RULE_TYPE_LT - less than */
  NUMERIC_RULE_TYPE_LT = 3,
  UNRECOGNIZED = -1,
}

export function numericRuleTypeFromJSON(object: any): NumericRuleType {
  switch (object) {
    case 0:
    case "NUMERIC_RULE_TYPE_MIN":
      return NumericRuleType.NUMERIC_RULE_TYPE_MIN;
    case 1:
    case "NUMERIC_RULE_TYPE_MAX":
      return NumericRuleType.NUMERIC_RULE_TYPE_MAX;
    case 2:
    case "NUMERIC_RULE_TYPE_GT":
      return NumericRuleType.NUMERIC_RULE_TYPE_GT;
    case 3:
    case "NUMERIC_RULE_TYPE_LT":
      return NumericRuleType.NUMERIC_RULE_TYPE_LT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NumericRuleType.UNRECOGNIZED;
  }
}

export function numericRuleTypeToJSON(object: NumericRuleType): string {
  switch (object) {
    case NumericRuleType.NUMERIC_RULE_TYPE_MIN:
      return "NUMERIC_RULE_TYPE_MIN";
    case NumericRuleType.NUMERIC_RULE_TYPE_MAX:
      return "NUMERIC_RULE_TYPE_MAX";
    case NumericRuleType.NUMERIC_RULE_TYPE_GT:
      return "NUMERIC_RULE_TYPE_GT";
    case NumericRuleType.NUMERIC_RULE_TYPE_LT:
      return "NUMERIC_RULE_TYPE_LT";
    case NumericRuleType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum StringRuleType {
  STRING_RULE_TYPE_MIN = 0,
  STRING_RULE_TYPE_MAX = 1,
  UNRECOGNIZED = -1,
}

export function stringRuleTypeFromJSON(object: any): StringRuleType {
  switch (object) {
    case 0:
    case "STRING_RULE_TYPE_MIN":
      return StringRuleType.STRING_RULE_TYPE_MIN;
    case 1:
    case "STRING_RULE_TYPE_MAX":
      return StringRuleType.STRING_RULE_TYPE_MAX;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StringRuleType.UNRECOGNIZED;
  }
}

export function stringRuleTypeToJSON(object: StringRuleType): string {
  switch (object) {
    case StringRuleType.STRING_RULE_TYPE_MIN:
      return "STRING_RULE_TYPE_MIN";
    case StringRuleType.STRING_RULE_TYPE_MAX:
      return "STRING_RULE_TYPE_MAX";
    case StringRuleType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Validation message with a oneof for typed rules */
export interface ValidationField {
  numeric?: ValidationFieldNumeric | undefined;
  str?: ValidationFieldString | undefined;
  regex?: ValidationFieldRegex | undefined;
}

/** Numeric rule (min/max, etc.) */
export interface ValidationFieldNumeric {
  rules: NumericRule[];
}

export interface NumericRule {
  type: NumericRuleType;
  /** numeric parameter (double to accept int/float) */
  value: number;
}

/** String rule (min/max length) */
export interface ValidationFieldString {
  rules: StringRule[];
}

export interface StringRule {
  type: StringRuleType;
  /** numeric parameter (double to accept int/float) */
  value: number;
}

/** Regex rule (pattern) */
export interface ValidationFieldRegex {
  pattern: string;
  caseSensitive: boolean;
}

function createBaseValidationField(): ValidationField {
  return { numeric: undefined, str: undefined, regex: undefined };
}

export const ValidationField: MessageFns<ValidationField> = {
  encode(message: ValidationField, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.numeric !== undefined) {
      ValidationFieldNumeric.encode(message.numeric, writer.uint32(10).fork()).join();
    }
    if (message.str !== undefined) {
      ValidationFieldString.encode(message.str, writer.uint32(18).fork()).join();
    }
    if (message.regex !== undefined) {
      ValidationFieldRegex.encode(message.regex, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidationField {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidationField();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.numeric = ValidationFieldNumeric.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.str = ValidationFieldString.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.regex = ValidationFieldRegex.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidationField {
    return {
      numeric: isSet(object.numeric) ? ValidationFieldNumeric.fromJSON(object.numeric) : undefined,
      str: isSet(object.str) ? ValidationFieldString.fromJSON(object.str) : undefined,
      regex: isSet(object.regex) ? ValidationFieldRegex.fromJSON(object.regex) : undefined,
    };
  },

  toJSON(message: ValidationField): unknown {
    const obj: any = {};
    if (message.numeric !== undefined) {
      obj.numeric = ValidationFieldNumeric.toJSON(message.numeric);
    }
    if (message.str !== undefined) {
      obj.str = ValidationFieldString.toJSON(message.str);
    }
    if (message.regex !== undefined) {
      obj.regex = ValidationFieldRegex.toJSON(message.regex);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidationField>, I>>(base?: I): ValidationField {
    return ValidationField.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidationField>, I>>(object: I): ValidationField {
    const message = createBaseValidationField();
    message.numeric = (object.numeric !== undefined && object.numeric !== null)
      ? ValidationFieldNumeric.fromPartial(object.numeric)
      : undefined;
    message.str = (object.str !== undefined && object.str !== null)
      ? ValidationFieldString.fromPartial(object.str)
      : undefined;
    message.regex = (object.regex !== undefined && object.regex !== null)
      ? ValidationFieldRegex.fromPartial(object.regex)
      : undefined;
    return message;
  },
};

function createBaseValidationFieldNumeric(): ValidationFieldNumeric {
  return { rules: [] };
}

export const ValidationFieldNumeric: MessageFns<ValidationFieldNumeric> = {
  encode(message: ValidationFieldNumeric, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rules) {
      NumericRule.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidationFieldNumeric {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidationFieldNumeric();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rules.push(NumericRule.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidationFieldNumeric {
    return {
      rules: globalThis.Array.isArray(object?.rules) ? object.rules.map((e: any) => NumericRule.fromJSON(e)) : [],
    };
  },

  toJSON(message: ValidationFieldNumeric): unknown {
    const obj: any = {};
    if (message.rules?.length) {
      obj.rules = message.rules.map((e) => NumericRule.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidationFieldNumeric>, I>>(base?: I): ValidationFieldNumeric {
    return ValidationFieldNumeric.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidationFieldNumeric>, I>>(object: I): ValidationFieldNumeric {
    const message = createBaseValidationFieldNumeric();
    message.rules = object.rules?.map((e) => NumericRule.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNumericRule(): NumericRule {
  return { type: 0, value: 0 };
}

export const NumericRule: MessageFns<NumericRule> = {
  encode(message: NumericRule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.value !== 0) {
      writer.uint32(17).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NumericRule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNumericRule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.value = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NumericRule {
    return {
      type: isSet(object.type) ? numericRuleTypeFromJSON(object.type) : 0,
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: NumericRule): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = numericRuleTypeToJSON(message.type);
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NumericRule>, I>>(base?: I): NumericRule {
    return NumericRule.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NumericRule>, I>>(object: I): NumericRule {
    const message = createBaseNumericRule();
    message.type = object.type ?? 0;
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseValidationFieldString(): ValidationFieldString {
  return { rules: [] };
}

export const ValidationFieldString: MessageFns<ValidationFieldString> = {
  encode(message: ValidationFieldString, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rules) {
      StringRule.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidationFieldString {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidationFieldString();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rules.push(StringRule.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidationFieldString {
    return {
      rules: globalThis.Array.isArray(object?.rules) ? object.rules.map((e: any) => StringRule.fromJSON(e)) : [],
    };
  },

  toJSON(message: ValidationFieldString): unknown {
    const obj: any = {};
    if (message.rules?.length) {
      obj.rules = message.rules.map((e) => StringRule.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidationFieldString>, I>>(base?: I): ValidationFieldString {
    return ValidationFieldString.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidationFieldString>, I>>(object: I): ValidationFieldString {
    const message = createBaseValidationFieldString();
    message.rules = object.rules?.map((e) => StringRule.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStringRule(): StringRule {
  return { type: 0, value: 0 };
}

export const StringRule: MessageFns<StringRule> = {
  encode(message: StringRule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.value !== 0) {
      writer.uint32(17).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StringRule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStringRule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.value = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StringRule {
    return {
      type: isSet(object.type) ? stringRuleTypeFromJSON(object.type) : 0,
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: StringRule): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = stringRuleTypeToJSON(message.type);
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StringRule>, I>>(base?: I): StringRule {
    return StringRule.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StringRule>, I>>(object: I): StringRule {
    const message = createBaseStringRule();
    message.type = object.type ?? 0;
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseValidationFieldRegex(): ValidationFieldRegex {
  return { pattern: "", caseSensitive: false };
}

export const ValidationFieldRegex: MessageFns<ValidationFieldRegex> = {
  encode(message: ValidationFieldRegex, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pattern !== "") {
      writer.uint32(10).string(message.pattern);
    }
    if (message.caseSensitive !== false) {
      writer.uint32(16).bool(message.caseSensitive);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidationFieldRegex {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidationFieldRegex();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pattern = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.caseSensitive = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidationFieldRegex {
    return {
      pattern: isSet(object.pattern) ? globalThis.String(object.pattern) : "",
      caseSensitive: isSet(object.caseSensitive) ? globalThis.Boolean(object.caseSensitive) : false,
    };
  },

  toJSON(message: ValidationFieldRegex): unknown {
    const obj: any = {};
    if (message.pattern !== "") {
      obj.pattern = message.pattern;
    }
    if (message.caseSensitive !== false) {
      obj.caseSensitive = message.caseSensitive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidationFieldRegex>, I>>(base?: I): ValidationFieldRegex {
    return ValidationFieldRegex.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidationFieldRegex>, I>>(object: I): ValidationFieldRegex {
    const message = createBaseValidationFieldRegex();
    message.pattern = object.pattern ?? "";
    message.caseSensitive = object.caseSensitive ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
