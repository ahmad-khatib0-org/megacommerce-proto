// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: users/v1/token.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Value } from "../../shared/v1/struct.js";
import { Timestamp } from "../../shared/v1/time.js";

export const protobufPackage = "users.v1";

/** Represents the standard JWT claims set (RFC 7519). */
export interface JwtClaims {
  /** "iss" (Issuer) - string or URI */
  iss: string;
  /** "sub" (Subject) */
  sub: string;
  /** "aud" (Audience) - could be a list */
  aud: string[];
  /** "exp" (Expiration time) */
  exp?:
    | Timestamp
    | undefined;
  /** "nbf" (Not before) */
  nbf?:
    | Timestamp
    | undefined;
  /** "iat" (Issued at) */
  iat?:
    | Timestamp
    | undefined;
  /** "jti" (JWT ID) */
  jti: string;
  /** Custom claims (flexible map, e.g. roles, tenant_id, etc.) */
  custom: { [key: string]: Value };
}

export interface JwtClaims_CustomEntry {
  key: string;
  value?: Value | undefined;
}

export interface Token {
  id: string;
  userId: string;
  token: string;
  type: string;
  used: boolean;
  createdAt: string;
  expiresAt: string;
}

function createBaseJwtClaims(): JwtClaims {
  return { iss: "", sub: "", aud: [], exp: undefined, nbf: undefined, iat: undefined, jti: "", custom: {} };
}

export const JwtClaims: MessageFns<JwtClaims> = {
  encode(message: JwtClaims, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.iss !== "") {
      writer.uint32(10).string(message.iss);
    }
    if (message.sub !== "") {
      writer.uint32(18).string(message.sub);
    }
    for (const v of message.aud) {
      writer.uint32(26).string(v!);
    }
    if (message.exp !== undefined) {
      Timestamp.encode(message.exp, writer.uint32(34).fork()).join();
    }
    if (message.nbf !== undefined) {
      Timestamp.encode(message.nbf, writer.uint32(42).fork()).join();
    }
    if (message.iat !== undefined) {
      Timestamp.encode(message.iat, writer.uint32(50).fork()).join();
    }
    if (message.jti !== "") {
      writer.uint32(58).string(message.jti);
    }
    Object.entries(message.custom).forEach(([key, value]) => {
      JwtClaims_CustomEntry.encode({ key: key as any, value }, writer.uint32(802).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JwtClaims {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJwtClaims();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.iss = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sub = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.aud.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.exp = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.nbf = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.iat = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.jti = reader.string();
          continue;
        }
        case 100: {
          if (tag !== 802) {
            break;
          }

          const entry100 = JwtClaims_CustomEntry.decode(reader, reader.uint32());
          if (entry100.value !== undefined) {
            message.custom[entry100.key] = entry100.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JwtClaims {
    return {
      iss: isSet(object.iss) ? globalThis.String(object.iss) : "",
      sub: isSet(object.sub) ? globalThis.String(object.sub) : "",
      aud: globalThis.Array.isArray(object?.aud) ? object.aud.map((e: any) => globalThis.String(e)) : [],
      exp: isSet(object.exp) ? Timestamp.fromJSON(object.exp) : undefined,
      nbf: isSet(object.nbf) ? Timestamp.fromJSON(object.nbf) : undefined,
      iat: isSet(object.iat) ? Timestamp.fromJSON(object.iat) : undefined,
      jti: isSet(object.jti) ? globalThis.String(object.jti) : "",
      custom: isObject(object.custom)
        ? Object.entries(object.custom).reduce<{ [key: string]: Value }>((acc, [key, value]) => {
          acc[key] = Value.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: JwtClaims): unknown {
    const obj: any = {};
    if (message.iss !== "") {
      obj.iss = message.iss;
    }
    if (message.sub !== "") {
      obj.sub = message.sub;
    }
    if (message.aud?.length) {
      obj.aud = message.aud;
    }
    if (message.exp !== undefined) {
      obj.exp = Timestamp.toJSON(message.exp);
    }
    if (message.nbf !== undefined) {
      obj.nbf = Timestamp.toJSON(message.nbf);
    }
    if (message.iat !== undefined) {
      obj.iat = Timestamp.toJSON(message.iat);
    }
    if (message.jti !== "") {
      obj.jti = message.jti;
    }
    if (message.custom) {
      const entries = Object.entries(message.custom);
      if (entries.length > 0) {
        obj.custom = {};
        entries.forEach(([k, v]) => {
          obj.custom[k] = Value.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JwtClaims>, I>>(base?: I): JwtClaims {
    return JwtClaims.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JwtClaims>, I>>(object: I): JwtClaims {
    const message = createBaseJwtClaims();
    message.iss = object.iss ?? "";
    message.sub = object.sub ?? "";
    message.aud = object.aud?.map((e) => e) || [];
    message.exp = (object.exp !== undefined && object.exp !== null) ? Timestamp.fromPartial(object.exp) : undefined;
    message.nbf = (object.nbf !== undefined && object.nbf !== null) ? Timestamp.fromPartial(object.nbf) : undefined;
    message.iat = (object.iat !== undefined && object.iat !== null) ? Timestamp.fromPartial(object.iat) : undefined;
    message.jti = object.jti ?? "";
    message.custom = Object.entries(object.custom ?? {}).reduce<{ [key: string]: Value }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = Value.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseJwtClaims_CustomEntry(): JwtClaims_CustomEntry {
  return { key: "", value: undefined };
}

export const JwtClaims_CustomEntry: MessageFns<JwtClaims_CustomEntry> = {
  encode(message: JwtClaims_CustomEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JwtClaims_CustomEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJwtClaims_CustomEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JwtClaims_CustomEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Value.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: JwtClaims_CustomEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Value.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JwtClaims_CustomEntry>, I>>(base?: I): JwtClaims_CustomEntry {
    return JwtClaims_CustomEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JwtClaims_CustomEntry>, I>>(object: I): JwtClaims_CustomEntry {
    const message = createBaseJwtClaims_CustomEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null) ? Value.fromPartial(object.value) : undefined;
    return message;
  },
};

function createBaseToken(): Token {
  return { id: "", userId: "", token: "", type: "", used: false, createdAt: "0", expiresAt: "0" };
}

export const Token: MessageFns<Token> = {
  encode(message: Token, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.token !== "") {
      writer.uint32(26).string(message.token);
    }
    if (message.type !== "") {
      writer.uint32(34).string(message.type);
    }
    if (message.used !== false) {
      writer.uint32(40).bool(message.used);
    }
    if (message.createdAt !== "0") {
      writer.uint32(48).int64(message.createdAt);
    }
    if (message.expiresAt !== "0") {
      writer.uint32(56).int64(message.expiresAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Token {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.used = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.createdAt = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.expiresAt = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Token {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      used: isSet(object.used) ? globalThis.Boolean(object.used) : false,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "0",
      expiresAt: isSet(object.expiresAt) ? globalThis.String(object.expiresAt) : "0",
    };
  },

  toJSON(message: Token): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.used !== false) {
      obj.used = message.used;
    }
    if (message.createdAt !== "0") {
      obj.createdAt = message.createdAt;
    }
    if (message.expiresAt !== "0") {
      obj.expiresAt = message.expiresAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Token>, I>>(base?: I): Token {
    return Token.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Token>, I>>(object: I): Token {
    const message = createBaseToken();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    message.token = object.token ?? "";
    message.type = object.type ?? "";
    message.used = object.used ?? false;
    message.createdAt = object.createdAt ?? "0";
    message.expiresAt = object.expiresAt ?? "0";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
