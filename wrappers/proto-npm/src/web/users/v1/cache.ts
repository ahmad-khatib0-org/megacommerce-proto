// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: users/v1/cache.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "users.v1";

export interface CachedUserSession {
  /** token id */
  id: string;
  token: string;
  createdAt: string;
  expiresAt: string;
  deviceId: string;
}

export interface CachedUserData {
  /** user id */
  id: string;
  isOauth: boolean;
  roles: string;
  /** like: theme:light,mobile_notification:true */
  props: string;
}

export interface CachedUser {
  session?: CachedUserSession | undefined;
  user?: CachedUserData | undefined;
}

function createBaseCachedUserSession(): CachedUserSession {
  return { id: "", token: "", createdAt: "0", expiresAt: "0", deviceId: "" };
}

export const CachedUserSession: MessageFns<CachedUserSession> = {
  encode(message: CachedUserSession, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.token !== "") {
      writer.uint32(18).string(message.token);
    }
    if (message.createdAt !== "0") {
      writer.uint32(24).int64(message.createdAt);
    }
    if (message.expiresAt !== "0") {
      writer.uint32(32).int64(message.expiresAt);
    }
    if (message.deviceId !== "") {
      writer.uint32(42).string(message.deviceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CachedUserSession {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCachedUserSession();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.createdAt = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.expiresAt = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.deviceId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CachedUserSession {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "0",
      expiresAt: isSet(object.expiresAt) ? globalThis.String(object.expiresAt) : "0",
      deviceId: isSet(object.deviceId) ? globalThis.String(object.deviceId) : "",
    };
  },

  toJSON(message: CachedUserSession): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.createdAt !== "0") {
      obj.createdAt = message.createdAt;
    }
    if (message.expiresAt !== "0") {
      obj.expiresAt = message.expiresAt;
    }
    if (message.deviceId !== "") {
      obj.deviceId = message.deviceId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CachedUserSession>, I>>(base?: I): CachedUserSession {
    return CachedUserSession.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CachedUserSession>, I>>(object: I): CachedUserSession {
    const message = createBaseCachedUserSession();
    message.id = object.id ?? "";
    message.token = object.token ?? "";
    message.createdAt = object.createdAt ?? "0";
    message.expiresAt = object.expiresAt ?? "0";
    message.deviceId = object.deviceId ?? "";
    return message;
  },
};

function createBaseCachedUserData(): CachedUserData {
  return { id: "", isOauth: false, roles: "", props: "" };
}

export const CachedUserData: MessageFns<CachedUserData> = {
  encode(message: CachedUserData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.isOauth !== false) {
      writer.uint32(16).bool(message.isOauth);
    }
    if (message.roles !== "") {
      writer.uint32(26).string(message.roles);
    }
    if (message.props !== "") {
      writer.uint32(34).string(message.props);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CachedUserData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCachedUserData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isOauth = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.roles = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.props = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CachedUserData {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      isOauth: isSet(object.isOauth) ? globalThis.Boolean(object.isOauth) : false,
      roles: isSet(object.roles) ? globalThis.String(object.roles) : "",
      props: isSet(object.props) ? globalThis.String(object.props) : "",
    };
  },

  toJSON(message: CachedUserData): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.isOauth !== false) {
      obj.isOauth = message.isOauth;
    }
    if (message.roles !== "") {
      obj.roles = message.roles;
    }
    if (message.props !== "") {
      obj.props = message.props;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CachedUserData>, I>>(base?: I): CachedUserData {
    return CachedUserData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CachedUserData>, I>>(object: I): CachedUserData {
    const message = createBaseCachedUserData();
    message.id = object.id ?? "";
    message.isOauth = object.isOauth ?? false;
    message.roles = object.roles ?? "";
    message.props = object.props ?? "";
    return message;
  },
};

function createBaseCachedUser(): CachedUser {
  return { session: undefined, user: undefined };
}

export const CachedUser: MessageFns<CachedUser> = {
  encode(message: CachedUser, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.session !== undefined) {
      CachedUserSession.encode(message.session, writer.uint32(10).fork()).join();
    }
    if (message.user !== undefined) {
      CachedUserData.encode(message.user, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CachedUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCachedUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.session = CachedUserSession.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.user = CachedUserData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CachedUser {
    return {
      session: isSet(object.session) ? CachedUserSession.fromJSON(object.session) : undefined,
      user: isSet(object.user) ? CachedUserData.fromJSON(object.user) : undefined,
    };
  },

  toJSON(message: CachedUser): unknown {
    const obj: any = {};
    if (message.session !== undefined) {
      obj.session = CachedUserSession.toJSON(message.session);
    }
    if (message.user !== undefined) {
      obj.user = CachedUserData.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CachedUser>, I>>(base?: I): CachedUser {
    return CachedUser.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CachedUser>, I>>(object: I): CachedUser {
    const message = createBaseCachedUser();
    message.session = (object.session !== undefined && object.session !== null)
      ? CachedUserSession.fromPartial(object.session)
      : undefined;
    message.user = (object.user !== undefined && object.user !== null)
      ? CachedUserData.fromPartial(object.user)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
