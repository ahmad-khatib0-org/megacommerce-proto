// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: users/v1/cache.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "users.v1";

export interface CachedUserData {
  isOauth: boolean;
  roles: string;
  /** like: theme:light,mobile_notification:true */
  props: string;
}

export interface CachedTokenStatus {
  devId: string;
  lastChecked: string;
  revoked: boolean;
}

function createBaseCachedUserData(): CachedUserData {
  return { isOauth: false, roles: "", props: "" };
}

export const CachedUserData: MessageFns<CachedUserData> = {
  encode(message: CachedUserData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isOauth !== false) {
      writer.uint32(8).bool(message.isOauth);
    }
    if (message.roles !== "") {
      writer.uint32(18).string(message.roles);
    }
    if (message.props !== "") {
      writer.uint32(26).string(message.props);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CachedUserData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCachedUserData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isOauth = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.roles = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.props = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CachedUserData {
    return {
      isOauth: isSet(object.isOauth) ? globalThis.Boolean(object.isOauth) : false,
      roles: isSet(object.roles) ? globalThis.String(object.roles) : "",
      props: isSet(object.props) ? globalThis.String(object.props) : "",
    };
  },

  toJSON(message: CachedUserData): unknown {
    const obj: any = {};
    if (message.isOauth !== false) {
      obj.isOauth = message.isOauth;
    }
    if (message.roles !== "") {
      obj.roles = message.roles;
    }
    if (message.props !== "") {
      obj.props = message.props;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CachedUserData>, I>>(base?: I): CachedUserData {
    return CachedUserData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CachedUserData>, I>>(object: I): CachedUserData {
    const message = createBaseCachedUserData();
    message.isOauth = object.isOauth ?? false;
    message.roles = object.roles ?? "";
    message.props = object.props ?? "";
    return message;
  },
};

function createBaseCachedTokenStatus(): CachedTokenStatus {
  return { devId: "", lastChecked: "0", revoked: false };
}

export const CachedTokenStatus: MessageFns<CachedTokenStatus> = {
  encode(message: CachedTokenStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.devId !== "") {
      writer.uint32(10).string(message.devId);
    }
    if (message.lastChecked !== "0") {
      writer.uint32(16).int64(message.lastChecked);
    }
    if (message.revoked !== false) {
      writer.uint32(24).bool(message.revoked);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CachedTokenStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCachedTokenStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.devId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.lastChecked = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.revoked = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CachedTokenStatus {
    return {
      devId: isSet(object.devId) ? globalThis.String(object.devId) : "",
      lastChecked: isSet(object.lastChecked) ? globalThis.String(object.lastChecked) : "0",
      revoked: isSet(object.revoked) ? globalThis.Boolean(object.revoked) : false,
    };
  },

  toJSON(message: CachedTokenStatus): unknown {
    const obj: any = {};
    if (message.devId !== "") {
      obj.devId = message.devId;
    }
    if (message.lastChecked !== "0") {
      obj.lastChecked = message.lastChecked;
    }
    if (message.revoked !== false) {
      obj.revoked = message.revoked;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CachedTokenStatus>, I>>(base?: I): CachedTokenStatus {
    return CachedTokenStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CachedTokenStatus>, I>>(object: I): CachedTokenStatus {
    const message = createBaseCachedTokenStatus();
    message.devId = object.devId ?? "";
    message.lastChecked = object.lastChecked ?? "0";
    message.revoked = object.revoked ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
