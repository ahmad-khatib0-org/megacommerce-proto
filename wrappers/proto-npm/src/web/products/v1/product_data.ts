// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: products/v1/product_data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AppError } from "../../shared/v1/error.js";
import { ProductTags } from "./product.js";
import { ProductCategoriesWithoutSubcategories, ProductCategory } from "./product_categories.js";

export const protobufPackage = "products.v1";

export interface ProductDataResponseData {
  categories?: ProductCategoriesWithoutSubcategories | undefined;
  categoryData?: ProductCategory | undefined;
  tags?: ProductTags | undefined;
}

export interface ProductDataRequest {
  getAllCategories?: boolean | undefined;
  getCategoryData?: boolean | undefined;
  categoryName?: string | undefined;
  getTags?: boolean | undefined;
}

export interface ProductDataResponse {
  data?: ProductDataResponseData | undefined;
  error?: AppError | undefined;
}

function createBaseProductDataResponseData(): ProductDataResponseData {
  return { categories: undefined, categoryData: undefined, tags: undefined };
}

export const ProductDataResponseData: MessageFns<ProductDataResponseData> = {
  encode(message: ProductDataResponseData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.categories !== undefined) {
      ProductCategoriesWithoutSubcategories.encode(message.categories, writer.uint32(10).fork()).join();
    }
    if (message.categoryData !== undefined) {
      ProductCategory.encode(message.categoryData, writer.uint32(18).fork()).join();
    }
    if (message.tags !== undefined) {
      ProductTags.encode(message.tags, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductDataResponseData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductDataResponseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.categories = ProductCategoriesWithoutSubcategories.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.categoryData = ProductCategory.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tags = ProductTags.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductDataResponseData {
    return {
      categories: isSet(object.categories)
        ? ProductCategoriesWithoutSubcategories.fromJSON(object.categories)
        : undefined,
      categoryData: isSet(object.categoryData) ? ProductCategory.fromJSON(object.categoryData) : undefined,
      tags: isSet(object.tags) ? ProductTags.fromJSON(object.tags) : undefined,
    };
  },

  toJSON(message: ProductDataResponseData): unknown {
    const obj: any = {};
    if (message.categories !== undefined) {
      obj.categories = ProductCategoriesWithoutSubcategories.toJSON(message.categories);
    }
    if (message.categoryData !== undefined) {
      obj.categoryData = ProductCategory.toJSON(message.categoryData);
    }
    if (message.tags !== undefined) {
      obj.tags = ProductTags.toJSON(message.tags);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductDataResponseData>, I>>(base?: I): ProductDataResponseData {
    return ProductDataResponseData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductDataResponseData>, I>>(object: I): ProductDataResponseData {
    const message = createBaseProductDataResponseData();
    message.categories = (object.categories !== undefined && object.categories !== null)
      ? ProductCategoriesWithoutSubcategories.fromPartial(object.categories)
      : undefined;
    message.categoryData = (object.categoryData !== undefined && object.categoryData !== null)
      ? ProductCategory.fromPartial(object.categoryData)
      : undefined;
    message.tags = (object.tags !== undefined && object.tags !== null)
      ? ProductTags.fromPartial(object.tags)
      : undefined;
    return message;
  },
};

function createBaseProductDataRequest(): ProductDataRequest {
  return { getAllCategories: undefined, getCategoryData: undefined, categoryName: undefined, getTags: undefined };
}

export const ProductDataRequest: MessageFns<ProductDataRequest> = {
  encode(message: ProductDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.getAllCategories !== undefined) {
      writer.uint32(8).bool(message.getAllCategories);
    }
    if (message.getCategoryData !== undefined) {
      writer.uint32(16).bool(message.getCategoryData);
    }
    if (message.categoryName !== undefined) {
      writer.uint32(26).string(message.categoryName);
    }
    if (message.getTags !== undefined) {
      writer.uint32(32).bool(message.getTags);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.getAllCategories = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.getCategoryData = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.categoryName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.getTags = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductDataRequest {
    return {
      getAllCategories: isSet(object.getAllCategories) ? globalThis.Boolean(object.getAllCategories) : undefined,
      getCategoryData: isSet(object.getCategoryData) ? globalThis.Boolean(object.getCategoryData) : undefined,
      categoryName: isSet(object.categoryName) ? globalThis.String(object.categoryName) : undefined,
      getTags: isSet(object.getTags) ? globalThis.Boolean(object.getTags) : undefined,
    };
  },

  toJSON(message: ProductDataRequest): unknown {
    const obj: any = {};
    if (message.getAllCategories !== undefined) {
      obj.getAllCategories = message.getAllCategories;
    }
    if (message.getCategoryData !== undefined) {
      obj.getCategoryData = message.getCategoryData;
    }
    if (message.categoryName !== undefined) {
      obj.categoryName = message.categoryName;
    }
    if (message.getTags !== undefined) {
      obj.getTags = message.getTags;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductDataRequest>, I>>(base?: I): ProductDataRequest {
    return ProductDataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductDataRequest>, I>>(object: I): ProductDataRequest {
    const message = createBaseProductDataRequest();
    message.getAllCategories = object.getAllCategories ?? undefined;
    message.getCategoryData = object.getCategoryData ?? undefined;
    message.categoryName = object.categoryName ?? undefined;
    message.getTags = object.getTags ?? undefined;
    return message;
  },
};

function createBaseProductDataResponse(): ProductDataResponse {
  return { data: undefined, error: undefined };
}

export const ProductDataResponse: MessageFns<ProductDataResponse> = {
  encode(message: ProductDataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ProductDataResponseData.encode(message.data, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      AppError.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductDataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ProductDataResponseData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = AppError.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductDataResponse {
    return {
      data: isSet(object.data) ? ProductDataResponseData.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? AppError.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ProductDataResponse): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ProductDataResponseData.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = AppError.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductDataResponse>, I>>(base?: I): ProductDataResponse {
    return ProductDataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductDataResponse>, I>>(object: I): ProductDataResponse {
    const message = createBaseProductDataResponse();
    message.data = (object.data !== undefined && object.data !== null)
      ? ProductDataResponseData.fromPartial(object.data)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? AppError.fromPartial(object.error)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
