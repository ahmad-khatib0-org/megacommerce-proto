// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: products/v1/product_events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "products.v1";

export interface ChangeFeed {
  after?: ProductOutbox | undefined;
  before?: ProductOutbox | undefined;
  updated: string;
  resolved: string;
}

export interface ProductOutbox {
  id: string;
  /** in other word: the aggregate id */
  productId: string;
  /** 'created'|'updated'|'deleted' */
  type: string;
  /** unix timestamp */
  processedAt?: string | undefined;
  processingAttempts: number;
  lastError?:
    | string
    | undefined;
  /** unix timestamp */
  createdAt: string;
  updatedAt: string;
  created?: ProductCreatedEvent | undefined;
  updated?: ProductUpdatedEvent | undefined;
  deleted?: ProductDeletedEvent | undefined;
}

export interface ProductCreatedEvent {
  title: string;
  description: string;
}

export interface ProductUpdatedEvent {
  title?: string | undefined;
  description?: string | undefined;
}

export interface ProductDeletedEvent {
}

function createBaseChangeFeed(): ChangeFeed {
  return { after: undefined, before: undefined, updated: "0", resolved: "0" };
}

export const ChangeFeed: MessageFns<ChangeFeed> = {
  encode(message: ChangeFeed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.after !== undefined) {
      ProductOutbox.encode(message.after, writer.uint32(10).fork()).join();
    }
    if (message.before !== undefined) {
      ProductOutbox.encode(message.before, writer.uint32(18).fork()).join();
    }
    if (message.updated !== "0") {
      writer.uint32(24).int64(message.updated);
    }
    if (message.resolved !== "0") {
      writer.uint32(32).int64(message.resolved);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangeFeed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangeFeed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.after = ProductOutbox.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.before = ProductOutbox.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.updated = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.resolved = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangeFeed {
    return {
      after: isSet(object.after) ? ProductOutbox.fromJSON(object.after) : undefined,
      before: isSet(object.before) ? ProductOutbox.fromJSON(object.before) : undefined,
      updated: isSet(object.updated) ? globalThis.String(object.updated) : "0",
      resolved: isSet(object.resolved) ? globalThis.String(object.resolved) : "0",
    };
  },

  toJSON(message: ChangeFeed): unknown {
    const obj: any = {};
    if (message.after !== undefined) {
      obj.after = ProductOutbox.toJSON(message.after);
    }
    if (message.before !== undefined) {
      obj.before = ProductOutbox.toJSON(message.before);
    }
    if (message.updated !== "0") {
      obj.updated = message.updated;
    }
    if (message.resolved !== "0") {
      obj.resolved = message.resolved;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChangeFeed>, I>>(base?: I): ChangeFeed {
    return ChangeFeed.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChangeFeed>, I>>(object: I): ChangeFeed {
    const message = createBaseChangeFeed();
    message.after = (object.after !== undefined && object.after !== null)
      ? ProductOutbox.fromPartial(object.after)
      : undefined;
    message.before = (object.before !== undefined && object.before !== null)
      ? ProductOutbox.fromPartial(object.before)
      : undefined;
    message.updated = object.updated ?? "0";
    message.resolved = object.resolved ?? "0";
    return message;
  },
};

function createBaseProductOutbox(): ProductOutbox {
  return {
    id: "",
    productId: "",
    type: "",
    processedAt: undefined,
    processingAttempts: 0,
    lastError: undefined,
    createdAt: "0",
    updatedAt: "0",
    created: undefined,
    updated: undefined,
    deleted: undefined,
  };
}

export const ProductOutbox: MessageFns<ProductOutbox> = {
  encode(message: ProductOutbox, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.productId !== "") {
      writer.uint32(18).string(message.productId);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    if (message.processedAt !== undefined) {
      writer.uint32(32).int64(message.processedAt);
    }
    if (message.processingAttempts !== 0) {
      writer.uint32(40).uint32(message.processingAttempts);
    }
    if (message.lastError !== undefined) {
      writer.uint32(50).string(message.lastError);
    }
    if (message.createdAt !== "0") {
      writer.uint32(56).int64(message.createdAt);
    }
    if (message.updatedAt !== "0") {
      writer.uint32(64).int64(message.updatedAt);
    }
    if (message.created !== undefined) {
      ProductCreatedEvent.encode(message.created, writer.uint32(74).fork()).join();
    }
    if (message.updated !== undefined) {
      ProductUpdatedEvent.encode(message.updated, writer.uint32(82).fork()).join();
    }
    if (message.deleted !== undefined) {
      ProductDeletedEvent.encode(message.deleted, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductOutbox {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductOutbox();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.processedAt = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.processingAttempts = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.lastError = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.createdAt = reader.int64().toString();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.updatedAt = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.created = ProductCreatedEvent.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.updated = ProductUpdatedEvent.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.deleted = ProductDeletedEvent.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductOutbox {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      processedAt: isSet(object.processedAt) ? globalThis.String(object.processedAt) : undefined,
      processingAttempts: isSet(object.processingAttempts) ? globalThis.Number(object.processingAttempts) : 0,
      lastError: isSet(object.lastError) ? globalThis.String(object.lastError) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "0",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "0",
      created: isSet(object.created) ? ProductCreatedEvent.fromJSON(object.created) : undefined,
      updated: isSet(object.updated) ? ProductUpdatedEvent.fromJSON(object.updated) : undefined,
      deleted: isSet(object.deleted) ? ProductDeletedEvent.fromJSON(object.deleted) : undefined,
    };
  },

  toJSON(message: ProductOutbox): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.processedAt !== undefined) {
      obj.processedAt = message.processedAt;
    }
    if (message.processingAttempts !== 0) {
      obj.processingAttempts = Math.round(message.processingAttempts);
    }
    if (message.lastError !== undefined) {
      obj.lastError = message.lastError;
    }
    if (message.createdAt !== "0") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "0") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.created !== undefined) {
      obj.created = ProductCreatedEvent.toJSON(message.created);
    }
    if (message.updated !== undefined) {
      obj.updated = ProductUpdatedEvent.toJSON(message.updated);
    }
    if (message.deleted !== undefined) {
      obj.deleted = ProductDeletedEvent.toJSON(message.deleted);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductOutbox>, I>>(base?: I): ProductOutbox {
    return ProductOutbox.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductOutbox>, I>>(object: I): ProductOutbox {
    const message = createBaseProductOutbox();
    message.id = object.id ?? "";
    message.productId = object.productId ?? "";
    message.type = object.type ?? "";
    message.processedAt = object.processedAt ?? undefined;
    message.processingAttempts = object.processingAttempts ?? 0;
    message.lastError = object.lastError ?? undefined;
    message.createdAt = object.createdAt ?? "0";
    message.updatedAt = object.updatedAt ?? "0";
    message.created = (object.created !== undefined && object.created !== null)
      ? ProductCreatedEvent.fromPartial(object.created)
      : undefined;
    message.updated = (object.updated !== undefined && object.updated !== null)
      ? ProductUpdatedEvent.fromPartial(object.updated)
      : undefined;
    message.deleted = (object.deleted !== undefined && object.deleted !== null)
      ? ProductDeletedEvent.fromPartial(object.deleted)
      : undefined;
    return message;
  },
};

function createBaseProductCreatedEvent(): ProductCreatedEvent {
  return { title: "", description: "" };
}

export const ProductCreatedEvent: MessageFns<ProductCreatedEvent> = {
  encode(message: ProductCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductCreatedEvent {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: ProductCreatedEvent): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductCreatedEvent>, I>>(base?: I): ProductCreatedEvent {
    return ProductCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductCreatedEvent>, I>>(object: I): ProductCreatedEvent {
    const message = createBaseProductCreatedEvent();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseProductUpdatedEvent(): ProductUpdatedEvent {
  return { title: undefined, description: undefined };
}

export const ProductUpdatedEvent: MessageFns<ProductUpdatedEvent> = {
  encode(message: ProductUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== undefined) {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== undefined) {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductUpdatedEvent {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
    };
  },

  toJSON(message: ProductUpdatedEvent): unknown {
    const obj: any = {};
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductUpdatedEvent>, I>>(base?: I): ProductUpdatedEvent {
    return ProductUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductUpdatedEvent>, I>>(object: I): ProductUpdatedEvent {
    const message = createBaseProductUpdatedEvent();
    message.title = object.title ?? undefined;
    message.description = object.description ?? undefined;
    return message;
  },
};

function createBaseProductDeletedEvent(): ProductDeletedEvent {
  return {};
}

export const ProductDeletedEvent: MessageFns<ProductDeletedEvent> = {
  encode(_: ProductDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ProductDeletedEvent {
    return {};
  },

  toJSON(_: ProductDeletedEvent): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductDeletedEvent>, I>>(base?: I): ProductDeletedEvent {
    return ProductDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductDeletedEvent>, I>>(_: I): ProductDeletedEvent {
    const message = createBaseProductDeletedEvent();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
