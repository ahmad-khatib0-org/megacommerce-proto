// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: products/v1/product_categories.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "products.v1";

export interface ProductCategory {
  id: string;
  name: string;
  subcategories: ProductSubcategory[];
}

export interface ProductSubcategory {
  id: string;
  name: string;
  attributes: { [key: string]: ProductSubcategoryAttribute };
}

export interface ProductSubcategory_AttributesEntry {
  key: string;
  value?: ProductSubcategoryAttribute | undefined;
}

export interface ProductSubcategoryAttribute {
  required: boolean;
  type: string;
  stringArray: string[];
}

export interface ProductCategories {
  categories: ProductCategory[];
}

export interface ProductCategoryWithoutSubcategories {
  id: string;
  name: string;
}

export interface ProductCategoriesWithoutSubcategories {
  categories: ProductCategoryWithoutSubcategories[];
}

function createBaseProductCategory(): ProductCategory {
  return { id: "", name: "", subcategories: [] };
}

export const ProductCategory: MessageFns<ProductCategory> = {
  encode(message: ProductCategory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    for (const v of message.subcategories) {
      ProductSubcategory.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductCategory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductCategory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.subcategories.push(ProductSubcategory.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductCategory {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      subcategories: globalThis.Array.isArray(object?.subcategories)
        ? object.subcategories.map((e: any) => ProductSubcategory.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ProductCategory): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.subcategories?.length) {
      obj.subcategories = message.subcategories.map((e) => ProductSubcategory.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductCategory>, I>>(base?: I): ProductCategory {
    return ProductCategory.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductCategory>, I>>(object: I): ProductCategory {
    const message = createBaseProductCategory();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.subcategories = object.subcategories?.map((e) => ProductSubcategory.fromPartial(e)) || [];
    return message;
  },
};

function createBaseProductSubcategory(): ProductSubcategory {
  return { id: "", name: "", attributes: {} };
}

export const ProductSubcategory: MessageFns<ProductSubcategory> = {
  encode(message: ProductSubcategory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      ProductSubcategory_AttributesEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductSubcategory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductSubcategory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = ProductSubcategory_AttributesEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.attributes[entry3.key] = entry3.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductSubcategory {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      attributes: isObject(object.attributes)
        ? Object.entries(object.attributes).reduce<{ [key: string]: ProductSubcategoryAttribute }>(
          (acc, [key, value]) => {
            acc[key] = ProductSubcategoryAttribute.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
    };
  },

  toJSON(message: ProductSubcategory): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.attributes) {
      const entries = Object.entries(message.attributes);
      if (entries.length > 0) {
        obj.attributes = {};
        entries.forEach(([k, v]) => {
          obj.attributes[k] = ProductSubcategoryAttribute.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductSubcategory>, I>>(base?: I): ProductSubcategory {
    return ProductSubcategory.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductSubcategory>, I>>(object: I): ProductSubcategory {
    const message = createBaseProductSubcategory();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.attributes = Object.entries(object.attributes ?? {}).reduce<{ [key: string]: ProductSubcategoryAttribute }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = ProductSubcategoryAttribute.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseProductSubcategory_AttributesEntry(): ProductSubcategory_AttributesEntry {
  return { key: "", value: undefined };
}

export const ProductSubcategory_AttributesEntry: MessageFns<ProductSubcategory_AttributesEntry> = {
  encode(message: ProductSubcategory_AttributesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      ProductSubcategoryAttribute.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductSubcategory_AttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductSubcategory_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = ProductSubcategoryAttribute.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductSubcategory_AttributesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? ProductSubcategoryAttribute.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: ProductSubcategory_AttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = ProductSubcategoryAttribute.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductSubcategory_AttributesEntry>, I>>(
    base?: I,
  ): ProductSubcategory_AttributesEntry {
    return ProductSubcategory_AttributesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductSubcategory_AttributesEntry>, I>>(
    object: I,
  ): ProductSubcategory_AttributesEntry {
    const message = createBaseProductSubcategory_AttributesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ProductSubcategoryAttribute.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseProductSubcategoryAttribute(): ProductSubcategoryAttribute {
  return { required: false, type: "", stringArray: [] };
}

export const ProductSubcategoryAttribute: MessageFns<ProductSubcategoryAttribute> = {
  encode(message: ProductSubcategoryAttribute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.required !== false) {
      writer.uint32(8).bool(message.required);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    for (const v of message.stringArray) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductSubcategoryAttribute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductSubcategoryAttribute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.required = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.stringArray.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductSubcategoryAttribute {
    return {
      required: isSet(object.required) ? globalThis.Boolean(object.required) : false,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      stringArray: globalThis.Array.isArray(object?.stringArray)
        ? object.stringArray.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ProductSubcategoryAttribute): unknown {
    const obj: any = {};
    if (message.required !== false) {
      obj.required = message.required;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.stringArray?.length) {
      obj.stringArray = message.stringArray;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductSubcategoryAttribute>, I>>(base?: I): ProductSubcategoryAttribute {
    return ProductSubcategoryAttribute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductSubcategoryAttribute>, I>>(object: I): ProductSubcategoryAttribute {
    const message = createBaseProductSubcategoryAttribute();
    message.required = object.required ?? false;
    message.type = object.type ?? "";
    message.stringArray = object.stringArray?.map((e) => e) || [];
    return message;
  },
};

function createBaseProductCategories(): ProductCategories {
  return { categories: [] };
}

export const ProductCategories: MessageFns<ProductCategories> = {
  encode(message: ProductCategories, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.categories) {
      ProductCategory.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductCategories {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductCategories();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.categories.push(ProductCategory.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductCategories {
    return {
      categories: globalThis.Array.isArray(object?.categories)
        ? object.categories.map((e: any) => ProductCategory.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ProductCategories): unknown {
    const obj: any = {};
    if (message.categories?.length) {
      obj.categories = message.categories.map((e) => ProductCategory.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductCategories>, I>>(base?: I): ProductCategories {
    return ProductCategories.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductCategories>, I>>(object: I): ProductCategories {
    const message = createBaseProductCategories();
    message.categories = object.categories?.map((e) => ProductCategory.fromPartial(e)) || [];
    return message;
  },
};

function createBaseProductCategoryWithoutSubcategories(): ProductCategoryWithoutSubcategories {
  return { id: "", name: "" };
}

export const ProductCategoryWithoutSubcategories: MessageFns<ProductCategoryWithoutSubcategories> = {
  encode(message: ProductCategoryWithoutSubcategories, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductCategoryWithoutSubcategories {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductCategoryWithoutSubcategories();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductCategoryWithoutSubcategories {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: ProductCategoryWithoutSubcategories): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductCategoryWithoutSubcategories>, I>>(
    base?: I,
  ): ProductCategoryWithoutSubcategories {
    return ProductCategoryWithoutSubcategories.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductCategoryWithoutSubcategories>, I>>(
    object: I,
  ): ProductCategoryWithoutSubcategories {
    const message = createBaseProductCategoryWithoutSubcategories();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseProductCategoriesWithoutSubcategories(): ProductCategoriesWithoutSubcategories {
  return { categories: [] };
}

export const ProductCategoriesWithoutSubcategories: MessageFns<ProductCategoriesWithoutSubcategories> = {
  encode(message: ProductCategoriesWithoutSubcategories, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.categories) {
      ProductCategoryWithoutSubcategories.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductCategoriesWithoutSubcategories {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductCategoriesWithoutSubcategories();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.categories.push(ProductCategoryWithoutSubcategories.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductCategoriesWithoutSubcategories {
    return {
      categories: globalThis.Array.isArray(object?.categories)
        ? object.categories.map((e: any) => ProductCategoryWithoutSubcategories.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ProductCategoriesWithoutSubcategories): unknown {
    const obj: any = {};
    if (message.categories?.length) {
      obj.categories = message.categories.map((e) => ProductCategoryWithoutSubcategories.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductCategoriesWithoutSubcategories>, I>>(
    base?: I,
  ): ProductCategoriesWithoutSubcategories {
    return ProductCategoriesWithoutSubcategories.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductCategoriesWithoutSubcategories>, I>>(
    object: I,
  ): ProductCategoriesWithoutSubcategories {
    const message = createBaseProductCategoriesWithoutSubcategories();
    message.categories = object.categories?.map((e) => ProductCategoryWithoutSubcategories.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
