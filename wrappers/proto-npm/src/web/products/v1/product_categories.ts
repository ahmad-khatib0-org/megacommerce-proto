// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: products/v1/product_categories.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { StringMap } from "../../shared/v1/types.js";
import { ValidationField } from "../../shared/v1/validation.js";

export const protobufPackage = "products.v1";

export interface Category {
  id: string;
  name: string;
  image: string;
  translations: CategoryTranslations[];
  subcategories: Subcategory[];
}

export interface CategoryTranslations {
  name: string;
  language: string;
  version: number;
  subcategories: { [key: string]: SubcategoryTranslations };
}

export interface CategoryTranslations_SubcategoriesEntry {
  key: string;
  value?: SubcategoryTranslations | undefined;
}

export interface SubcategoryTranslations {
  name: string;
  attributes: { [key: string]: SubcategoryAttributeTranslation };
  data: { [key: string]: StringMap };
}

export interface SubcategoryTranslations_AttributesEntry {
  key: string;
  value?: SubcategoryAttributeTranslation | undefined;
}

export interface SubcategoryTranslations_DataEntry {
  key: string;
  value?: StringMap | undefined;
}

export interface SubcategoryAttributeTranslation {
  label: string;
  placeholder: string;
  info: string;
}

export interface Subcategory {
  id: string;
  name: string;
  version: number;
  createdAt: string;
  attributes: { [key: string]: SubcategoryAttribute };
}

export interface Subcategory_AttributesEntry {
  key: string;
  value?: SubcategoryAttribute | undefined;
}

/** Top-level attribute with a typed validation */
export interface SubcategoryAttribute {
  /** wither this attribute required or optional */
  required: boolean;
  /** input, select, tags ... */
  type: string;
  /**
   * wither this attributes can be customized for each variation or it must be shared
   * by all of the product's variations
   */
  includeInVariants: boolean;
  /**
   * reference id to the attributes table (E.g weight is common for many products types,
   * so instead rewriting it each time, we store it in another table)
   */
  reference?:
    | string
    | undefined;
  /** for select type (E.g. ['white', 'black', ...]) */
  stringArray: string[];
  /** for select type (E.g. multiple colors) */
  isMultiple?:
    | boolean
    | undefined;
  /** validation rules of this attribute */
  validation?: ValidationField | undefined;
}

function createBaseCategory(): Category {
  return { id: "", name: "", image: "", translations: [], subcategories: [] };
}

export const Category: MessageFns<Category> = {
  encode(message: Category, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.image !== "") {
      writer.uint32(26).string(message.image);
    }
    for (const v of message.translations) {
      CategoryTranslations.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.subcategories) {
      Subcategory.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Category {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.translations.push(CategoryTranslations.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.subcategories.push(Subcategory.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Category {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      translations: globalThis.Array.isArray(object?.translations)
        ? object.translations.map((e: any) => CategoryTranslations.fromJSON(e))
        : [],
      subcategories: globalThis.Array.isArray(object?.subcategories)
        ? object.subcategories.map((e: any) => Subcategory.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Category): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.translations?.length) {
      obj.translations = message.translations.map((e) => CategoryTranslations.toJSON(e));
    }
    if (message.subcategories?.length) {
      obj.subcategories = message.subcategories.map((e) => Subcategory.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Category>, I>>(base?: I): Category {
    return Category.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Category>, I>>(object: I): Category {
    const message = createBaseCategory();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.image = object.image ?? "";
    message.translations = object.translations?.map((e) => CategoryTranslations.fromPartial(e)) || [];
    message.subcategories = object.subcategories?.map((e) => Subcategory.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCategoryTranslations(): CategoryTranslations {
  return { name: "", language: "", version: 0, subcategories: {} };
}

export const CategoryTranslations: MessageFns<CategoryTranslations> = {
  encode(message: CategoryTranslations, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.language !== "") {
      writer.uint32(18).string(message.language);
    }
    if (message.version !== 0) {
      writer.uint32(24).int32(message.version);
    }
    Object.entries(message.subcategories).forEach(([key, value]) => {
      CategoryTranslations_SubcategoriesEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CategoryTranslations {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategoryTranslations();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.language = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.version = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = CategoryTranslations_SubcategoriesEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.subcategories[entry4.key] = entry4.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CategoryTranslations {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      subcategories: isObject(object.subcategories)
        ? Object.entries(object.subcategories).reduce<{ [key: string]: SubcategoryTranslations }>(
          (acc, [key, value]) => {
            acc[key] = SubcategoryTranslations.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
    };
  },

  toJSON(message: CategoryTranslations): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.subcategories) {
      const entries = Object.entries(message.subcategories);
      if (entries.length > 0) {
        obj.subcategories = {};
        entries.forEach(([k, v]) => {
          obj.subcategories[k] = SubcategoryTranslations.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CategoryTranslations>, I>>(base?: I): CategoryTranslations {
    return CategoryTranslations.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CategoryTranslations>, I>>(object: I): CategoryTranslations {
    const message = createBaseCategoryTranslations();
    message.name = object.name ?? "";
    message.language = object.language ?? "";
    message.version = object.version ?? 0;
    message.subcategories = Object.entries(object.subcategories ?? {}).reduce<
      { [key: string]: SubcategoryTranslations }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = SubcategoryTranslations.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseCategoryTranslations_SubcategoriesEntry(): CategoryTranslations_SubcategoriesEntry {
  return { key: "", value: undefined };
}

export const CategoryTranslations_SubcategoriesEntry: MessageFns<CategoryTranslations_SubcategoriesEntry> = {
  encode(message: CategoryTranslations_SubcategoriesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      SubcategoryTranslations.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CategoryTranslations_SubcategoriesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategoryTranslations_SubcategoriesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = SubcategoryTranslations.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CategoryTranslations_SubcategoriesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? SubcategoryTranslations.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: CategoryTranslations_SubcategoriesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = SubcategoryTranslations.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CategoryTranslations_SubcategoriesEntry>, I>>(
    base?: I,
  ): CategoryTranslations_SubcategoriesEntry {
    return CategoryTranslations_SubcategoriesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CategoryTranslations_SubcategoriesEntry>, I>>(
    object: I,
  ): CategoryTranslations_SubcategoriesEntry {
    const message = createBaseCategoryTranslations_SubcategoriesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? SubcategoryTranslations.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseSubcategoryTranslations(): SubcategoryTranslations {
  return { name: "", attributes: {}, data: {} };
}

export const SubcategoryTranslations: MessageFns<SubcategoryTranslations> = {
  encode(message: SubcategoryTranslations, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      SubcategoryTranslations_AttributesEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    Object.entries(message.data).forEach(([key, value]) => {
      SubcategoryTranslations_DataEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubcategoryTranslations {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubcategoryTranslations();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = SubcategoryTranslations_AttributesEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.attributes[entry2.key] = entry2.value;
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = SubcategoryTranslations_DataEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.data[entry3.key] = entry3.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubcategoryTranslations {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      attributes: isObject(object.attributes)
        ? Object.entries(object.attributes).reduce<{ [key: string]: SubcategoryAttributeTranslation }>(
          (acc, [key, value]) => {
            acc[key] = SubcategoryAttributeTranslation.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
      data: isObject(object.data)
        ? Object.entries(object.data).reduce<{ [key: string]: StringMap }>((acc, [key, value]) => {
          acc[key] = StringMap.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: SubcategoryTranslations): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.attributes) {
      const entries = Object.entries(message.attributes);
      if (entries.length > 0) {
        obj.attributes = {};
        entries.forEach(([k, v]) => {
          obj.attributes[k] = SubcategoryAttributeTranslation.toJSON(v);
        });
      }
    }
    if (message.data) {
      const entries = Object.entries(message.data);
      if (entries.length > 0) {
        obj.data = {};
        entries.forEach(([k, v]) => {
          obj.data[k] = StringMap.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubcategoryTranslations>, I>>(base?: I): SubcategoryTranslations {
    return SubcategoryTranslations.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubcategoryTranslations>, I>>(object: I): SubcategoryTranslations {
    const message = createBaseSubcategoryTranslations();
    message.name = object.name ?? "";
    message.attributes = Object.entries(object.attributes ?? {}).reduce<
      { [key: string]: SubcategoryAttributeTranslation }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = SubcategoryAttributeTranslation.fromPartial(value);
      }
      return acc;
    }, {});
    message.data = Object.entries(object.data ?? {}).reduce<{ [key: string]: StringMap }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = StringMap.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseSubcategoryTranslations_AttributesEntry(): SubcategoryTranslations_AttributesEntry {
  return { key: "", value: undefined };
}

export const SubcategoryTranslations_AttributesEntry: MessageFns<SubcategoryTranslations_AttributesEntry> = {
  encode(message: SubcategoryTranslations_AttributesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      SubcategoryAttributeTranslation.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubcategoryTranslations_AttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubcategoryTranslations_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = SubcategoryAttributeTranslation.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubcategoryTranslations_AttributesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? SubcategoryAttributeTranslation.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: SubcategoryTranslations_AttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = SubcategoryAttributeTranslation.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubcategoryTranslations_AttributesEntry>, I>>(
    base?: I,
  ): SubcategoryTranslations_AttributesEntry {
    return SubcategoryTranslations_AttributesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubcategoryTranslations_AttributesEntry>, I>>(
    object: I,
  ): SubcategoryTranslations_AttributesEntry {
    const message = createBaseSubcategoryTranslations_AttributesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? SubcategoryAttributeTranslation.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseSubcategoryTranslations_DataEntry(): SubcategoryTranslations_DataEntry {
  return { key: "", value: undefined };
}

export const SubcategoryTranslations_DataEntry: MessageFns<SubcategoryTranslations_DataEntry> = {
  encode(message: SubcategoryTranslations_DataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      StringMap.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubcategoryTranslations_DataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubcategoryTranslations_DataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = StringMap.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubcategoryTranslations_DataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? StringMap.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: SubcategoryTranslations_DataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = StringMap.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubcategoryTranslations_DataEntry>, I>>(
    base?: I,
  ): SubcategoryTranslations_DataEntry {
    return SubcategoryTranslations_DataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubcategoryTranslations_DataEntry>, I>>(
    object: I,
  ): SubcategoryTranslations_DataEntry {
    const message = createBaseSubcategoryTranslations_DataEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? StringMap.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseSubcategoryAttributeTranslation(): SubcategoryAttributeTranslation {
  return { label: "", placeholder: "", info: "" };
}

export const SubcategoryAttributeTranslation: MessageFns<SubcategoryAttributeTranslation> = {
  encode(message: SubcategoryAttributeTranslation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.label !== "") {
      writer.uint32(10).string(message.label);
    }
    if (message.placeholder !== "") {
      writer.uint32(18).string(message.placeholder);
    }
    if (message.info !== "") {
      writer.uint32(26).string(message.info);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubcategoryAttributeTranslation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubcategoryAttributeTranslation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.label = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.placeholder = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.info = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubcategoryAttributeTranslation {
    return {
      label: isSet(object.label) ? globalThis.String(object.label) : "",
      placeholder: isSet(object.placeholder) ? globalThis.String(object.placeholder) : "",
      info: isSet(object.info) ? globalThis.String(object.info) : "",
    };
  },

  toJSON(message: SubcategoryAttributeTranslation): unknown {
    const obj: any = {};
    if (message.label !== "") {
      obj.label = message.label;
    }
    if (message.placeholder !== "") {
      obj.placeholder = message.placeholder;
    }
    if (message.info !== "") {
      obj.info = message.info;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubcategoryAttributeTranslation>, I>>(base?: I): SubcategoryAttributeTranslation {
    return SubcategoryAttributeTranslation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubcategoryAttributeTranslation>, I>>(
    object: I,
  ): SubcategoryAttributeTranslation {
    const message = createBaseSubcategoryAttributeTranslation();
    message.label = object.label ?? "";
    message.placeholder = object.placeholder ?? "";
    message.info = object.info ?? "";
    return message;
  },
};

function createBaseSubcategory(): Subcategory {
  return { id: "", name: "", version: 0, createdAt: "", attributes: {} };
}

export const Subcategory: MessageFns<Subcategory> = {
  encode(message: Subcategory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.version !== 0) {
      writer.uint32(24).int32(message.version);
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      Subcategory_AttributesEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Subcategory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubcategory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.version = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          const entry5 = Subcategory_AttributesEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.attributes[entry5.key] = entry5.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Subcategory {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      attributes: isObject(object.attributes)
        ? Object.entries(object.attributes).reduce<{ [key: string]: SubcategoryAttribute }>((acc, [key, value]) => {
          acc[key] = SubcategoryAttribute.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Subcategory): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.attributes) {
      const entries = Object.entries(message.attributes);
      if (entries.length > 0) {
        obj.attributes = {};
        entries.forEach(([k, v]) => {
          obj.attributes[k] = SubcategoryAttribute.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Subcategory>, I>>(base?: I): Subcategory {
    return Subcategory.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Subcategory>, I>>(object: I): Subcategory {
    const message = createBaseSubcategory();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.version = object.version ?? 0;
    message.createdAt = object.createdAt ?? "";
    message.attributes = Object.entries(object.attributes ?? {}).reduce<{ [key: string]: SubcategoryAttribute }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = SubcategoryAttribute.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseSubcategory_AttributesEntry(): Subcategory_AttributesEntry {
  return { key: "", value: undefined };
}

export const Subcategory_AttributesEntry: MessageFns<Subcategory_AttributesEntry> = {
  encode(message: Subcategory_AttributesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      SubcategoryAttribute.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Subcategory_AttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubcategory_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = SubcategoryAttribute.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Subcategory_AttributesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? SubcategoryAttribute.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Subcategory_AttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = SubcategoryAttribute.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Subcategory_AttributesEntry>, I>>(base?: I): Subcategory_AttributesEntry {
    return Subcategory_AttributesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Subcategory_AttributesEntry>, I>>(object: I): Subcategory_AttributesEntry {
    const message = createBaseSubcategory_AttributesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? SubcategoryAttribute.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseSubcategoryAttribute(): SubcategoryAttribute {
  return {
    required: false,
    type: "",
    includeInVariants: false,
    reference: undefined,
    stringArray: [],
    isMultiple: undefined,
    validation: undefined,
  };
}

export const SubcategoryAttribute: MessageFns<SubcategoryAttribute> = {
  encode(message: SubcategoryAttribute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.required !== false) {
      writer.uint32(8).bool(message.required);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.includeInVariants !== false) {
      writer.uint32(24).bool(message.includeInVariants);
    }
    if (message.reference !== undefined) {
      writer.uint32(34).string(message.reference);
    }
    for (const v of message.stringArray) {
      writer.uint32(42).string(v!);
    }
    if (message.isMultiple !== undefined) {
      writer.uint32(48).bool(message.isMultiple);
    }
    if (message.validation !== undefined) {
      ValidationField.encode(message.validation, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubcategoryAttribute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubcategoryAttribute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.required = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.includeInVariants = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.reference = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.stringArray.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isMultiple = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.validation = ValidationField.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubcategoryAttribute {
    return {
      required: isSet(object.required) ? globalThis.Boolean(object.required) : false,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      includeInVariants: isSet(object.includeInVariants) ? globalThis.Boolean(object.includeInVariants) : false,
      reference: isSet(object.reference) ? globalThis.String(object.reference) : undefined,
      stringArray: globalThis.Array.isArray(object?.stringArray)
        ? object.stringArray.map((e: any) => globalThis.String(e))
        : [],
      isMultiple: isSet(object.isMultiple) ? globalThis.Boolean(object.isMultiple) : undefined,
      validation: isSet(object.validation) ? ValidationField.fromJSON(object.validation) : undefined,
    };
  },

  toJSON(message: SubcategoryAttribute): unknown {
    const obj: any = {};
    if (message.required !== false) {
      obj.required = message.required;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.includeInVariants !== false) {
      obj.includeInVariants = message.includeInVariants;
    }
    if (message.reference !== undefined) {
      obj.reference = message.reference;
    }
    if (message.stringArray?.length) {
      obj.stringArray = message.stringArray;
    }
    if (message.isMultiple !== undefined) {
      obj.isMultiple = message.isMultiple;
    }
    if (message.validation !== undefined) {
      obj.validation = ValidationField.toJSON(message.validation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubcategoryAttribute>, I>>(base?: I): SubcategoryAttribute {
    return SubcategoryAttribute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubcategoryAttribute>, I>>(object: I): SubcategoryAttribute {
    const message = createBaseSubcategoryAttribute();
    message.required = object.required ?? false;
    message.type = object.type ?? "";
    message.includeInVariants = object.includeInVariants ?? false;
    message.reference = object.reference ?? undefined;
    message.stringArray = object.stringArray?.map((e) => e) || [];
    message.isMultiple = object.isMultiple ?? undefined;
    message.validation = (object.validation !== undefined && object.validation !== null)
      ? ValidationField.fromPartial(object.validation)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
