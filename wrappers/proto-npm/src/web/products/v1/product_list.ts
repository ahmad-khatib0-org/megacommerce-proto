// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: products/v1/product_list.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AppError } from "../../shared/v1/error.js";
import { OrderDirection } from "../../shared/v1/types.js";

export const protobufPackage = "products.v1";

export interface ProductListItem {
  id: string;
  userId: string;
  title: string;
  description: string;
  slug: string;
  price: string;
  currencyCode: string;
  arEnabled: boolean;
}

export interface ProductListRequest {
  page: number;
  lastId: string;
  orderPrice?: OrderDirection | undefined;
}

export interface ProductListResponse {
  data?: ProductListResponseData | undefined;
  error?: AppError | undefined;
}

export interface ProductListResponseData {
  data: ProductListItem[];
}

function createBaseProductListItem(): ProductListItem {
  return { id: "", userId: "", title: "", description: "", slug: "", price: "", currencyCode: "", arEnabled: false };
}

export const ProductListItem: MessageFns<ProductListItem> = {
  encode(message: ProductListItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.title !== "") {
      writer.uint32(50).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(58).string(message.description);
    }
    if (message.slug !== "") {
      writer.uint32(66).string(message.slug);
    }
    if (message.price !== "") {
      writer.uint32(74).string(message.price);
    }
    if (message.currencyCode !== "") {
      writer.uint32(82).string(message.currencyCode);
    }
    if (message.arEnabled !== false) {
      writer.uint32(104).bool(message.arEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductListItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductListItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.price = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.currencyCode = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.arEnabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductListItem {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      price: isSet(object.price) ? globalThis.String(object.price) : "",
      currencyCode: isSet(object.currencyCode) ? globalThis.String(object.currencyCode) : "",
      arEnabled: isSet(object.arEnabled) ? globalThis.Boolean(object.arEnabled) : false,
    };
  },

  toJSON(message: ProductListItem): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.price !== "") {
      obj.price = message.price;
    }
    if (message.currencyCode !== "") {
      obj.currencyCode = message.currencyCode;
    }
    if (message.arEnabled !== false) {
      obj.arEnabled = message.arEnabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductListItem>, I>>(base?: I): ProductListItem {
    return ProductListItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductListItem>, I>>(object: I): ProductListItem {
    const message = createBaseProductListItem();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.slug = object.slug ?? "";
    message.price = object.price ?? "";
    message.currencyCode = object.currencyCode ?? "";
    message.arEnabled = object.arEnabled ?? false;
    return message;
  },
};

function createBaseProductListRequest(): ProductListRequest {
  return { page: 0, lastId: "", orderPrice: undefined };
}

export const ProductListRequest: MessageFns<ProductListRequest> = {
  encode(message: ProductListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).uint32(message.page);
    }
    if (message.lastId !== "") {
      writer.uint32(18).string(message.lastId);
    }
    if (message.orderPrice !== undefined) {
      OrderDirection.encode(message.orderPrice, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lastId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.orderPrice = OrderDirection.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductListRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      lastId: isSet(object.lastId) ? globalThis.String(object.lastId) : "",
      orderPrice: isSet(object.orderPrice) ? OrderDirection.fromJSON(object.orderPrice) : undefined,
    };
  },

  toJSON(message: ProductListRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.lastId !== "") {
      obj.lastId = message.lastId;
    }
    if (message.orderPrice !== undefined) {
      obj.orderPrice = OrderDirection.toJSON(message.orderPrice);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductListRequest>, I>>(base?: I): ProductListRequest {
    return ProductListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductListRequest>, I>>(object: I): ProductListRequest {
    const message = createBaseProductListRequest();
    message.page = object.page ?? 0;
    message.lastId = object.lastId ?? "";
    message.orderPrice = (object.orderPrice !== undefined && object.orderPrice !== null)
      ? OrderDirection.fromPartial(object.orderPrice)
      : undefined;
    return message;
  },
};

function createBaseProductListResponse(): ProductListResponse {
  return { data: undefined, error: undefined };
}

export const ProductListResponse: MessageFns<ProductListResponse> = {
  encode(message: ProductListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ProductListResponseData.encode(message.data, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      AppError.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ProductListResponseData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = AppError.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductListResponse {
    return {
      data: isSet(object.data) ? ProductListResponseData.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? AppError.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ProductListResponse): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ProductListResponseData.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = AppError.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductListResponse>, I>>(base?: I): ProductListResponse {
    return ProductListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductListResponse>, I>>(object: I): ProductListResponse {
    const message = createBaseProductListResponse();
    message.data = (object.data !== undefined && object.data !== null)
      ? ProductListResponseData.fromPartial(object.data)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? AppError.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseProductListResponseData(): ProductListResponseData {
  return { data: [] };
}

export const ProductListResponseData: MessageFns<ProductListResponseData> = {
  encode(message: ProductListResponseData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.data) {
      ProductListItem.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductListResponseData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductListResponseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data.push(ProductListItem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductListResponseData {
    return {
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => ProductListItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: ProductListResponseData): unknown {
    const obj: any = {};
    if (message.data?.length) {
      obj.data = message.data.map((e) => ProductListItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductListResponseData>, I>>(base?: I): ProductListResponseData {
    return ProductListResponseData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductListResponseData>, I>>(object: I): ProductListResponseData {
    const message = createBaseProductListResponseData();
    message.data = object.data?.map((e) => ProductListItem.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
