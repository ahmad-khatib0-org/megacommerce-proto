// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: products/v1/product.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "products.v1";

export interface ProductTag {
  id?: number | undefined;
  name?: string | undefined;
}

export interface ProductTags {
  tags: ProductTag[];
}

export interface ProductMetadata {
}

export interface Product {
  id: string;
  userId: string;
  sku: string;
  version: number;
  status: string;
  title: string;
  description: string;
  slug: string;
  price: string;
  currencyCode: string;
  tags: ProductTag[];
  metadata?: ProductMetadata | undefined;
  arEnabled: boolean;
  createdAt: string;
  publishedAt?: string | undefined;
  updatedAt?: string | undefined;
}

function createBaseProductTag(): ProductTag {
  return { id: undefined, name: undefined };
}

export const ProductTag: MessageFns<ProductTag> = {
  encode(message: ProductTag, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductTag {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductTag();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductTag {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
    };
  },

  toJSON(message: ProductTag): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductTag>, I>>(base?: I): ProductTag {
    return ProductTag.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductTag>, I>>(object: I): ProductTag {
    const message = createBaseProductTag();
    message.id = object.id ?? undefined;
    message.name = object.name ?? undefined;
    return message;
  },
};

function createBaseProductTags(): ProductTags {
  return { tags: [] };
}

export const ProductTags: MessageFns<ProductTags> = {
  encode(message: ProductTags, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tags) {
      ProductTag.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductTags {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductTags();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tags.push(ProductTag.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductTags {
    return { tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => ProductTag.fromJSON(e)) : [] };
  },

  toJSON(message: ProductTags): unknown {
    const obj: any = {};
    if (message.tags?.length) {
      obj.tags = message.tags.map((e) => ProductTag.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductTags>, I>>(base?: I): ProductTags {
    return ProductTags.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductTags>, I>>(object: I): ProductTags {
    const message = createBaseProductTags();
    message.tags = object.tags?.map((e) => ProductTag.fromPartial(e)) || [];
    return message;
  },
};

function createBaseProductMetadata(): ProductMetadata {
  return {};
}

export const ProductMetadata: MessageFns<ProductMetadata> = {
  encode(_: ProductMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ProductMetadata {
    return {};
  },

  toJSON(_: ProductMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductMetadata>, I>>(base?: I): ProductMetadata {
    return ProductMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductMetadata>, I>>(_: I): ProductMetadata {
    const message = createBaseProductMetadata();
    return message;
  },
};

function createBaseProduct(): Product {
  return {
    id: "",
    userId: "",
    sku: "",
    version: 0,
    status: "",
    title: "",
    description: "",
    slug: "",
    price: "",
    currencyCode: "",
    tags: [],
    metadata: undefined,
    arEnabled: false,
    createdAt: "0",
    publishedAt: undefined,
    updatedAt: undefined,
  };
}

export const Product: MessageFns<Product> = {
  encode(message: Product, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.sku !== "") {
      writer.uint32(26).string(message.sku);
    }
    if (message.version !== 0) {
      writer.uint32(32).uint32(message.version);
    }
    if (message.status !== "") {
      writer.uint32(42).string(message.status);
    }
    if (message.title !== "") {
      writer.uint32(50).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(58).string(message.description);
    }
    if (message.slug !== "") {
      writer.uint32(66).string(message.slug);
    }
    if (message.price !== "") {
      writer.uint32(74).string(message.price);
    }
    if (message.currencyCode !== "") {
      writer.uint32(82).string(message.currencyCode);
    }
    for (const v of message.tags) {
      ProductTag.encode(v!, writer.uint32(90).fork()).join();
    }
    if (message.metadata !== undefined) {
      ProductMetadata.encode(message.metadata, writer.uint32(98).fork()).join();
    }
    if (message.arEnabled !== false) {
      writer.uint32(104).bool(message.arEnabled);
    }
    if (message.createdAt !== "0") {
      writer.uint32(112).uint64(message.createdAt);
    }
    if (message.publishedAt !== undefined) {
      writer.uint32(120).uint64(message.publishedAt);
    }
    if (message.updatedAt !== undefined) {
      writer.uint32(128).uint64(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Product {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sku = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.version = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.price = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.currencyCode = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.tags.push(ProductTag.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.metadata = ProductMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.arEnabled = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.createdAt = reader.uint64().toString();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.publishedAt = reader.uint64().toString();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.updatedAt = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Product {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      sku: isSet(object.sku) ? globalThis.String(object.sku) : "",
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      price: isSet(object.price) ? globalThis.String(object.price) : "",
      currencyCode: isSet(object.currencyCode) ? globalThis.String(object.currencyCode) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => ProductTag.fromJSON(e)) : [],
      metadata: isSet(object.metadata) ? ProductMetadata.fromJSON(object.metadata) : undefined,
      arEnabled: isSet(object.arEnabled) ? globalThis.Boolean(object.arEnabled) : false,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "0",
      publishedAt: isSet(object.publishedAt) ? globalThis.String(object.publishedAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Product): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.sku !== "") {
      obj.sku = message.sku;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.price !== "") {
      obj.price = message.price;
    }
    if (message.currencyCode !== "") {
      obj.currencyCode = message.currencyCode;
    }
    if (message.tags?.length) {
      obj.tags = message.tags.map((e) => ProductTag.toJSON(e));
    }
    if (message.metadata !== undefined) {
      obj.metadata = ProductMetadata.toJSON(message.metadata);
    }
    if (message.arEnabled !== false) {
      obj.arEnabled = message.arEnabled;
    }
    if (message.createdAt !== "0") {
      obj.createdAt = message.createdAt;
    }
    if (message.publishedAt !== undefined) {
      obj.publishedAt = message.publishedAt;
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Product>, I>>(base?: I): Product {
    return Product.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Product>, I>>(object: I): Product {
    const message = createBaseProduct();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    message.sku = object.sku ?? "";
    message.version = object.version ?? 0;
    message.status = object.status ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.slug = object.slug ?? "";
    message.price = object.price ?? "";
    message.currencyCode = object.currencyCode ?? "";
    message.tags = object.tags?.map((e) => ProductTag.fromPartial(e)) || [];
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? ProductMetadata.fromPartial(object.metadata)
      : undefined;
    message.arEnabled = object.arEnabled ?? false;
    message.createdAt = object.createdAt ?? "0";
    message.publishedAt = object.publishedAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
