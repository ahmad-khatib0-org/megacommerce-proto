// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: shared/v1/error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { NestedStringMap, StringMap } from "./types.js";

export const protobufPackage = "shared.v1";

export interface AppError {
  id: string;
  /** displayed to the end user without debugging info */
  message: string;
  /** Internal debug info */
  detailedError: string;
  /** For correlation */
  requestId: string;
  /** grpc status code */
  statusCode: number;
  /** Code path or func name */
  where: string;
  /** If false, i18n may not apply */
  skipTranslation: boolean;
  errors?: StringMap | undefined;
  errorsNested?: NestedStringMap | undefined;
}

function createBaseAppError(): AppError {
  return {
    id: "",
    message: "",
    detailedError: "",
    requestId: "",
    statusCode: 0,
    where: "",
    skipTranslation: false,
    errors: undefined,
    errorsNested: undefined,
  };
}

export const AppError: MessageFns<AppError> = {
  encode(message: AppError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.detailedError !== "") {
      writer.uint32(26).string(message.detailedError);
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    if (message.statusCode !== 0) {
      writer.uint32(40).int32(message.statusCode);
    }
    if (message.where !== "") {
      writer.uint32(50).string(message.where);
    }
    if (message.skipTranslation !== false) {
      writer.uint32(56).bool(message.skipTranslation);
    }
    if (message.errors !== undefined) {
      StringMap.encode(message.errors, writer.uint32(66).fork()).join();
    }
    if (message.errorsNested !== undefined) {
      NestedStringMap.encode(message.errorsNested, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.detailedError = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.statusCode = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.where = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.skipTranslation = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.errors = StringMap.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.errorsNested = NestedStringMap.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppError {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      detailedError: isSet(object.detailedError) ? globalThis.String(object.detailedError) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      statusCode: isSet(object.statusCode) ? globalThis.Number(object.statusCode) : 0,
      where: isSet(object.where) ? globalThis.String(object.where) : "",
      skipTranslation: isSet(object.skipTranslation) ? globalThis.Boolean(object.skipTranslation) : false,
      errors: isSet(object.errors) ? StringMap.fromJSON(object.errors) : undefined,
      errorsNested: isSet(object.errorsNested) ? NestedStringMap.fromJSON(object.errorsNested) : undefined,
    };
  },

  toJSON(message: AppError): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.detailedError !== "") {
      obj.detailedError = message.detailedError;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.statusCode !== 0) {
      obj.statusCode = Math.round(message.statusCode);
    }
    if (message.where !== "") {
      obj.where = message.where;
    }
    if (message.skipTranslation !== false) {
      obj.skipTranslation = message.skipTranslation;
    }
    if (message.errors !== undefined) {
      obj.errors = StringMap.toJSON(message.errors);
    }
    if (message.errorsNested !== undefined) {
      obj.errorsNested = NestedStringMap.toJSON(message.errorsNested);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AppError>, I>>(base?: I): AppError {
    return AppError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AppError>, I>>(object: I): AppError {
    const message = createBaseAppError();
    message.id = object.id ?? "";
    message.message = object.message ?? "";
    message.detailedError = object.detailedError ?? "";
    message.requestId = object.requestId ?? "";
    message.statusCode = object.statusCode ?? 0;
    message.where = object.where ?? "";
    message.skipTranslation = object.skipTranslation ?? false;
    message.errors = (object.errors !== undefined && object.errors !== null)
      ? StringMap.fromPartial(object.errors)
      : undefined;
    message.errorsNested = (object.errorsNested !== undefined && object.errorsNested !== null)
      ? NestedStringMap.fromPartial(object.errorsNested)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
