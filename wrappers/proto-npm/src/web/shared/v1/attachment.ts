// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: shared/v1/attachment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Struct } from "./struct.js";

export const protobufPackage = "shared.v1";

export enum AttachmentErrorType {
  UNSPECIFIED = 0,
  INVALID_BASE64 = 1,
  INVALID_FILE_TYPE = 2,
  BIG_FILE = 3,
  DECODE_IMG = 4,
  BIG_DIMENSIONS_IMG = 5,
  UNSUPPORTED_FILE_TYPE = 6,
  UNRECOGNIZED = -1,
}

export function attachmentErrorTypeFromJSON(object: any): AttachmentErrorType {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return AttachmentErrorType.UNSPECIFIED;
    case 1:
    case "INVALID_BASE64":
      return AttachmentErrorType.INVALID_BASE64;
    case 2:
    case "INVALID_FILE_TYPE":
      return AttachmentErrorType.INVALID_FILE_TYPE;
    case 3:
    case "BIG_FILE":
      return AttachmentErrorType.BIG_FILE;
    case 4:
    case "DECODE_IMG":
      return AttachmentErrorType.DECODE_IMG;
    case 5:
    case "BIG_DIMENSIONS_IMG":
      return AttachmentErrorType.BIG_DIMENSIONS_IMG;
    case 6:
    case "UNSUPPORTED_FILE_TYPE":
      return AttachmentErrorType.UNSUPPORTED_FILE_TYPE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AttachmentErrorType.UNRECOGNIZED;
  }
}

export function attachmentErrorTypeToJSON(object: AttachmentErrorType): string {
  switch (object) {
    case AttachmentErrorType.UNSPECIFIED:
      return "UNSPECIFIED";
    case AttachmentErrorType.INVALID_BASE64:
      return "INVALID_BASE64";
    case AttachmentErrorType.INVALID_FILE_TYPE:
      return "INVALID_FILE_TYPE";
    case AttachmentErrorType.BIG_FILE:
      return "BIG_FILE";
    case AttachmentErrorType.DECODE_IMG:
      return "DECODE_IMG";
    case AttachmentErrorType.BIG_DIMENSIONS_IMG:
      return "BIG_DIMENSIONS_IMG";
    case AttachmentErrorType.UNSUPPORTED_FILE_TYPE:
      return "UNSUPPORTED_FILE_TYPE";
    case AttachmentErrorType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Attachment {
  id: string;
  filename: string;
  fileType: string;
  fileSize: string;
  fileExtension: string;
  base64: string;
  exifOrientation: number;
  crop?:
    | Crop
    | undefined;
  /** arbitrary JSON-like object */
  metadata?:
    | Struct
    | undefined;
  /** usually set by the backend */
  data: Uint8Array;
  /** usually set by the backend */
  mime: string;
  checksum?: string | undefined;
}

export interface Attachments {
  attachments: Attachment[];
}

export interface Crop {
  x: number;
  y: number;
  width: number;
  height: number;
  aspectRatio: number;
}

export interface AttachmentError {
  /** the attachment id */
  id: string;
  type: AttachmentErrorType;
  /** shown to the user */
  message: string;
  /** used for the backend */
  error: string;
}

function createBaseAttachment(): Attachment {
  return {
    id: "",
    filename: "",
    fileType: "",
    fileSize: "0",
    fileExtension: "",
    base64: "",
    exifOrientation: 0,
    crop: undefined,
    metadata: undefined,
    data: new Uint8Array(0),
    mime: "",
    checksum: undefined,
  };
}

export const Attachment: MessageFns<Attachment> = {
  encode(message: Attachment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.filename !== "") {
      writer.uint32(18).string(message.filename);
    }
    if (message.fileType !== "") {
      writer.uint32(26).string(message.fileType);
    }
    if (message.fileSize !== "0") {
      writer.uint32(32).int64(message.fileSize);
    }
    if (message.fileExtension !== "") {
      writer.uint32(42).string(message.fileExtension);
    }
    if (message.base64 !== "") {
      writer.uint32(50).string(message.base64);
    }
    if (message.exifOrientation !== 0) {
      writer.uint32(56).int32(message.exifOrientation);
    }
    if (message.crop !== undefined) {
      Crop.encode(message.crop, writer.uint32(66).fork()).join();
    }
    if (message.metadata !== undefined) {
      Struct.encode(message.metadata, writer.uint32(74).fork()).join();
    }
    if (message.data.length !== 0) {
      writer.uint32(82).bytes(message.data);
    }
    if (message.mime !== "") {
      writer.uint32(90).string(message.mime);
    }
    if (message.checksum !== undefined) {
      writer.uint32(98).string(message.checksum);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Attachment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttachment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.filename = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fileType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.fileSize = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.fileExtension = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.base64 = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.exifOrientation = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.crop = Crop.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.metadata = Struct.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.mime = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.checksum = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Attachment {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
      fileType: isSet(object.fileType) ? globalThis.String(object.fileType) : "",
      fileSize: isSet(object.fileSize) ? globalThis.String(object.fileSize) : "0",
      fileExtension: isSet(object.fileExtension) ? globalThis.String(object.fileExtension) : "",
      base64: isSet(object.base64) ? globalThis.String(object.base64) : "",
      exifOrientation: isSet(object.exifOrientation) ? globalThis.Number(object.exifOrientation) : 0,
      crop: isSet(object.crop) ? Crop.fromJSON(object.crop) : undefined,
      metadata: isSet(object.metadata) ? Struct.fromJSON(object.metadata) : undefined,
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
      mime: isSet(object.mime) ? globalThis.String(object.mime) : "",
      checksum: isSet(object.checksum) ? globalThis.String(object.checksum) : undefined,
    };
  },

  toJSON(message: Attachment): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.filename !== "") {
      obj.filename = message.filename;
    }
    if (message.fileType !== "") {
      obj.fileType = message.fileType;
    }
    if (message.fileSize !== "0") {
      obj.fileSize = message.fileSize;
    }
    if (message.fileExtension !== "") {
      obj.fileExtension = message.fileExtension;
    }
    if (message.base64 !== "") {
      obj.base64 = message.base64;
    }
    if (message.exifOrientation !== 0) {
      obj.exifOrientation = Math.round(message.exifOrientation);
    }
    if (message.crop !== undefined) {
      obj.crop = Crop.toJSON(message.crop);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Struct.toJSON(message.metadata);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.mime !== "") {
      obj.mime = message.mime;
    }
    if (message.checksum !== undefined) {
      obj.checksum = message.checksum;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Attachment>, I>>(base?: I): Attachment {
    return Attachment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Attachment>, I>>(object: I): Attachment {
    const message = createBaseAttachment();
    message.id = object.id ?? "";
    message.filename = object.filename ?? "";
    message.fileType = object.fileType ?? "";
    message.fileSize = object.fileSize ?? "0";
    message.fileExtension = object.fileExtension ?? "";
    message.base64 = object.base64 ?? "";
    message.exifOrientation = object.exifOrientation ?? 0;
    message.crop = (object.crop !== undefined && object.crop !== null) ? Crop.fromPartial(object.crop) : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Struct.fromPartial(object.metadata)
      : undefined;
    message.data = object.data ?? new Uint8Array(0);
    message.mime = object.mime ?? "";
    message.checksum = object.checksum ?? undefined;
    return message;
  },
};

function createBaseAttachments(): Attachments {
  return { attachments: [] };
}

export const Attachments: MessageFns<Attachments> = {
  encode(message: Attachments, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.attachments) {
      Attachment.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Attachments {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttachments();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.attachments.push(Attachment.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Attachments {
    return {
      attachments: globalThis.Array.isArray(object?.attachments)
        ? object.attachments.map((e: any) => Attachment.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Attachments): unknown {
    const obj: any = {};
    if (message.attachments?.length) {
      obj.attachments = message.attachments.map((e) => Attachment.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Attachments>, I>>(base?: I): Attachments {
    return Attachments.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Attachments>, I>>(object: I): Attachments {
    const message = createBaseAttachments();
    message.attachments = object.attachments?.map((e) => Attachment.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCrop(): Crop {
  return { x: 0, y: 0, width: 0, height: 0, aspectRatio: 0 };
}

export const Crop: MessageFns<Crop> = {
  encode(message: Crop, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(13).float(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(21).float(message.y);
    }
    if (message.width !== 0) {
      writer.uint32(29).float(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(37).float(message.height);
    }
    if (message.aspectRatio !== 0) {
      writer.uint32(45).float(message.aspectRatio);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Crop {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCrop();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.x = reader.float();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.y = reader.float();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.width = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.height = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.aspectRatio = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Crop {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      aspectRatio: isSet(object.aspectRatio) ? globalThis.Number(object.aspectRatio) : 0,
    };
  },

  toJSON(message: Crop): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = message.x;
    }
    if (message.y !== 0) {
      obj.y = message.y;
    }
    if (message.width !== 0) {
      obj.width = message.width;
    }
    if (message.height !== 0) {
      obj.height = message.height;
    }
    if (message.aspectRatio !== 0) {
      obj.aspectRatio = message.aspectRatio;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Crop>, I>>(base?: I): Crop {
    return Crop.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Crop>, I>>(object: I): Crop {
    const message = createBaseCrop();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.aspectRatio = object.aspectRatio ?? 0;
    return message;
  },
};

function createBaseAttachmentError(): AttachmentError {
  return { id: "", type: 0, message: "", error: "" };
}

export const AttachmentError: MessageFns<AttachmentError> = {
  encode(message: AttachmentError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    if (message.error !== "") {
      writer.uint32(34).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttachmentError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttachmentError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttachmentError {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      type: isSet(object.type) ? attachmentErrorTypeFromJSON(object.type) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: AttachmentError): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.type !== 0) {
      obj.type = attachmentErrorTypeToJSON(message.type);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AttachmentError>, I>>(base?: I): AttachmentError {
    return AttachmentError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AttachmentError>, I>>(object: I): AttachmentError {
    const message = createBaseAttachmentError();
    message.id = object.id ?? "";
    message.type = object.type ?? 0;
    message.message = object.message ?? "";
    message.error = object.error ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  const bin = globalThis.atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  arr.forEach((byte) => {
    bin.push(globalThis.String.fromCharCode(byte));
  });
  return globalThis.btoa(bin.join(""));
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
