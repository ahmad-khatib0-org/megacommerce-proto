// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: common/v1/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AppError } from "../../shared/v1/error.js";

export const protobufPackage = "common.v1";

export interface ConfigMain {
  env?: string | undefined;
  siteName?: string | undefined;
  siteUrl?: string | undefined;
  enableLinkPreviews?: boolean | undefined;
  restrictLinkPreviews?: string | undefined;
  enableClientPerformanceDebugging?: boolean | undefined;
  enableGifPicker?: boolean | undefined;
  enableCustomEmoji?: boolean | undefined;
  enableEmojiPicker?: boolean | undefined;
  timeBetweenUserTypingUpdatesMilliseconds?: string | undefined;
  enableFileSearch?: boolean | undefined;
  enableUserTypingMessages?: boolean | undefined;
  enableUserStatuses?: boolean | undefined;
  enableEmailInvitations?: boolean | undefined;
  enableSvgs?: boolean | undefined;
  allowPersistentNotifications?: boolean | undefined;
  persistentNotificationIntervalMinutes?: number | undefined;
  persistentNotificationMaxCount?: number | undefined;
  persistentNotificationMaxRecipients?: number | undefined;
  featureFlagSyncIntervalSeconds?: number | undefined;
  allowSyncedDrafts?: boolean | undefined;
}

export interface ConfigServices {
  commonServiceGrpcUrl?: string | undefined;
  userServiceGrpcUrl?: string | undefined;
  productsServiceGrpcUrl?: string | undefined;
  jaegerCollectorUrl?: string | undefined;
  commonServicePrometheusUrl?: string | undefined;
  userServicePrometheusUrl?: string | undefined;
  productsServicePrometheusUrl?: string | undefined;
  usersServiceMaxReceiveMessageSizeBytes?: string | undefined;
  authServiceGrpcUrl?: string | undefined;
  authServicePrometheusUrl?: string | undefined;
}

export interface ConfigOAuth {
  oauthProviderUrl?: string | undefined;
  oauthClientId?: string | undefined;
  oauthClientSecret?: string | undefined;
  oauthDbDsn?: string | undefined;
  oauthRedirectUrl?: string | undefined;
  oauthLoginUrl?: string | undefined;
  oauthConsentUrl?: string | undefined;
  oauthResponseType?: string | undefined;
  oauthScope: string[];
  oauthAdminUrl?: string | undefined;
}

export interface ConfigSecurity {
  restrictedUsernames: { [key: string]: string };
  maximumLoginAttempts?: number | undefined;
  enableInsecureOutgoingConnections?: boolean | undefined;
  enableMultifactorAuthentication?: boolean | undefined;
  enforceMultifactorAuthentication?: boolean | undefined;
  enableOauthServiceProvider?: boolean | undefined;
  enableOutgoingOauthConnections?: boolean | undefined;
  terminateSessionsOnPasswordChange?: boolean | undefined;
  sessionLengthWebInHours?: number | undefined;
  sessionLengthMobileInHours?: number | undefined;
  sessionLengthSsoInHours?: number | undefined;
  allowCorsFrom?: string | undefined;
  corsExposedHeaders?: string | undefined;
  corsAllowCredentials?: boolean | undefined;
  corsDebug?: boolean | undefined;
  allowCookiesForSubdomains?: boolean | undefined;
  sessionCacheInMinutes?: number | undefined;
  emailConfirmationUrl?: string | undefined;
  tokenConfirmationExpiryInHours?: number | undefined;
  tokenPasswordResetExpiryInHours?: number | undefined;
  passwordResetUrl?: string | undefined;
}

export interface ConfigSecurity_RestrictedUsernamesEntry {
  key: string;
  value: string;
}

export interface CacheConfig {
  cacheType?: string | undefined;
  redisAddress?: string | undefined;
  redisPassword?: string | undefined;
  redisDb?: number | undefined;
  redisCachePrefix?: string | undefined;
  disableClientCache?: boolean | undefined;
}

export interface ConfigMetrics {
  enable?: boolean | undefined;
  blockProfileRate?: number | undefined;
  listenAddress?: string | undefined;
  enableClientMetrics?: boolean | undefined;
  enableNotificationMetrics?: boolean | undefined;
  clientSideUserIds: string[];
}

export interface ConfigSSO {
  enable?: boolean | undefined;
  secret?: string | undefined;
  id?: string | undefined;
  scope?: string | undefined;
  authEndpoint?: string | undefined;
  tokenEndpoint?: string | undefined;
  userApiEndpoint?: string | undefined;
  discoveryEndpoint?: string | undefined;
  buttonText?: string | undefined;
  buttonColor?: string | undefined;
}

export interface ConfigSql {
  driverName?: string | undefined;
  dataSource?: string | undefined;
  maxIdleConns?: number | undefined;
  connMaxLifetimeMilliseconds?: number | undefined;
  connMaxIdleTimeMilliseconds?: number | undefined;
  maxOpenConns?: number | undefined;
  trace?: boolean | undefined;
  atRestEncryptKey?: string | undefined;
  queryTimeout?: number | undefined;
  disableDatabaseSearch?: boolean | undefined;
}

export interface ConfigPassword {
  minimumLength?: number | undefined;
  maximumLength?: number | undefined;
  lowercase?: boolean | undefined;
  number?: boolean | undefined;
  uppercase?: boolean | undefined;
  symbol?: boolean | undefined;
  enableForgotLink?: boolean | undefined;
}

export interface ConfigFile {
  enableFileAttachments?: boolean | undefined;
  enableMobileUpload?: boolean | undefined;
  enableMobileDownload?: boolean | undefined;
  maxImageResolution?: string | undefined;
  maxImageDecoderConcurrency?: string | undefined;
  driverName?: string | undefined;
  amazonS3AccessKeyId?: string | undefined;
  amazonS3SecretAccessKey?: string | undefined;
  amazonS3Bucket?: string | undefined;
  amazonS3PathPrefix?: string | undefined;
  amazonS3Region?: string | undefined;
  amazonS3Endpoint?: string | undefined;
  amazonS3Ssl?: boolean | undefined;
  amazonS3SignV2?: boolean | undefined;
  amazonS3Sse?: boolean | undefined;
  amazonS3Trace?: boolean | undefined;
  amazonS3RequestTimeoutMilliseconds?: string | undefined;
  amazonS3UploadPartSizeBytes?: string | undefined;
  amazonS3StorageClass?: string | undefined;
}

export interface ConfigEmail {
  sendEmailNotifications?: boolean | undefined;
  requireEmailVerification?: boolean | undefined;
  feedbackEmail?: string | undefined;
  replyToAddress?: string | undefined;
  enableSmtpAuth?: boolean | undefined;
  smtpUsername?: string | undefined;
  smtpPassword?: string | undefined;
  smtpServer?: string | undefined;
  smtpPort?: string | undefined;
  smtpServerTimeout?: number | undefined;
  connectionSecurity?: string | undefined;
  sendPushNotifications?: boolean | undefined;
  pushNotificationServer?: string | undefined;
  pushNotificationContents?: string | undefined;
  pushNotificationBuffer?: number | undefined;
  enableEmailBatching?: boolean | undefined;
  emailBatchingBufferSize?: number | undefined;
  emailBatchingInterval?: number | undefined;
  skipServerCertificateVerification?: boolean | undefined;
  emailNotificationContentsType?: string | undefined;
  loginButtonColor?: string | undefined;
  loginButtonBorderColor?: string | undefined;
  loginButtonTextColor?: string | undefined;
  rateLimitingMemorySize?: number | undefined;
  rateLimitingPerHour?: number | undefined;
  rateLimitingMaxBurst?: number | undefined;
}

export interface ConfigRateLimit {
  enable?: boolean | undefined;
  perSec?: number | undefined;
  maxBurst?: number | undefined;
  memoryStoreSize?: number | undefined;
  varyByRemoteAddr?: boolean | undefined;
  varyByUser?: boolean | undefined;
  varyByHeader: string;
}

export interface ConfigPrivacy {
  showEmailAddress?: boolean | undefined;
  showFullName?: boolean | undefined;
}

export interface ConfigSupport {
  termsOfServiceLink?: string | undefined;
  privacyPolicyLink?: string | undefined;
  aboutLink?: string | undefined;
  helpLink?: string | undefined;
  reportAProblemLink?: string | undefined;
  forgotPasswordLink?: string | undefined;
  supportEmail?: string | undefined;
}

export interface ConfigLocalization {
  defaultServerLocale?: string | undefined;
  defaultClientLocale?: string | undefined;
  availableLocales: string[];
}

export interface ConfigLdap {
  /** Basic */
  enable?: boolean | undefined;
  enableSync?: boolean | undefined;
  ldapServer?: string | undefined;
  ldapPort?: number | undefined;
  connectionSecurity?: string | undefined;
  baseDn?: string | undefined;
  bindUsername?: string | undefined;
  bindPassword?: string | undefined;
  maximumLoginAttempts?:
    | number
    | undefined;
  /** Filtering */
  userFilter?: string | undefined;
  groupFilter?: string | undefined;
  enableAdminFilter?: boolean | undefined;
  adminFilter?:
    | string
    | undefined;
  /** Group Mapping */
  groupDisplayNameAttribute?: string | undefined;
  groupIdAttribute?:
    | string
    | undefined;
  /** User Mapping */
  firstNameAttribute?: string | undefined;
  lastNameAttribute?: string | undefined;
  emailAttribute?: string | undefined;
  usernameAttribute?: string | undefined;
  nicknameAttribute?: string | undefined;
  idAttribute?: string | undefined;
  positionAttribute?: string | undefined;
  loginIdAttribute?: string | undefined;
  pictureAttribute?:
    | string
    | undefined;
  /** Synchronization */
  syncIntervalMinutes?:
    | number
    | undefined;
  /** Advanced */
  queryTimeout?: number | undefined;
  maxPageSize?:
    | number
    | undefined;
  /** Customization */
  loginFieldName?: string | undefined;
  loginButtonColor?: string | undefined;
  loginButtonBorderColor?: string | undefined;
  loginButtonTextColor?: string | undefined;
}

export interface ConfigSaml {
  /** Basic */
  enable?: boolean | undefined;
  enableSyncWithLdap?: boolean | undefined;
  enableSyncWithLdapIncludeAuth?: boolean | undefined;
  ignoreGuestsLdapSync?: boolean | undefined;
  verify?: boolean | undefined;
  encrypt?: boolean | undefined;
  signRequest?: boolean | undefined;
  idpUrl?: string | undefined;
  idpDescriptorUrl?: string | undefined;
  idpMetadataUrl?: string | undefined;
  serviceProviderIdentifier?: string | undefined;
  assertionConsumerServiceUrl?: string | undefined;
  signatureAlgorithm?: string | undefined;
  canonicalAlgorithm?: string | undefined;
  scopingIdpProviderId?: string | undefined;
  scopingIdpName?: string | undefined;
  idpCertificateFile?: string | undefined;
  publicCertificateFile?: string | undefined;
  privateKeyFile?:
    | string
    | undefined;
  /** User Mapping */
  idAttribute?: string | undefined;
  enableAdminAttribute?: boolean | undefined;
  adminAttribute?: string | undefined;
  firstNameAttribute?: string | undefined;
  lastNameAttribute?: string | undefined;
  emailAttribute?: string | undefined;
  usernameAttribute?: string | undefined;
  nicknameAttribute?: string | undefined;
  localeAttribute?: string | undefined;
  positionAttribute?: string | undefined;
  loginButtonText?: string | undefined;
  loginButtonColor?: string | undefined;
  loginButtonBorderColor?: string | undefined;
  loginButtonTextColor?: string | undefined;
}

export interface ConfigNativeApp {
  appCustomUrlSchemes: string[];
  appDownloadLink?: string | undefined;
  androidAppDownloadLink?: string | undefined;
  iosAppDownloadLink?: string | undefined;
  mobileExternalBrowser?: boolean | undefined;
  mobileEnableBiometrics?: boolean | undefined;
  mobilePreventScreenCapture?: boolean | undefined;
  mobileJailbreakProtection?: boolean | undefined;
}

export interface ConfigMeilisearch {
  serverUrl?:
    | string
    | undefined;
  /** Meilisearch-specific authentication */
  masterKey?: string | undefined;
  enableIndexing?: boolean | undefined;
  enableSearching?: boolean | undefined;
  enableAutocomplete?: boolean | undefined;
  batchSize?: number | undefined;
  requestTimeoutSeconds?:
    | number
    | undefined;
  /** Meilisearch-specific options */
  indexPrefix?:
    | string
    | undefined;
  /** performance tuning */
  searchCutoffMs?: number | undefined;
  enableTypoTolerance?: boolean | undefined;
}

export interface ConfigBleve {
  indexDir?: string | undefined;
  enableIndexing?: boolean | undefined;
  enableSearching?: boolean | undefined;
  enableAutocomplete?: boolean | undefined;
  bulkIndexingTimeWindowSeconds?: number | undefined;
  batchSize?: number | undefined;
}

export interface ConfigDataRetention {
  enableMessageDeletion?: boolean | undefined;
  enableFileDeletion?: boolean | undefined;
  enableBoardsDeletion?: boolean | undefined;
  messageRetentionHours?: number | undefined;
  fileRetentionHours?: number | undefined;
  boardsRetentionDays?: number | undefined;
  deletionJobStartTime?: string | undefined;
  batchSize?: number | undefined;
  timeBetweenBatchesMilliseconds?: number | undefined;
  retentionIdsBatchSize?: number | undefined;
}

export interface ConfigImageProxy {
  enable?: boolean | undefined;
  imageProxyType?: string | undefined;
  remoteImageProxyUrl?: string | undefined;
  remoteImageProxyOptions?: string | undefined;
}

export interface Config {
  main?: ConfigMain | undefined;
  services?: ConfigServices | undefined;
  security?: ConfigSecurity | undefined;
  cache?: CacheConfig | undefined;
  metrics?: ConfigMetrics | undefined;
  sso?: ConfigSSO | undefined;
  sql?: ConfigSql | undefined;
  password?: ConfigPassword | undefined;
  file?: ConfigFile | undefined;
  email?: ConfigEmail | undefined;
  rateLimit?: ConfigRateLimit | undefined;
  privacy?: ConfigPrivacy | undefined;
  support?: ConfigSupport | undefined;
  localization?: ConfigLocalization | undefined;
  ldap?: ConfigLdap | undefined;
  saml?: ConfigSaml | undefined;
  nativeApp?: ConfigNativeApp | undefined;
  meilisearch?: ConfigMeilisearch | undefined;
  bleve?: ConfigBleve | undefined;
  dataRetention?: ConfigDataRetention | undefined;
  imageProxy?: ConfigImageProxy | undefined;
  oauth?: ConfigOAuth | undefined;
}

export interface ConfigGetRequest {
}

export interface ConfigGetResponse {
  data?: Config | undefined;
  error?: AppError | undefined;
}

export interface ConfigUpdateRequest {
  config?: Config | undefined;
}

export interface ConfigUpdateResponse {
  data?: Config | undefined;
  error?: AppError | undefined;
}

export interface ConfigListenerResponse {
  data?: Config | undefined;
  error?: AppError | undefined;
}

export interface ConfigListenerRequest {
  clientId: string;
}

function createBaseConfigMain(): ConfigMain {
  return {
    env: undefined,
    siteName: undefined,
    siteUrl: undefined,
    enableLinkPreviews: undefined,
    restrictLinkPreviews: undefined,
    enableClientPerformanceDebugging: undefined,
    enableGifPicker: undefined,
    enableCustomEmoji: undefined,
    enableEmojiPicker: undefined,
    timeBetweenUserTypingUpdatesMilliseconds: undefined,
    enableFileSearch: undefined,
    enableUserTypingMessages: undefined,
    enableUserStatuses: undefined,
    enableEmailInvitations: undefined,
    enableSvgs: undefined,
    allowPersistentNotifications: undefined,
    persistentNotificationIntervalMinutes: undefined,
    persistentNotificationMaxCount: undefined,
    persistentNotificationMaxRecipients: undefined,
    featureFlagSyncIntervalSeconds: undefined,
    allowSyncedDrafts: undefined,
  };
}

export const ConfigMain: MessageFns<ConfigMain> = {
  encode(message: ConfigMain, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.env !== undefined) {
      writer.uint32(10).string(message.env);
    }
    if (message.siteName !== undefined) {
      writer.uint32(18).string(message.siteName);
    }
    if (message.siteUrl !== undefined) {
      writer.uint32(26).string(message.siteUrl);
    }
    if (message.enableLinkPreviews !== undefined) {
      writer.uint32(40).bool(message.enableLinkPreviews);
    }
    if (message.restrictLinkPreviews !== undefined) {
      writer.uint32(50).string(message.restrictLinkPreviews);
    }
    if (message.enableClientPerformanceDebugging !== undefined) {
      writer.uint32(56).bool(message.enableClientPerformanceDebugging);
    }
    if (message.enableGifPicker !== undefined) {
      writer.uint32(64).bool(message.enableGifPicker);
    }
    if (message.enableCustomEmoji !== undefined) {
      writer.uint32(72).bool(message.enableCustomEmoji);
    }
    if (message.enableEmojiPicker !== undefined) {
      writer.uint32(80).bool(message.enableEmojiPicker);
    }
    if (message.timeBetweenUserTypingUpdatesMilliseconds !== undefined) {
      writer.uint32(88).int64(message.timeBetweenUserTypingUpdatesMilliseconds);
    }
    if (message.enableFileSearch !== undefined) {
      writer.uint32(96).bool(message.enableFileSearch);
    }
    if (message.enableUserTypingMessages !== undefined) {
      writer.uint32(104).bool(message.enableUserTypingMessages);
    }
    if (message.enableUserStatuses !== undefined) {
      writer.uint32(112).bool(message.enableUserStatuses);
    }
    if (message.enableEmailInvitations !== undefined) {
      writer.uint32(120).bool(message.enableEmailInvitations);
    }
    if (message.enableSvgs !== undefined) {
      writer.uint32(128).bool(message.enableSvgs);
    }
    if (message.allowPersistentNotifications !== undefined) {
      writer.uint32(136).bool(message.allowPersistentNotifications);
    }
    if (message.persistentNotificationIntervalMinutes !== undefined) {
      writer.uint32(144).int32(message.persistentNotificationIntervalMinutes);
    }
    if (message.persistentNotificationMaxCount !== undefined) {
      writer.uint32(152).int32(message.persistentNotificationMaxCount);
    }
    if (message.persistentNotificationMaxRecipients !== undefined) {
      writer.uint32(160).int32(message.persistentNotificationMaxRecipients);
    }
    if (message.featureFlagSyncIntervalSeconds !== undefined) {
      writer.uint32(168).int32(message.featureFlagSyncIntervalSeconds);
    }
    if (message.allowSyncedDrafts !== undefined) {
      writer.uint32(176).bool(message.allowSyncedDrafts);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigMain {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigMain();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.env = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.siteName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.siteUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.enableLinkPreviews = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.restrictLinkPreviews = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.enableClientPerformanceDebugging = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.enableGifPicker = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.enableCustomEmoji = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.enableEmojiPicker = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.timeBetweenUserTypingUpdatesMilliseconds = reader.int64().toString();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.enableFileSearch = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.enableUserTypingMessages = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.enableUserStatuses = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.enableEmailInvitations = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.enableSvgs = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.allowPersistentNotifications = reader.bool();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.persistentNotificationIntervalMinutes = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.persistentNotificationMaxCount = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.persistentNotificationMaxRecipients = reader.int32();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.featureFlagSyncIntervalSeconds = reader.int32();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.allowSyncedDrafts = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigMain {
    return {
      env: isSet(object.env) ? globalThis.String(object.env) : undefined,
      siteName: isSet(object.siteName) ? globalThis.String(object.siteName) : undefined,
      siteUrl: isSet(object.siteUrl) ? globalThis.String(object.siteUrl) : undefined,
      enableLinkPreviews: isSet(object.enableLinkPreviews) ? globalThis.Boolean(object.enableLinkPreviews) : undefined,
      restrictLinkPreviews: isSet(object.restrictLinkPreviews)
        ? globalThis.String(object.restrictLinkPreviews)
        : undefined,
      enableClientPerformanceDebugging: isSet(object.enableClientPerformanceDebugging)
        ? globalThis.Boolean(object.enableClientPerformanceDebugging)
        : undefined,
      enableGifPicker: isSet(object.enableGifPicker) ? globalThis.Boolean(object.enableGifPicker) : undefined,
      enableCustomEmoji: isSet(object.enableCustomEmoji) ? globalThis.Boolean(object.enableCustomEmoji) : undefined,
      enableEmojiPicker: isSet(object.enableEmojiPicker) ? globalThis.Boolean(object.enableEmojiPicker) : undefined,
      timeBetweenUserTypingUpdatesMilliseconds: isSet(object.timeBetweenUserTypingUpdatesMilliseconds)
        ? globalThis.String(object.timeBetweenUserTypingUpdatesMilliseconds)
        : undefined,
      enableFileSearch: isSet(object.enableFileSearch) ? globalThis.Boolean(object.enableFileSearch) : undefined,
      enableUserTypingMessages: isSet(object.enableUserTypingMessages)
        ? globalThis.Boolean(object.enableUserTypingMessages)
        : undefined,
      enableUserStatuses: isSet(object.enableUserStatuses) ? globalThis.Boolean(object.enableUserStatuses) : undefined,
      enableEmailInvitations: isSet(object.enableEmailInvitations)
        ? globalThis.Boolean(object.enableEmailInvitations)
        : undefined,
      enableSvgs: isSet(object.enableSvgs) ? globalThis.Boolean(object.enableSvgs) : undefined,
      allowPersistentNotifications: isSet(object.allowPersistentNotifications)
        ? globalThis.Boolean(object.allowPersistentNotifications)
        : undefined,
      persistentNotificationIntervalMinutes: isSet(object.persistentNotificationIntervalMinutes)
        ? globalThis.Number(object.persistentNotificationIntervalMinutes)
        : undefined,
      persistentNotificationMaxCount: isSet(object.persistentNotificationMaxCount)
        ? globalThis.Number(object.persistentNotificationMaxCount)
        : undefined,
      persistentNotificationMaxRecipients: isSet(object.persistentNotificationMaxRecipients)
        ? globalThis.Number(object.persistentNotificationMaxRecipients)
        : undefined,
      featureFlagSyncIntervalSeconds: isSet(object.featureFlagSyncIntervalSeconds)
        ? globalThis.Number(object.featureFlagSyncIntervalSeconds)
        : undefined,
      allowSyncedDrafts: isSet(object.allowSyncedDrafts) ? globalThis.Boolean(object.allowSyncedDrafts) : undefined,
    };
  },

  toJSON(message: ConfigMain): unknown {
    const obj: any = {};
    if (message.env !== undefined) {
      obj.env = message.env;
    }
    if (message.siteName !== undefined) {
      obj.siteName = message.siteName;
    }
    if (message.siteUrl !== undefined) {
      obj.siteUrl = message.siteUrl;
    }
    if (message.enableLinkPreviews !== undefined) {
      obj.enableLinkPreviews = message.enableLinkPreviews;
    }
    if (message.restrictLinkPreviews !== undefined) {
      obj.restrictLinkPreviews = message.restrictLinkPreviews;
    }
    if (message.enableClientPerformanceDebugging !== undefined) {
      obj.enableClientPerformanceDebugging = message.enableClientPerformanceDebugging;
    }
    if (message.enableGifPicker !== undefined) {
      obj.enableGifPicker = message.enableGifPicker;
    }
    if (message.enableCustomEmoji !== undefined) {
      obj.enableCustomEmoji = message.enableCustomEmoji;
    }
    if (message.enableEmojiPicker !== undefined) {
      obj.enableEmojiPicker = message.enableEmojiPicker;
    }
    if (message.timeBetweenUserTypingUpdatesMilliseconds !== undefined) {
      obj.timeBetweenUserTypingUpdatesMilliseconds = message.timeBetweenUserTypingUpdatesMilliseconds;
    }
    if (message.enableFileSearch !== undefined) {
      obj.enableFileSearch = message.enableFileSearch;
    }
    if (message.enableUserTypingMessages !== undefined) {
      obj.enableUserTypingMessages = message.enableUserTypingMessages;
    }
    if (message.enableUserStatuses !== undefined) {
      obj.enableUserStatuses = message.enableUserStatuses;
    }
    if (message.enableEmailInvitations !== undefined) {
      obj.enableEmailInvitations = message.enableEmailInvitations;
    }
    if (message.enableSvgs !== undefined) {
      obj.enableSvgs = message.enableSvgs;
    }
    if (message.allowPersistentNotifications !== undefined) {
      obj.allowPersistentNotifications = message.allowPersistentNotifications;
    }
    if (message.persistentNotificationIntervalMinutes !== undefined) {
      obj.persistentNotificationIntervalMinutes = Math.round(message.persistentNotificationIntervalMinutes);
    }
    if (message.persistentNotificationMaxCount !== undefined) {
      obj.persistentNotificationMaxCount = Math.round(message.persistentNotificationMaxCount);
    }
    if (message.persistentNotificationMaxRecipients !== undefined) {
      obj.persistentNotificationMaxRecipients = Math.round(message.persistentNotificationMaxRecipients);
    }
    if (message.featureFlagSyncIntervalSeconds !== undefined) {
      obj.featureFlagSyncIntervalSeconds = Math.round(message.featureFlagSyncIntervalSeconds);
    }
    if (message.allowSyncedDrafts !== undefined) {
      obj.allowSyncedDrafts = message.allowSyncedDrafts;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigMain>, I>>(base?: I): ConfigMain {
    return ConfigMain.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigMain>, I>>(object: I): ConfigMain {
    const message = createBaseConfigMain();
    message.env = object.env ?? undefined;
    message.siteName = object.siteName ?? undefined;
    message.siteUrl = object.siteUrl ?? undefined;
    message.enableLinkPreviews = object.enableLinkPreviews ?? undefined;
    message.restrictLinkPreviews = object.restrictLinkPreviews ?? undefined;
    message.enableClientPerformanceDebugging = object.enableClientPerformanceDebugging ?? undefined;
    message.enableGifPicker = object.enableGifPicker ?? undefined;
    message.enableCustomEmoji = object.enableCustomEmoji ?? undefined;
    message.enableEmojiPicker = object.enableEmojiPicker ?? undefined;
    message.timeBetweenUserTypingUpdatesMilliseconds = object.timeBetweenUserTypingUpdatesMilliseconds ?? undefined;
    message.enableFileSearch = object.enableFileSearch ?? undefined;
    message.enableUserTypingMessages = object.enableUserTypingMessages ?? undefined;
    message.enableUserStatuses = object.enableUserStatuses ?? undefined;
    message.enableEmailInvitations = object.enableEmailInvitations ?? undefined;
    message.enableSvgs = object.enableSvgs ?? undefined;
    message.allowPersistentNotifications = object.allowPersistentNotifications ?? undefined;
    message.persistentNotificationIntervalMinutes = object.persistentNotificationIntervalMinutes ?? undefined;
    message.persistentNotificationMaxCount = object.persistentNotificationMaxCount ?? undefined;
    message.persistentNotificationMaxRecipients = object.persistentNotificationMaxRecipients ?? undefined;
    message.featureFlagSyncIntervalSeconds = object.featureFlagSyncIntervalSeconds ?? undefined;
    message.allowSyncedDrafts = object.allowSyncedDrafts ?? undefined;
    return message;
  },
};

function createBaseConfigServices(): ConfigServices {
  return {
    commonServiceGrpcUrl: undefined,
    userServiceGrpcUrl: undefined,
    productsServiceGrpcUrl: undefined,
    jaegerCollectorUrl: undefined,
    commonServicePrometheusUrl: undefined,
    userServicePrometheusUrl: undefined,
    productsServicePrometheusUrl: undefined,
    usersServiceMaxReceiveMessageSizeBytes: undefined,
    authServiceGrpcUrl: undefined,
    authServicePrometheusUrl: undefined,
  };
}

export const ConfigServices: MessageFns<ConfigServices> = {
  encode(message: ConfigServices, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commonServiceGrpcUrl !== undefined) {
      writer.uint32(10).string(message.commonServiceGrpcUrl);
    }
    if (message.userServiceGrpcUrl !== undefined) {
      writer.uint32(18).string(message.userServiceGrpcUrl);
    }
    if (message.productsServiceGrpcUrl !== undefined) {
      writer.uint32(26).string(message.productsServiceGrpcUrl);
    }
    if (message.jaegerCollectorUrl !== undefined) {
      writer.uint32(34).string(message.jaegerCollectorUrl);
    }
    if (message.commonServicePrometheusUrl !== undefined) {
      writer.uint32(42).string(message.commonServicePrometheusUrl);
    }
    if (message.userServicePrometheusUrl !== undefined) {
      writer.uint32(50).string(message.userServicePrometheusUrl);
    }
    if (message.productsServicePrometheusUrl !== undefined) {
      writer.uint32(58).string(message.productsServicePrometheusUrl);
    }
    if (message.usersServiceMaxReceiveMessageSizeBytes !== undefined) {
      writer.uint32(64).int64(message.usersServiceMaxReceiveMessageSizeBytes);
    }
    if (message.authServiceGrpcUrl !== undefined) {
      writer.uint32(74).string(message.authServiceGrpcUrl);
    }
    if (message.authServicePrometheusUrl !== undefined) {
      writer.uint32(82).string(message.authServicePrometheusUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigServices {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigServices();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.commonServiceGrpcUrl = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userServiceGrpcUrl = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.productsServiceGrpcUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.jaegerCollectorUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.commonServicePrometheusUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.userServicePrometheusUrl = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.productsServicePrometheusUrl = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.usersServiceMaxReceiveMessageSizeBytes = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.authServiceGrpcUrl = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.authServicePrometheusUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigServices {
    return {
      commonServiceGrpcUrl: isSet(object.commonServiceGrpcUrl)
        ? globalThis.String(object.commonServiceGrpcUrl)
        : undefined,
      userServiceGrpcUrl: isSet(object.userServiceGrpcUrl) ? globalThis.String(object.userServiceGrpcUrl) : undefined,
      productsServiceGrpcUrl: isSet(object.productsServiceGrpcUrl)
        ? globalThis.String(object.productsServiceGrpcUrl)
        : undefined,
      jaegerCollectorUrl: isSet(object.jaegerCollectorUrl) ? globalThis.String(object.jaegerCollectorUrl) : undefined,
      commonServicePrometheusUrl: isSet(object.commonServicePrometheusUrl)
        ? globalThis.String(object.commonServicePrometheusUrl)
        : undefined,
      userServicePrometheusUrl: isSet(object.userServicePrometheusUrl)
        ? globalThis.String(object.userServicePrometheusUrl)
        : undefined,
      productsServicePrometheusUrl: isSet(object.productsServicePrometheusUrl)
        ? globalThis.String(object.productsServicePrometheusUrl)
        : undefined,
      usersServiceMaxReceiveMessageSizeBytes: isSet(object.usersServiceMaxReceiveMessageSizeBytes)
        ? globalThis.String(object.usersServiceMaxReceiveMessageSizeBytes)
        : undefined,
      authServiceGrpcUrl: isSet(object.authServiceGrpcUrl) ? globalThis.String(object.authServiceGrpcUrl) : undefined,
      authServicePrometheusUrl: isSet(object.authServicePrometheusUrl)
        ? globalThis.String(object.authServicePrometheusUrl)
        : undefined,
    };
  },

  toJSON(message: ConfigServices): unknown {
    const obj: any = {};
    if (message.commonServiceGrpcUrl !== undefined) {
      obj.commonServiceGrpcUrl = message.commonServiceGrpcUrl;
    }
    if (message.userServiceGrpcUrl !== undefined) {
      obj.userServiceGrpcUrl = message.userServiceGrpcUrl;
    }
    if (message.productsServiceGrpcUrl !== undefined) {
      obj.productsServiceGrpcUrl = message.productsServiceGrpcUrl;
    }
    if (message.jaegerCollectorUrl !== undefined) {
      obj.jaegerCollectorUrl = message.jaegerCollectorUrl;
    }
    if (message.commonServicePrometheusUrl !== undefined) {
      obj.commonServicePrometheusUrl = message.commonServicePrometheusUrl;
    }
    if (message.userServicePrometheusUrl !== undefined) {
      obj.userServicePrometheusUrl = message.userServicePrometheusUrl;
    }
    if (message.productsServicePrometheusUrl !== undefined) {
      obj.productsServicePrometheusUrl = message.productsServicePrometheusUrl;
    }
    if (message.usersServiceMaxReceiveMessageSizeBytes !== undefined) {
      obj.usersServiceMaxReceiveMessageSizeBytes = message.usersServiceMaxReceiveMessageSizeBytes;
    }
    if (message.authServiceGrpcUrl !== undefined) {
      obj.authServiceGrpcUrl = message.authServiceGrpcUrl;
    }
    if (message.authServicePrometheusUrl !== undefined) {
      obj.authServicePrometheusUrl = message.authServicePrometheusUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigServices>, I>>(base?: I): ConfigServices {
    return ConfigServices.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigServices>, I>>(object: I): ConfigServices {
    const message = createBaseConfigServices();
    message.commonServiceGrpcUrl = object.commonServiceGrpcUrl ?? undefined;
    message.userServiceGrpcUrl = object.userServiceGrpcUrl ?? undefined;
    message.productsServiceGrpcUrl = object.productsServiceGrpcUrl ?? undefined;
    message.jaegerCollectorUrl = object.jaegerCollectorUrl ?? undefined;
    message.commonServicePrometheusUrl = object.commonServicePrometheusUrl ?? undefined;
    message.userServicePrometheusUrl = object.userServicePrometheusUrl ?? undefined;
    message.productsServicePrometheusUrl = object.productsServicePrometheusUrl ?? undefined;
    message.usersServiceMaxReceiveMessageSizeBytes = object.usersServiceMaxReceiveMessageSizeBytes ?? undefined;
    message.authServiceGrpcUrl = object.authServiceGrpcUrl ?? undefined;
    message.authServicePrometheusUrl = object.authServicePrometheusUrl ?? undefined;
    return message;
  },
};

function createBaseConfigOAuth(): ConfigOAuth {
  return {
    oauthProviderUrl: undefined,
    oauthClientId: undefined,
    oauthClientSecret: undefined,
    oauthDbDsn: undefined,
    oauthRedirectUrl: undefined,
    oauthLoginUrl: undefined,
    oauthConsentUrl: undefined,
    oauthResponseType: undefined,
    oauthScope: [],
    oauthAdminUrl: undefined,
  };
}

export const ConfigOAuth: MessageFns<ConfigOAuth> = {
  encode(message: ConfigOAuth, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.oauthProviderUrl !== undefined) {
      writer.uint32(10).string(message.oauthProviderUrl);
    }
    if (message.oauthClientId !== undefined) {
      writer.uint32(18).string(message.oauthClientId);
    }
    if (message.oauthClientSecret !== undefined) {
      writer.uint32(26).string(message.oauthClientSecret);
    }
    if (message.oauthDbDsn !== undefined) {
      writer.uint32(34).string(message.oauthDbDsn);
    }
    if (message.oauthRedirectUrl !== undefined) {
      writer.uint32(42).string(message.oauthRedirectUrl);
    }
    if (message.oauthLoginUrl !== undefined) {
      writer.uint32(50).string(message.oauthLoginUrl);
    }
    if (message.oauthConsentUrl !== undefined) {
      writer.uint32(58).string(message.oauthConsentUrl);
    }
    if (message.oauthResponseType !== undefined) {
      writer.uint32(66).string(message.oauthResponseType);
    }
    for (const v of message.oauthScope) {
      writer.uint32(74).string(v!);
    }
    if (message.oauthAdminUrl !== undefined) {
      writer.uint32(82).string(message.oauthAdminUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigOAuth {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigOAuth();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.oauthProviderUrl = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.oauthClientId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.oauthClientSecret = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.oauthDbDsn = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.oauthRedirectUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.oauthLoginUrl = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.oauthConsentUrl = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.oauthResponseType = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.oauthScope.push(reader.string());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.oauthAdminUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigOAuth {
    return {
      oauthProviderUrl: isSet(object.oauthProviderUrl) ? globalThis.String(object.oauthProviderUrl) : undefined,
      oauthClientId: isSet(object.oauthClientId) ? globalThis.String(object.oauthClientId) : undefined,
      oauthClientSecret: isSet(object.oauthClientSecret) ? globalThis.String(object.oauthClientSecret) : undefined,
      oauthDbDsn: isSet(object.oauthDbDsn) ? globalThis.String(object.oauthDbDsn) : undefined,
      oauthRedirectUrl: isSet(object.oauthRedirectUrl) ? globalThis.String(object.oauthRedirectUrl) : undefined,
      oauthLoginUrl: isSet(object.oauthLoginUrl) ? globalThis.String(object.oauthLoginUrl) : undefined,
      oauthConsentUrl: isSet(object.oauthConsentUrl) ? globalThis.String(object.oauthConsentUrl) : undefined,
      oauthResponseType: isSet(object.oauthResponseType) ? globalThis.String(object.oauthResponseType) : undefined,
      oauthScope: globalThis.Array.isArray(object?.oauthScope)
        ? object.oauthScope.map((e: any) => globalThis.String(e))
        : [],
      oauthAdminUrl: isSet(object.oauthAdminUrl) ? globalThis.String(object.oauthAdminUrl) : undefined,
    };
  },

  toJSON(message: ConfigOAuth): unknown {
    const obj: any = {};
    if (message.oauthProviderUrl !== undefined) {
      obj.oauthProviderUrl = message.oauthProviderUrl;
    }
    if (message.oauthClientId !== undefined) {
      obj.oauthClientId = message.oauthClientId;
    }
    if (message.oauthClientSecret !== undefined) {
      obj.oauthClientSecret = message.oauthClientSecret;
    }
    if (message.oauthDbDsn !== undefined) {
      obj.oauthDbDsn = message.oauthDbDsn;
    }
    if (message.oauthRedirectUrl !== undefined) {
      obj.oauthRedirectUrl = message.oauthRedirectUrl;
    }
    if (message.oauthLoginUrl !== undefined) {
      obj.oauthLoginUrl = message.oauthLoginUrl;
    }
    if (message.oauthConsentUrl !== undefined) {
      obj.oauthConsentUrl = message.oauthConsentUrl;
    }
    if (message.oauthResponseType !== undefined) {
      obj.oauthResponseType = message.oauthResponseType;
    }
    if (message.oauthScope?.length) {
      obj.oauthScope = message.oauthScope;
    }
    if (message.oauthAdminUrl !== undefined) {
      obj.oauthAdminUrl = message.oauthAdminUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigOAuth>, I>>(base?: I): ConfigOAuth {
    return ConfigOAuth.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigOAuth>, I>>(object: I): ConfigOAuth {
    const message = createBaseConfigOAuth();
    message.oauthProviderUrl = object.oauthProviderUrl ?? undefined;
    message.oauthClientId = object.oauthClientId ?? undefined;
    message.oauthClientSecret = object.oauthClientSecret ?? undefined;
    message.oauthDbDsn = object.oauthDbDsn ?? undefined;
    message.oauthRedirectUrl = object.oauthRedirectUrl ?? undefined;
    message.oauthLoginUrl = object.oauthLoginUrl ?? undefined;
    message.oauthConsentUrl = object.oauthConsentUrl ?? undefined;
    message.oauthResponseType = object.oauthResponseType ?? undefined;
    message.oauthScope = object.oauthScope?.map((e) => e) || [];
    message.oauthAdminUrl = object.oauthAdminUrl ?? undefined;
    return message;
  },
};

function createBaseConfigSecurity(): ConfigSecurity {
  return {
    restrictedUsernames: {},
    maximumLoginAttempts: undefined,
    enableInsecureOutgoingConnections: undefined,
    enableMultifactorAuthentication: undefined,
    enforceMultifactorAuthentication: undefined,
    enableOauthServiceProvider: undefined,
    enableOutgoingOauthConnections: undefined,
    terminateSessionsOnPasswordChange: undefined,
    sessionLengthWebInHours: undefined,
    sessionLengthMobileInHours: undefined,
    sessionLengthSsoInHours: undefined,
    allowCorsFrom: undefined,
    corsExposedHeaders: undefined,
    corsAllowCredentials: undefined,
    corsDebug: undefined,
    allowCookiesForSubdomains: undefined,
    sessionCacheInMinutes: undefined,
    emailConfirmationUrl: undefined,
    tokenConfirmationExpiryInHours: undefined,
    tokenPasswordResetExpiryInHours: undefined,
    passwordResetUrl: undefined,
  };
}

export const ConfigSecurity: MessageFns<ConfigSecurity> = {
  encode(message: ConfigSecurity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.restrictedUsernames).forEach(([key, value]) => {
      ConfigSecurity_RestrictedUsernamesEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    if (message.maximumLoginAttempts !== undefined) {
      writer.uint32(16).int32(message.maximumLoginAttempts);
    }
    if (message.enableInsecureOutgoingConnections !== undefined) {
      writer.uint32(24).bool(message.enableInsecureOutgoingConnections);
    }
    if (message.enableMultifactorAuthentication !== undefined) {
      writer.uint32(32).bool(message.enableMultifactorAuthentication);
    }
    if (message.enforceMultifactorAuthentication !== undefined) {
      writer.uint32(40).bool(message.enforceMultifactorAuthentication);
    }
    if (message.enableOauthServiceProvider !== undefined) {
      writer.uint32(48).bool(message.enableOauthServiceProvider);
    }
    if (message.enableOutgoingOauthConnections !== undefined) {
      writer.uint32(56).bool(message.enableOutgoingOauthConnections);
    }
    if (message.terminateSessionsOnPasswordChange !== undefined) {
      writer.uint32(64).bool(message.terminateSessionsOnPasswordChange);
    }
    if (message.sessionLengthWebInHours !== undefined) {
      writer.uint32(72).int32(message.sessionLengthWebInHours);
    }
    if (message.sessionLengthMobileInHours !== undefined) {
      writer.uint32(80).int32(message.sessionLengthMobileInHours);
    }
    if (message.sessionLengthSsoInHours !== undefined) {
      writer.uint32(88).int32(message.sessionLengthSsoInHours);
    }
    if (message.allowCorsFrom !== undefined) {
      writer.uint32(98).string(message.allowCorsFrom);
    }
    if (message.corsExposedHeaders !== undefined) {
      writer.uint32(106).string(message.corsExposedHeaders);
    }
    if (message.corsAllowCredentials !== undefined) {
      writer.uint32(112).bool(message.corsAllowCredentials);
    }
    if (message.corsDebug !== undefined) {
      writer.uint32(120).bool(message.corsDebug);
    }
    if (message.allowCookiesForSubdomains !== undefined) {
      writer.uint32(128).bool(message.allowCookiesForSubdomains);
    }
    if (message.sessionCacheInMinutes !== undefined) {
      writer.uint32(136).int32(message.sessionCacheInMinutes);
    }
    if (message.emailConfirmationUrl !== undefined) {
      writer.uint32(146).string(message.emailConfirmationUrl);
    }
    if (message.tokenConfirmationExpiryInHours !== undefined) {
      writer.uint32(152).uint32(message.tokenConfirmationExpiryInHours);
    }
    if (message.tokenPasswordResetExpiryInHours !== undefined) {
      writer.uint32(160).uint32(message.tokenPasswordResetExpiryInHours);
    }
    if (message.passwordResetUrl !== undefined) {
      writer.uint32(170).string(message.passwordResetUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigSecurity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigSecurity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = ConfigSecurity_RestrictedUsernamesEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.restrictedUsernames[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.maximumLoginAttempts = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.enableInsecureOutgoingConnections = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.enableMultifactorAuthentication = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.enforceMultifactorAuthentication = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.enableOauthServiceProvider = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.enableOutgoingOauthConnections = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.terminateSessionsOnPasswordChange = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.sessionLengthWebInHours = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.sessionLengthMobileInHours = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.sessionLengthSsoInHours = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.allowCorsFrom = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.corsExposedHeaders = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.corsAllowCredentials = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.corsDebug = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.allowCookiesForSubdomains = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.sessionCacheInMinutes = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.emailConfirmationUrl = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.tokenConfirmationExpiryInHours = reader.uint32();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.tokenPasswordResetExpiryInHours = reader.uint32();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.passwordResetUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigSecurity {
    return {
      restrictedUsernames: isObject(object.restrictedUsernames)
        ? Object.entries(object.restrictedUsernames).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      maximumLoginAttempts: isSet(object.maximumLoginAttempts)
        ? globalThis.Number(object.maximumLoginAttempts)
        : undefined,
      enableInsecureOutgoingConnections: isSet(object.enableInsecureOutgoingConnections)
        ? globalThis.Boolean(object.enableInsecureOutgoingConnections)
        : undefined,
      enableMultifactorAuthentication: isSet(object.enableMultifactorAuthentication)
        ? globalThis.Boolean(object.enableMultifactorAuthentication)
        : undefined,
      enforceMultifactorAuthentication: isSet(object.enforceMultifactorAuthentication)
        ? globalThis.Boolean(object.enforceMultifactorAuthentication)
        : undefined,
      enableOauthServiceProvider: isSet(object.enableOauthServiceProvider)
        ? globalThis.Boolean(object.enableOauthServiceProvider)
        : undefined,
      enableOutgoingOauthConnections: isSet(object.enableOutgoingOauthConnections)
        ? globalThis.Boolean(object.enableOutgoingOauthConnections)
        : undefined,
      terminateSessionsOnPasswordChange: isSet(object.terminateSessionsOnPasswordChange)
        ? globalThis.Boolean(object.terminateSessionsOnPasswordChange)
        : undefined,
      sessionLengthWebInHours: isSet(object.sessionLengthWebInHours)
        ? globalThis.Number(object.sessionLengthWebInHours)
        : undefined,
      sessionLengthMobileInHours: isSet(object.sessionLengthMobileInHours)
        ? globalThis.Number(object.sessionLengthMobileInHours)
        : undefined,
      sessionLengthSsoInHours: isSet(object.sessionLengthSsoInHours)
        ? globalThis.Number(object.sessionLengthSsoInHours)
        : undefined,
      allowCorsFrom: isSet(object.allowCorsFrom) ? globalThis.String(object.allowCorsFrom) : undefined,
      corsExposedHeaders: isSet(object.corsExposedHeaders) ? globalThis.String(object.corsExposedHeaders) : undefined,
      corsAllowCredentials: isSet(object.corsAllowCredentials)
        ? globalThis.Boolean(object.corsAllowCredentials)
        : undefined,
      corsDebug: isSet(object.corsDebug) ? globalThis.Boolean(object.corsDebug) : undefined,
      allowCookiesForSubdomains: isSet(object.allowCookiesForSubdomains)
        ? globalThis.Boolean(object.allowCookiesForSubdomains)
        : undefined,
      sessionCacheInMinutes: isSet(object.sessionCacheInMinutes)
        ? globalThis.Number(object.sessionCacheInMinutes)
        : undefined,
      emailConfirmationUrl: isSet(object.emailConfirmationUrl)
        ? globalThis.String(object.emailConfirmationUrl)
        : undefined,
      tokenConfirmationExpiryInHours: isSet(object.tokenConfirmationExpiryInHours)
        ? globalThis.Number(object.tokenConfirmationExpiryInHours)
        : undefined,
      tokenPasswordResetExpiryInHours: isSet(object.tokenPasswordResetExpiryInHours)
        ? globalThis.Number(object.tokenPasswordResetExpiryInHours)
        : undefined,
      passwordResetUrl: isSet(object.passwordResetUrl) ? globalThis.String(object.passwordResetUrl) : undefined,
    };
  },

  toJSON(message: ConfigSecurity): unknown {
    const obj: any = {};
    if (message.restrictedUsernames) {
      const entries = Object.entries(message.restrictedUsernames);
      if (entries.length > 0) {
        obj.restrictedUsernames = {};
        entries.forEach(([k, v]) => {
          obj.restrictedUsernames[k] = v;
        });
      }
    }
    if (message.maximumLoginAttempts !== undefined) {
      obj.maximumLoginAttempts = Math.round(message.maximumLoginAttempts);
    }
    if (message.enableInsecureOutgoingConnections !== undefined) {
      obj.enableInsecureOutgoingConnections = message.enableInsecureOutgoingConnections;
    }
    if (message.enableMultifactorAuthentication !== undefined) {
      obj.enableMultifactorAuthentication = message.enableMultifactorAuthentication;
    }
    if (message.enforceMultifactorAuthentication !== undefined) {
      obj.enforceMultifactorAuthentication = message.enforceMultifactorAuthentication;
    }
    if (message.enableOauthServiceProvider !== undefined) {
      obj.enableOauthServiceProvider = message.enableOauthServiceProvider;
    }
    if (message.enableOutgoingOauthConnections !== undefined) {
      obj.enableOutgoingOauthConnections = message.enableOutgoingOauthConnections;
    }
    if (message.terminateSessionsOnPasswordChange !== undefined) {
      obj.terminateSessionsOnPasswordChange = message.terminateSessionsOnPasswordChange;
    }
    if (message.sessionLengthWebInHours !== undefined) {
      obj.sessionLengthWebInHours = Math.round(message.sessionLengthWebInHours);
    }
    if (message.sessionLengthMobileInHours !== undefined) {
      obj.sessionLengthMobileInHours = Math.round(message.sessionLengthMobileInHours);
    }
    if (message.sessionLengthSsoInHours !== undefined) {
      obj.sessionLengthSsoInHours = Math.round(message.sessionLengthSsoInHours);
    }
    if (message.allowCorsFrom !== undefined) {
      obj.allowCorsFrom = message.allowCorsFrom;
    }
    if (message.corsExposedHeaders !== undefined) {
      obj.corsExposedHeaders = message.corsExposedHeaders;
    }
    if (message.corsAllowCredentials !== undefined) {
      obj.corsAllowCredentials = message.corsAllowCredentials;
    }
    if (message.corsDebug !== undefined) {
      obj.corsDebug = message.corsDebug;
    }
    if (message.allowCookiesForSubdomains !== undefined) {
      obj.allowCookiesForSubdomains = message.allowCookiesForSubdomains;
    }
    if (message.sessionCacheInMinutes !== undefined) {
      obj.sessionCacheInMinutes = Math.round(message.sessionCacheInMinutes);
    }
    if (message.emailConfirmationUrl !== undefined) {
      obj.emailConfirmationUrl = message.emailConfirmationUrl;
    }
    if (message.tokenConfirmationExpiryInHours !== undefined) {
      obj.tokenConfirmationExpiryInHours = Math.round(message.tokenConfirmationExpiryInHours);
    }
    if (message.tokenPasswordResetExpiryInHours !== undefined) {
      obj.tokenPasswordResetExpiryInHours = Math.round(message.tokenPasswordResetExpiryInHours);
    }
    if (message.passwordResetUrl !== undefined) {
      obj.passwordResetUrl = message.passwordResetUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigSecurity>, I>>(base?: I): ConfigSecurity {
    return ConfigSecurity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigSecurity>, I>>(object: I): ConfigSecurity {
    const message = createBaseConfigSecurity();
    message.restrictedUsernames = Object.entries(object.restrictedUsernames ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.maximumLoginAttempts = object.maximumLoginAttempts ?? undefined;
    message.enableInsecureOutgoingConnections = object.enableInsecureOutgoingConnections ?? undefined;
    message.enableMultifactorAuthentication = object.enableMultifactorAuthentication ?? undefined;
    message.enforceMultifactorAuthentication = object.enforceMultifactorAuthentication ?? undefined;
    message.enableOauthServiceProvider = object.enableOauthServiceProvider ?? undefined;
    message.enableOutgoingOauthConnections = object.enableOutgoingOauthConnections ?? undefined;
    message.terminateSessionsOnPasswordChange = object.terminateSessionsOnPasswordChange ?? undefined;
    message.sessionLengthWebInHours = object.sessionLengthWebInHours ?? undefined;
    message.sessionLengthMobileInHours = object.sessionLengthMobileInHours ?? undefined;
    message.sessionLengthSsoInHours = object.sessionLengthSsoInHours ?? undefined;
    message.allowCorsFrom = object.allowCorsFrom ?? undefined;
    message.corsExposedHeaders = object.corsExposedHeaders ?? undefined;
    message.corsAllowCredentials = object.corsAllowCredentials ?? undefined;
    message.corsDebug = object.corsDebug ?? undefined;
    message.allowCookiesForSubdomains = object.allowCookiesForSubdomains ?? undefined;
    message.sessionCacheInMinutes = object.sessionCacheInMinutes ?? undefined;
    message.emailConfirmationUrl = object.emailConfirmationUrl ?? undefined;
    message.tokenConfirmationExpiryInHours = object.tokenConfirmationExpiryInHours ?? undefined;
    message.tokenPasswordResetExpiryInHours = object.tokenPasswordResetExpiryInHours ?? undefined;
    message.passwordResetUrl = object.passwordResetUrl ?? undefined;
    return message;
  },
};

function createBaseConfigSecurity_RestrictedUsernamesEntry(): ConfigSecurity_RestrictedUsernamesEntry {
  return { key: "", value: "" };
}

export const ConfigSecurity_RestrictedUsernamesEntry: MessageFns<ConfigSecurity_RestrictedUsernamesEntry> = {
  encode(message: ConfigSecurity_RestrictedUsernamesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigSecurity_RestrictedUsernamesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigSecurity_RestrictedUsernamesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigSecurity_RestrictedUsernamesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ConfigSecurity_RestrictedUsernamesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigSecurity_RestrictedUsernamesEntry>, I>>(
    base?: I,
  ): ConfigSecurity_RestrictedUsernamesEntry {
    return ConfigSecurity_RestrictedUsernamesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigSecurity_RestrictedUsernamesEntry>, I>>(
    object: I,
  ): ConfigSecurity_RestrictedUsernamesEntry {
    const message = createBaseConfigSecurity_RestrictedUsernamesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseCacheConfig(): CacheConfig {
  return {
    cacheType: undefined,
    redisAddress: undefined,
    redisPassword: undefined,
    redisDb: undefined,
    redisCachePrefix: undefined,
    disableClientCache: undefined,
  };
}

export const CacheConfig: MessageFns<CacheConfig> = {
  encode(message: CacheConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cacheType !== undefined) {
      writer.uint32(10).string(message.cacheType);
    }
    if (message.redisAddress !== undefined) {
      writer.uint32(18).string(message.redisAddress);
    }
    if (message.redisPassword !== undefined) {
      writer.uint32(26).string(message.redisPassword);
    }
    if (message.redisDb !== undefined) {
      writer.uint32(32).int32(message.redisDb);
    }
    if (message.redisCachePrefix !== undefined) {
      writer.uint32(42).string(message.redisCachePrefix);
    }
    if (message.disableClientCache !== undefined) {
      writer.uint32(48).bool(message.disableClientCache);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CacheConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCacheConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cacheType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.redisAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.redisPassword = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.redisDb = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.redisCachePrefix = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.disableClientCache = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CacheConfig {
    return {
      cacheType: isSet(object.cacheType) ? globalThis.String(object.cacheType) : undefined,
      redisAddress: isSet(object.redisAddress) ? globalThis.String(object.redisAddress) : undefined,
      redisPassword: isSet(object.redisPassword) ? globalThis.String(object.redisPassword) : undefined,
      redisDb: isSet(object.redisDb) ? globalThis.Number(object.redisDb) : undefined,
      redisCachePrefix: isSet(object.redisCachePrefix) ? globalThis.String(object.redisCachePrefix) : undefined,
      disableClientCache: isSet(object.disableClientCache) ? globalThis.Boolean(object.disableClientCache) : undefined,
    };
  },

  toJSON(message: CacheConfig): unknown {
    const obj: any = {};
    if (message.cacheType !== undefined) {
      obj.cacheType = message.cacheType;
    }
    if (message.redisAddress !== undefined) {
      obj.redisAddress = message.redisAddress;
    }
    if (message.redisPassword !== undefined) {
      obj.redisPassword = message.redisPassword;
    }
    if (message.redisDb !== undefined) {
      obj.redisDb = Math.round(message.redisDb);
    }
    if (message.redisCachePrefix !== undefined) {
      obj.redisCachePrefix = message.redisCachePrefix;
    }
    if (message.disableClientCache !== undefined) {
      obj.disableClientCache = message.disableClientCache;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CacheConfig>, I>>(base?: I): CacheConfig {
    return CacheConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CacheConfig>, I>>(object: I): CacheConfig {
    const message = createBaseCacheConfig();
    message.cacheType = object.cacheType ?? undefined;
    message.redisAddress = object.redisAddress ?? undefined;
    message.redisPassword = object.redisPassword ?? undefined;
    message.redisDb = object.redisDb ?? undefined;
    message.redisCachePrefix = object.redisCachePrefix ?? undefined;
    message.disableClientCache = object.disableClientCache ?? undefined;
    return message;
  },
};

function createBaseConfigMetrics(): ConfigMetrics {
  return {
    enable: undefined,
    blockProfileRate: undefined,
    listenAddress: undefined,
    enableClientMetrics: undefined,
    enableNotificationMetrics: undefined,
    clientSideUserIds: [],
  };
}

export const ConfigMetrics: MessageFns<ConfigMetrics> = {
  encode(message: ConfigMetrics, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enable !== undefined) {
      writer.uint32(8).bool(message.enable);
    }
    if (message.blockProfileRate !== undefined) {
      writer.uint32(16).int32(message.blockProfileRate);
    }
    if (message.listenAddress !== undefined) {
      writer.uint32(26).string(message.listenAddress);
    }
    if (message.enableClientMetrics !== undefined) {
      writer.uint32(32).bool(message.enableClientMetrics);
    }
    if (message.enableNotificationMetrics !== undefined) {
      writer.uint32(40).bool(message.enableNotificationMetrics);
    }
    for (const v of message.clientSideUserIds) {
      writer.uint32(50).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigMetrics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigMetrics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enable = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockProfileRate = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.listenAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.enableClientMetrics = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.enableNotificationMetrics = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.clientSideUserIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigMetrics {
    return {
      enable: isSet(object.enable) ? globalThis.Boolean(object.enable) : undefined,
      blockProfileRate: isSet(object.blockProfileRate) ? globalThis.Number(object.blockProfileRate) : undefined,
      listenAddress: isSet(object.listenAddress) ? globalThis.String(object.listenAddress) : undefined,
      enableClientMetrics: isSet(object.enableClientMetrics)
        ? globalThis.Boolean(object.enableClientMetrics)
        : undefined,
      enableNotificationMetrics: isSet(object.enableNotificationMetrics)
        ? globalThis.Boolean(object.enableNotificationMetrics)
        : undefined,
      clientSideUserIds: globalThis.Array.isArray(object?.clientSideUserIds)
        ? object.clientSideUserIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ConfigMetrics): unknown {
    const obj: any = {};
    if (message.enable !== undefined) {
      obj.enable = message.enable;
    }
    if (message.blockProfileRate !== undefined) {
      obj.blockProfileRate = Math.round(message.blockProfileRate);
    }
    if (message.listenAddress !== undefined) {
      obj.listenAddress = message.listenAddress;
    }
    if (message.enableClientMetrics !== undefined) {
      obj.enableClientMetrics = message.enableClientMetrics;
    }
    if (message.enableNotificationMetrics !== undefined) {
      obj.enableNotificationMetrics = message.enableNotificationMetrics;
    }
    if (message.clientSideUserIds?.length) {
      obj.clientSideUserIds = message.clientSideUserIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigMetrics>, I>>(base?: I): ConfigMetrics {
    return ConfigMetrics.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigMetrics>, I>>(object: I): ConfigMetrics {
    const message = createBaseConfigMetrics();
    message.enable = object.enable ?? undefined;
    message.blockProfileRate = object.blockProfileRate ?? undefined;
    message.listenAddress = object.listenAddress ?? undefined;
    message.enableClientMetrics = object.enableClientMetrics ?? undefined;
    message.enableNotificationMetrics = object.enableNotificationMetrics ?? undefined;
    message.clientSideUserIds = object.clientSideUserIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseConfigSSO(): ConfigSSO {
  return {
    enable: undefined,
    secret: undefined,
    id: undefined,
    scope: undefined,
    authEndpoint: undefined,
    tokenEndpoint: undefined,
    userApiEndpoint: undefined,
    discoveryEndpoint: undefined,
    buttonText: undefined,
    buttonColor: undefined,
  };
}

export const ConfigSSO: MessageFns<ConfigSSO> = {
  encode(message: ConfigSSO, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enable !== undefined) {
      writer.uint32(8).bool(message.enable);
    }
    if (message.secret !== undefined) {
      writer.uint32(18).string(message.secret);
    }
    if (message.id !== undefined) {
      writer.uint32(26).string(message.id);
    }
    if (message.scope !== undefined) {
      writer.uint32(34).string(message.scope);
    }
    if (message.authEndpoint !== undefined) {
      writer.uint32(42).string(message.authEndpoint);
    }
    if (message.tokenEndpoint !== undefined) {
      writer.uint32(50).string(message.tokenEndpoint);
    }
    if (message.userApiEndpoint !== undefined) {
      writer.uint32(58).string(message.userApiEndpoint);
    }
    if (message.discoveryEndpoint !== undefined) {
      writer.uint32(66).string(message.discoveryEndpoint);
    }
    if (message.buttonText !== undefined) {
      writer.uint32(74).string(message.buttonText);
    }
    if (message.buttonColor !== undefined) {
      writer.uint32(82).string(message.buttonColor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigSSO {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigSSO();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enable = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.secret = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.scope = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.authEndpoint = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.tokenEndpoint = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.userApiEndpoint = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.discoveryEndpoint = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.buttonColor = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigSSO {
    return {
      enable: isSet(object.enable) ? globalThis.Boolean(object.enable) : undefined,
      secret: isSet(object.secret) ? globalThis.String(object.secret) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      scope: isSet(object.scope) ? globalThis.String(object.scope) : undefined,
      authEndpoint: isSet(object.authEndpoint) ? globalThis.String(object.authEndpoint) : undefined,
      tokenEndpoint: isSet(object.tokenEndpoint) ? globalThis.String(object.tokenEndpoint) : undefined,
      userApiEndpoint: isSet(object.userApiEndpoint) ? globalThis.String(object.userApiEndpoint) : undefined,
      discoveryEndpoint: isSet(object.discoveryEndpoint) ? globalThis.String(object.discoveryEndpoint) : undefined,
      buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : undefined,
      buttonColor: isSet(object.buttonColor) ? globalThis.String(object.buttonColor) : undefined,
    };
  },

  toJSON(message: ConfigSSO): unknown {
    const obj: any = {};
    if (message.enable !== undefined) {
      obj.enable = message.enable;
    }
    if (message.secret !== undefined) {
      obj.secret = message.secret;
    }
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.scope !== undefined) {
      obj.scope = message.scope;
    }
    if (message.authEndpoint !== undefined) {
      obj.authEndpoint = message.authEndpoint;
    }
    if (message.tokenEndpoint !== undefined) {
      obj.tokenEndpoint = message.tokenEndpoint;
    }
    if (message.userApiEndpoint !== undefined) {
      obj.userApiEndpoint = message.userApiEndpoint;
    }
    if (message.discoveryEndpoint !== undefined) {
      obj.discoveryEndpoint = message.discoveryEndpoint;
    }
    if (message.buttonText !== undefined) {
      obj.buttonText = message.buttonText;
    }
    if (message.buttonColor !== undefined) {
      obj.buttonColor = message.buttonColor;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigSSO>, I>>(base?: I): ConfigSSO {
    return ConfigSSO.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigSSO>, I>>(object: I): ConfigSSO {
    const message = createBaseConfigSSO();
    message.enable = object.enable ?? undefined;
    message.secret = object.secret ?? undefined;
    message.id = object.id ?? undefined;
    message.scope = object.scope ?? undefined;
    message.authEndpoint = object.authEndpoint ?? undefined;
    message.tokenEndpoint = object.tokenEndpoint ?? undefined;
    message.userApiEndpoint = object.userApiEndpoint ?? undefined;
    message.discoveryEndpoint = object.discoveryEndpoint ?? undefined;
    message.buttonText = object.buttonText ?? undefined;
    message.buttonColor = object.buttonColor ?? undefined;
    return message;
  },
};

function createBaseConfigSql(): ConfigSql {
  return {
    driverName: undefined,
    dataSource: undefined,
    maxIdleConns: undefined,
    connMaxLifetimeMilliseconds: undefined,
    connMaxIdleTimeMilliseconds: undefined,
    maxOpenConns: undefined,
    trace: undefined,
    atRestEncryptKey: undefined,
    queryTimeout: undefined,
    disableDatabaseSearch: undefined,
  };
}

export const ConfigSql: MessageFns<ConfigSql> = {
  encode(message: ConfigSql, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.driverName !== undefined) {
      writer.uint32(10).string(message.driverName);
    }
    if (message.dataSource !== undefined) {
      writer.uint32(18).string(message.dataSource);
    }
    if (message.maxIdleConns !== undefined) {
      writer.uint32(24).int32(message.maxIdleConns);
    }
    if (message.connMaxLifetimeMilliseconds !== undefined) {
      writer.uint32(32).int32(message.connMaxLifetimeMilliseconds);
    }
    if (message.connMaxIdleTimeMilliseconds !== undefined) {
      writer.uint32(40).int32(message.connMaxIdleTimeMilliseconds);
    }
    if (message.maxOpenConns !== undefined) {
      writer.uint32(48).int32(message.maxOpenConns);
    }
    if (message.trace !== undefined) {
      writer.uint32(56).bool(message.trace);
    }
    if (message.atRestEncryptKey !== undefined) {
      writer.uint32(66).string(message.atRestEncryptKey);
    }
    if (message.queryTimeout !== undefined) {
      writer.uint32(72).int32(message.queryTimeout);
    }
    if (message.disableDatabaseSearch !== undefined) {
      writer.uint32(80).bool(message.disableDatabaseSearch);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigSql {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigSql();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.driverName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.dataSource = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.maxIdleConns = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.connMaxLifetimeMilliseconds = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.connMaxIdleTimeMilliseconds = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.maxOpenConns = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.trace = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.atRestEncryptKey = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.queryTimeout = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.disableDatabaseSearch = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigSql {
    return {
      driverName: isSet(object.driverName) ? globalThis.String(object.driverName) : undefined,
      dataSource: isSet(object.dataSource) ? globalThis.String(object.dataSource) : undefined,
      maxIdleConns: isSet(object.maxIdleConns) ? globalThis.Number(object.maxIdleConns) : undefined,
      connMaxLifetimeMilliseconds: isSet(object.connMaxLifetimeMilliseconds)
        ? globalThis.Number(object.connMaxLifetimeMilliseconds)
        : undefined,
      connMaxIdleTimeMilliseconds: isSet(object.connMaxIdleTimeMilliseconds)
        ? globalThis.Number(object.connMaxIdleTimeMilliseconds)
        : undefined,
      maxOpenConns: isSet(object.maxOpenConns) ? globalThis.Number(object.maxOpenConns) : undefined,
      trace: isSet(object.trace) ? globalThis.Boolean(object.trace) : undefined,
      atRestEncryptKey: isSet(object.atRestEncryptKey) ? globalThis.String(object.atRestEncryptKey) : undefined,
      queryTimeout: isSet(object.queryTimeout) ? globalThis.Number(object.queryTimeout) : undefined,
      disableDatabaseSearch: isSet(object.disableDatabaseSearch)
        ? globalThis.Boolean(object.disableDatabaseSearch)
        : undefined,
    };
  },

  toJSON(message: ConfigSql): unknown {
    const obj: any = {};
    if (message.driverName !== undefined) {
      obj.driverName = message.driverName;
    }
    if (message.dataSource !== undefined) {
      obj.dataSource = message.dataSource;
    }
    if (message.maxIdleConns !== undefined) {
      obj.maxIdleConns = Math.round(message.maxIdleConns);
    }
    if (message.connMaxLifetimeMilliseconds !== undefined) {
      obj.connMaxLifetimeMilliseconds = Math.round(message.connMaxLifetimeMilliseconds);
    }
    if (message.connMaxIdleTimeMilliseconds !== undefined) {
      obj.connMaxIdleTimeMilliseconds = Math.round(message.connMaxIdleTimeMilliseconds);
    }
    if (message.maxOpenConns !== undefined) {
      obj.maxOpenConns = Math.round(message.maxOpenConns);
    }
    if (message.trace !== undefined) {
      obj.trace = message.trace;
    }
    if (message.atRestEncryptKey !== undefined) {
      obj.atRestEncryptKey = message.atRestEncryptKey;
    }
    if (message.queryTimeout !== undefined) {
      obj.queryTimeout = Math.round(message.queryTimeout);
    }
    if (message.disableDatabaseSearch !== undefined) {
      obj.disableDatabaseSearch = message.disableDatabaseSearch;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigSql>, I>>(base?: I): ConfigSql {
    return ConfigSql.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigSql>, I>>(object: I): ConfigSql {
    const message = createBaseConfigSql();
    message.driverName = object.driverName ?? undefined;
    message.dataSource = object.dataSource ?? undefined;
    message.maxIdleConns = object.maxIdleConns ?? undefined;
    message.connMaxLifetimeMilliseconds = object.connMaxLifetimeMilliseconds ?? undefined;
    message.connMaxIdleTimeMilliseconds = object.connMaxIdleTimeMilliseconds ?? undefined;
    message.maxOpenConns = object.maxOpenConns ?? undefined;
    message.trace = object.trace ?? undefined;
    message.atRestEncryptKey = object.atRestEncryptKey ?? undefined;
    message.queryTimeout = object.queryTimeout ?? undefined;
    message.disableDatabaseSearch = object.disableDatabaseSearch ?? undefined;
    return message;
  },
};

function createBaseConfigPassword(): ConfigPassword {
  return {
    minimumLength: undefined,
    maximumLength: undefined,
    lowercase: undefined,
    number: undefined,
    uppercase: undefined,
    symbol: undefined,
    enableForgotLink: undefined,
  };
}

export const ConfigPassword: MessageFns<ConfigPassword> = {
  encode(message: ConfigPassword, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.minimumLength !== undefined) {
      writer.uint32(8).int32(message.minimumLength);
    }
    if (message.maximumLength !== undefined) {
      writer.uint32(16).int32(message.maximumLength);
    }
    if (message.lowercase !== undefined) {
      writer.uint32(24).bool(message.lowercase);
    }
    if (message.number !== undefined) {
      writer.uint32(32).bool(message.number);
    }
    if (message.uppercase !== undefined) {
      writer.uint32(40).bool(message.uppercase);
    }
    if (message.symbol !== undefined) {
      writer.uint32(48).bool(message.symbol);
    }
    if (message.enableForgotLink !== undefined) {
      writer.uint32(56).bool(message.enableForgotLink);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigPassword {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigPassword();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.minimumLength = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.maximumLength = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.lowercase = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.number = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.uppercase = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.symbol = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.enableForgotLink = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigPassword {
    return {
      minimumLength: isSet(object.minimumLength) ? globalThis.Number(object.minimumLength) : undefined,
      maximumLength: isSet(object.maximumLength) ? globalThis.Number(object.maximumLength) : undefined,
      lowercase: isSet(object.lowercase) ? globalThis.Boolean(object.lowercase) : undefined,
      number: isSet(object.number) ? globalThis.Boolean(object.number) : undefined,
      uppercase: isSet(object.uppercase) ? globalThis.Boolean(object.uppercase) : undefined,
      symbol: isSet(object.symbol) ? globalThis.Boolean(object.symbol) : undefined,
      enableForgotLink: isSet(object.enableForgotLink) ? globalThis.Boolean(object.enableForgotLink) : undefined,
    };
  },

  toJSON(message: ConfigPassword): unknown {
    const obj: any = {};
    if (message.minimumLength !== undefined) {
      obj.minimumLength = Math.round(message.minimumLength);
    }
    if (message.maximumLength !== undefined) {
      obj.maximumLength = Math.round(message.maximumLength);
    }
    if (message.lowercase !== undefined) {
      obj.lowercase = message.lowercase;
    }
    if (message.number !== undefined) {
      obj.number = message.number;
    }
    if (message.uppercase !== undefined) {
      obj.uppercase = message.uppercase;
    }
    if (message.symbol !== undefined) {
      obj.symbol = message.symbol;
    }
    if (message.enableForgotLink !== undefined) {
      obj.enableForgotLink = message.enableForgotLink;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigPassword>, I>>(base?: I): ConfigPassword {
    return ConfigPassword.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigPassword>, I>>(object: I): ConfigPassword {
    const message = createBaseConfigPassword();
    message.minimumLength = object.minimumLength ?? undefined;
    message.maximumLength = object.maximumLength ?? undefined;
    message.lowercase = object.lowercase ?? undefined;
    message.number = object.number ?? undefined;
    message.uppercase = object.uppercase ?? undefined;
    message.symbol = object.symbol ?? undefined;
    message.enableForgotLink = object.enableForgotLink ?? undefined;
    return message;
  },
};

function createBaseConfigFile(): ConfigFile {
  return {
    enableFileAttachments: undefined,
    enableMobileUpload: undefined,
    enableMobileDownload: undefined,
    maxImageResolution: undefined,
    maxImageDecoderConcurrency: undefined,
    driverName: undefined,
    amazonS3AccessKeyId: undefined,
    amazonS3SecretAccessKey: undefined,
    amazonS3Bucket: undefined,
    amazonS3PathPrefix: undefined,
    amazonS3Region: undefined,
    amazonS3Endpoint: undefined,
    amazonS3Ssl: undefined,
    amazonS3SignV2: undefined,
    amazonS3Sse: undefined,
    amazonS3Trace: undefined,
    amazonS3RequestTimeoutMilliseconds: undefined,
    amazonS3UploadPartSizeBytes: undefined,
    amazonS3StorageClass: undefined,
  };
}

export const ConfigFile: MessageFns<ConfigFile> = {
  encode(message: ConfigFile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enableFileAttachments !== undefined) {
      writer.uint32(8).bool(message.enableFileAttachments);
    }
    if (message.enableMobileUpload !== undefined) {
      writer.uint32(16).bool(message.enableMobileUpload);
    }
    if (message.enableMobileDownload !== undefined) {
      writer.uint32(24).bool(message.enableMobileDownload);
    }
    if (message.maxImageResolution !== undefined) {
      writer.uint32(32).int64(message.maxImageResolution);
    }
    if (message.maxImageDecoderConcurrency !== undefined) {
      writer.uint32(40).int64(message.maxImageDecoderConcurrency);
    }
    if (message.driverName !== undefined) {
      writer.uint32(50).string(message.driverName);
    }
    if (message.amazonS3AccessKeyId !== undefined) {
      writer.uint32(58).string(message.amazonS3AccessKeyId);
    }
    if (message.amazonS3SecretAccessKey !== undefined) {
      writer.uint32(66).string(message.amazonS3SecretAccessKey);
    }
    if (message.amazonS3Bucket !== undefined) {
      writer.uint32(74).string(message.amazonS3Bucket);
    }
    if (message.amazonS3PathPrefix !== undefined) {
      writer.uint32(82).string(message.amazonS3PathPrefix);
    }
    if (message.amazonS3Region !== undefined) {
      writer.uint32(90).string(message.amazonS3Region);
    }
    if (message.amazonS3Endpoint !== undefined) {
      writer.uint32(98).string(message.amazonS3Endpoint);
    }
    if (message.amazonS3Ssl !== undefined) {
      writer.uint32(104).bool(message.amazonS3Ssl);
    }
    if (message.amazonS3SignV2 !== undefined) {
      writer.uint32(112).bool(message.amazonS3SignV2);
    }
    if (message.amazonS3Sse !== undefined) {
      writer.uint32(120).bool(message.amazonS3Sse);
    }
    if (message.amazonS3Trace !== undefined) {
      writer.uint32(128).bool(message.amazonS3Trace);
    }
    if (message.amazonS3RequestTimeoutMilliseconds !== undefined) {
      writer.uint32(136).int64(message.amazonS3RequestTimeoutMilliseconds);
    }
    if (message.amazonS3UploadPartSizeBytes !== undefined) {
      writer.uint32(144).int64(message.amazonS3UploadPartSizeBytes);
    }
    if (message.amazonS3StorageClass !== undefined) {
      writer.uint32(154).string(message.amazonS3StorageClass);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigFile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigFile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enableFileAttachments = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.enableMobileUpload = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.enableMobileDownload = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.maxImageResolution = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.maxImageDecoderConcurrency = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.driverName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.amazonS3AccessKeyId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.amazonS3SecretAccessKey = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.amazonS3Bucket = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.amazonS3PathPrefix = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.amazonS3Region = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.amazonS3Endpoint = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.amazonS3Ssl = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.amazonS3SignV2 = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.amazonS3Sse = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.amazonS3Trace = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.amazonS3RequestTimeoutMilliseconds = reader.int64().toString();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.amazonS3UploadPartSizeBytes = reader.int64().toString();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.amazonS3StorageClass = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigFile {
    return {
      enableFileAttachments: isSet(object.enableFileAttachments)
        ? globalThis.Boolean(object.enableFileAttachments)
        : undefined,
      enableMobileUpload: isSet(object.enableMobileUpload) ? globalThis.Boolean(object.enableMobileUpload) : undefined,
      enableMobileDownload: isSet(object.enableMobileDownload)
        ? globalThis.Boolean(object.enableMobileDownload)
        : undefined,
      maxImageResolution: isSet(object.maxImageResolution) ? globalThis.String(object.maxImageResolution) : undefined,
      maxImageDecoderConcurrency: isSet(object.maxImageDecoderConcurrency)
        ? globalThis.String(object.maxImageDecoderConcurrency)
        : undefined,
      driverName: isSet(object.driverName) ? globalThis.String(object.driverName) : undefined,
      amazonS3AccessKeyId: isSet(object.amazonS3AccessKeyId)
        ? globalThis.String(object.amazonS3AccessKeyId)
        : undefined,
      amazonS3SecretAccessKey: isSet(object.amazonS3SecretAccessKey)
        ? globalThis.String(object.amazonS3SecretAccessKey)
        : undefined,
      amazonS3Bucket: isSet(object.amazonS3Bucket) ? globalThis.String(object.amazonS3Bucket) : undefined,
      amazonS3PathPrefix: isSet(object.amazonS3PathPrefix) ? globalThis.String(object.amazonS3PathPrefix) : undefined,
      amazonS3Region: isSet(object.amazonS3Region) ? globalThis.String(object.amazonS3Region) : undefined,
      amazonS3Endpoint: isSet(object.amazonS3Endpoint) ? globalThis.String(object.amazonS3Endpoint) : undefined,
      amazonS3Ssl: isSet(object.amazonS3Ssl) ? globalThis.Boolean(object.amazonS3Ssl) : undefined,
      amazonS3SignV2: isSet(object.amazonS3SignV2) ? globalThis.Boolean(object.amazonS3SignV2) : undefined,
      amazonS3Sse: isSet(object.amazonS3Sse) ? globalThis.Boolean(object.amazonS3Sse) : undefined,
      amazonS3Trace: isSet(object.amazonS3Trace) ? globalThis.Boolean(object.amazonS3Trace) : undefined,
      amazonS3RequestTimeoutMilliseconds: isSet(object.amazonS3RequestTimeoutMilliseconds)
        ? globalThis.String(object.amazonS3RequestTimeoutMilliseconds)
        : undefined,
      amazonS3UploadPartSizeBytes: isSet(object.amazonS3UploadPartSizeBytes)
        ? globalThis.String(object.amazonS3UploadPartSizeBytes)
        : undefined,
      amazonS3StorageClass: isSet(object.amazonS3StorageClass)
        ? globalThis.String(object.amazonS3StorageClass)
        : undefined,
    };
  },

  toJSON(message: ConfigFile): unknown {
    const obj: any = {};
    if (message.enableFileAttachments !== undefined) {
      obj.enableFileAttachments = message.enableFileAttachments;
    }
    if (message.enableMobileUpload !== undefined) {
      obj.enableMobileUpload = message.enableMobileUpload;
    }
    if (message.enableMobileDownload !== undefined) {
      obj.enableMobileDownload = message.enableMobileDownload;
    }
    if (message.maxImageResolution !== undefined) {
      obj.maxImageResolution = message.maxImageResolution;
    }
    if (message.maxImageDecoderConcurrency !== undefined) {
      obj.maxImageDecoderConcurrency = message.maxImageDecoderConcurrency;
    }
    if (message.driverName !== undefined) {
      obj.driverName = message.driverName;
    }
    if (message.amazonS3AccessKeyId !== undefined) {
      obj.amazonS3AccessKeyId = message.amazonS3AccessKeyId;
    }
    if (message.amazonS3SecretAccessKey !== undefined) {
      obj.amazonS3SecretAccessKey = message.amazonS3SecretAccessKey;
    }
    if (message.amazonS3Bucket !== undefined) {
      obj.amazonS3Bucket = message.amazonS3Bucket;
    }
    if (message.amazonS3PathPrefix !== undefined) {
      obj.amazonS3PathPrefix = message.amazonS3PathPrefix;
    }
    if (message.amazonS3Region !== undefined) {
      obj.amazonS3Region = message.amazonS3Region;
    }
    if (message.amazonS3Endpoint !== undefined) {
      obj.amazonS3Endpoint = message.amazonS3Endpoint;
    }
    if (message.amazonS3Ssl !== undefined) {
      obj.amazonS3Ssl = message.amazonS3Ssl;
    }
    if (message.amazonS3SignV2 !== undefined) {
      obj.amazonS3SignV2 = message.amazonS3SignV2;
    }
    if (message.amazonS3Sse !== undefined) {
      obj.amazonS3Sse = message.amazonS3Sse;
    }
    if (message.amazonS3Trace !== undefined) {
      obj.amazonS3Trace = message.amazonS3Trace;
    }
    if (message.amazonS3RequestTimeoutMilliseconds !== undefined) {
      obj.amazonS3RequestTimeoutMilliseconds = message.amazonS3RequestTimeoutMilliseconds;
    }
    if (message.amazonS3UploadPartSizeBytes !== undefined) {
      obj.amazonS3UploadPartSizeBytes = message.amazonS3UploadPartSizeBytes;
    }
    if (message.amazonS3StorageClass !== undefined) {
      obj.amazonS3StorageClass = message.amazonS3StorageClass;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigFile>, I>>(base?: I): ConfigFile {
    return ConfigFile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigFile>, I>>(object: I): ConfigFile {
    const message = createBaseConfigFile();
    message.enableFileAttachments = object.enableFileAttachments ?? undefined;
    message.enableMobileUpload = object.enableMobileUpload ?? undefined;
    message.enableMobileDownload = object.enableMobileDownload ?? undefined;
    message.maxImageResolution = object.maxImageResolution ?? undefined;
    message.maxImageDecoderConcurrency = object.maxImageDecoderConcurrency ?? undefined;
    message.driverName = object.driverName ?? undefined;
    message.amazonS3AccessKeyId = object.amazonS3AccessKeyId ?? undefined;
    message.amazonS3SecretAccessKey = object.amazonS3SecretAccessKey ?? undefined;
    message.amazonS3Bucket = object.amazonS3Bucket ?? undefined;
    message.amazonS3PathPrefix = object.amazonS3PathPrefix ?? undefined;
    message.amazonS3Region = object.amazonS3Region ?? undefined;
    message.amazonS3Endpoint = object.amazonS3Endpoint ?? undefined;
    message.amazonS3Ssl = object.amazonS3Ssl ?? undefined;
    message.amazonS3SignV2 = object.amazonS3SignV2 ?? undefined;
    message.amazonS3Sse = object.amazonS3Sse ?? undefined;
    message.amazonS3Trace = object.amazonS3Trace ?? undefined;
    message.amazonS3RequestTimeoutMilliseconds = object.amazonS3RequestTimeoutMilliseconds ?? undefined;
    message.amazonS3UploadPartSizeBytes = object.amazonS3UploadPartSizeBytes ?? undefined;
    message.amazonS3StorageClass = object.amazonS3StorageClass ?? undefined;
    return message;
  },
};

function createBaseConfigEmail(): ConfigEmail {
  return {
    sendEmailNotifications: undefined,
    requireEmailVerification: undefined,
    feedbackEmail: undefined,
    replyToAddress: undefined,
    enableSmtpAuth: undefined,
    smtpUsername: undefined,
    smtpPassword: undefined,
    smtpServer: undefined,
    smtpPort: undefined,
    smtpServerTimeout: undefined,
    connectionSecurity: undefined,
    sendPushNotifications: undefined,
    pushNotificationServer: undefined,
    pushNotificationContents: undefined,
    pushNotificationBuffer: undefined,
    enableEmailBatching: undefined,
    emailBatchingBufferSize: undefined,
    emailBatchingInterval: undefined,
    skipServerCertificateVerification: undefined,
    emailNotificationContentsType: undefined,
    loginButtonColor: undefined,
    loginButtonBorderColor: undefined,
    loginButtonTextColor: undefined,
    rateLimitingMemorySize: undefined,
    rateLimitingPerHour: undefined,
    rateLimitingMaxBurst: undefined,
  };
}

export const ConfigEmail: MessageFns<ConfigEmail> = {
  encode(message: ConfigEmail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sendEmailNotifications !== undefined) {
      writer.uint32(8).bool(message.sendEmailNotifications);
    }
    if (message.requireEmailVerification !== undefined) {
      writer.uint32(16).bool(message.requireEmailVerification);
    }
    if (message.feedbackEmail !== undefined) {
      writer.uint32(26).string(message.feedbackEmail);
    }
    if (message.replyToAddress !== undefined) {
      writer.uint32(34).string(message.replyToAddress);
    }
    if (message.enableSmtpAuth !== undefined) {
      writer.uint32(40).bool(message.enableSmtpAuth);
    }
    if (message.smtpUsername !== undefined) {
      writer.uint32(50).string(message.smtpUsername);
    }
    if (message.smtpPassword !== undefined) {
      writer.uint32(58).string(message.smtpPassword);
    }
    if (message.smtpServer !== undefined) {
      writer.uint32(66).string(message.smtpServer);
    }
    if (message.smtpPort !== undefined) {
      writer.uint32(74).string(message.smtpPort);
    }
    if (message.smtpServerTimeout !== undefined) {
      writer.uint32(80).int32(message.smtpServerTimeout);
    }
    if (message.connectionSecurity !== undefined) {
      writer.uint32(90).string(message.connectionSecurity);
    }
    if (message.sendPushNotifications !== undefined) {
      writer.uint32(96).bool(message.sendPushNotifications);
    }
    if (message.pushNotificationServer !== undefined) {
      writer.uint32(106).string(message.pushNotificationServer);
    }
    if (message.pushNotificationContents !== undefined) {
      writer.uint32(114).string(message.pushNotificationContents);
    }
    if (message.pushNotificationBuffer !== undefined) {
      writer.uint32(120).int32(message.pushNotificationBuffer);
    }
    if (message.enableEmailBatching !== undefined) {
      writer.uint32(128).bool(message.enableEmailBatching);
    }
    if (message.emailBatchingBufferSize !== undefined) {
      writer.uint32(136).int32(message.emailBatchingBufferSize);
    }
    if (message.emailBatchingInterval !== undefined) {
      writer.uint32(144).int32(message.emailBatchingInterval);
    }
    if (message.skipServerCertificateVerification !== undefined) {
      writer.uint32(152).bool(message.skipServerCertificateVerification);
    }
    if (message.emailNotificationContentsType !== undefined) {
      writer.uint32(162).string(message.emailNotificationContentsType);
    }
    if (message.loginButtonColor !== undefined) {
      writer.uint32(170).string(message.loginButtonColor);
    }
    if (message.loginButtonBorderColor !== undefined) {
      writer.uint32(178).string(message.loginButtonBorderColor);
    }
    if (message.loginButtonTextColor !== undefined) {
      writer.uint32(186).string(message.loginButtonTextColor);
    }
    if (message.rateLimitingMemorySize !== undefined) {
      writer.uint32(192).int32(message.rateLimitingMemorySize);
    }
    if (message.rateLimitingPerHour !== undefined) {
      writer.uint32(200).int32(message.rateLimitingPerHour);
    }
    if (message.rateLimitingMaxBurst !== undefined) {
      writer.uint32(208).int32(message.rateLimitingMaxBurst);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigEmail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigEmail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.sendEmailNotifications = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.requireEmailVerification = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.feedbackEmail = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.replyToAddress = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.enableSmtpAuth = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.smtpUsername = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.smtpPassword = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.smtpServer = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.smtpPort = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.smtpServerTimeout = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.connectionSecurity = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.sendPushNotifications = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.pushNotificationServer = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.pushNotificationContents = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.pushNotificationBuffer = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.enableEmailBatching = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.emailBatchingBufferSize = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.emailBatchingInterval = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.skipServerCertificateVerification = reader.bool();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.emailNotificationContentsType = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.loginButtonColor = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.loginButtonBorderColor = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.loginButtonTextColor = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.rateLimitingMemorySize = reader.int32();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.rateLimitingPerHour = reader.int32();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.rateLimitingMaxBurst = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigEmail {
    return {
      sendEmailNotifications: isSet(object.sendEmailNotifications)
        ? globalThis.Boolean(object.sendEmailNotifications)
        : undefined,
      requireEmailVerification: isSet(object.requireEmailVerification)
        ? globalThis.Boolean(object.requireEmailVerification)
        : undefined,
      feedbackEmail: isSet(object.feedbackEmail) ? globalThis.String(object.feedbackEmail) : undefined,
      replyToAddress: isSet(object.replyToAddress) ? globalThis.String(object.replyToAddress) : undefined,
      enableSmtpAuth: isSet(object.enableSmtpAuth) ? globalThis.Boolean(object.enableSmtpAuth) : undefined,
      smtpUsername: isSet(object.smtpUsername) ? globalThis.String(object.smtpUsername) : undefined,
      smtpPassword: isSet(object.smtpPassword) ? globalThis.String(object.smtpPassword) : undefined,
      smtpServer: isSet(object.smtpServer) ? globalThis.String(object.smtpServer) : undefined,
      smtpPort: isSet(object.smtpPort) ? globalThis.String(object.smtpPort) : undefined,
      smtpServerTimeout: isSet(object.smtpServerTimeout) ? globalThis.Number(object.smtpServerTimeout) : undefined,
      connectionSecurity: isSet(object.connectionSecurity) ? globalThis.String(object.connectionSecurity) : undefined,
      sendPushNotifications: isSet(object.sendPushNotifications)
        ? globalThis.Boolean(object.sendPushNotifications)
        : undefined,
      pushNotificationServer: isSet(object.pushNotificationServer)
        ? globalThis.String(object.pushNotificationServer)
        : undefined,
      pushNotificationContents: isSet(object.pushNotificationContents)
        ? globalThis.String(object.pushNotificationContents)
        : undefined,
      pushNotificationBuffer: isSet(object.pushNotificationBuffer)
        ? globalThis.Number(object.pushNotificationBuffer)
        : undefined,
      enableEmailBatching: isSet(object.enableEmailBatching)
        ? globalThis.Boolean(object.enableEmailBatching)
        : undefined,
      emailBatchingBufferSize: isSet(object.emailBatchingBufferSize)
        ? globalThis.Number(object.emailBatchingBufferSize)
        : undefined,
      emailBatchingInterval: isSet(object.emailBatchingInterval)
        ? globalThis.Number(object.emailBatchingInterval)
        : undefined,
      skipServerCertificateVerification: isSet(object.skipServerCertificateVerification)
        ? globalThis.Boolean(object.skipServerCertificateVerification)
        : undefined,
      emailNotificationContentsType: isSet(object.emailNotificationContentsType)
        ? globalThis.String(object.emailNotificationContentsType)
        : undefined,
      loginButtonColor: isSet(object.loginButtonColor) ? globalThis.String(object.loginButtonColor) : undefined,
      loginButtonBorderColor: isSet(object.loginButtonBorderColor)
        ? globalThis.String(object.loginButtonBorderColor)
        : undefined,
      loginButtonTextColor: isSet(object.loginButtonTextColor)
        ? globalThis.String(object.loginButtonTextColor)
        : undefined,
      rateLimitingMemorySize: isSet(object.rateLimitingMemorySize)
        ? globalThis.Number(object.rateLimitingMemorySize)
        : undefined,
      rateLimitingPerHour: isSet(object.rateLimitingPerHour)
        ? globalThis.Number(object.rateLimitingPerHour)
        : undefined,
      rateLimitingMaxBurst: isSet(object.rateLimitingMaxBurst)
        ? globalThis.Number(object.rateLimitingMaxBurst)
        : undefined,
    };
  },

  toJSON(message: ConfigEmail): unknown {
    const obj: any = {};
    if (message.sendEmailNotifications !== undefined) {
      obj.sendEmailNotifications = message.sendEmailNotifications;
    }
    if (message.requireEmailVerification !== undefined) {
      obj.requireEmailVerification = message.requireEmailVerification;
    }
    if (message.feedbackEmail !== undefined) {
      obj.feedbackEmail = message.feedbackEmail;
    }
    if (message.replyToAddress !== undefined) {
      obj.replyToAddress = message.replyToAddress;
    }
    if (message.enableSmtpAuth !== undefined) {
      obj.enableSmtpAuth = message.enableSmtpAuth;
    }
    if (message.smtpUsername !== undefined) {
      obj.smtpUsername = message.smtpUsername;
    }
    if (message.smtpPassword !== undefined) {
      obj.smtpPassword = message.smtpPassword;
    }
    if (message.smtpServer !== undefined) {
      obj.smtpServer = message.smtpServer;
    }
    if (message.smtpPort !== undefined) {
      obj.smtpPort = message.smtpPort;
    }
    if (message.smtpServerTimeout !== undefined) {
      obj.smtpServerTimeout = Math.round(message.smtpServerTimeout);
    }
    if (message.connectionSecurity !== undefined) {
      obj.connectionSecurity = message.connectionSecurity;
    }
    if (message.sendPushNotifications !== undefined) {
      obj.sendPushNotifications = message.sendPushNotifications;
    }
    if (message.pushNotificationServer !== undefined) {
      obj.pushNotificationServer = message.pushNotificationServer;
    }
    if (message.pushNotificationContents !== undefined) {
      obj.pushNotificationContents = message.pushNotificationContents;
    }
    if (message.pushNotificationBuffer !== undefined) {
      obj.pushNotificationBuffer = Math.round(message.pushNotificationBuffer);
    }
    if (message.enableEmailBatching !== undefined) {
      obj.enableEmailBatching = message.enableEmailBatching;
    }
    if (message.emailBatchingBufferSize !== undefined) {
      obj.emailBatchingBufferSize = Math.round(message.emailBatchingBufferSize);
    }
    if (message.emailBatchingInterval !== undefined) {
      obj.emailBatchingInterval = Math.round(message.emailBatchingInterval);
    }
    if (message.skipServerCertificateVerification !== undefined) {
      obj.skipServerCertificateVerification = message.skipServerCertificateVerification;
    }
    if (message.emailNotificationContentsType !== undefined) {
      obj.emailNotificationContentsType = message.emailNotificationContentsType;
    }
    if (message.loginButtonColor !== undefined) {
      obj.loginButtonColor = message.loginButtonColor;
    }
    if (message.loginButtonBorderColor !== undefined) {
      obj.loginButtonBorderColor = message.loginButtonBorderColor;
    }
    if (message.loginButtonTextColor !== undefined) {
      obj.loginButtonTextColor = message.loginButtonTextColor;
    }
    if (message.rateLimitingMemorySize !== undefined) {
      obj.rateLimitingMemorySize = Math.round(message.rateLimitingMemorySize);
    }
    if (message.rateLimitingPerHour !== undefined) {
      obj.rateLimitingPerHour = Math.round(message.rateLimitingPerHour);
    }
    if (message.rateLimitingMaxBurst !== undefined) {
      obj.rateLimitingMaxBurst = Math.round(message.rateLimitingMaxBurst);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigEmail>, I>>(base?: I): ConfigEmail {
    return ConfigEmail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigEmail>, I>>(object: I): ConfigEmail {
    const message = createBaseConfigEmail();
    message.sendEmailNotifications = object.sendEmailNotifications ?? undefined;
    message.requireEmailVerification = object.requireEmailVerification ?? undefined;
    message.feedbackEmail = object.feedbackEmail ?? undefined;
    message.replyToAddress = object.replyToAddress ?? undefined;
    message.enableSmtpAuth = object.enableSmtpAuth ?? undefined;
    message.smtpUsername = object.smtpUsername ?? undefined;
    message.smtpPassword = object.smtpPassword ?? undefined;
    message.smtpServer = object.smtpServer ?? undefined;
    message.smtpPort = object.smtpPort ?? undefined;
    message.smtpServerTimeout = object.smtpServerTimeout ?? undefined;
    message.connectionSecurity = object.connectionSecurity ?? undefined;
    message.sendPushNotifications = object.sendPushNotifications ?? undefined;
    message.pushNotificationServer = object.pushNotificationServer ?? undefined;
    message.pushNotificationContents = object.pushNotificationContents ?? undefined;
    message.pushNotificationBuffer = object.pushNotificationBuffer ?? undefined;
    message.enableEmailBatching = object.enableEmailBatching ?? undefined;
    message.emailBatchingBufferSize = object.emailBatchingBufferSize ?? undefined;
    message.emailBatchingInterval = object.emailBatchingInterval ?? undefined;
    message.skipServerCertificateVerification = object.skipServerCertificateVerification ?? undefined;
    message.emailNotificationContentsType = object.emailNotificationContentsType ?? undefined;
    message.loginButtonColor = object.loginButtonColor ?? undefined;
    message.loginButtonBorderColor = object.loginButtonBorderColor ?? undefined;
    message.loginButtonTextColor = object.loginButtonTextColor ?? undefined;
    message.rateLimitingMemorySize = object.rateLimitingMemorySize ?? undefined;
    message.rateLimitingPerHour = object.rateLimitingPerHour ?? undefined;
    message.rateLimitingMaxBurst = object.rateLimitingMaxBurst ?? undefined;
    return message;
  },
};

function createBaseConfigRateLimit(): ConfigRateLimit {
  return {
    enable: undefined,
    perSec: undefined,
    maxBurst: undefined,
    memoryStoreSize: undefined,
    varyByRemoteAddr: undefined,
    varyByUser: undefined,
    varyByHeader: "",
  };
}

export const ConfigRateLimit: MessageFns<ConfigRateLimit> = {
  encode(message: ConfigRateLimit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enable !== undefined) {
      writer.uint32(8).bool(message.enable);
    }
    if (message.perSec !== undefined) {
      writer.uint32(16).int32(message.perSec);
    }
    if (message.maxBurst !== undefined) {
      writer.uint32(24).int32(message.maxBurst);
    }
    if (message.memoryStoreSize !== undefined) {
      writer.uint32(32).int32(message.memoryStoreSize);
    }
    if (message.varyByRemoteAddr !== undefined) {
      writer.uint32(40).bool(message.varyByRemoteAddr);
    }
    if (message.varyByUser !== undefined) {
      writer.uint32(48).bool(message.varyByUser);
    }
    if (message.varyByHeader !== "") {
      writer.uint32(58).string(message.varyByHeader);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigRateLimit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigRateLimit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enable = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.perSec = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.maxBurst = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.memoryStoreSize = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.varyByRemoteAddr = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.varyByUser = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.varyByHeader = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigRateLimit {
    return {
      enable: isSet(object.enable) ? globalThis.Boolean(object.enable) : undefined,
      perSec: isSet(object.perSec) ? globalThis.Number(object.perSec) : undefined,
      maxBurst: isSet(object.maxBurst) ? globalThis.Number(object.maxBurst) : undefined,
      memoryStoreSize: isSet(object.memoryStoreSize) ? globalThis.Number(object.memoryStoreSize) : undefined,
      varyByRemoteAddr: isSet(object.varyByRemoteAddr) ? globalThis.Boolean(object.varyByRemoteAddr) : undefined,
      varyByUser: isSet(object.varyByUser) ? globalThis.Boolean(object.varyByUser) : undefined,
      varyByHeader: isSet(object.varyByHeader) ? globalThis.String(object.varyByHeader) : "",
    };
  },

  toJSON(message: ConfigRateLimit): unknown {
    const obj: any = {};
    if (message.enable !== undefined) {
      obj.enable = message.enable;
    }
    if (message.perSec !== undefined) {
      obj.perSec = Math.round(message.perSec);
    }
    if (message.maxBurst !== undefined) {
      obj.maxBurst = Math.round(message.maxBurst);
    }
    if (message.memoryStoreSize !== undefined) {
      obj.memoryStoreSize = Math.round(message.memoryStoreSize);
    }
    if (message.varyByRemoteAddr !== undefined) {
      obj.varyByRemoteAddr = message.varyByRemoteAddr;
    }
    if (message.varyByUser !== undefined) {
      obj.varyByUser = message.varyByUser;
    }
    if (message.varyByHeader !== "") {
      obj.varyByHeader = message.varyByHeader;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigRateLimit>, I>>(base?: I): ConfigRateLimit {
    return ConfigRateLimit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigRateLimit>, I>>(object: I): ConfigRateLimit {
    const message = createBaseConfigRateLimit();
    message.enable = object.enable ?? undefined;
    message.perSec = object.perSec ?? undefined;
    message.maxBurst = object.maxBurst ?? undefined;
    message.memoryStoreSize = object.memoryStoreSize ?? undefined;
    message.varyByRemoteAddr = object.varyByRemoteAddr ?? undefined;
    message.varyByUser = object.varyByUser ?? undefined;
    message.varyByHeader = object.varyByHeader ?? "";
    return message;
  },
};

function createBaseConfigPrivacy(): ConfigPrivacy {
  return { showEmailAddress: undefined, showFullName: undefined };
}

export const ConfigPrivacy: MessageFns<ConfigPrivacy> = {
  encode(message: ConfigPrivacy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.showEmailAddress !== undefined) {
      writer.uint32(8).bool(message.showEmailAddress);
    }
    if (message.showFullName !== undefined) {
      writer.uint32(16).bool(message.showFullName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigPrivacy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigPrivacy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.showEmailAddress = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.showFullName = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigPrivacy {
    return {
      showEmailAddress: isSet(object.showEmailAddress) ? globalThis.Boolean(object.showEmailAddress) : undefined,
      showFullName: isSet(object.showFullName) ? globalThis.Boolean(object.showFullName) : undefined,
    };
  },

  toJSON(message: ConfigPrivacy): unknown {
    const obj: any = {};
    if (message.showEmailAddress !== undefined) {
      obj.showEmailAddress = message.showEmailAddress;
    }
    if (message.showFullName !== undefined) {
      obj.showFullName = message.showFullName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigPrivacy>, I>>(base?: I): ConfigPrivacy {
    return ConfigPrivacy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigPrivacy>, I>>(object: I): ConfigPrivacy {
    const message = createBaseConfigPrivacy();
    message.showEmailAddress = object.showEmailAddress ?? undefined;
    message.showFullName = object.showFullName ?? undefined;
    return message;
  },
};

function createBaseConfigSupport(): ConfigSupport {
  return {
    termsOfServiceLink: undefined,
    privacyPolicyLink: undefined,
    aboutLink: undefined,
    helpLink: undefined,
    reportAProblemLink: undefined,
    forgotPasswordLink: undefined,
    supportEmail: undefined,
  };
}

export const ConfigSupport: MessageFns<ConfigSupport> = {
  encode(message: ConfigSupport, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.termsOfServiceLink !== undefined) {
      writer.uint32(10).string(message.termsOfServiceLink);
    }
    if (message.privacyPolicyLink !== undefined) {
      writer.uint32(18).string(message.privacyPolicyLink);
    }
    if (message.aboutLink !== undefined) {
      writer.uint32(26).string(message.aboutLink);
    }
    if (message.helpLink !== undefined) {
      writer.uint32(34).string(message.helpLink);
    }
    if (message.reportAProblemLink !== undefined) {
      writer.uint32(42).string(message.reportAProblemLink);
    }
    if (message.forgotPasswordLink !== undefined) {
      writer.uint32(50).string(message.forgotPasswordLink);
    }
    if (message.supportEmail !== undefined) {
      writer.uint32(58).string(message.supportEmail);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigSupport {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigSupport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.termsOfServiceLink = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.privacyPolicyLink = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.aboutLink = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.helpLink = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.reportAProblemLink = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.forgotPasswordLink = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.supportEmail = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigSupport {
    return {
      termsOfServiceLink: isSet(object.termsOfServiceLink) ? globalThis.String(object.termsOfServiceLink) : undefined,
      privacyPolicyLink: isSet(object.privacyPolicyLink) ? globalThis.String(object.privacyPolicyLink) : undefined,
      aboutLink: isSet(object.aboutLink) ? globalThis.String(object.aboutLink) : undefined,
      helpLink: isSet(object.helpLink) ? globalThis.String(object.helpLink) : undefined,
      reportAProblemLink: isSet(object.reportAProblemLink) ? globalThis.String(object.reportAProblemLink) : undefined,
      forgotPasswordLink: isSet(object.forgotPasswordLink) ? globalThis.String(object.forgotPasswordLink) : undefined,
      supportEmail: isSet(object.supportEmail) ? globalThis.String(object.supportEmail) : undefined,
    };
  },

  toJSON(message: ConfigSupport): unknown {
    const obj: any = {};
    if (message.termsOfServiceLink !== undefined) {
      obj.termsOfServiceLink = message.termsOfServiceLink;
    }
    if (message.privacyPolicyLink !== undefined) {
      obj.privacyPolicyLink = message.privacyPolicyLink;
    }
    if (message.aboutLink !== undefined) {
      obj.aboutLink = message.aboutLink;
    }
    if (message.helpLink !== undefined) {
      obj.helpLink = message.helpLink;
    }
    if (message.reportAProblemLink !== undefined) {
      obj.reportAProblemLink = message.reportAProblemLink;
    }
    if (message.forgotPasswordLink !== undefined) {
      obj.forgotPasswordLink = message.forgotPasswordLink;
    }
    if (message.supportEmail !== undefined) {
      obj.supportEmail = message.supportEmail;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigSupport>, I>>(base?: I): ConfigSupport {
    return ConfigSupport.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigSupport>, I>>(object: I): ConfigSupport {
    const message = createBaseConfigSupport();
    message.termsOfServiceLink = object.termsOfServiceLink ?? undefined;
    message.privacyPolicyLink = object.privacyPolicyLink ?? undefined;
    message.aboutLink = object.aboutLink ?? undefined;
    message.helpLink = object.helpLink ?? undefined;
    message.reportAProblemLink = object.reportAProblemLink ?? undefined;
    message.forgotPasswordLink = object.forgotPasswordLink ?? undefined;
    message.supportEmail = object.supportEmail ?? undefined;
    return message;
  },
};

function createBaseConfigLocalization(): ConfigLocalization {
  return { defaultServerLocale: undefined, defaultClientLocale: undefined, availableLocales: [] };
}

export const ConfigLocalization: MessageFns<ConfigLocalization> = {
  encode(message: ConfigLocalization, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.defaultServerLocale !== undefined) {
      writer.uint32(10).string(message.defaultServerLocale);
    }
    if (message.defaultClientLocale !== undefined) {
      writer.uint32(18).string(message.defaultClientLocale);
    }
    for (const v of message.availableLocales) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigLocalization {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigLocalization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.defaultServerLocale = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.defaultClientLocale = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.availableLocales.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigLocalization {
    return {
      defaultServerLocale: isSet(object.defaultServerLocale)
        ? globalThis.String(object.defaultServerLocale)
        : undefined,
      defaultClientLocale: isSet(object.defaultClientLocale)
        ? globalThis.String(object.defaultClientLocale)
        : undefined,
      availableLocales: globalThis.Array.isArray(object?.availableLocales)
        ? object.availableLocales.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ConfigLocalization): unknown {
    const obj: any = {};
    if (message.defaultServerLocale !== undefined) {
      obj.defaultServerLocale = message.defaultServerLocale;
    }
    if (message.defaultClientLocale !== undefined) {
      obj.defaultClientLocale = message.defaultClientLocale;
    }
    if (message.availableLocales?.length) {
      obj.availableLocales = message.availableLocales;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigLocalization>, I>>(base?: I): ConfigLocalization {
    return ConfigLocalization.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigLocalization>, I>>(object: I): ConfigLocalization {
    const message = createBaseConfigLocalization();
    message.defaultServerLocale = object.defaultServerLocale ?? undefined;
    message.defaultClientLocale = object.defaultClientLocale ?? undefined;
    message.availableLocales = object.availableLocales?.map((e) => e) || [];
    return message;
  },
};

function createBaseConfigLdap(): ConfigLdap {
  return {
    enable: undefined,
    enableSync: undefined,
    ldapServer: undefined,
    ldapPort: undefined,
    connectionSecurity: undefined,
    baseDn: undefined,
    bindUsername: undefined,
    bindPassword: undefined,
    maximumLoginAttempts: undefined,
    userFilter: undefined,
    groupFilter: undefined,
    enableAdminFilter: undefined,
    adminFilter: undefined,
    groupDisplayNameAttribute: undefined,
    groupIdAttribute: undefined,
    firstNameAttribute: undefined,
    lastNameAttribute: undefined,
    emailAttribute: undefined,
    usernameAttribute: undefined,
    nicknameAttribute: undefined,
    idAttribute: undefined,
    positionAttribute: undefined,
    loginIdAttribute: undefined,
    pictureAttribute: undefined,
    syncIntervalMinutes: undefined,
    queryTimeout: undefined,
    maxPageSize: undefined,
    loginFieldName: undefined,
    loginButtonColor: undefined,
    loginButtonBorderColor: undefined,
    loginButtonTextColor: undefined,
  };
}

export const ConfigLdap: MessageFns<ConfigLdap> = {
  encode(message: ConfigLdap, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enable !== undefined) {
      writer.uint32(8).bool(message.enable);
    }
    if (message.enableSync !== undefined) {
      writer.uint32(16).bool(message.enableSync);
    }
    if (message.ldapServer !== undefined) {
      writer.uint32(26).string(message.ldapServer);
    }
    if (message.ldapPort !== undefined) {
      writer.uint32(32).int32(message.ldapPort);
    }
    if (message.connectionSecurity !== undefined) {
      writer.uint32(42).string(message.connectionSecurity);
    }
    if (message.baseDn !== undefined) {
      writer.uint32(50).string(message.baseDn);
    }
    if (message.bindUsername !== undefined) {
      writer.uint32(58).string(message.bindUsername);
    }
    if (message.bindPassword !== undefined) {
      writer.uint32(66).string(message.bindPassword);
    }
    if (message.maximumLoginAttempts !== undefined) {
      writer.uint32(72).int32(message.maximumLoginAttempts);
    }
    if (message.userFilter !== undefined) {
      writer.uint32(82).string(message.userFilter);
    }
    if (message.groupFilter !== undefined) {
      writer.uint32(90).string(message.groupFilter);
    }
    if (message.enableAdminFilter !== undefined) {
      writer.uint32(96).bool(message.enableAdminFilter);
    }
    if (message.adminFilter !== undefined) {
      writer.uint32(106).string(message.adminFilter);
    }
    if (message.groupDisplayNameAttribute !== undefined) {
      writer.uint32(114).string(message.groupDisplayNameAttribute);
    }
    if (message.groupIdAttribute !== undefined) {
      writer.uint32(122).string(message.groupIdAttribute);
    }
    if (message.firstNameAttribute !== undefined) {
      writer.uint32(130).string(message.firstNameAttribute);
    }
    if (message.lastNameAttribute !== undefined) {
      writer.uint32(138).string(message.lastNameAttribute);
    }
    if (message.emailAttribute !== undefined) {
      writer.uint32(146).string(message.emailAttribute);
    }
    if (message.usernameAttribute !== undefined) {
      writer.uint32(154).string(message.usernameAttribute);
    }
    if (message.nicknameAttribute !== undefined) {
      writer.uint32(162).string(message.nicknameAttribute);
    }
    if (message.idAttribute !== undefined) {
      writer.uint32(170).string(message.idAttribute);
    }
    if (message.positionAttribute !== undefined) {
      writer.uint32(178).string(message.positionAttribute);
    }
    if (message.loginIdAttribute !== undefined) {
      writer.uint32(186).string(message.loginIdAttribute);
    }
    if (message.pictureAttribute !== undefined) {
      writer.uint32(194).string(message.pictureAttribute);
    }
    if (message.syncIntervalMinutes !== undefined) {
      writer.uint32(200).int32(message.syncIntervalMinutes);
    }
    if (message.queryTimeout !== undefined) {
      writer.uint32(208).int32(message.queryTimeout);
    }
    if (message.maxPageSize !== undefined) {
      writer.uint32(216).int32(message.maxPageSize);
    }
    if (message.loginFieldName !== undefined) {
      writer.uint32(226).string(message.loginFieldName);
    }
    if (message.loginButtonColor !== undefined) {
      writer.uint32(234).string(message.loginButtonColor);
    }
    if (message.loginButtonBorderColor !== undefined) {
      writer.uint32(242).string(message.loginButtonBorderColor);
    }
    if (message.loginButtonTextColor !== undefined) {
      writer.uint32(250).string(message.loginButtonTextColor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigLdap {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigLdap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enable = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.enableSync = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ldapServer = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.ldapPort = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.connectionSecurity = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.baseDn = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.bindUsername = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.bindPassword = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.maximumLoginAttempts = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.userFilter = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.groupFilter = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.enableAdminFilter = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.adminFilter = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.groupDisplayNameAttribute = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.groupIdAttribute = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.firstNameAttribute = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.lastNameAttribute = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.emailAttribute = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.usernameAttribute = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.nicknameAttribute = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.idAttribute = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.positionAttribute = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.loginIdAttribute = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.pictureAttribute = reader.string();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.syncIntervalMinutes = reader.int32();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.queryTimeout = reader.int32();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.maxPageSize = reader.int32();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.loginFieldName = reader.string();
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.loginButtonColor = reader.string();
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.loginButtonBorderColor = reader.string();
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.loginButtonTextColor = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigLdap {
    return {
      enable: isSet(object.enable) ? globalThis.Boolean(object.enable) : undefined,
      enableSync: isSet(object.enableSync) ? globalThis.Boolean(object.enableSync) : undefined,
      ldapServer: isSet(object.ldapServer) ? globalThis.String(object.ldapServer) : undefined,
      ldapPort: isSet(object.ldapPort) ? globalThis.Number(object.ldapPort) : undefined,
      connectionSecurity: isSet(object.connectionSecurity) ? globalThis.String(object.connectionSecurity) : undefined,
      baseDn: isSet(object.baseDn) ? globalThis.String(object.baseDn) : undefined,
      bindUsername: isSet(object.bindUsername) ? globalThis.String(object.bindUsername) : undefined,
      bindPassword: isSet(object.bindPassword) ? globalThis.String(object.bindPassword) : undefined,
      maximumLoginAttempts: isSet(object.maximumLoginAttempts)
        ? globalThis.Number(object.maximumLoginAttempts)
        : undefined,
      userFilter: isSet(object.userFilter) ? globalThis.String(object.userFilter) : undefined,
      groupFilter: isSet(object.groupFilter) ? globalThis.String(object.groupFilter) : undefined,
      enableAdminFilter: isSet(object.enableAdminFilter) ? globalThis.Boolean(object.enableAdminFilter) : undefined,
      adminFilter: isSet(object.adminFilter) ? globalThis.String(object.adminFilter) : undefined,
      groupDisplayNameAttribute: isSet(object.groupDisplayNameAttribute)
        ? globalThis.String(object.groupDisplayNameAttribute)
        : undefined,
      groupIdAttribute: isSet(object.groupIdAttribute) ? globalThis.String(object.groupIdAttribute) : undefined,
      firstNameAttribute: isSet(object.firstNameAttribute) ? globalThis.String(object.firstNameAttribute) : undefined,
      lastNameAttribute: isSet(object.lastNameAttribute) ? globalThis.String(object.lastNameAttribute) : undefined,
      emailAttribute: isSet(object.emailAttribute) ? globalThis.String(object.emailAttribute) : undefined,
      usernameAttribute: isSet(object.usernameAttribute) ? globalThis.String(object.usernameAttribute) : undefined,
      nicknameAttribute: isSet(object.nicknameAttribute) ? globalThis.String(object.nicknameAttribute) : undefined,
      idAttribute: isSet(object.idAttribute) ? globalThis.String(object.idAttribute) : undefined,
      positionAttribute: isSet(object.positionAttribute) ? globalThis.String(object.positionAttribute) : undefined,
      loginIdAttribute: isSet(object.loginIdAttribute) ? globalThis.String(object.loginIdAttribute) : undefined,
      pictureAttribute: isSet(object.pictureAttribute) ? globalThis.String(object.pictureAttribute) : undefined,
      syncIntervalMinutes: isSet(object.syncIntervalMinutes)
        ? globalThis.Number(object.syncIntervalMinutes)
        : undefined,
      queryTimeout: isSet(object.queryTimeout) ? globalThis.Number(object.queryTimeout) : undefined,
      maxPageSize: isSet(object.maxPageSize) ? globalThis.Number(object.maxPageSize) : undefined,
      loginFieldName: isSet(object.loginFieldName) ? globalThis.String(object.loginFieldName) : undefined,
      loginButtonColor: isSet(object.loginButtonColor) ? globalThis.String(object.loginButtonColor) : undefined,
      loginButtonBorderColor: isSet(object.loginButtonBorderColor)
        ? globalThis.String(object.loginButtonBorderColor)
        : undefined,
      loginButtonTextColor: isSet(object.loginButtonTextColor)
        ? globalThis.String(object.loginButtonTextColor)
        : undefined,
    };
  },

  toJSON(message: ConfigLdap): unknown {
    const obj: any = {};
    if (message.enable !== undefined) {
      obj.enable = message.enable;
    }
    if (message.enableSync !== undefined) {
      obj.enableSync = message.enableSync;
    }
    if (message.ldapServer !== undefined) {
      obj.ldapServer = message.ldapServer;
    }
    if (message.ldapPort !== undefined) {
      obj.ldapPort = Math.round(message.ldapPort);
    }
    if (message.connectionSecurity !== undefined) {
      obj.connectionSecurity = message.connectionSecurity;
    }
    if (message.baseDn !== undefined) {
      obj.baseDn = message.baseDn;
    }
    if (message.bindUsername !== undefined) {
      obj.bindUsername = message.bindUsername;
    }
    if (message.bindPassword !== undefined) {
      obj.bindPassword = message.bindPassword;
    }
    if (message.maximumLoginAttempts !== undefined) {
      obj.maximumLoginAttempts = Math.round(message.maximumLoginAttempts);
    }
    if (message.userFilter !== undefined) {
      obj.userFilter = message.userFilter;
    }
    if (message.groupFilter !== undefined) {
      obj.groupFilter = message.groupFilter;
    }
    if (message.enableAdminFilter !== undefined) {
      obj.enableAdminFilter = message.enableAdminFilter;
    }
    if (message.adminFilter !== undefined) {
      obj.adminFilter = message.adminFilter;
    }
    if (message.groupDisplayNameAttribute !== undefined) {
      obj.groupDisplayNameAttribute = message.groupDisplayNameAttribute;
    }
    if (message.groupIdAttribute !== undefined) {
      obj.groupIdAttribute = message.groupIdAttribute;
    }
    if (message.firstNameAttribute !== undefined) {
      obj.firstNameAttribute = message.firstNameAttribute;
    }
    if (message.lastNameAttribute !== undefined) {
      obj.lastNameAttribute = message.lastNameAttribute;
    }
    if (message.emailAttribute !== undefined) {
      obj.emailAttribute = message.emailAttribute;
    }
    if (message.usernameAttribute !== undefined) {
      obj.usernameAttribute = message.usernameAttribute;
    }
    if (message.nicknameAttribute !== undefined) {
      obj.nicknameAttribute = message.nicknameAttribute;
    }
    if (message.idAttribute !== undefined) {
      obj.idAttribute = message.idAttribute;
    }
    if (message.positionAttribute !== undefined) {
      obj.positionAttribute = message.positionAttribute;
    }
    if (message.loginIdAttribute !== undefined) {
      obj.loginIdAttribute = message.loginIdAttribute;
    }
    if (message.pictureAttribute !== undefined) {
      obj.pictureAttribute = message.pictureAttribute;
    }
    if (message.syncIntervalMinutes !== undefined) {
      obj.syncIntervalMinutes = Math.round(message.syncIntervalMinutes);
    }
    if (message.queryTimeout !== undefined) {
      obj.queryTimeout = Math.round(message.queryTimeout);
    }
    if (message.maxPageSize !== undefined) {
      obj.maxPageSize = Math.round(message.maxPageSize);
    }
    if (message.loginFieldName !== undefined) {
      obj.loginFieldName = message.loginFieldName;
    }
    if (message.loginButtonColor !== undefined) {
      obj.loginButtonColor = message.loginButtonColor;
    }
    if (message.loginButtonBorderColor !== undefined) {
      obj.loginButtonBorderColor = message.loginButtonBorderColor;
    }
    if (message.loginButtonTextColor !== undefined) {
      obj.loginButtonTextColor = message.loginButtonTextColor;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigLdap>, I>>(base?: I): ConfigLdap {
    return ConfigLdap.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigLdap>, I>>(object: I): ConfigLdap {
    const message = createBaseConfigLdap();
    message.enable = object.enable ?? undefined;
    message.enableSync = object.enableSync ?? undefined;
    message.ldapServer = object.ldapServer ?? undefined;
    message.ldapPort = object.ldapPort ?? undefined;
    message.connectionSecurity = object.connectionSecurity ?? undefined;
    message.baseDn = object.baseDn ?? undefined;
    message.bindUsername = object.bindUsername ?? undefined;
    message.bindPassword = object.bindPassword ?? undefined;
    message.maximumLoginAttempts = object.maximumLoginAttempts ?? undefined;
    message.userFilter = object.userFilter ?? undefined;
    message.groupFilter = object.groupFilter ?? undefined;
    message.enableAdminFilter = object.enableAdminFilter ?? undefined;
    message.adminFilter = object.adminFilter ?? undefined;
    message.groupDisplayNameAttribute = object.groupDisplayNameAttribute ?? undefined;
    message.groupIdAttribute = object.groupIdAttribute ?? undefined;
    message.firstNameAttribute = object.firstNameAttribute ?? undefined;
    message.lastNameAttribute = object.lastNameAttribute ?? undefined;
    message.emailAttribute = object.emailAttribute ?? undefined;
    message.usernameAttribute = object.usernameAttribute ?? undefined;
    message.nicknameAttribute = object.nicknameAttribute ?? undefined;
    message.idAttribute = object.idAttribute ?? undefined;
    message.positionAttribute = object.positionAttribute ?? undefined;
    message.loginIdAttribute = object.loginIdAttribute ?? undefined;
    message.pictureAttribute = object.pictureAttribute ?? undefined;
    message.syncIntervalMinutes = object.syncIntervalMinutes ?? undefined;
    message.queryTimeout = object.queryTimeout ?? undefined;
    message.maxPageSize = object.maxPageSize ?? undefined;
    message.loginFieldName = object.loginFieldName ?? undefined;
    message.loginButtonColor = object.loginButtonColor ?? undefined;
    message.loginButtonBorderColor = object.loginButtonBorderColor ?? undefined;
    message.loginButtonTextColor = object.loginButtonTextColor ?? undefined;
    return message;
  },
};

function createBaseConfigSaml(): ConfigSaml {
  return {
    enable: undefined,
    enableSyncWithLdap: undefined,
    enableSyncWithLdapIncludeAuth: undefined,
    ignoreGuestsLdapSync: undefined,
    verify: undefined,
    encrypt: undefined,
    signRequest: undefined,
    idpUrl: undefined,
    idpDescriptorUrl: undefined,
    idpMetadataUrl: undefined,
    serviceProviderIdentifier: undefined,
    assertionConsumerServiceUrl: undefined,
    signatureAlgorithm: undefined,
    canonicalAlgorithm: undefined,
    scopingIdpProviderId: undefined,
    scopingIdpName: undefined,
    idpCertificateFile: undefined,
    publicCertificateFile: undefined,
    privateKeyFile: undefined,
    idAttribute: undefined,
    enableAdminAttribute: undefined,
    adminAttribute: undefined,
    firstNameAttribute: undefined,
    lastNameAttribute: undefined,
    emailAttribute: undefined,
    usernameAttribute: undefined,
    nicknameAttribute: undefined,
    localeAttribute: undefined,
    positionAttribute: undefined,
    loginButtonText: undefined,
    loginButtonColor: undefined,
    loginButtonBorderColor: undefined,
    loginButtonTextColor: undefined,
  };
}

export const ConfigSaml: MessageFns<ConfigSaml> = {
  encode(message: ConfigSaml, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enable !== undefined) {
      writer.uint32(8).bool(message.enable);
    }
    if (message.enableSyncWithLdap !== undefined) {
      writer.uint32(16).bool(message.enableSyncWithLdap);
    }
    if (message.enableSyncWithLdapIncludeAuth !== undefined) {
      writer.uint32(24).bool(message.enableSyncWithLdapIncludeAuth);
    }
    if (message.ignoreGuestsLdapSync !== undefined) {
      writer.uint32(32).bool(message.ignoreGuestsLdapSync);
    }
    if (message.verify !== undefined) {
      writer.uint32(40).bool(message.verify);
    }
    if (message.encrypt !== undefined) {
      writer.uint32(48).bool(message.encrypt);
    }
    if (message.signRequest !== undefined) {
      writer.uint32(56).bool(message.signRequest);
    }
    if (message.idpUrl !== undefined) {
      writer.uint32(66).string(message.idpUrl);
    }
    if (message.idpDescriptorUrl !== undefined) {
      writer.uint32(74).string(message.idpDescriptorUrl);
    }
    if (message.idpMetadataUrl !== undefined) {
      writer.uint32(82).string(message.idpMetadataUrl);
    }
    if (message.serviceProviderIdentifier !== undefined) {
      writer.uint32(90).string(message.serviceProviderIdentifier);
    }
    if (message.assertionConsumerServiceUrl !== undefined) {
      writer.uint32(98).string(message.assertionConsumerServiceUrl);
    }
    if (message.signatureAlgorithm !== undefined) {
      writer.uint32(106).string(message.signatureAlgorithm);
    }
    if (message.canonicalAlgorithm !== undefined) {
      writer.uint32(114).string(message.canonicalAlgorithm);
    }
    if (message.scopingIdpProviderId !== undefined) {
      writer.uint32(122).string(message.scopingIdpProviderId);
    }
    if (message.scopingIdpName !== undefined) {
      writer.uint32(130).string(message.scopingIdpName);
    }
    if (message.idpCertificateFile !== undefined) {
      writer.uint32(138).string(message.idpCertificateFile);
    }
    if (message.publicCertificateFile !== undefined) {
      writer.uint32(146).string(message.publicCertificateFile);
    }
    if (message.privateKeyFile !== undefined) {
      writer.uint32(154).string(message.privateKeyFile);
    }
    if (message.idAttribute !== undefined) {
      writer.uint32(162).string(message.idAttribute);
    }
    if (message.enableAdminAttribute !== undefined) {
      writer.uint32(168).bool(message.enableAdminAttribute);
    }
    if (message.adminAttribute !== undefined) {
      writer.uint32(178).string(message.adminAttribute);
    }
    if (message.firstNameAttribute !== undefined) {
      writer.uint32(186).string(message.firstNameAttribute);
    }
    if (message.lastNameAttribute !== undefined) {
      writer.uint32(194).string(message.lastNameAttribute);
    }
    if (message.emailAttribute !== undefined) {
      writer.uint32(202).string(message.emailAttribute);
    }
    if (message.usernameAttribute !== undefined) {
      writer.uint32(210).string(message.usernameAttribute);
    }
    if (message.nicknameAttribute !== undefined) {
      writer.uint32(218).string(message.nicknameAttribute);
    }
    if (message.localeAttribute !== undefined) {
      writer.uint32(226).string(message.localeAttribute);
    }
    if (message.positionAttribute !== undefined) {
      writer.uint32(234).string(message.positionAttribute);
    }
    if (message.loginButtonText !== undefined) {
      writer.uint32(242).string(message.loginButtonText);
    }
    if (message.loginButtonColor !== undefined) {
      writer.uint32(250).string(message.loginButtonColor);
    }
    if (message.loginButtonBorderColor !== undefined) {
      writer.uint32(258).string(message.loginButtonBorderColor);
    }
    if (message.loginButtonTextColor !== undefined) {
      writer.uint32(266).string(message.loginButtonTextColor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigSaml {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigSaml();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enable = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.enableSyncWithLdap = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.enableSyncWithLdapIncludeAuth = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.ignoreGuestsLdapSync = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.verify = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.encrypt = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.signRequest = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.idpUrl = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.idpDescriptorUrl = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.idpMetadataUrl = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.serviceProviderIdentifier = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.assertionConsumerServiceUrl = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.signatureAlgorithm = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.canonicalAlgorithm = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.scopingIdpProviderId = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.scopingIdpName = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.idpCertificateFile = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.publicCertificateFile = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.privateKeyFile = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.idAttribute = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.enableAdminAttribute = reader.bool();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.adminAttribute = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.firstNameAttribute = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.lastNameAttribute = reader.string();
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.emailAttribute = reader.string();
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.usernameAttribute = reader.string();
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.nicknameAttribute = reader.string();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.localeAttribute = reader.string();
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.positionAttribute = reader.string();
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.loginButtonText = reader.string();
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.loginButtonColor = reader.string();
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.loginButtonBorderColor = reader.string();
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.loginButtonTextColor = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigSaml {
    return {
      enable: isSet(object.enable) ? globalThis.Boolean(object.enable) : undefined,
      enableSyncWithLdap: isSet(object.enableSyncWithLdap) ? globalThis.Boolean(object.enableSyncWithLdap) : undefined,
      enableSyncWithLdapIncludeAuth: isSet(object.enableSyncWithLdapIncludeAuth)
        ? globalThis.Boolean(object.enableSyncWithLdapIncludeAuth)
        : undefined,
      ignoreGuestsLdapSync: isSet(object.ignoreGuestsLdapSync)
        ? globalThis.Boolean(object.ignoreGuestsLdapSync)
        : undefined,
      verify: isSet(object.verify) ? globalThis.Boolean(object.verify) : undefined,
      encrypt: isSet(object.encrypt) ? globalThis.Boolean(object.encrypt) : undefined,
      signRequest: isSet(object.signRequest) ? globalThis.Boolean(object.signRequest) : undefined,
      idpUrl: isSet(object.idpUrl) ? globalThis.String(object.idpUrl) : undefined,
      idpDescriptorUrl: isSet(object.idpDescriptorUrl) ? globalThis.String(object.idpDescriptorUrl) : undefined,
      idpMetadataUrl: isSet(object.idpMetadataUrl) ? globalThis.String(object.idpMetadataUrl) : undefined,
      serviceProviderIdentifier: isSet(object.serviceProviderIdentifier)
        ? globalThis.String(object.serviceProviderIdentifier)
        : undefined,
      assertionConsumerServiceUrl: isSet(object.assertionConsumerServiceUrl)
        ? globalThis.String(object.assertionConsumerServiceUrl)
        : undefined,
      signatureAlgorithm: isSet(object.signatureAlgorithm) ? globalThis.String(object.signatureAlgorithm) : undefined,
      canonicalAlgorithm: isSet(object.canonicalAlgorithm) ? globalThis.String(object.canonicalAlgorithm) : undefined,
      scopingIdpProviderId: isSet(object.scopingIdpProviderId)
        ? globalThis.String(object.scopingIdpProviderId)
        : undefined,
      scopingIdpName: isSet(object.scopingIdpName) ? globalThis.String(object.scopingIdpName) : undefined,
      idpCertificateFile: isSet(object.idpCertificateFile) ? globalThis.String(object.idpCertificateFile) : undefined,
      publicCertificateFile: isSet(object.publicCertificateFile)
        ? globalThis.String(object.publicCertificateFile)
        : undefined,
      privateKeyFile: isSet(object.privateKeyFile) ? globalThis.String(object.privateKeyFile) : undefined,
      idAttribute: isSet(object.idAttribute) ? globalThis.String(object.idAttribute) : undefined,
      enableAdminAttribute: isSet(object.enableAdminAttribute)
        ? globalThis.Boolean(object.enableAdminAttribute)
        : undefined,
      adminAttribute: isSet(object.adminAttribute) ? globalThis.String(object.adminAttribute) : undefined,
      firstNameAttribute: isSet(object.firstNameAttribute) ? globalThis.String(object.firstNameAttribute) : undefined,
      lastNameAttribute: isSet(object.lastNameAttribute) ? globalThis.String(object.lastNameAttribute) : undefined,
      emailAttribute: isSet(object.emailAttribute) ? globalThis.String(object.emailAttribute) : undefined,
      usernameAttribute: isSet(object.usernameAttribute) ? globalThis.String(object.usernameAttribute) : undefined,
      nicknameAttribute: isSet(object.nicknameAttribute) ? globalThis.String(object.nicknameAttribute) : undefined,
      localeAttribute: isSet(object.localeAttribute) ? globalThis.String(object.localeAttribute) : undefined,
      positionAttribute: isSet(object.positionAttribute) ? globalThis.String(object.positionAttribute) : undefined,
      loginButtonText: isSet(object.loginButtonText) ? globalThis.String(object.loginButtonText) : undefined,
      loginButtonColor: isSet(object.loginButtonColor) ? globalThis.String(object.loginButtonColor) : undefined,
      loginButtonBorderColor: isSet(object.loginButtonBorderColor)
        ? globalThis.String(object.loginButtonBorderColor)
        : undefined,
      loginButtonTextColor: isSet(object.loginButtonTextColor)
        ? globalThis.String(object.loginButtonTextColor)
        : undefined,
    };
  },

  toJSON(message: ConfigSaml): unknown {
    const obj: any = {};
    if (message.enable !== undefined) {
      obj.enable = message.enable;
    }
    if (message.enableSyncWithLdap !== undefined) {
      obj.enableSyncWithLdap = message.enableSyncWithLdap;
    }
    if (message.enableSyncWithLdapIncludeAuth !== undefined) {
      obj.enableSyncWithLdapIncludeAuth = message.enableSyncWithLdapIncludeAuth;
    }
    if (message.ignoreGuestsLdapSync !== undefined) {
      obj.ignoreGuestsLdapSync = message.ignoreGuestsLdapSync;
    }
    if (message.verify !== undefined) {
      obj.verify = message.verify;
    }
    if (message.encrypt !== undefined) {
      obj.encrypt = message.encrypt;
    }
    if (message.signRequest !== undefined) {
      obj.signRequest = message.signRequest;
    }
    if (message.idpUrl !== undefined) {
      obj.idpUrl = message.idpUrl;
    }
    if (message.idpDescriptorUrl !== undefined) {
      obj.idpDescriptorUrl = message.idpDescriptorUrl;
    }
    if (message.idpMetadataUrl !== undefined) {
      obj.idpMetadataUrl = message.idpMetadataUrl;
    }
    if (message.serviceProviderIdentifier !== undefined) {
      obj.serviceProviderIdentifier = message.serviceProviderIdentifier;
    }
    if (message.assertionConsumerServiceUrl !== undefined) {
      obj.assertionConsumerServiceUrl = message.assertionConsumerServiceUrl;
    }
    if (message.signatureAlgorithm !== undefined) {
      obj.signatureAlgorithm = message.signatureAlgorithm;
    }
    if (message.canonicalAlgorithm !== undefined) {
      obj.canonicalAlgorithm = message.canonicalAlgorithm;
    }
    if (message.scopingIdpProviderId !== undefined) {
      obj.scopingIdpProviderId = message.scopingIdpProviderId;
    }
    if (message.scopingIdpName !== undefined) {
      obj.scopingIdpName = message.scopingIdpName;
    }
    if (message.idpCertificateFile !== undefined) {
      obj.idpCertificateFile = message.idpCertificateFile;
    }
    if (message.publicCertificateFile !== undefined) {
      obj.publicCertificateFile = message.publicCertificateFile;
    }
    if (message.privateKeyFile !== undefined) {
      obj.privateKeyFile = message.privateKeyFile;
    }
    if (message.idAttribute !== undefined) {
      obj.idAttribute = message.idAttribute;
    }
    if (message.enableAdminAttribute !== undefined) {
      obj.enableAdminAttribute = message.enableAdminAttribute;
    }
    if (message.adminAttribute !== undefined) {
      obj.adminAttribute = message.adminAttribute;
    }
    if (message.firstNameAttribute !== undefined) {
      obj.firstNameAttribute = message.firstNameAttribute;
    }
    if (message.lastNameAttribute !== undefined) {
      obj.lastNameAttribute = message.lastNameAttribute;
    }
    if (message.emailAttribute !== undefined) {
      obj.emailAttribute = message.emailAttribute;
    }
    if (message.usernameAttribute !== undefined) {
      obj.usernameAttribute = message.usernameAttribute;
    }
    if (message.nicknameAttribute !== undefined) {
      obj.nicknameAttribute = message.nicknameAttribute;
    }
    if (message.localeAttribute !== undefined) {
      obj.localeAttribute = message.localeAttribute;
    }
    if (message.positionAttribute !== undefined) {
      obj.positionAttribute = message.positionAttribute;
    }
    if (message.loginButtonText !== undefined) {
      obj.loginButtonText = message.loginButtonText;
    }
    if (message.loginButtonColor !== undefined) {
      obj.loginButtonColor = message.loginButtonColor;
    }
    if (message.loginButtonBorderColor !== undefined) {
      obj.loginButtonBorderColor = message.loginButtonBorderColor;
    }
    if (message.loginButtonTextColor !== undefined) {
      obj.loginButtonTextColor = message.loginButtonTextColor;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigSaml>, I>>(base?: I): ConfigSaml {
    return ConfigSaml.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigSaml>, I>>(object: I): ConfigSaml {
    const message = createBaseConfigSaml();
    message.enable = object.enable ?? undefined;
    message.enableSyncWithLdap = object.enableSyncWithLdap ?? undefined;
    message.enableSyncWithLdapIncludeAuth = object.enableSyncWithLdapIncludeAuth ?? undefined;
    message.ignoreGuestsLdapSync = object.ignoreGuestsLdapSync ?? undefined;
    message.verify = object.verify ?? undefined;
    message.encrypt = object.encrypt ?? undefined;
    message.signRequest = object.signRequest ?? undefined;
    message.idpUrl = object.idpUrl ?? undefined;
    message.idpDescriptorUrl = object.idpDescriptorUrl ?? undefined;
    message.idpMetadataUrl = object.idpMetadataUrl ?? undefined;
    message.serviceProviderIdentifier = object.serviceProviderIdentifier ?? undefined;
    message.assertionConsumerServiceUrl = object.assertionConsumerServiceUrl ?? undefined;
    message.signatureAlgorithm = object.signatureAlgorithm ?? undefined;
    message.canonicalAlgorithm = object.canonicalAlgorithm ?? undefined;
    message.scopingIdpProviderId = object.scopingIdpProviderId ?? undefined;
    message.scopingIdpName = object.scopingIdpName ?? undefined;
    message.idpCertificateFile = object.idpCertificateFile ?? undefined;
    message.publicCertificateFile = object.publicCertificateFile ?? undefined;
    message.privateKeyFile = object.privateKeyFile ?? undefined;
    message.idAttribute = object.idAttribute ?? undefined;
    message.enableAdminAttribute = object.enableAdminAttribute ?? undefined;
    message.adminAttribute = object.adminAttribute ?? undefined;
    message.firstNameAttribute = object.firstNameAttribute ?? undefined;
    message.lastNameAttribute = object.lastNameAttribute ?? undefined;
    message.emailAttribute = object.emailAttribute ?? undefined;
    message.usernameAttribute = object.usernameAttribute ?? undefined;
    message.nicknameAttribute = object.nicknameAttribute ?? undefined;
    message.localeAttribute = object.localeAttribute ?? undefined;
    message.positionAttribute = object.positionAttribute ?? undefined;
    message.loginButtonText = object.loginButtonText ?? undefined;
    message.loginButtonColor = object.loginButtonColor ?? undefined;
    message.loginButtonBorderColor = object.loginButtonBorderColor ?? undefined;
    message.loginButtonTextColor = object.loginButtonTextColor ?? undefined;
    return message;
  },
};

function createBaseConfigNativeApp(): ConfigNativeApp {
  return {
    appCustomUrlSchemes: [],
    appDownloadLink: undefined,
    androidAppDownloadLink: undefined,
    iosAppDownloadLink: undefined,
    mobileExternalBrowser: undefined,
    mobileEnableBiometrics: undefined,
    mobilePreventScreenCapture: undefined,
    mobileJailbreakProtection: undefined,
  };
}

export const ConfigNativeApp: MessageFns<ConfigNativeApp> = {
  encode(message: ConfigNativeApp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.appCustomUrlSchemes) {
      writer.uint32(10).string(v!);
    }
    if (message.appDownloadLink !== undefined) {
      writer.uint32(18).string(message.appDownloadLink);
    }
    if (message.androidAppDownloadLink !== undefined) {
      writer.uint32(26).string(message.androidAppDownloadLink);
    }
    if (message.iosAppDownloadLink !== undefined) {
      writer.uint32(34).string(message.iosAppDownloadLink);
    }
    if (message.mobileExternalBrowser !== undefined) {
      writer.uint32(40).bool(message.mobileExternalBrowser);
    }
    if (message.mobileEnableBiometrics !== undefined) {
      writer.uint32(48).bool(message.mobileEnableBiometrics);
    }
    if (message.mobilePreventScreenCapture !== undefined) {
      writer.uint32(56).bool(message.mobilePreventScreenCapture);
    }
    if (message.mobileJailbreakProtection !== undefined) {
      writer.uint32(64).bool(message.mobileJailbreakProtection);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigNativeApp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigNativeApp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.appCustomUrlSchemes.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.appDownloadLink = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.androidAppDownloadLink = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.iosAppDownloadLink = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.mobileExternalBrowser = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.mobileEnableBiometrics = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.mobilePreventScreenCapture = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.mobileJailbreakProtection = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigNativeApp {
    return {
      appCustomUrlSchemes: globalThis.Array.isArray(object?.appCustomUrlSchemes)
        ? object.appCustomUrlSchemes.map((e: any) => globalThis.String(e))
        : [],
      appDownloadLink: isSet(object.appDownloadLink) ? globalThis.String(object.appDownloadLink) : undefined,
      androidAppDownloadLink: isSet(object.androidAppDownloadLink)
        ? globalThis.String(object.androidAppDownloadLink)
        : undefined,
      iosAppDownloadLink: isSet(object.iosAppDownloadLink) ? globalThis.String(object.iosAppDownloadLink) : undefined,
      mobileExternalBrowser: isSet(object.mobileExternalBrowser)
        ? globalThis.Boolean(object.mobileExternalBrowser)
        : undefined,
      mobileEnableBiometrics: isSet(object.mobileEnableBiometrics)
        ? globalThis.Boolean(object.mobileEnableBiometrics)
        : undefined,
      mobilePreventScreenCapture: isSet(object.mobilePreventScreenCapture)
        ? globalThis.Boolean(object.mobilePreventScreenCapture)
        : undefined,
      mobileJailbreakProtection: isSet(object.mobileJailbreakProtection)
        ? globalThis.Boolean(object.mobileJailbreakProtection)
        : undefined,
    };
  },

  toJSON(message: ConfigNativeApp): unknown {
    const obj: any = {};
    if (message.appCustomUrlSchemes?.length) {
      obj.appCustomUrlSchemes = message.appCustomUrlSchemes;
    }
    if (message.appDownloadLink !== undefined) {
      obj.appDownloadLink = message.appDownloadLink;
    }
    if (message.androidAppDownloadLink !== undefined) {
      obj.androidAppDownloadLink = message.androidAppDownloadLink;
    }
    if (message.iosAppDownloadLink !== undefined) {
      obj.iosAppDownloadLink = message.iosAppDownloadLink;
    }
    if (message.mobileExternalBrowser !== undefined) {
      obj.mobileExternalBrowser = message.mobileExternalBrowser;
    }
    if (message.mobileEnableBiometrics !== undefined) {
      obj.mobileEnableBiometrics = message.mobileEnableBiometrics;
    }
    if (message.mobilePreventScreenCapture !== undefined) {
      obj.mobilePreventScreenCapture = message.mobilePreventScreenCapture;
    }
    if (message.mobileJailbreakProtection !== undefined) {
      obj.mobileJailbreakProtection = message.mobileJailbreakProtection;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigNativeApp>, I>>(base?: I): ConfigNativeApp {
    return ConfigNativeApp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigNativeApp>, I>>(object: I): ConfigNativeApp {
    const message = createBaseConfigNativeApp();
    message.appCustomUrlSchemes = object.appCustomUrlSchemes?.map((e) => e) || [];
    message.appDownloadLink = object.appDownloadLink ?? undefined;
    message.androidAppDownloadLink = object.androidAppDownloadLink ?? undefined;
    message.iosAppDownloadLink = object.iosAppDownloadLink ?? undefined;
    message.mobileExternalBrowser = object.mobileExternalBrowser ?? undefined;
    message.mobileEnableBiometrics = object.mobileEnableBiometrics ?? undefined;
    message.mobilePreventScreenCapture = object.mobilePreventScreenCapture ?? undefined;
    message.mobileJailbreakProtection = object.mobileJailbreakProtection ?? undefined;
    return message;
  },
};

function createBaseConfigMeilisearch(): ConfigMeilisearch {
  return {
    serverUrl: undefined,
    masterKey: undefined,
    enableIndexing: undefined,
    enableSearching: undefined,
    enableAutocomplete: undefined,
    batchSize: undefined,
    requestTimeoutSeconds: undefined,
    indexPrefix: undefined,
    searchCutoffMs: undefined,
    enableTypoTolerance: undefined,
  };
}

export const ConfigMeilisearch: MessageFns<ConfigMeilisearch> = {
  encode(message: ConfigMeilisearch, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serverUrl !== undefined) {
      writer.uint32(10).string(message.serverUrl);
    }
    if (message.masterKey !== undefined) {
      writer.uint32(18).string(message.masterKey);
    }
    if (message.enableIndexing !== undefined) {
      writer.uint32(24).bool(message.enableIndexing);
    }
    if (message.enableSearching !== undefined) {
      writer.uint32(32).bool(message.enableSearching);
    }
    if (message.enableAutocomplete !== undefined) {
      writer.uint32(40).bool(message.enableAutocomplete);
    }
    if (message.batchSize !== undefined) {
      writer.uint32(48).int32(message.batchSize);
    }
    if (message.requestTimeoutSeconds !== undefined) {
      writer.uint32(56).int32(message.requestTimeoutSeconds);
    }
    if (message.indexPrefix !== undefined) {
      writer.uint32(66).string(message.indexPrefix);
    }
    if (message.searchCutoffMs !== undefined) {
      writer.uint32(72).int32(message.searchCutoffMs);
    }
    if (message.enableTypoTolerance !== undefined) {
      writer.uint32(80).bool(message.enableTypoTolerance);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigMeilisearch {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigMeilisearch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.serverUrl = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.masterKey = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.enableIndexing = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.enableSearching = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.enableAutocomplete = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.batchSize = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.requestTimeoutSeconds = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.indexPrefix = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.searchCutoffMs = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.enableTypoTolerance = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigMeilisearch {
    return {
      serverUrl: isSet(object.server_url) ? globalThis.String(object.server_url) : undefined,
      masterKey: isSet(object.masterKey) ? globalThis.String(object.masterKey) : undefined,
      enableIndexing: isSet(object.enableIndexing) ? globalThis.Boolean(object.enableIndexing) : undefined,
      enableSearching: isSet(object.enableSearching) ? globalThis.Boolean(object.enableSearching) : undefined,
      enableAutocomplete: isSet(object.enableAutocomplete) ? globalThis.Boolean(object.enableAutocomplete) : undefined,
      batchSize: isSet(object.batchSize) ? globalThis.Number(object.batchSize) : undefined,
      requestTimeoutSeconds: isSet(object.requestTimeoutSeconds)
        ? globalThis.Number(object.requestTimeoutSeconds)
        : undefined,
      indexPrefix: isSet(object.indexPrefix) ? globalThis.String(object.indexPrefix) : undefined,
      searchCutoffMs: isSet(object.searchCutoffMs) ? globalThis.Number(object.searchCutoffMs) : undefined,
      enableTypoTolerance: isSet(object.enableTypoTolerance)
        ? globalThis.Boolean(object.enableTypoTolerance)
        : undefined,
    };
  },

  toJSON(message: ConfigMeilisearch): unknown {
    const obj: any = {};
    if (message.serverUrl !== undefined) {
      obj.server_url = message.serverUrl;
    }
    if (message.masterKey !== undefined) {
      obj.masterKey = message.masterKey;
    }
    if (message.enableIndexing !== undefined) {
      obj.enableIndexing = message.enableIndexing;
    }
    if (message.enableSearching !== undefined) {
      obj.enableSearching = message.enableSearching;
    }
    if (message.enableAutocomplete !== undefined) {
      obj.enableAutocomplete = message.enableAutocomplete;
    }
    if (message.batchSize !== undefined) {
      obj.batchSize = Math.round(message.batchSize);
    }
    if (message.requestTimeoutSeconds !== undefined) {
      obj.requestTimeoutSeconds = Math.round(message.requestTimeoutSeconds);
    }
    if (message.indexPrefix !== undefined) {
      obj.indexPrefix = message.indexPrefix;
    }
    if (message.searchCutoffMs !== undefined) {
      obj.searchCutoffMs = Math.round(message.searchCutoffMs);
    }
    if (message.enableTypoTolerance !== undefined) {
      obj.enableTypoTolerance = message.enableTypoTolerance;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigMeilisearch>, I>>(base?: I): ConfigMeilisearch {
    return ConfigMeilisearch.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigMeilisearch>, I>>(object: I): ConfigMeilisearch {
    const message = createBaseConfigMeilisearch();
    message.serverUrl = object.serverUrl ?? undefined;
    message.masterKey = object.masterKey ?? undefined;
    message.enableIndexing = object.enableIndexing ?? undefined;
    message.enableSearching = object.enableSearching ?? undefined;
    message.enableAutocomplete = object.enableAutocomplete ?? undefined;
    message.batchSize = object.batchSize ?? undefined;
    message.requestTimeoutSeconds = object.requestTimeoutSeconds ?? undefined;
    message.indexPrefix = object.indexPrefix ?? undefined;
    message.searchCutoffMs = object.searchCutoffMs ?? undefined;
    message.enableTypoTolerance = object.enableTypoTolerance ?? undefined;
    return message;
  },
};

function createBaseConfigBleve(): ConfigBleve {
  return {
    indexDir: undefined,
    enableIndexing: undefined,
    enableSearching: undefined,
    enableAutocomplete: undefined,
    bulkIndexingTimeWindowSeconds: undefined,
    batchSize: undefined,
  };
}

export const ConfigBleve: MessageFns<ConfigBleve> = {
  encode(message: ConfigBleve, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.indexDir !== undefined) {
      writer.uint32(10).string(message.indexDir);
    }
    if (message.enableIndexing !== undefined) {
      writer.uint32(16).bool(message.enableIndexing);
    }
    if (message.enableSearching !== undefined) {
      writer.uint32(24).bool(message.enableSearching);
    }
    if (message.enableAutocomplete !== undefined) {
      writer.uint32(32).bool(message.enableAutocomplete);
    }
    if (message.bulkIndexingTimeWindowSeconds !== undefined) {
      writer.uint32(40).int32(message.bulkIndexingTimeWindowSeconds);
    }
    if (message.batchSize !== undefined) {
      writer.uint32(48).int32(message.batchSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigBleve {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigBleve();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.indexDir = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.enableIndexing = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.enableSearching = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.enableAutocomplete = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.bulkIndexingTimeWindowSeconds = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.batchSize = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigBleve {
    return {
      indexDir: isSet(object.indexDir) ? globalThis.String(object.indexDir) : undefined,
      enableIndexing: isSet(object.enableIndexing) ? globalThis.Boolean(object.enableIndexing) : undefined,
      enableSearching: isSet(object.enableSearching) ? globalThis.Boolean(object.enableSearching) : undefined,
      enableAutocomplete: isSet(object.enableAutocomplete) ? globalThis.Boolean(object.enableAutocomplete) : undefined,
      bulkIndexingTimeWindowSeconds: isSet(object.bulkIndexingTimeWindowSeconds)
        ? globalThis.Number(object.bulkIndexingTimeWindowSeconds)
        : undefined,
      batchSize: isSet(object.batchSize) ? globalThis.Number(object.batchSize) : undefined,
    };
  },

  toJSON(message: ConfigBleve): unknown {
    const obj: any = {};
    if (message.indexDir !== undefined) {
      obj.indexDir = message.indexDir;
    }
    if (message.enableIndexing !== undefined) {
      obj.enableIndexing = message.enableIndexing;
    }
    if (message.enableSearching !== undefined) {
      obj.enableSearching = message.enableSearching;
    }
    if (message.enableAutocomplete !== undefined) {
      obj.enableAutocomplete = message.enableAutocomplete;
    }
    if (message.bulkIndexingTimeWindowSeconds !== undefined) {
      obj.bulkIndexingTimeWindowSeconds = Math.round(message.bulkIndexingTimeWindowSeconds);
    }
    if (message.batchSize !== undefined) {
      obj.batchSize = Math.round(message.batchSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigBleve>, I>>(base?: I): ConfigBleve {
    return ConfigBleve.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigBleve>, I>>(object: I): ConfigBleve {
    const message = createBaseConfigBleve();
    message.indexDir = object.indexDir ?? undefined;
    message.enableIndexing = object.enableIndexing ?? undefined;
    message.enableSearching = object.enableSearching ?? undefined;
    message.enableAutocomplete = object.enableAutocomplete ?? undefined;
    message.bulkIndexingTimeWindowSeconds = object.bulkIndexingTimeWindowSeconds ?? undefined;
    message.batchSize = object.batchSize ?? undefined;
    return message;
  },
};

function createBaseConfigDataRetention(): ConfigDataRetention {
  return {
    enableMessageDeletion: undefined,
    enableFileDeletion: undefined,
    enableBoardsDeletion: undefined,
    messageRetentionHours: undefined,
    fileRetentionHours: undefined,
    boardsRetentionDays: undefined,
    deletionJobStartTime: undefined,
    batchSize: undefined,
    timeBetweenBatchesMilliseconds: undefined,
    retentionIdsBatchSize: undefined,
  };
}

export const ConfigDataRetention: MessageFns<ConfigDataRetention> = {
  encode(message: ConfigDataRetention, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enableMessageDeletion !== undefined) {
      writer.uint32(8).bool(message.enableMessageDeletion);
    }
    if (message.enableFileDeletion !== undefined) {
      writer.uint32(16).bool(message.enableFileDeletion);
    }
    if (message.enableBoardsDeletion !== undefined) {
      writer.uint32(24).bool(message.enableBoardsDeletion);
    }
    if (message.messageRetentionHours !== undefined) {
      writer.uint32(32).int32(message.messageRetentionHours);
    }
    if (message.fileRetentionHours !== undefined) {
      writer.uint32(40).int32(message.fileRetentionHours);
    }
    if (message.boardsRetentionDays !== undefined) {
      writer.uint32(48).int32(message.boardsRetentionDays);
    }
    if (message.deletionJobStartTime !== undefined) {
      writer.uint32(58).string(message.deletionJobStartTime);
    }
    if (message.batchSize !== undefined) {
      writer.uint32(64).int32(message.batchSize);
    }
    if (message.timeBetweenBatchesMilliseconds !== undefined) {
      writer.uint32(72).int32(message.timeBetweenBatchesMilliseconds);
    }
    if (message.retentionIdsBatchSize !== undefined) {
      writer.uint32(80).int32(message.retentionIdsBatchSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigDataRetention {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigDataRetention();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enableMessageDeletion = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.enableFileDeletion = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.enableBoardsDeletion = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.messageRetentionHours = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.fileRetentionHours = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.boardsRetentionDays = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.deletionJobStartTime = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.batchSize = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.timeBetweenBatchesMilliseconds = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.retentionIdsBatchSize = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigDataRetention {
    return {
      enableMessageDeletion: isSet(object.enableMessageDeletion)
        ? globalThis.Boolean(object.enableMessageDeletion)
        : undefined,
      enableFileDeletion: isSet(object.enableFileDeletion) ? globalThis.Boolean(object.enableFileDeletion) : undefined,
      enableBoardsDeletion: isSet(object.enableBoardsDeletion)
        ? globalThis.Boolean(object.enableBoardsDeletion)
        : undefined,
      messageRetentionHours: isSet(object.messageRetentionHours)
        ? globalThis.Number(object.messageRetentionHours)
        : undefined,
      fileRetentionHours: isSet(object.fileRetentionHours) ? globalThis.Number(object.fileRetentionHours) : undefined,
      boardsRetentionDays: isSet(object.boardsRetentionDays)
        ? globalThis.Number(object.boardsRetentionDays)
        : undefined,
      deletionJobStartTime: isSet(object.deletionJobStartTime)
        ? globalThis.String(object.deletionJobStartTime)
        : undefined,
      batchSize: isSet(object.batchSize) ? globalThis.Number(object.batchSize) : undefined,
      timeBetweenBatchesMilliseconds: isSet(object.timeBetweenBatchesMilliseconds)
        ? globalThis.Number(object.timeBetweenBatchesMilliseconds)
        : undefined,
      retentionIdsBatchSize: isSet(object.retentionIdsBatchSize)
        ? globalThis.Number(object.retentionIdsBatchSize)
        : undefined,
    };
  },

  toJSON(message: ConfigDataRetention): unknown {
    const obj: any = {};
    if (message.enableMessageDeletion !== undefined) {
      obj.enableMessageDeletion = message.enableMessageDeletion;
    }
    if (message.enableFileDeletion !== undefined) {
      obj.enableFileDeletion = message.enableFileDeletion;
    }
    if (message.enableBoardsDeletion !== undefined) {
      obj.enableBoardsDeletion = message.enableBoardsDeletion;
    }
    if (message.messageRetentionHours !== undefined) {
      obj.messageRetentionHours = Math.round(message.messageRetentionHours);
    }
    if (message.fileRetentionHours !== undefined) {
      obj.fileRetentionHours = Math.round(message.fileRetentionHours);
    }
    if (message.boardsRetentionDays !== undefined) {
      obj.boardsRetentionDays = Math.round(message.boardsRetentionDays);
    }
    if (message.deletionJobStartTime !== undefined) {
      obj.deletionJobStartTime = message.deletionJobStartTime;
    }
    if (message.batchSize !== undefined) {
      obj.batchSize = Math.round(message.batchSize);
    }
    if (message.timeBetweenBatchesMilliseconds !== undefined) {
      obj.timeBetweenBatchesMilliseconds = Math.round(message.timeBetweenBatchesMilliseconds);
    }
    if (message.retentionIdsBatchSize !== undefined) {
      obj.retentionIdsBatchSize = Math.round(message.retentionIdsBatchSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigDataRetention>, I>>(base?: I): ConfigDataRetention {
    return ConfigDataRetention.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigDataRetention>, I>>(object: I): ConfigDataRetention {
    const message = createBaseConfigDataRetention();
    message.enableMessageDeletion = object.enableMessageDeletion ?? undefined;
    message.enableFileDeletion = object.enableFileDeletion ?? undefined;
    message.enableBoardsDeletion = object.enableBoardsDeletion ?? undefined;
    message.messageRetentionHours = object.messageRetentionHours ?? undefined;
    message.fileRetentionHours = object.fileRetentionHours ?? undefined;
    message.boardsRetentionDays = object.boardsRetentionDays ?? undefined;
    message.deletionJobStartTime = object.deletionJobStartTime ?? undefined;
    message.batchSize = object.batchSize ?? undefined;
    message.timeBetweenBatchesMilliseconds = object.timeBetweenBatchesMilliseconds ?? undefined;
    message.retentionIdsBatchSize = object.retentionIdsBatchSize ?? undefined;
    return message;
  },
};

function createBaseConfigImageProxy(): ConfigImageProxy {
  return {
    enable: undefined,
    imageProxyType: undefined,
    remoteImageProxyUrl: undefined,
    remoteImageProxyOptions: undefined,
  };
}

export const ConfigImageProxy: MessageFns<ConfigImageProxy> = {
  encode(message: ConfigImageProxy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enable !== undefined) {
      writer.uint32(8).bool(message.enable);
    }
    if (message.imageProxyType !== undefined) {
      writer.uint32(18).string(message.imageProxyType);
    }
    if (message.remoteImageProxyUrl !== undefined) {
      writer.uint32(26).string(message.remoteImageProxyUrl);
    }
    if (message.remoteImageProxyOptions !== undefined) {
      writer.uint32(34).string(message.remoteImageProxyOptions);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigImageProxy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigImageProxy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enable = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.imageProxyType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.remoteImageProxyUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.remoteImageProxyOptions = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigImageProxy {
    return {
      enable: isSet(object.enable) ? globalThis.Boolean(object.enable) : undefined,
      imageProxyType: isSet(object.imageProxyType) ? globalThis.String(object.imageProxyType) : undefined,
      remoteImageProxyUrl: isSet(object.remoteImageProxyUrl)
        ? globalThis.String(object.remoteImageProxyUrl)
        : undefined,
      remoteImageProxyOptions: isSet(object.remoteImageProxyOptions)
        ? globalThis.String(object.remoteImageProxyOptions)
        : undefined,
    };
  },

  toJSON(message: ConfigImageProxy): unknown {
    const obj: any = {};
    if (message.enable !== undefined) {
      obj.enable = message.enable;
    }
    if (message.imageProxyType !== undefined) {
      obj.imageProxyType = message.imageProxyType;
    }
    if (message.remoteImageProxyUrl !== undefined) {
      obj.remoteImageProxyUrl = message.remoteImageProxyUrl;
    }
    if (message.remoteImageProxyOptions !== undefined) {
      obj.remoteImageProxyOptions = message.remoteImageProxyOptions;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigImageProxy>, I>>(base?: I): ConfigImageProxy {
    return ConfigImageProxy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigImageProxy>, I>>(object: I): ConfigImageProxy {
    const message = createBaseConfigImageProxy();
    message.enable = object.enable ?? undefined;
    message.imageProxyType = object.imageProxyType ?? undefined;
    message.remoteImageProxyUrl = object.remoteImageProxyUrl ?? undefined;
    message.remoteImageProxyOptions = object.remoteImageProxyOptions ?? undefined;
    return message;
  },
};

function createBaseConfig(): Config {
  return {
    main: undefined,
    services: undefined,
    security: undefined,
    cache: undefined,
    metrics: undefined,
    sso: undefined,
    sql: undefined,
    password: undefined,
    file: undefined,
    email: undefined,
    rateLimit: undefined,
    privacy: undefined,
    support: undefined,
    localization: undefined,
    ldap: undefined,
    saml: undefined,
    nativeApp: undefined,
    meilisearch: undefined,
    bleve: undefined,
    dataRetention: undefined,
    imageProxy: undefined,
    oauth: undefined,
  };
}

export const Config: MessageFns<Config> = {
  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.main !== undefined) {
      ConfigMain.encode(message.main, writer.uint32(10).fork()).join();
    }
    if (message.services !== undefined) {
      ConfigServices.encode(message.services, writer.uint32(18).fork()).join();
    }
    if (message.security !== undefined) {
      ConfigSecurity.encode(message.security, writer.uint32(26).fork()).join();
    }
    if (message.cache !== undefined) {
      CacheConfig.encode(message.cache, writer.uint32(34).fork()).join();
    }
    if (message.metrics !== undefined) {
      ConfigMetrics.encode(message.metrics, writer.uint32(42).fork()).join();
    }
    if (message.sso !== undefined) {
      ConfigSSO.encode(message.sso, writer.uint32(50).fork()).join();
    }
    if (message.sql !== undefined) {
      ConfigSql.encode(message.sql, writer.uint32(58).fork()).join();
    }
    if (message.password !== undefined) {
      ConfigPassword.encode(message.password, writer.uint32(66).fork()).join();
    }
    if (message.file !== undefined) {
      ConfigFile.encode(message.file, writer.uint32(74).fork()).join();
    }
    if (message.email !== undefined) {
      ConfigEmail.encode(message.email, writer.uint32(82).fork()).join();
    }
    if (message.rateLimit !== undefined) {
      ConfigRateLimit.encode(message.rateLimit, writer.uint32(90).fork()).join();
    }
    if (message.privacy !== undefined) {
      ConfigPrivacy.encode(message.privacy, writer.uint32(98).fork()).join();
    }
    if (message.support !== undefined) {
      ConfigSupport.encode(message.support, writer.uint32(106).fork()).join();
    }
    if (message.localization !== undefined) {
      ConfigLocalization.encode(message.localization, writer.uint32(114).fork()).join();
    }
    if (message.ldap !== undefined) {
      ConfigLdap.encode(message.ldap, writer.uint32(122).fork()).join();
    }
    if (message.saml !== undefined) {
      ConfigSaml.encode(message.saml, writer.uint32(130).fork()).join();
    }
    if (message.nativeApp !== undefined) {
      ConfigNativeApp.encode(message.nativeApp, writer.uint32(138).fork()).join();
    }
    if (message.meilisearch !== undefined) {
      ConfigMeilisearch.encode(message.meilisearch, writer.uint32(146).fork()).join();
    }
    if (message.bleve !== undefined) {
      ConfigBleve.encode(message.bleve, writer.uint32(154).fork()).join();
    }
    if (message.dataRetention !== undefined) {
      ConfigDataRetention.encode(message.dataRetention, writer.uint32(162).fork()).join();
    }
    if (message.imageProxy !== undefined) {
      ConfigImageProxy.encode(message.imageProxy, writer.uint32(170).fork()).join();
    }
    if (message.oauth !== undefined) {
      ConfigOAuth.encode(message.oauth, writer.uint32(178).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.main = ConfigMain.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.services = ConfigServices.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.security = ConfigSecurity.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.cache = CacheConfig.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metrics = ConfigMetrics.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.sso = ConfigSSO.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.sql = ConfigSql.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.password = ConfigPassword.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.file = ConfigFile.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.email = ConfigEmail.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.rateLimit = ConfigRateLimit.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.privacy = ConfigPrivacy.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.support = ConfigSupport.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.localization = ConfigLocalization.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.ldap = ConfigLdap.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.saml = ConfigSaml.decode(reader, reader.uint32());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.nativeApp = ConfigNativeApp.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.meilisearch = ConfigMeilisearch.decode(reader, reader.uint32());
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.bleve = ConfigBleve.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.dataRetention = ConfigDataRetention.decode(reader, reader.uint32());
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.imageProxy = ConfigImageProxy.decode(reader, reader.uint32());
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.oauth = ConfigOAuth.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      main: isSet(object.main) ? ConfigMain.fromJSON(object.main) : undefined,
      services: isSet(object.services) ? ConfigServices.fromJSON(object.services) : undefined,
      security: isSet(object.security) ? ConfigSecurity.fromJSON(object.security) : undefined,
      cache: isSet(object.cache) ? CacheConfig.fromJSON(object.cache) : undefined,
      metrics: isSet(object.metrics) ? ConfigMetrics.fromJSON(object.metrics) : undefined,
      sso: isSet(object.sso) ? ConfigSSO.fromJSON(object.sso) : undefined,
      sql: isSet(object.sql) ? ConfigSql.fromJSON(object.sql) : undefined,
      password: isSet(object.password) ? ConfigPassword.fromJSON(object.password) : undefined,
      file: isSet(object.file) ? ConfigFile.fromJSON(object.file) : undefined,
      email: isSet(object.email) ? ConfigEmail.fromJSON(object.email) : undefined,
      rateLimit: isSet(object.rateLimit) ? ConfigRateLimit.fromJSON(object.rateLimit) : undefined,
      privacy: isSet(object.privacy) ? ConfigPrivacy.fromJSON(object.privacy) : undefined,
      support: isSet(object.support) ? ConfigSupport.fromJSON(object.support) : undefined,
      localization: isSet(object.localization) ? ConfigLocalization.fromJSON(object.localization) : undefined,
      ldap: isSet(object.ldap) ? ConfigLdap.fromJSON(object.ldap) : undefined,
      saml: isSet(object.saml) ? ConfigSaml.fromJSON(object.saml) : undefined,
      nativeApp: isSet(object.nativeApp) ? ConfigNativeApp.fromJSON(object.nativeApp) : undefined,
      meilisearch: isSet(object.meilisearch) ? ConfigMeilisearch.fromJSON(object.meilisearch) : undefined,
      bleve: isSet(object.bleve) ? ConfigBleve.fromJSON(object.bleve) : undefined,
      dataRetention: isSet(object.dataRetention) ? ConfigDataRetention.fromJSON(object.dataRetention) : undefined,
      imageProxy: isSet(object.imageProxy) ? ConfigImageProxy.fromJSON(object.imageProxy) : undefined,
      oauth: isSet(object.oauth) ? ConfigOAuth.fromJSON(object.oauth) : undefined,
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.main !== undefined) {
      obj.main = ConfigMain.toJSON(message.main);
    }
    if (message.services !== undefined) {
      obj.services = ConfigServices.toJSON(message.services);
    }
    if (message.security !== undefined) {
      obj.security = ConfigSecurity.toJSON(message.security);
    }
    if (message.cache !== undefined) {
      obj.cache = CacheConfig.toJSON(message.cache);
    }
    if (message.metrics !== undefined) {
      obj.metrics = ConfigMetrics.toJSON(message.metrics);
    }
    if (message.sso !== undefined) {
      obj.sso = ConfigSSO.toJSON(message.sso);
    }
    if (message.sql !== undefined) {
      obj.sql = ConfigSql.toJSON(message.sql);
    }
    if (message.password !== undefined) {
      obj.password = ConfigPassword.toJSON(message.password);
    }
    if (message.file !== undefined) {
      obj.file = ConfigFile.toJSON(message.file);
    }
    if (message.email !== undefined) {
      obj.email = ConfigEmail.toJSON(message.email);
    }
    if (message.rateLimit !== undefined) {
      obj.rateLimit = ConfigRateLimit.toJSON(message.rateLimit);
    }
    if (message.privacy !== undefined) {
      obj.privacy = ConfigPrivacy.toJSON(message.privacy);
    }
    if (message.support !== undefined) {
      obj.support = ConfigSupport.toJSON(message.support);
    }
    if (message.localization !== undefined) {
      obj.localization = ConfigLocalization.toJSON(message.localization);
    }
    if (message.ldap !== undefined) {
      obj.ldap = ConfigLdap.toJSON(message.ldap);
    }
    if (message.saml !== undefined) {
      obj.saml = ConfigSaml.toJSON(message.saml);
    }
    if (message.nativeApp !== undefined) {
      obj.nativeApp = ConfigNativeApp.toJSON(message.nativeApp);
    }
    if (message.meilisearch !== undefined) {
      obj.meilisearch = ConfigMeilisearch.toJSON(message.meilisearch);
    }
    if (message.bleve !== undefined) {
      obj.bleve = ConfigBleve.toJSON(message.bleve);
    }
    if (message.dataRetention !== undefined) {
      obj.dataRetention = ConfigDataRetention.toJSON(message.dataRetention);
    }
    if (message.imageProxy !== undefined) {
      obj.imageProxy = ConfigImageProxy.toJSON(message.imageProxy);
    }
    if (message.oauth !== undefined) {
      obj.oauth = ConfigOAuth.toJSON(message.oauth);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(object: I): Config {
    const message = createBaseConfig();
    message.main = (object.main !== undefined && object.main !== null)
      ? ConfigMain.fromPartial(object.main)
      : undefined;
    message.services = (object.services !== undefined && object.services !== null)
      ? ConfigServices.fromPartial(object.services)
      : undefined;
    message.security = (object.security !== undefined && object.security !== null)
      ? ConfigSecurity.fromPartial(object.security)
      : undefined;
    message.cache = (object.cache !== undefined && object.cache !== null)
      ? CacheConfig.fromPartial(object.cache)
      : undefined;
    message.metrics = (object.metrics !== undefined && object.metrics !== null)
      ? ConfigMetrics.fromPartial(object.metrics)
      : undefined;
    message.sso = (object.sso !== undefined && object.sso !== null) ? ConfigSSO.fromPartial(object.sso) : undefined;
    message.sql = (object.sql !== undefined && object.sql !== null) ? ConfigSql.fromPartial(object.sql) : undefined;
    message.password = (object.password !== undefined && object.password !== null)
      ? ConfigPassword.fromPartial(object.password)
      : undefined;
    message.file = (object.file !== undefined && object.file !== null)
      ? ConfigFile.fromPartial(object.file)
      : undefined;
    message.email = (object.email !== undefined && object.email !== null)
      ? ConfigEmail.fromPartial(object.email)
      : undefined;
    message.rateLimit = (object.rateLimit !== undefined && object.rateLimit !== null)
      ? ConfigRateLimit.fromPartial(object.rateLimit)
      : undefined;
    message.privacy = (object.privacy !== undefined && object.privacy !== null)
      ? ConfigPrivacy.fromPartial(object.privacy)
      : undefined;
    message.support = (object.support !== undefined && object.support !== null)
      ? ConfigSupport.fromPartial(object.support)
      : undefined;
    message.localization = (object.localization !== undefined && object.localization !== null)
      ? ConfigLocalization.fromPartial(object.localization)
      : undefined;
    message.ldap = (object.ldap !== undefined && object.ldap !== null)
      ? ConfigLdap.fromPartial(object.ldap)
      : undefined;
    message.saml = (object.saml !== undefined && object.saml !== null)
      ? ConfigSaml.fromPartial(object.saml)
      : undefined;
    message.nativeApp = (object.nativeApp !== undefined && object.nativeApp !== null)
      ? ConfigNativeApp.fromPartial(object.nativeApp)
      : undefined;
    message.meilisearch = (object.meilisearch !== undefined && object.meilisearch !== null)
      ? ConfigMeilisearch.fromPartial(object.meilisearch)
      : undefined;
    message.bleve = (object.bleve !== undefined && object.bleve !== null)
      ? ConfigBleve.fromPartial(object.bleve)
      : undefined;
    message.dataRetention = (object.dataRetention !== undefined && object.dataRetention !== null)
      ? ConfigDataRetention.fromPartial(object.dataRetention)
      : undefined;
    message.imageProxy = (object.imageProxy !== undefined && object.imageProxy !== null)
      ? ConfigImageProxy.fromPartial(object.imageProxy)
      : undefined;
    message.oauth = (object.oauth !== undefined && object.oauth !== null)
      ? ConfigOAuth.fromPartial(object.oauth)
      : undefined;
    return message;
  },
};

function createBaseConfigGetRequest(): ConfigGetRequest {
  return {};
}

export const ConfigGetRequest: MessageFns<ConfigGetRequest> = {
  encode(_: ConfigGetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigGetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigGetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ConfigGetRequest {
    return {};
  },

  toJSON(_: ConfigGetRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigGetRequest>, I>>(base?: I): ConfigGetRequest {
    return ConfigGetRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigGetRequest>, I>>(_: I): ConfigGetRequest {
    const message = createBaseConfigGetRequest();
    return message;
  },
};

function createBaseConfigGetResponse(): ConfigGetResponse {
  return { data: undefined, error: undefined };
}

export const ConfigGetResponse: MessageFns<ConfigGetResponse> = {
  encode(message: ConfigGetResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      Config.encode(message.data, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      AppError.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigGetResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigGetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = Config.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = AppError.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigGetResponse {
    return {
      data: isSet(object.data) ? Config.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? AppError.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ConfigGetResponse): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = Config.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = AppError.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigGetResponse>, I>>(base?: I): ConfigGetResponse {
    return ConfigGetResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigGetResponse>, I>>(object: I): ConfigGetResponse {
    const message = createBaseConfigGetResponse();
    message.data = (object.data !== undefined && object.data !== null) ? Config.fromPartial(object.data) : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? AppError.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseConfigUpdateRequest(): ConfigUpdateRequest {
  return { config: undefined };
}

export const ConfigUpdateRequest: MessageFns<ConfigUpdateRequest> = {
  encode(message: ConfigUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config !== undefined) {
      Config.encode(message.config, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.config = Config.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigUpdateRequest {
    return { config: isSet(object.config) ? Config.fromJSON(object.config) : undefined };
  },

  toJSON(message: ConfigUpdateRequest): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = Config.toJSON(message.config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigUpdateRequest>, I>>(base?: I): ConfigUpdateRequest {
    return ConfigUpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigUpdateRequest>, I>>(object: I): ConfigUpdateRequest {
    const message = createBaseConfigUpdateRequest();
    message.config = (object.config !== undefined && object.config !== null)
      ? Config.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseConfigUpdateResponse(): ConfigUpdateResponse {
  return { data: undefined, error: undefined };
}

export const ConfigUpdateResponse: MessageFns<ConfigUpdateResponse> = {
  encode(message: ConfigUpdateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      Config.encode(message.data, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      AppError.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigUpdateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigUpdateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = Config.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = AppError.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigUpdateResponse {
    return {
      data: isSet(object.data) ? Config.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? AppError.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ConfigUpdateResponse): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = Config.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = AppError.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigUpdateResponse>, I>>(base?: I): ConfigUpdateResponse {
    return ConfigUpdateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigUpdateResponse>, I>>(object: I): ConfigUpdateResponse {
    const message = createBaseConfigUpdateResponse();
    message.data = (object.data !== undefined && object.data !== null) ? Config.fromPartial(object.data) : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? AppError.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseConfigListenerResponse(): ConfigListenerResponse {
  return { data: undefined, error: undefined };
}

export const ConfigListenerResponse: MessageFns<ConfigListenerResponse> = {
  encode(message: ConfigListenerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      Config.encode(message.data, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      AppError.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigListenerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigListenerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = Config.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = AppError.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigListenerResponse {
    return {
      data: isSet(object.data) ? Config.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? AppError.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ConfigListenerResponse): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = Config.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = AppError.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigListenerResponse>, I>>(base?: I): ConfigListenerResponse {
    return ConfigListenerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigListenerResponse>, I>>(object: I): ConfigListenerResponse {
    const message = createBaseConfigListenerResponse();
    message.data = (object.data !== undefined && object.data !== null) ? Config.fromPartial(object.data) : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? AppError.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseConfigListenerRequest(): ConfigListenerRequest {
  return { clientId: "" };
}

export const ConfigListenerRequest: MessageFns<ConfigListenerRequest> = {
  encode(message: ConfigListenerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigListenerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigListenerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigListenerRequest {
    return { clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "" };
  },

  toJSON(message: ConfigListenerRequest): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigListenerRequest>, I>>(base?: I): ConfigListenerRequest {
    return ConfigListenerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigListenerRequest>, I>>(object: I): ConfigListenerRequest {
    const message = createBaseConfigListenerRequest();
    message.clientId = object.clientId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
