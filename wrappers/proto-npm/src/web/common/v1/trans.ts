// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: common/v1/trans.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AppError } from "../../shared/v1/error.js";

export const protobufPackage = "common.v1";

export interface TranslationsGetRequest {
}

export interface TranslationsGetResponse {
  data: { [key: string]: TranslationElements };
  error?: AppError | undefined;
}

export interface TranslationsGetResponse_DataEntry {
  key: string;
  value?: TranslationElements | undefined;
}

export interface TranslationsForLangGetRequest {
  lang: string;
}

export interface TranslationsForLangGetResponse {
  data?: TranslationElements | undefined;
  error?: AppError | undefined;
}

export interface TranslationElement {
  id: string;
  tr: string;
}

export interface TranslationElements {
  trans: TranslationElement[];
}

function createBaseTranslationsGetRequest(): TranslationsGetRequest {
  return {};
}

export const TranslationsGetRequest: MessageFns<TranslationsGetRequest> = {
  encode(_: TranslationsGetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TranslationsGetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslationsGetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TranslationsGetRequest {
    return {};
  },

  toJSON(_: TranslationsGetRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<TranslationsGetRequest>, I>>(base?: I): TranslationsGetRequest {
    return TranslationsGetRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TranslationsGetRequest>, I>>(_: I): TranslationsGetRequest {
    const message = createBaseTranslationsGetRequest();
    return message;
  },
};

function createBaseTranslationsGetResponse(): TranslationsGetResponse {
  return { data: {}, error: undefined };
}

export const TranslationsGetResponse: MessageFns<TranslationsGetResponse> = {
  encode(message: TranslationsGetResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.data).forEach(([key, value]) => {
      TranslationsGetResponse_DataEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    if (message.error !== undefined) {
      AppError.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TranslationsGetResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslationsGetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = TranslationsGetResponse_DataEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.data[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = AppError.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TranslationsGetResponse {
    return {
      data: isObject(object.data)
        ? Object.entries(object.data).reduce<{ [key: string]: TranslationElements }>((acc, [key, value]) => {
          acc[key] = TranslationElements.fromJSON(value);
          return acc;
        }, {})
        : {},
      error: isSet(object.error) ? AppError.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: TranslationsGetResponse): unknown {
    const obj: any = {};
    if (message.data) {
      const entries = Object.entries(message.data);
      if (entries.length > 0) {
        obj.data = {};
        entries.forEach(([k, v]) => {
          obj.data[k] = TranslationElements.toJSON(v);
        });
      }
    }
    if (message.error !== undefined) {
      obj.error = AppError.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TranslationsGetResponse>, I>>(base?: I): TranslationsGetResponse {
    return TranslationsGetResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TranslationsGetResponse>, I>>(object: I): TranslationsGetResponse {
    const message = createBaseTranslationsGetResponse();
    message.data = Object.entries(object.data ?? {}).reduce<{ [key: string]: TranslationElements }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = TranslationElements.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.error = (object.error !== undefined && object.error !== null)
      ? AppError.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseTranslationsGetResponse_DataEntry(): TranslationsGetResponse_DataEntry {
  return { key: "", value: undefined };
}

export const TranslationsGetResponse_DataEntry: MessageFns<TranslationsGetResponse_DataEntry> = {
  encode(message: TranslationsGetResponse_DataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      TranslationElements.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TranslationsGetResponse_DataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslationsGetResponse_DataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = TranslationElements.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TranslationsGetResponse_DataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? TranslationElements.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: TranslationsGetResponse_DataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = TranslationElements.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TranslationsGetResponse_DataEntry>, I>>(
    base?: I,
  ): TranslationsGetResponse_DataEntry {
    return TranslationsGetResponse_DataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TranslationsGetResponse_DataEntry>, I>>(
    object: I,
  ): TranslationsGetResponse_DataEntry {
    const message = createBaseTranslationsGetResponse_DataEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? TranslationElements.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseTranslationsForLangGetRequest(): TranslationsForLangGetRequest {
  return { lang: "" };
}

export const TranslationsForLangGetRequest: MessageFns<TranslationsForLangGetRequest> = {
  encode(message: TranslationsForLangGetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lang !== "") {
      writer.uint32(10).string(message.lang);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TranslationsForLangGetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslationsForLangGetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lang = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TranslationsForLangGetRequest {
    return { lang: isSet(object.lang) ? globalThis.String(object.lang) : "" };
  },

  toJSON(message: TranslationsForLangGetRequest): unknown {
    const obj: any = {};
    if (message.lang !== "") {
      obj.lang = message.lang;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TranslationsForLangGetRequest>, I>>(base?: I): TranslationsForLangGetRequest {
    return TranslationsForLangGetRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TranslationsForLangGetRequest>, I>>(
    object: I,
  ): TranslationsForLangGetRequest {
    const message = createBaseTranslationsForLangGetRequest();
    message.lang = object.lang ?? "";
    return message;
  },
};

function createBaseTranslationsForLangGetResponse(): TranslationsForLangGetResponse {
  return { data: undefined, error: undefined };
}

export const TranslationsForLangGetResponse: MessageFns<TranslationsForLangGetResponse> = {
  encode(message: TranslationsForLangGetResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      TranslationElements.encode(message.data, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      AppError.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TranslationsForLangGetResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslationsForLangGetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = TranslationElements.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = AppError.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TranslationsForLangGetResponse {
    return {
      data: isSet(object.data) ? TranslationElements.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? AppError.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: TranslationsForLangGetResponse): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = TranslationElements.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = AppError.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TranslationsForLangGetResponse>, I>>(base?: I): TranslationsForLangGetResponse {
    return TranslationsForLangGetResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TranslationsForLangGetResponse>, I>>(
    object: I,
  ): TranslationsForLangGetResponse {
    const message = createBaseTranslationsForLangGetResponse();
    message.data = (object.data !== undefined && object.data !== null)
      ? TranslationElements.fromPartial(object.data)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? AppError.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseTranslationElement(): TranslationElement {
  return { id: "", tr: "" };
}

export const TranslationElement: MessageFns<TranslationElement> = {
  encode(message: TranslationElement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.tr !== "") {
      writer.uint32(18).string(message.tr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TranslationElement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslationElement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tr = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TranslationElement {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      tr: isSet(object.tr) ? globalThis.String(object.tr) : "",
    };
  },

  toJSON(message: TranslationElement): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.tr !== "") {
      obj.tr = message.tr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TranslationElement>, I>>(base?: I): TranslationElement {
    return TranslationElement.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TranslationElement>, I>>(object: I): TranslationElement {
    const message = createBaseTranslationElement();
    message.id = object.id ?? "";
    message.tr = object.tr ?? "";
    return message;
  },
};

function createBaseTranslationElements(): TranslationElements {
  return { trans: [] };
}

export const TranslationElements: MessageFns<TranslationElements> = {
  encode(message: TranslationElements, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.trans) {
      TranslationElement.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TranslationElements {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslationElements();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.trans.push(TranslationElement.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TranslationElements {
    return {
      trans: globalThis.Array.isArray(object?.trans)
        ? object.trans.map((e: any) => TranslationElement.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TranslationElements): unknown {
    const obj: any = {};
    if (message.trans?.length) {
      obj.trans = message.trans.map((e) => TranslationElement.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TranslationElements>, I>>(base?: I): TranslationElements {
    return TranslationElements.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TranslationElements>, I>>(object: I): TranslationElements {
    const message = createBaseTranslationElements();
    message.trans = object.trans?.map((e) => TranslationElement.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
