// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StringMap {
    #[prost(map = "string, string", tag = "1")]
    pub data: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NestedStringMap {
    #[prost(map = "string, message", tag = "1")]
    pub data: ::std::collections::HashMap<::prost::alloc::string::String, StringMap>,
}
/// Custom Any message to avoid google.protobuf.Any issues
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Any {
    /// Identifies the type of the serialized message
    #[prost(string, tag = "1")]
    pub type_url: ::prost::alloc::string::String,
    /// Serialized proto data
    #[prost(bytes = "vec", tag = "2")]
    pub value: ::prost::alloc::vec::Vec<u8>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Empty {}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppError {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Message to be display to the end user without debugging information
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    /// Internal debug info
    #[prost(string, tag = "3")]
    pub detailed_error: ::prost::alloc::string::String,
    /// For correlation
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
    /// HTTP-like status code
    #[prost(int32, tag = "5")]
    pub status_code: i32,
    /// Code path or func name
    #[prost(string, tag = "6")]
    pub r#where: ::prost::alloc::string::String,
    /// If false, i18n may not apply
    #[prost(bool, tag = "7")]
    pub skip_translation: bool,
    #[prost(message, optional, tag = "8")]
    pub params: ::core::option::Option<StringMap>,
    #[prost(message, optional, tag = "9")]
    pub nested_params: ::core::option::Option<NestedStringMap>,
}
